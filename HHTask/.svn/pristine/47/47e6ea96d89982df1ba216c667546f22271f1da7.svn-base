package com.task.ServerImpl.supplier;

import com.task.Dao.TotalDao;
import com.task.Server.supplier.SupplierEvaluateService;
import com.task.entity.hegebaobiao.MouthHege;
import com.task.entity.supplier.SupplierEvaluate;
import com.task.entity.supplier.SupplierEvaluateLevel;
import com.task.util.Util;
import com.tast.entity.zhaobiao.ZhUser;
import org.springframework.beans.BeanUtils;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class SupplierEvaluateServiceImpl implements SupplierEvaluateService {

    private TotalDao totalDao;

    @Override
    public SupplierEvaluate findSupplierEvaluate(Integer id) {
        return (SupplierEvaluate) totalDao.getObjectById(SupplierEvaluate.class, id);
    }

    @Override
    public List<SupplierEvaluate> findSupplierEvaluateListByMonth(String month) {
        String hql = "from SupplierEvaluate where timeframe=? order by qualityBatch desc";
        List<SupplierEvaluate> slist = totalDao.query(hql, month);
        return slist;
    }

    @Override
    public Boolean skipSupplier(SupplierEvaluate supplierEvaluate) {
        SupplierEvaluate sfind = findSupplierEvaluate(supplierEvaluate.getId());
        if (sfind.getSkipSupplier() == null || "false".equals(sfind.getSkipSupplier())) {
            sfind.setSkipSupplier("true");
        } else if ("true".equals(sfind.getSkipSupplier())) {
            sfind.setSkipSupplier("false");
        }
        Integer id=sfind.getSupplierid();
        ZhUser zhUser= (ZhUser) totalDao.getObjectById(ZhUser.class,id);
        zhUser.setSkipEvaluate("true");
        if(totalDao.update(zhUser)&&totalDao.update(sfind))
            return true;
        return false;
    }


    @Override
    public boolean updatelevelscore(List<String> ls) {
        try {
            if (findlevelsocre() != null) {
                List<SupplierEvaluateLevel> supplierEvaluateLevels = findlevelsocre();
                for (int i = 0; i < supplierEvaluateLevels.size(); i++) {
                    supplierEvaluateLevels.get(i).setLevelScore(Float.valueOf(ls.get(i)));
                    totalDao.update(supplierEvaluateLevels.get(i));
                }
            } else {
                SupplierEvaluateLevel s = new SupplierEvaluateLevel();
                SupplierEvaluateLevel s1 = new SupplierEvaluateLevel();
                SupplierEvaluateLevel s2 = new SupplierEvaluateLevel();
                s.setLevelScore(Float.valueOf(ls.get(0)));
                s.setLevelName("A");
                totalDao.save(s);
                s1.setLevelScore(Float.valueOf(ls.get(1)));
                s1.setLevelName("B");
                totalDao.save(s1);
                s2.setLevelScore(Float.valueOf(ls.get(2)));
                s2.setLevelName("C");
                totalDao.save(s2);
            }
            return true;
        }catch (Exception e){
            return false;
        }

    }

    @Override
    public List<SupplierEvaluateLevel> findlevelsocre() {
        List<SupplierEvaluateLevel> supplierEvaluateLevels = totalDao.query("from SupplierEvaluateLevel order by levelName");
        if (supplierEvaluateLevels.size() < 1) {
            return null;
        }
        return supplierEvaluateLevels;
    }

    @Override
    public Object[] findSupplierEvaluateList(SupplierEvaluate supplierEvaluate, String month, String category, int pageNo, int pageSize) {
        String hql = "from SupplierEvaluate where 1=1";
        if (month != null) {
            hql = hql + " and timeframe='" + month + "'";
        }
        if (category != null && !"".equals(category)) {
            hql = hql + " and supplierCatagory='" + category + "'";
        }
        if (supplierEvaluate.getSupplierName() != null && !"".equals(supplierEvaluate.getSupplierName())) {
            hql = hql + " and supplierName like '%" + supplierEvaluate.getSupplierName() + "%'";
        }
        hql = hql + " order by qualityBatch desc";
        List<SupplierEvaluate> slist = totalDao.findAllByPage(hql, pageNo, pageSize);
        int count = totalDao.getCount(hql);
        Object[] o = {slist, count};
        return o;
    }


    @Override
    public String addSupplierEvaluate(SupplierEvaluate supplierEvaluate) {
        return null;
    }

    @Override
    public String addSupplierEvaluateList(List<SupplierEvaluate> slist) {
        try {
            for (SupplierEvaluate s : slist) {
                totalDao.save(s);
            }
        } catch (Exception e) {
            return e.toString();
        }
        return "成功";
    }

    @Override
    public String deleteSupplierEvaluate(SupplierEvaluate supplierEvaluate) {
        return null;
    }

    @Override
    public String updateSupplierEvaluate(SupplierEvaluate supplierEvaluate) {
        return null;
    }


    //查询某月数据
    @Override
    public List<SupplierEvaluate> findMonthRecord(String month) {
        String hql = "from MouthHege where mouth=?";
        List<MouthHege> mlist = totalDao.query(hql, month);
        List<SupplierEvaluate> slist = new ArrayList<SupplierEvaluate>();
        String hqlforSupplierCclass = "select cclass from ZhUser where id=?";
        String hqlforSupplierSkip="select skipEvaluate from ZhUser where id=?";
        List<Object> l = new ArrayList<Object>();
        List<Object> l2 = new ArrayList<Object>();
        for (MouthHege m : mlist) {
            l2 = totalDao.query(hqlforSupplierSkip, m.getGysid());
            if(l2.size()>0){
                //是否跳过供应商
                if("true".equals(l2.get(0))){
                    SupplierEvaluate supplierEvaluate = new SupplierEvaluate();
                    supplierEvaluate.setSupplierid(m.getGysid());
                    l = totalDao.query(hqlforSupplierCclass, m.getGysid());
                    supplierEvaluate.setSupplierCatagory(l.get(0).toString());
                    supplierEvaluate.setTimeframe(m.getMouth());
                    supplierEvaluate.setSupplierName(m.getGysname());
                    supplierEvaluate.setQualityBatch(m.getPiciCount());
                    supplierEvaluate.setQualityQualifiedBatch(m.getPicihgCount());
                    supplierEvaluate.setQualityPercent(m.getPiciQualifiedrate());
                    //计算品质分
                    supplierEvaluate.setQualityScore(calculateScore(40f, m.getPiciQualifiedrate()));
                    supplierEvaluate.setDeliveryDateBatch(m.getZhunshijiaofuCount());
                    supplierEvaluate.setDeliveryDatePercent(m.getJiaofuhege());
                    //计算交期分
                    supplierEvaluate.setDeliveryDateScore(calculateScore(30f, m.getJiaofuhege()));
                    slist.add(supplierEvaluate);

                };
            }
        }
        return slist;
    }


    /*
     * @author fy
     * @date 2018/8/13 10:16
     * @Description:品质,交期评分
     * @param [basis, pecent] 基础分 合格率/交货率
     * @return java.lang.Float
     * @throws
     */
    public Float calculateScore(Float basis, Float pecent) {
        if (pecent < 0.7) {
            pecent = 0f;
        }
        Float target = basis * pecent;
        return target;
    }


    /*
     * @author fy
     * @date 2018/8/13 10:20
     * @Description: 计算总体得分
     * @param [qualityScore, deliveryScore, costScore, serviceScore]
     * @return java.lang.Float
     * @throws
     */
    public Float calculateTotalScore(Float qualityScore, Float deliveryScore, Float costScore, Float serviceScore) {
        Float target = qualityScore + deliveryScore + costScore + serviceScore;
        int scale = 2;//设置位数
        int roundingMode = 4;//表示四舍五入，可以选择其他舍值方式，例如去尾，等等.
        BigDecimal bd = new BigDecimal(target);
        bd = bd.setScale(scale, roundingMode);
        target = bd.floatValue();
        return target;
    }

    public String calculateTotalLevel(Float score) {
        Float a = 80F;
        Float b = 70F;
        Float c = 60F;
        try {
            a = (Float) totalDao.getObjectByCondition("Select levelScore from SupplierEvaluateLevel where levelName=?", "A");
            b = (Float) totalDao.getObjectByCondition("Select levelScore from SupplierEvaluateLevel where levelName=?", "B");
            c = (Float) totalDao.getObjectByCondition("Select levelScore from SupplierEvaluateLevel where levelName=?", "C");
        } catch (Exception e) {

        }

        if (score >= a) {
            return "A";
        } else if (score >= b && score < a) {
            return "B";
        } else if (score >= c && score < b) {
            return "C";
        } else {
            return "D";
        }
    }

    @Override
    public List<String> findlevelScore(){
        List<String> l=totalDao.query("Select levelScore from SupplierEvaluateLevel order by levelName");
        if (l.size()<3)
            l.add("未设定评分");
            l.add("未设定评分");
            l.add("未设定评分");
            return l;
    }

    /*
     * @author fy
     * @date 2018/8/20 10:12
     * @Description: 每月生成审核评分表
     * @param []
     * @return java.lang.Boolean
     * @throws
     */
    @Override
    public Boolean generateLastMonthReport() {
        List<SupplierEvaluate> supplierEvaluateList = findMonthRecord(Util.getLastMonth("yyyy-MM"));
        addSupplierEvaluateList(supplierEvaluateList);
        return true;
    }


    @Override
    public Boolean findHaveMonthReport(String month) {
        List l = totalDao.query("from SupplierEvaluate where timeframe=?", month);
        if (l.size() > 0) {
            return true;
        }
        return false;
    }

    @Override
    public List getMonth() {
        return totalDao.query("select timeframe from SupplierEvaluate GROUP BY timeframe", null);
    }


    @Override
    public List getsupplierCatagory() {
        return totalDao.query("select supplierCatagory from SupplierEvaluate GROUP BY supplierCatagory", null);
    }


    @Override
    public String updateSupplierEvaluatesScore(List<SupplierEvaluate> supplierEvaluates) {
        try {
            Float scroe = 0F;
            String level = "";
            for (SupplierEvaluate s : supplierEvaluates) {
                SupplierEvaluate supplierEvaluateFind = findSupplierEvaluate(s.getId());
                BeanUtils.copyProperties(s, supplierEvaluateFind, new String[]{"id", "timeframe", "supplierid", "supplierName"
                        , "supplierCatagory", "qualityBatch", "qualityQualifiedBatch", "qualityPercent", "qualityScore"
                        , "deliveryDateBatch", "deliveryDatePercent", "deliveryDateScore", "skipSupplier"});
                //计算总分
                if(supplierEvaluateFind.getCostScore()!=null && supplierEvaluateFind.getServiceScore()!=null){
                    scroe = calculateTotalScore(supplierEvaluateFind.getQualityScore()
                            , supplierEvaluateFind.getCostScore(), supplierEvaluateFind.getServiceScore(), supplierEvaluateFind.getDeliveryDateScore());
                    supplierEvaluateFind.setEvaluateScore(scroe);
                    level = calculateTotalLevel(scroe);
                    supplierEvaluateFind.setEvaluateLevel(level);
                    totalDao.save(supplierEvaluateFind);
                }

            }
            return "成功";

        } catch (Exception e) {
            return e.toString();
        }

    }

    public TotalDao getTotalDao() {
        return totalDao;
    }

    public void setTotalDao(TotalDao totalDao) {
        this.totalDao = totalDao;
    }
}
