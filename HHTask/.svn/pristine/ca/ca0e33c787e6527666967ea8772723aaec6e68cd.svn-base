package com.task.util;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;


import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.AllowAllHostnameVerifier;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;


public class PostUtil {


	public PostUtil() {
		// TODO Auto-generated constructor stub
	}
	//Post方式访问网络
	public static String postRequest(String url, Map<String, String> rawParams) {
		//解决链接https出现 javax.net.ssl.SSLException: hostname in certificate didn't match  参照https://blog.csdn.net/trbbadboy/article/details/11562511
		SSLSocketFactory.getSocketFactory().setHostnameVerifier(new AllowAllHostnameVerifier());
		String result;
		HttpClient httpClient = new DefaultHttpClient();
		try {
			// 创建HttpPost对象。
			HttpPost post = new HttpPost(url);
			// 如果传递参数个数比较多的话可以对传递的参数进行封装
			List<NameValuePair> params = new ArrayList<NameValuePair>();
			for (String key : rawParams.keySet()) {
				// 封装请求参数
				params.add(new BasicNameValuePair(key, rawParams.get(key)));
			}
			post.addHeader("Content-Type", "application/json; charset=UTF-8");
			// 设置请求参数 
			post.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
			// 发送POST请求
			HttpResponse httpResponse = httpClient.execute(post);
			// 如果服务器成功地返回响应
			if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK){
				// 获取服务器响应字符串
				result = EntityUtils.toString(httpResponse.getEntity());
				System.out.println("results=" + result);
			}
			else {
				result = "请求失败";
			}
			return result;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			//当HttpClient的实例不再需要时，可以使用连接管理器关闭 
			httpClient.getConnectionManager().shutdown();
		}
		return null;
	}
	
	//Get方式访问网络
	public static String getRequest(String url){
		String result = null;
	
		URL urll;
		HttpURLConnection urlConn; 
		InputStreamReader in;
		try {
			urll = new URL(url);
			urlConn = (HttpURLConnection) urll.openConnection(); // 创建一个HTTP连接
			urlConn.setRequestMethod("GET");
			urlConn.setReadTimeout(5000);
			in = new InputStreamReader(urlConn.getInputStream());
			BufferedReader buffer = new BufferedReader(in); // 获取输入流对象
			String inputLine = null;
			// 通过循环逐行读取输入流中的内容
			while ((inputLine = buffer.readLine()) != null) {
				result = inputLine + "\n";
			}
			// 获得读取的内容
			return result;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			//HttpURLConnection.;
		}
		
		return null;
	}
	/**需导httpclient-4.4.1.jar包**/
//	private static final String CHARSET_UTF_8 = "UTF-8";
//    private static final String CONTENT_TYPE_JSON = "application/json";
//    private static final String CONTENT_TYPE_XML = "text/xml";
// 
//    /**
//     * 发送get请求
//     * @param url
//     * @return
//     */
//    public static String get(String url) {
//        String res = null;
//        CloseableHttpClient httpClient = HttpClients.createDefault();
//        try {
//            HttpGet httpGet = new HttpGet(url);
//            res = execute(httpClient, httpGet);
//        } finally {
//            doHttpClientClose(httpClient);
//        }
//        return res;
//    }
// 
//    /**
//     * 发送post请求
//     * @param url    post url
//     * @param params post参数
//     * @return
//     */
//    public static String post(String url, Map<String, String> params) {
//        String res = null;
//        CloseableHttpClient httpClient = HttpClients.createDefault();
//        try {
//            HttpPost httpPost = httpPostHandler(url, params);
//            res = execute(httpClient, httpPost);
//        } finally {
//            doHttpClientClose(httpClient);
//        }
//        return res;
//    }
// 
//    /**
//     * post json数据
//     * @param url
//     * @param jsonStr
//     * @return
//     */
//    public static String postJson(String url, String jsonStr) {
//        String res = null;
//        CloseableHttpClient httpClient = HttpClients.createDefault();
//        try {
//            HttpPost httpPost = new HttpPost(url);
//            StringEntity stringEntity;
//            try {
//                stringEntity = new StringEntity(jsonStr);
//            } catch (UnsupportedEncodingException e) {
//                return null;
//            }
//            httpPost.setHeader("Content-Type", CONTENT_TYPE_JSON);
//            httpPost.setEntity(stringEntity);
//            res = execute(httpClient, httpPost);
//        } finally {
//            doHttpClientClose(httpClient);
//        }
//        return res;
//    }
// 
//    /**
//     * post xml数据
//     * @param url
//     * @param xmlObj
//     * @return
//     */
//    public static String postXml(String url, Object xmlObj) {
//        String res = null;
//        CloseableHttpClient httpClient = HttpClients.createDefault();
//        try {
//            HttpPost httpPost = new HttpPost(url);
//            //解决XStream对出现双下划线的bug
//            XStream xStreamForRequestPostData = new XStream(new DomDriver("UTF-8", new XmlFriendlyNameCoder("-_", "_")));
//            //将要提交给API的数据对象转换成XML格式数据Post给API
//            String postDataXML = xStreamForRequestPostData.toXML(xmlObj);
//            //得指明使用UTF-8编码，否则到API服务器XML的中文不能被成功识别
//            StringEntity postEntity = new StringEntity(postDataXML, "UTF-8");
//            httpPost.addHeader("Content-Type", CONTENT_TYPE_XML);
//            httpPost.setEntity(postEntity);
//            res = execute(httpClient, httpPost);
//        } finally {
//            doHttpClientClose(httpClient);
//        }
//        return res;
//    }
// 
//    private static HttpPost httpPostHandler(String url, Map<String, String> params) {
//        HttpPost httpPost = new HttpPost(url);
//        List<NameValuePair> nvps = new ArrayList<NameValuePair>();
//        for (Map.Entry<String, String> entry : params.entrySet()) {
//            nvps.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
//        }
//        try {
//            httpPost.setEntity(new UrlEncodedFormEntity(nvps, CHARSET_UTF_8));
//        } catch (UnsupportedEncodingException e) {
//            e.printStackTrace();
//        }
//        return httpPost;
//    }
//    private static String execute(CloseableHttpClient httpClient, HttpUriRequest httpGetOrPost) {
//        String res = null;
//        CloseableHttpResponse response = null;
//        try {
//            response = httpClient.execute(httpGetOrPost);
//            HttpEntity entity = response.getEntity();
//            res = EntityUtils.toString(entity, CHARSET_UTF_8);
//        } catch (IOException e) {
//            e.printStackTrace();
//        } finally {
//            doResponseClose(response);
//        }
//        return res;
//    }
// 
//    private static void doHttpClientClose(CloseableHttpClient httpClient) {
//        if (httpClient != null) {
//            try {
//                httpClient.close();
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//        }
//    }
// 
//    private static void doResponseClose(CloseableHttpResponse response) {
//        if (response != null) {
//            try {
//                response.close();
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//        }
//    }

	
}
