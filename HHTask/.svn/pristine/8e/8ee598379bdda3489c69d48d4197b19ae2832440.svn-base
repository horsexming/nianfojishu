/**
 * 
 */
package com.task.ServerImpl.lpanclear;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.task.Dao.TotalDao;
import com.task.Server.lpanclear.ClearInfoServer;
import com.task.entity.dmltry.DmlAppFileUrl;
import com.task.entity.lpanclear.Cleanrecord;
import com.task.entity.lpanclear.ClearInfo;
import com.task.entity.lpanclear.Employee;
import com.task.entity.lpanclear.HomeTitle;
import com.task.entity.lpanclear.Score;
import com.task.util.Util;

@SuppressWarnings("unchecked")
public class ClearInfoServerImpl implements ClearInfoServer {
   
	private TotalDao totalDao;
	
	//一下为Employee实体类接口=================================================================================
	//=========================================================================================================
	/**
	 * 查询所有已在职员工信息Map
	 */
	public Map<Integer,Object> selectOnTheJob(Employee employee,Integer pageNo,Integer pageSize){
		
		System.out.println("输出分页查询传过来的employeeName1"+employee);				
		if(employee ==null){
			employee= new Employee();
		}
		String hql = null;
		hql = totalDao.criteriaQueries(employee, null);
		hql+= " order by id asc";
		List<Employee> employeeList = totalDao.findAllByPage(hql, pageNo, pageSize);
		int count = totalDao.getCount(hql);
		Map<Integer, Object> map = new LinkedHashMap<Integer,Object>(); 
		map.put(1, employeeList);
		map.put(2, count);				
		
	    return map;
	}	
	
	/**
	 * 查询所有已在职员工信息List
	 */
	public List<Employee> selectOnTheJob1(String employeeName,Integer pageNo,Integer pageSize){
		
		String hql = " from employee";
		if(employeeName !=null){
			hql+=" where employeeName=?"+employeeName;
		}
		if(pageNo ==null){
			pageNo=1;
		}
		hql+=" order by id desc limit ?"+pageNo+",?"+pageSize;
		List<Employee> employeeList = totalDao.query(hql);
		return employeeList;
	}
	/**
	 * 获取总记录数(配合分页使用)
	 */
	public int getCount(){
		int count = totalDao.getCount(" COUNT(id) from employee");
		return count;
	}	
	
	/**
	 * 登陆用户并返回用户是否存在
	 */
	public Employee loginEmployee(Employee employee){
		if(employee.getEmployeeName() !=null){
			employee= (Employee) totalDao.getObjectByCondition(" from Employee where employeeName=?",employee.getEmployeeName());
		}
		

		return employee;
	}
	/**
	 * 获取总的评分数,进行封装
	 */
	public List<Employee> empFractionList(){
		
		return null;
	}
	
	
	
	//一下为ClearInfo实体类接口=================================================================================
	//=========================================================================================================
	
	
	
	/**
	 * 进行插入清洁员工时判断,如果已经添加当天清洁,为了防止再次添加,需要判断数据库中是否已经存在当前员工安排在当天清洁了
	 */
	public boolean selectJudge(ClearInfo clearInfo){
		int count= totalDao.getCount(" from ClearInfo where employee.id=? and clearDate=?",clearInfo.getEmployee().getId(),clearInfo.getClearDate());
		if(count==0){
			return true;
		}		
		return false;
	}
	/**
	 * 插入当天某清洁员工
	 */
	public boolean insertEmpClear(ClearInfo clearInfo){
		
		if(clearInfo !=null){
			return totalDao.save(clearInfo);
		}
		return false;
	}
	/**
	 * 取消当天某清洁员工
	 */
	public boolean deleteEmpClear(ClearInfo clearInfo){
		if(clearInfo !=null){			
			ClearInfo clearInfo1 = (ClearInfo)totalDao.getObjectByCondition(" from ClearInfo where clearDate=? and employee.id=?",clearInfo.getClearDate(),clearInfo.getEmployee().getId());
//			clearInfo1.setClearDate(clearInfo.getClearDate());
//			clearInfo1.setEmployee(clearInfo.getEmployee());
			//clearInfo1.setId(clearInfo.getId());
			if(clearInfo1 !=null){
				//clearInfo1.getEmployee().setClearInfo(null);
				//clearInfo1.setEmployee(null);
				clearInfo1.setEmployee(null);
				boolean b = totalDao.delete(clearInfo1);
				return b;			
			}			
			
		}
		return false;
	}
	/**
	 * 查询当天清洁员工
	 */
	public List<ClearInfo> selectClearInfos(String clearDate){
		List<ClearInfo> clearList =null;
		if(clearDate ==null){
			clearList = totalDao.query("from ClearInfo where clearDate is null");
		}else{
			clearList = totalDao.query("from ClearInfo where clearDate=?", clearDate);
		}
		return clearList;
	}
	/**
	 * 查询循环内七天的值,根据当周日期查询并显示,条件未当周开始和当周结束
	 */
	public List<ClearInfo> selectClearWeeks(String clearDateks,String clearDatejs){
		
		return null;
	}
	
	
	
	//一下为homeTitle接口===================================================================================
	//=====================================================================================================
	/**
	 * 查询房间标题信息
	 */
	public List<HomeTitle> selectHomeTitles(){
		List<HomeTitle> hometilteList = totalDao.query(" from HomeTitle");
		return hometilteList;
	}
	/**
	 * 根据房间标题查询其ID
	 */
	public HomeTitle selectTnameChaId(HomeTitle homeTitle){
		if(homeTitle !=null){
			homeTitle = (HomeTitle)totalDao.getObjectByCondition("from HomeTitle where titleName=?",homeTitle.getTitleName());
		}
		return homeTitle;
	}
	/**
	 * 根据房间ID查询其标题
	 */
	public HomeTitle selectTitleIdChaName(HomeTitle homeTitle){
		if(homeTitle !=null){
			homeTitle = (HomeTitle)totalDao.getObjectByCondition("from HomeTitle where id=?",homeTitle.getId());
		}
		return homeTitle;
	}
	
	/**
	 * 根据房间ID查询其对象
	 */
	public HomeTitle selectTChaName(Integer titleId){
		HomeTitle homeTitle=null;
		if(titleId !=null){
			homeTitle = (HomeTitle)totalDao.getObjectByCondition("from HomeTitle where id=?",titleId);
		}
		return homeTitle;
		
	}
	/**
	 * 新增房间标题信息
	 */
	public boolean insertHomeTitle(HomeTitle homeTitle){
		if(homeTitle !=null){
			return totalDao.save(homeTitle);
		}
		return false;
	}
	/** 
	 * 删除房间标题信息
	 */
	public boolean deleteHomeTitle(Integer titleId){
		if(titleId !=null){
			Integer titleId1 = (Integer)totalDao.getObjectByCondition(" from HomeTitle where id=?",titleId);
			return totalDao.delete(titleId1);
		}
		return false;
	}
	/**
	 * 修改房间标题信息(此处不确定是否通过)
	 */
	public boolean updateHomeTitle(HomeTitle homeTitle){
		if(homeTitle !=null&&homeTitle.getId() !=null&&homeTitle.getTitleName() !=null){
			HomeTitle homeTitle1 = (HomeTitle)totalDao.getObjectByCondition(" from HomeTitle where id=?",homeTitle.getId());
			if(homeTitle1 !=null){
				homeTitle1.setTitleName(homeTitle.getTitleName());
				return totalDao.update(homeTitle1);
			}	
		}
		return false;
	}
	/**
	 * 对每个标题中的随机数进行修改
	 */
	public void updateRandomNum(HomeTitle homeTitle){
		if(homeTitle !=null){
			List<HomeTitle> hometilteList = totalDao.query(" from HomeTitle");
			for (HomeTitle homeTitle2 : hometilteList) {
				homeTitle2.setRandomNum(homeTitle.getRandomNum());
				totalDao.update(homeTitle2);
			}			
		}
	}
	
	
	/**
	 * 验证标题和随机数是否和数据库一致
	 */
	public boolean selectTNameAndRandomNum(HomeTitle homeTitle){
		if(homeTitle !=null){
			Integer count = totalDao.getCount(" from HomeTitle where id=? and randomNum=?", homeTitle.getId(),homeTitle.getRandomNum());
			if(count>0){
				return true;
			}
		}
		return false;
	}
	//一下为Cleanrecord实体类接口=================================================================================
	//=========================================================================================================
	
	/**
	 * 按照时间查询记录中的领取人和提交人以及评估人
	 */
	public Cleanrecord selectRecord(Integer titleId){
		Cleanrecord cleanrecord = null;
        if(titleId !=null){
        	cleanrecord = (Cleanrecord)totalDao.getObjectByCondition(" from Cleanrecord where theDay=? and homeTitle.id=?",Util.getDateTime("yyyy-MM-dd"),titleId);
 
        }
		return cleanrecord;
	}
	/**
	 * 查询数据库记录中未完成的记录的记录时间
	 */
	public Cleanrecord selectThaDay(Cleanrecord cleanrecord){
        if(cleanrecord !=null&&cleanrecord.getTheDay() !=null&&cleanrecord.getHomeTitle().getId() !=null){
        	cleanrecord = (Cleanrecord)totalDao.getObjectByCondition("from Cleanrecord where theDay=? and titleId=?",Util.getDateTime("yyyy-MM-dd"), cleanrecord.getHomeTitle().getId());
        }
		return cleanrecord;
	}		
	/**
	 * 进行领取人和领取时间的新增
	 */
	public boolean insertReceive(Cleanrecord cleanrecord){
		Cleanrecord cleanrecord1 =cleanrecord;
		if(cleanrecord !=null){
			cleanrecord1.setReceiveTime(Util.getDateTime("yyyy-MM-dd HH:mm:ss"));
			cleanrecord1.setTheDay(Util.getDateTime("yyyy-MM-dd"));			
			cleanrecord1.setReceive(cleanrecord.getReceive());
			cleanrecord1.setEvaluatorTime(cleanrecord.getEvaluatorTime());
			cleanrecord1.setHomeTitle(cleanrecord.getHomeTitle());
			cleanrecord1.setSubmitter("未提交");
			cleanrecord1.setEvaluator("未评分");
			cleanrecord1.setState("未完成");
			return totalDao.save(cleanrecord1);
		}
		return false;
	}			
	/**
	 * 对记录进行提交人和提交时间的修改
	 */
	public boolean updateSubmission(Cleanrecord cleanrecord){
		if(cleanrecord !=null){
			Cleanrecord cleanrecord1 = (Cleanrecord)totalDao.getObjectByCondition(" from Cleanrecord where theDay=? and homeTitle.id=?",cleanrecord.getTheDay(),cleanrecord.getHomeTitle().getId());
			if(cleanrecord1 !=null){
				cleanrecord1.setTheDay(cleanrecord.getTheDay());
				cleanrecord1.setHomeTitle(cleanrecord.getHomeTitle());
				cleanrecord1.setSubmitter(cleanrecord.getSubmitter());
				cleanrecord1.setSubmitterTime(cleanrecord.getSubmitterTime());
				return totalDao.update(cleanrecord1);
			}
		}
		return false;
	}			
	/**
	 * 对记录进行评估人和评估时间以及评分和此记录状态的修改
	 */
	public boolean updateScore(Cleanrecord cleanrecord){
		if(cleanrecord !=null){
			Cleanrecord cleanrecord1 = (Cleanrecord)totalDao.getObjectByCondition(" from Cleanrecord where theDay=? and homeTitle.id=?",cleanrecord.getTheDay(),cleanrecord.getHomeTitle().getId());
			if(cleanrecord1 !=null){
				cleanrecord1.setEvaluator(cleanrecord.getEvaluator());
				cleanrecord1.setEvaluatorTime(Util.getDateTime("yyyy-MM-dd HH:mm:ss"));
				cleanrecord1.setFraction(cleanrecord.getFraction());
				cleanrecord1.setState("已完成");
				cleanrecord1.setHomeTitle(cleanrecord.getHomeTitle());
				cleanrecord1.setTheDay(cleanrecord.getTheDay());
				return totalDao.update(cleanrecord1);
			}
		}
		return false;
	}	
	
	/**
	 * 在当天未进行提交时提交和评分一起修改来终止记录
	 */
	public boolean terminationRecord(Cleanrecord cleanrecord){
		
		if(cleanrecord !=null){
			Cleanrecord cleanrecord1 = (Cleanrecord)totalDao.getObjectByCondition(" from Cleanrecord where theDay=? and homeTitle.id=?",cleanrecord.getTheDay(),cleanrecord.getHomeTitle().getId());
			if(cleanrecord1 !=null){
				cleanrecord1.setSubmitter("系统提交");
				cleanrecord1.setSubmitterTime(Util.getDateTime("yyyy-MM-dd"));
				cleanrecord1.setEvaluator("系统评分");
				cleanrecord1.setEvaluatorTime(Util.getDateTime("yyyy-MM-dd"));
				cleanrecord1.setState("系统完成");
				cleanrecord1.setFraction(0);
				cleanrecord1.setTheDay(cleanrecord.getTheDay());
				cleanrecord1.setHomeTitle(cleanrecord.getHomeTitle());
				return totalDao.update(cleanrecord1);
			}
		}	
		return false;
	}
	
	/**
	 * 第二天未进行评分,用修改来终止记录
	 */
	public boolean evaluatorRecord(Cleanrecord cleanrecord){
        if(cleanrecord !=null){
        	Cleanrecord cleanrecord1 = (Cleanrecord)totalDao.getObjectByCondition(" from Cleanrecord where theDay=? and homeTitle.id=?",cleanrecord.getTheDay(),cleanrecord.getHomeTitle().getId());
			if(cleanrecord1 !=null){
				cleanrecord1.setEvaluator("系统评分");
				cleanrecord1.setEvaluatorTime(Util.getDateTime("yyyy-MM-dd"));
				cleanrecord1.setFraction(cleanrecord.getFraction());
				cleanrecord1.setTheDay(cleanrecord.getTheDay());
				cleanrecord1.setHomeTitle(cleanrecord.getHomeTitle());
				return totalDao.update(cleanrecord1);
			}
        }
		return false;
	}
	/**
	 *  查询记录中最后一条记录,并查询最后一条记录的theday时间和状态...
	 */
	public Cleanrecord selectLastOne(){
		Cleanrecord cleanrecord = (Cleanrecord)totalDao.getObjectByCondition(" from Cleanrecord order by id desc limit 0,1");
		return cleanrecord;
	}
	/**
	 * 根据最后一条记录获取的theday查询有几条记录并是否完成返回集合
	 */
	public List<Cleanrecord> selectLastTheDay(String theday){
		List<Cleanrecord> cleanrecordList =null;
		if(theday !=null){
			cleanrecordList = totalDao.query(" from Cleanrecord where theday=?", theday);
		}
		return cleanrecordList;
	}
	
	
	//一下为Score实体类接口=================================================================================
	//=========================================================================================================	
	/**
	 * 新增所属人评分记录
	 * @return
	 */
    public boolean insertScore(Score score){
  
    	if(score !=null){

    		return totalDao.save(score);
    	}
    	return false;
    }  
    /**
     * 查询评分记录
     */
    public List<Score> selectAllScore(){
    	List<Score> scoreList = totalDao.query(" SELECT employeeId,SUM(fraction) AS fraction,SUM(frequency) AS frequency,SUM(difference) AS difference FROM score GROUP BY employeeId");
    	return scoreList;
    } 
    /**
     * 按照一个月之内进行查询
     */
    public List<Score> selectWeekScore(Score score){
    	
    	return null;
    }
	
    
    
    
    
    
    
    
    
    
    
    
    

	public TotalDao getTotalDao() {
		return totalDao;
	}
	public void setTotalDao(TotalDao totalDao) {
		this.totalDao = totalDao;
	}
	
}
