package com.task.ServerImpl.face;

import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

import org.apache.struts2.ServletActionContext;
import org.springframework.beans.BeanUtils;

import com.baidu.aip.util.Base64Util;
import com.sun.jna.Native;
import com.sun.jna.NativeLong;
import com.sun.jna.win32.StdCallLibrary;
import com.task.Dao.TotalDao;
import com.task.DaoImpl.TotalDaoImpl;
import com.task.Server.face.FaceServer;
import com.task.ServerImpl.AlertMessagesServerImpl;
import com.task.ServerImpl.AttendanceTowServerImpl;
import com.task.entity.Users;
import com.task.entity.face.FaceCamera;
import com.task.entity.face.FaceUsers;
import com.task.util.FaceBaiDuUtil;
import com.task.util.Util;

import javafx.scene.Camera;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

public class FaceServerImpl extends Thread implements FaceServer {
	static FaceUtil faceUtil = FaceUtil.INSTANCE;
	// static PlayCtrl playControl = PlayCtrl.INSTANCE;
	private String basePath = null;
	private TotalDao totalDao;

	public TotalDao getTotalDao() {
		return totalDao;
	}

	public void setTotalDao(TotalDao totalDao) {
		this.totalDao = totalDao;
	}
	public void setBasePath(String basePath) {
		this.basePath = basePath;
	}
	public static boolean initFace() {
		boolean net_DVR_Init = faceUtil.NET_DVR_Init();
		return net_DVR_Init;
	}

	/**
	 * 登录摄像头，返回
	 * 
	 * @return
	 */
	public static NativeLong loginCamera(FaceCamera camera) {
		boolean initFace = initFace();
		if (camera != null && initFace) {
			NET_DVR_DEVICEINFO_V30 lpDeviceInfo = new NET_DVR_DEVICEINFO_V30();
			lpDeviceInfo.byAlarmInPortNum = 1;
			lpDeviceInfo.byAlarmOutPortNum = 1;
			lpDeviceInfo.byDiskNum = 0;
			lpDeviceInfo.byDVRType = 1;
			lpDeviceInfo.byChanNum = 15;
			lpDeviceInfo.byStartChan = 1;
			lpDeviceInfo.byIPChanNum = 15;
			NativeLong loginUserId = faceUtil.NET_DVR_Login_V30(camera.getIp(),
					Short.parseShort(camera.getPort().toString()), camera.getUserName(), camera.getPassword(),
					lpDeviceInfo);
			System.out.println("用户ID：" + loginUserId);
			if (loginUserId != null && loginUserId.intValue() != -1) {
				return loginUserId;
			} else {
				return null;
			}
		} else {
			return null;
		}
	}

	public void run() {
		TotalDao totalDao = TotalDaoImpl.findTotalDao();
		@SuppressWarnings("unchecked")
		List<FaceCamera> cameraList = totalDao.query("from FaceCamera");
		if (cameraList != null && cameraList.size() > 0) {
			for (FaceCamera faceCamera : cameraList) {
				String filePath = basePath + "\\face_" + faceCamera.getId() + ".jpg";

				RunCameraFace runCameraFace = new RunCameraFace();
				runCameraFace.setFILE_PATH(filePath);
				runCameraFace.setFaceCamera(faceCamera);
				runCameraFace.start();
			}
		}

	}

	public static void main(String[] args) {
		// FaceServerImpl face = new FaceServerImpl();
		String FILE_PATH = "D:\\Eclipse\\eclipse Developers\\eclipse-workspace\\HHTask\\WebRoot\\upload\\file\\dll\\face\\picture\\face.jpg";

		FaceCamera faceCamera = new FaceCamera();
		faceCamera.setId(3);
		faceCamera.setIp("192.168.0.48");
		faceCamera.setName("测试摄像头");
		faceCamera.setPassword("cy19960822");
		faceCamera.setPort(8000);
		faceCamera.setUserName("admin");

		NativeLong loginCamera = FaceServerImpl.loginCamera(faceCamera);// loginCamera("192.168");
		if (loginCamera != null) {
			NET_DVR_JPEGPARA lpJpegPara = new NET_DVR_JPEGPARA();
			lpJpegPara.wPicQuality = (short) 2;
			lpJpegPara.wPicSize = (short) 2;
			boolean b = false;
			NativeLong tongdaohao = new NativeLong(1);// lpDeviceInfo.byStartChan
			b = faceUtil.NET_DVR_CaptureJPEGPicture(loginCamera, tongdaohao, lpJpegPara, FILE_PATH);
			System.out.println(b);
			// 图片保存成功，比对人脸
			String base64Str = FaceServerImpl.getImageStr(FILE_PATH);
			// System.out.print(base64Str);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("image", base64Str);
			map.put("liveness_control", "NORMAL");// 活体检测控制默认NONE
			// NONE: 不进行控制
			// LOW:较低的活体要求(高通过率 低攻击拒绝率)
			// NORMAL: 一般的活体要求(平衡的攻击拒绝率, 通过率)
			// HIGH: 较高的活体要求(高攻击拒绝率 低通过率)
			// 若活体检测结果不满足要求，则返回结果中会提示活体检测失败
			map.put("group_id_list", "Inner,visitor");// 从指定的group中进行查找 用逗号分隔，上限20个
			map.put("image_type", "BASE64");
			map.put("face_type", "LIVE");// 默认LIVE
			// LIVE：表示生活照：通常为手机、相机拍摄的人像图片、或从网络获取的人像图片等，
			// IDCARD：表示身份证芯片照：二代身份证内置芯片中的人像照片，
			// WATERMARK：表示带水印证件照：一般为带水印的小图，如公安网小图
			// CERT：表示证件照片：如拍摄的身份证、工卡、护照、学生证等证件图片
			// 默认LIVE
			// map.put("quality_control", "NORMAL");//NONE: 不进行控制LOW:较低的质量要求 NORMAL: 一般的质量要求
			// HIGH: 较高的质量要求 默认 NONE
			map.put("max_face_num", 10);// 最多处理人脸的数目默认值为1(仅检测图片中面积最大的那个人脸) 最大值10
			map.put("match_threshold", 80);// 此阈值设置得越高，检索速度将会越快，推荐使用默认阈值80
			map.put("max_user_num", 10);// 识别返回的最大用户数，默认为1，最大20个
			List<String> userList = FaceBaiDuUtil.searchMulti(map);
			if (userList != null) {
				for (String userCode : userList) {
					System.out.println(userCode);
				}
			}

		}
		// face.start();
	}

	@SuppressWarnings("unchecked")
	public List<FaceUsers> findFaceUsersByUserId(Integer userId, String pageStatus) {
		if (userId != null && userId > 0) {
			List<FaceUsers> list = totalDao.query("from FaceUsers where userId is not null and  userId = ?", userId);
			return list;
		} else {
			return null;
		}
	}

	public String addFaceUsers(FaceUsers faceUsers, String pageStatus) {
		if (faceUsers != null && faceUsers.getCode() != null && faceUsers.getPicturePath() != null
				&& faceUsers.getUserId() != null) {
			faceUsers.setFaceCode(faceUsers.getCode() + faceUsers.getUserId());
			faceUsers.setGroupName("Inner");
			Map<String, Object> map = new HashMap<String, Object>();

			map.put("group_id", faceUsers.getGroupName());
			map.put("user_id", faceUsers.getFaceCode());
			map.put("user_info", faceUsers.getCode());
			map.put("liveness_control", "NORMAL");
			map.put("image_type", "BASE64");
			map.put("quality_control", "NONE");
			String fileUrl = ServletActionContext.getServletContext().getRealPath("/upload/file/face/");

			try {
				URL urls = new URL("file:///" + fileUrl + faceUsers.getPicturePath());
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				Image image = Toolkit.getDefaultToolkit().getImage(urls);
				BufferedImage biOut = toBufferedImage(image);
				ImageIO.write(biOut, "jpeg", baos);
				String base64Str = Base64Util.encode(baos.toByteArray());
				baos.close();
				map.put("image", base64Str);
				Map<String, Object> resultMap = FaceBaiDuUtil.add(map);
				if (resultMap != null) {
					String msg = (String) resultMap.get("error_msg");
					if (msg != null && msg.equals("SUCCESS")) {
						faceUsers.setFace_token(resultMap.get("face_token").toString());
						boolean save = totalDao.save(faceUsers);
						if (save) {
							return "添加成功";
						} else {
							return "添加失败";
						}
					} else {
						return "添加失败，异常信息：" + msg;
					}
				}
				return "系统异常";
			} catch (IOException e) {
				e.printStackTrace();
				return "图片转换失败";
			}

		} else {
			return "参数错误";
		}
	}

	public static boolean generateImage(String imgStr, String path) {
		if (imgStr == null)
			return false;
		BASE64Decoder decoder = new BASE64Decoder();
		try {
			// 解密
			byte[] b = decoder.decodeBuffer(imgStr);
			// 处理数据
			for (int i = 0; i < b.length; ++i) {
				if (b[i] < 0) {
					b[i] += 256;
				}
			}
			OutputStream out = new FileOutputStream(path);
			out.write(b);
			out.flush();
			out.close();
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public static String getImageStr(String imgFile) {
		InputStream inputStream = null;
		byte[] data = null;
		try {
			inputStream = new FileInputStream(imgFile);
			data = new byte[inputStream.available()];
			// data = imgFile.getBytes();
			inputStream.read(data);
			inputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// 加密
		BASE64Encoder encoder = new BASE64Encoder();
		return encoder.encode(data);
	}

	public BufferedImage toBufferedImage(Image image) {
		if (image instanceof BufferedImage) {
			return (BufferedImage) image;
		}
		// This code ensures that all the pixels in the image are loaded
		image = new ImageIcon(image).getImage();
		BufferedImage bimage = null;
		GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
		try {
			int transparency = Transparency.OPAQUE;
			GraphicsDevice gs = ge.getDefaultScreenDevice();
			GraphicsConfiguration gc = gs.getDefaultConfiguration();
			bimage = gc.createCompatibleImage(image.getWidth(null), image.getHeight(null), transparency);
		} catch (HeadlessException e) {
			// The system does not have a screen

		}
		if (bimage == null) {
			// Create a buffered image using the default color model
			int type = BufferedImage.TYPE_INT_RGB;
			bimage = new BufferedImage(image.getWidth(null), image.getHeight(null), type);
		}
		// Copy image to buffered image
		Graphics g = bimage.createGraphics();
		// Paint the image onto the buffered image
		g.drawImage(image, 0, 0, null);
		g.dispose();
		return bimage;
	}

	@Override
	public String deleteFaceUsersById(Integer id) {
		if (id != null) {
			FaceUsers faceUsers = (FaceUsers) totalDao.getObjectById(FaceUsers.class, id);
			if (faceUsers != null) {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("user_id", faceUsers.getFaceCode());
				map.put("group_id", faceUsers.getGroupName());
				map.put("face_token", faceUsers.getFace_token());
				map.put("image_type", "BASE64");
				String fileUrl = ServletActionContext.getServletContext().getRealPath("/upload/file/face/");

				try {
					URL urls = new URL("file:///" + fileUrl + faceUsers.getPicturePath());
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					Image image = Toolkit.getDefaultToolkit().getImage(urls);
					BufferedImage biOut = toBufferedImage(image);
					ImageIO.write(biOut, "jpeg", baos);
					String base64Str = Base64Util.encode(baos.toByteArray());
					map.put("image", base64Str);
					// String msg = FaceBaiDuUtil.detect(map);
					String msg = FaceBaiDuUtil.delete(map);
					if (msg != null && msg.equals("SUCCESS")) {
						boolean save = totalDao.delete(faceUsers);
						if (save) {
							return "删除成功";
						} else {
							return "删除失败";
						}
					} else {
						return "删除失败，异常信息：" + msg;
					}

				} catch (IOException e) {
					e.printStackTrace();
					return "图片转换失败";
				}
			}
		}
		return "没有找到人脸信息";
	}

	// 根据Users.id查找Users
	@Override
	public Users getUsersById(Integer id) {
		if (id != null) {
			return (Users) totalDao.getObjectById(Users.class, id);
		}
		return null;
	}

	@Override
	public Map<String, Object> findFaceCameraByCon(FaceCamera camera, Integer pageNo, Integer pageSize,
			String pageStatus) {
		if (camera == null) {
			camera = new FaceCamera();
		}
		String hql = totalDao.criteriaQueries(camera, null);
		List<FaceCamera> list = totalDao.findAllByPage(hql, pageNo, pageSize, null);
		if (list != null && list.size() > 0) {
			Map<String, Object> map = new HashMap<String, Object>();
			Integer count = totalDao.getCount(hql);
			map.put("count", count);
			map.put("list", list);
			return map;
		}

		return null;
	}

	@Override
	public String addFaceCamera(FaceCamera camera, String pageStatus) {
		if (camera != null) {
			if (camera.getIp() == null || camera.getIp().equals("")) {
				return "请输入摄像头IP地址";
			}
			if (camera.getUserName() == null || camera.getUserName().equals("")) {
				return "请输入摄像头登录名称";
			}

			// 登录摄像头确认信息是否正确
			NativeLong loginCamera = loginCamera(camera);
			if (loginCamera != null) {
				boolean net_DVR_Cleanup = faceUtil.NET_DVR_Cleanup();
				System.out.println("关闭资源" + net_DVR_Cleanup);
				boolean save = totalDao.save(camera);
				if (save) {
					return "添加成功";
				}
			}
			return "添加失败";
		} else {
			return "对象为空";
		}
	}

	@Override
	public String updateFaceCamera(FaceCamera camera, String pageStatus) {

		if (camera != null && camera.getId() != null) {
			if (camera.getIp() == null || camera.getIp().equals("")) {
				return "请输入摄像头IP地址";
			}
			if (camera.getUserName() == null || camera.getUserName().equals("")) {
				return "请输入摄像头登录名称";
			}
			FaceCamera faceCamera = (FaceCamera) totalDao.getObjectById(FaceCamera.class, camera.getId());
			BeanUtils.copyProperties(faceCamera, camera);
			boolean update = totalDao.update(faceCamera);
			if (update) {
				return "修改成功";
			}
		} else {
			return "对象为空";
		}
		return "修改失败";
	}

	@Override
	public String deleteFaceCamera(Integer id) {
		FaceCamera faceCamera = (FaceCamera) totalDao.getObjectById(FaceCamera.class, id);
		if (faceCamera != null) {
			boolean delete = totalDao.delete(faceCamera);
			if (delete) {
				return "删除成功";
			}
		} else {
			return "没查询到该摄像头";
		}
		return "删除失败";
	}

	@Override
	public FaceCamera getFaceCameraById(Integer id) {
		if (id != null) {
			return (FaceCamera) totalDao.getObjectById(FaceCamera.class, id);
		}
		return null;
	}

	// 改变成二进制码
	public static int compareImage(String oldEncoder, String newEncoder) throws IOException {
		if(oldEncoder.equals("") || newEncoder.equals("")) {
			return 100;
		}
		String baifen = "";
		int xiangsi = 0;
		int busi = 0;
		BASE64Decoder decoder = new BASE64Decoder();
		byte[] decodeBuffer = decoder.decodeBuffer(oldEncoder);
		byte[] decodeBuffer2 = decoder.decodeBuffer(newEncoder);
		BufferedImage bi1 = null;
		BufferedImage bi2 = null;
		try {
			InputStream inputStream1 = new ByteArrayInputStream(decodeBuffer);
			InputStream inputStream2 = new ByteArrayInputStream(decodeBuffer2);
			bi1 = ImageIO.read(inputStream1);
			bi2 = ImageIO.read(inputStream2);
			int width = bi1.getWidth();
			int height = bi1.getHeight();
			int minx = bi1.getMinX();
			int miny = bi1.getMinY();
			for (int i = minx; i < width; i++) {
				for (int j = miny; j < height; j++) {
					int rgb1 = bi1.getRGB(i, j);
					int read1 = (rgb1 & 0xff0000) >> 16;
					int green1 = (rgb1 & 0xff00) >> 8;
					int blue1 = (rgb1 & 0xff);

					int rgb2 = bi2.getRGB(i, j);
					int read2 = (rgb2 & 0xff0000) >> 16;
					int green2 = (rgb2 & 0xff00) >> 8;
					int blue2 = (rgb2 & 0xff);

					if (Math.abs(read1 - read2) < 20 && Math.abs(green1 - green2) < 20 && Math.abs(blue1 - blue2) < 20) {
						xiangsi++;
					} else {
						busi++;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return 100;
		}

		try {
			baifen = ((Double.parseDouble(xiangsi + "") / Double.parseDouble((busi + xiangsi) + "")) + "");
			baifen = baifen.substring(baifen.indexOf(".") + 1, baifen.indexOf(".") + 3);
		} catch (Exception e) {
			baifen = "0";
		}
		if (baifen.length() <= 0) {
			baifen = "0";
		}
		if (busi == 0) {
			baifen = "100";
		}
		return Integer.parseInt(baifen);
	}

}

class RunCameraFace extends Thread {

	private FaceCamera faceCamera;
	static FaceUtil faceUtil = FaceUtil.INSTANCE;
	private String FILE_PATH = null;
	public void setFaceCamera(FaceCamera faceCamera) {
		this.faceCamera = faceCamera;
	}

	public void setFILE_PATH(String fILE_PATH) {
		FILE_PATH = fILE_PATH;
	}

	@Override
	public void run() {
		NativeLong loginCamera = FaceServerImpl.loginCamera(faceCamera);// loginCamera("192.168");
		if (loginCamera != null) {
			NET_DVR_JPEGPARA lpJpegPara = new NET_DVR_JPEGPARA();
			lpJpegPara.wPicQuality = (short) 2;
			lpJpegPara.wPicSize = (short) 2;
			boolean b = false;
			try {
				NativeLong tongdaohao = new NativeLong(1);// lpDeviceInfo.byStartChan
				String oldImg64Encoder = "";
				while (true) {
					b = faceUtil.NET_DVR_CaptureJPEGPicture(loginCamera, tongdaohao, lpJpegPara, FILE_PATH);
					if (!b) {
						int err = faceUtil.NET_DVR_GetLastError();
						if (err == 34) { // 34为创建文件出错，可以继续运行.
							System.out.println(faceCamera.getIp() + "摄像头返回图片异常,路径：" + FILE_PATH);
						} else {
							// break;
						}
					} else {
						// 图片保存成功，比对人脸
						String base64Str = FaceServerImpl.getImageStr(FILE_PATH);

						int compareImage = FaceServerImpl.compareImage(oldImg64Encoder, base64Str);
						if (compareImage <= faceCamera.getSimilarity()) {// 本地计算图片相似度小于85获取比对-----建议根据实际环境测试一遍。、。
							// System.out.print(base64Str);
							Map<String, Object> map = new HashMap<String, Object>();
							map.put("image", base64Str);
							map.put("liveness_control", "NORMAL");// 活体检测控制默认NONE
							// NONE: 不进行控制
							// LOW:较低的活体要求(高通过率 低攻击拒绝率)
							// NORMAL: 一般的活体要求(平衡的攻击拒绝率, 通过率)
							// HIGH: 较高的活体要求(高攻击拒绝率 低通过率)
							// 若活体检测结果不满足要求，则返回结果中会提示活体检测失败
							map.put("group_id_list", "Inner,visitor");// 从指定的group中进行查找 用逗号分隔，上限20个
							map.put("image_type", "BASE64");
							map.put("face_type", "LIVE");// 默认LIVE
							// LIVE：表示生活照：通常为手机、相机拍摄的人像图片、或从网络获取的人像图片等，
							// IDCARD：表示身份证芯片照：二代身份证内置芯片中的人像照片，
							// WATERMARK：表示带水印证件照：一般为带水印的小图，如公安网小图
							// CERT：表示证件照片：如拍摄的身份证、工卡、护照、学生证等证件图片
							// 默认LIVE
							// map.put("quality_control", "NORMAL");//NONE: 不进行控制LOW:较低的质量要求 NORMAL: 一般的质量要求
							// HIGH: 较高的质量要求 默认 NONE
							map.put("max_face_num", 10);// 最多处理人脸的数目默认值为1(仅检测图片中面积最大的那个人脸) 最大值10
							map.put("match_threshold", 80);// 此阈值设置得越高，检索速度将会越快，推荐使用默认阈值80
							map.put("max_user_num", 10);// 识别返回的最大用户数，默认为1，最大20个
							List<String> userList = FaceBaiDuUtil.searchMulti(map);
							if (userList != null) {
								for (String userCode : userList) {
									new RunClock(userCode).start();// 为了加快执行速度使用异步(线程)执行打卡
								}
							}
						}else {
							System.out.println(faceCamera.getIp()+"图片相似度：" + compareImage);
						}
						oldImg64Encoder = base64Str;
					}
				}
			} catch (Exception e) {
				System.out.println(faceCamera.getIp() + "获取视频图片异常！");
				e.printStackTrace();
			}
			// if(!b) {
			// int err = faceUtil.NET_DVR_GetLastError();
			// System.out.println("错误码："+err);
			// }
			// boolean net_DVR_Cleanup = faceUtil.NET_DVR_Cleanup();
			// System.out.println("关闭资源"+net_DVR_Cleanup);
		} else {
			System.out.println(faceCamera.getIp() + "摄像头初始化失败");
		}

	}

}

/**
 * 执行打卡等操作
 * 
 * @author admin
 *
 */
class RunClock extends Thread {
	private String userCode;
	static List<String> userCodeList = new ArrayList<String>();
	private FaceCamera faceCamera;

	public RunClock(String userCode) {
		this.userCode = userCode;
	}

	public void setFaceCamera(FaceCamera faceCamera) {
		this.faceCamera = faceCamera;
	}

	@Override
	public void run() {
		String dateTime = Util.getDateTime("yyyy-MM-dd HH:mm:ss");
		// synchronized (userCodeList) {
		//
		// }

		TotalDao totalDao = TotalDaoImpl.findTotalDao();

		FaceUsers faceUsers = (FaceUsers) totalDao.getObjectByQuery("from FaceUsers where faceCode = ?", userCode);
		if (faceUsers != null) {
			String accessname = "人脸识别摄像头";// 设备名称
			if (faceCamera != null) {
				accessname = accessname + faceCamera.getName();
			}
			synchronized (userCodeList) {
				String retuatten = AttendanceTowServerImpl.addAttendanceTow(faceUsers.getCardId(), faceUsers.getCode(),
						faceUsers.getUserName(), faceUsers.getDept(), faceUsers.getUserId(), "指纹", accessname, "考勤机",
						null, totalDao);
				if ("true".equals(retuatten)) {
					String sendmessage = "您与" + dateTime + "打卡成功，祝您工作愉快！";
					// 发送消息提醒
					Integer uids[] = new Integer[1];
					uids[0] = faceUsers.getUserId();
					AlertMessagesServerImpl.addAlertMessages("打卡成功提示", sendmessage, uids, null, true,true);
					System.out.println(faceUsers.getUserName() + ",打卡成功");
				} else if ("exists".equals(retuatten)) {
					System.out.println(faceUsers.getUserName() + ",已存在打卡记录");
				} else {
					System.out.println(faceUsers.getUserName() + ",打卡失败" + retuatten);
				}
				
				if ("true".equals(retuatten) || "exists".equals(retuatten)) {
					//开门
//					try {
//						Socket s = new Socket("192.168.0.197", 8877);
//						PrintStream p = new PrintStream(s.getOutputStream());
//						p.write(2);
//						p.flush();
//						p.close();
//						s.close();
//						System.out.println("开门了");
//					} catch (UnknownHostException e) {
//						e.printStackTrace();
//					} catch (IOException e) {
//						e.printStackTrace();
//					}
				}
			}
		}
	}

}

interface FaceUtil extends StdCallLibrary {

	public static final int SERIALNO_LEN = 48; // 序列号长度
	String BASE_PATH = "D:\\lib\\";

	FaceUtil INSTANCE = (FaceUtil) Native.loadLibrary(BASE_PATH + "HCNetSDK", FaceUtil.class);

	boolean NET_DVR_Init();// 设备初始化，必须调用

	boolean NET_DVR_Cleanup();// 回收资源

	boolean NET_DVR_CapturePictureBlock(long lRealHandle, String sPicFileName, long dwTimeOut);

	NativeLong NET_DVR_Login_V30(String sDVRIP, short wDVRPort, String sUserName, String sPassword,
			NET_DVR_DEVICEINFO_V30 lpDeviceInfo);// 登录用户获取ID

	boolean NET_DVR_CaptureJPEGPicture(NativeLong lUserID, NativeLong lChannel, NET_DVR_JPEGPARA lpJpegPara,
			String sPicFileName);// 获取帧图片

	int NET_DVR_GetLastError();// 查看错误码

	boolean NET_DVR_GetDeviceAbility(NativeLong lUserID, short dwAbilityType, String pInBuf, short dwInLength,
			String pOutBuf, short dwOutLength);// 判断设备是否支持人脸侦测模块

}

/**
 * 用户登录信息
 * 
 * @author admin
 *
 */
class UserLoginInfo {
	String sDeviceAddress;// 设备地址，IP 或者普通域名
	String sUserName = "admin";// 登录用户名，例如：admin
	String sPassword;// 登录密码，例如：12345

	Integer byUseTransport = 0;// 是否启用能力集透传：0- 不启用透传，默认；1- 启用透传
	Integer wPort = 8000;// 设备端口号，例如：8000
	String cbLoginResult;// 登录状态回调函数，bUseAsynLogin 为1时有效
	String pUser;// 用户数据
	Integer bUseAsynLogin = 0;// 是否异步登录：0- 否，1- 是
	Integer byProxyType = 0;// 代理服务器类型：0- 不使用代理，1- 使用标准代理，2- 使用EHome代理
	Integer byUseUTCTime = 0;// 是否使用UTC时间：0- 不进行转换，默认；1- 输入输出UTC时间，SDK进行与设备时区的转换；2- 输入输出平台本地时间，SDK进行与设备时区的转换
	Integer byLoginMode = 0;// 登录模式(不同模式具体含义详见“Remarks”说明)：0- SDK私有协议，1- ISAPI协议，2- 自适应（设备支持协议类型未知时使用，一般不建议）
	Integer byHttps = 1;;// ISAPI协议登录时是否启用HTTPS(byLoginMode为1时有效)：0- 不启用，1- 启用，2-
							// 自适应（设备支持协议类型未知时使用，一般不建议）
	Integer iProxyID = 0;// 代理服务器序号，添加代理服务器信息时相对应的服务器数组下表值
	Integer byRes3 = 0;// 保留，置为0
}
