package com.task.ServerImpl.sop;

import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.net.Socket;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import javax.servlet.http.HttpServletResponse;

import jxl.Workbook;
import jxl.format.UnderlineStyle;
import jxl.write.Alignment;
import jxl.write.Colour;
import jxl.write.Label;
import jxl.write.VerticalAlignment;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.StrutsStatics;
import org.springframework.beans.BeanUtils;

import com.alibaba.fastjson.JSON;
import com.mysql.fabric.xmlrpc.base.Array;
import com.opensymphony.xwork2.ActionContext;
import com.task.Dao.TotalDao;
import com.task.Server.InsuranceGoldServer;
import com.task.Server.MachineDayYZSJServer;
import com.task.Server.WageStandardServer;
import com.task.Server.ess.GoodsStoreServer;
import com.task.Server.ess.ProcardBlServer;
import com.task.Server.led.LEDServer;
import com.task.Server.peb.ProductEBServer;
import com.task.Server.sop.ManualOrderPlanServer;
import com.task.Server.sop.ProcardServer;
import com.task.Server.sys.CircuitRunServer;
import com.task.ServerImpl.AlertMessagesServerImpl;
import com.task.ServerImpl.MachineDayYZSJServerImpl;
import com.task.ServerImpl.ess.ProcardBlServerImpl;
import com.task.ServerImpl.sys.CircuitRunServerImpl;
import com.task.ServerImpl.yw.ConvertNumber;
import com.task.entity.Becoming;
import com.task.entity.BrushCard;
import com.task.entity.Careertrack;
import com.task.entity.Consuming;
import com.task.entity.DTOProcess;
import com.task.entity.DataGrid;
import com.task.entity.Goods;
import com.task.entity.GoodsStore;
import com.task.entity.Goods_bzsq;
import com.task.entity.IgiftSet;
import com.task.entity.InsuranceGold;
import com.task.entity.InternalOrder;
import com.task.entity.InternalOrderDetail;
import com.task.entity.Machine;
import com.task.entity.MachineDayYZSJ;
import com.task.entity.Nect;
import com.task.entity.OrderManager;
import com.task.entity.OutLib;
import com.task.entity.Password;
import com.task.entity.Price;
import com.task.entity.PrintedOut;
import com.task.entity.PrintedOutOrder;
import com.task.entity.ProcardBl;
import com.task.entity.ProductManager;
import com.task.entity.Product_Internal;
import com.task.entity.Provision;
import com.task.entity.Screen;
import com.task.entity.Sell;
import com.task.entity.Store;
import com.task.entity.TaSopGongwei;
import com.task.entity.Tijiangprice;
import com.task.entity.Users;
import com.task.entity.VOProductTree;
import com.task.entity.WageStandard;
import com.task.entity.android.processpush.Push;
import com.task.entity.caigou.MonthlySummary;
import com.task.entity.codetranslation.CodeTranslation;
import com.task.entity.fin.UserMoneyDetail;
import com.task.entity.fin.UserMonthMoney;
import com.task.entity.gys.ProcardGys;
import com.task.entity.gys.ProcessGysInfor;
import com.task.entity.gzbj.Gzstore;
import com.task.entity.gzbj.GzstoreUseLog;
import com.task.entity.gzbj.Measuring;
import com.task.entity.gzbj.ProcessGzstore;
import com.task.entity.led.LED;
import com.task.entity.led.LEDLog;
import com.task.entity.menjin.RechargeZhi;
import com.task.entity.peb.PebProduction;
import com.task.entity.peb.SubTeam;
import com.task.entity.pmi.PmiManagement;
import com.task.entity.shizhi.ProjectOrderPart;
import com.task.entity.sop.BreakSubmit;
import com.task.entity.sop.DefectiveProduct;
import com.task.entity.sop.HotFree;
import com.task.entity.sop.ManualOrderPlanDetail;
import com.task.entity.sop.OnorderInventory;
import com.task.entity.sop.OutSourcingWorkList;
import com.task.entity.sop.Procard;
import com.task.entity.sop.ProcardCsBl;
import com.task.entity.sop.ProcardCsBlOrder;
import com.task.entity.sop.ProcardForProcess;
import com.task.entity.sop.ProcardMaterial;
import com.task.entity.sop.ProcardMaterialHead;
import com.task.entity.sop.ProcardProductRelation;
import com.task.entity.sop.ProcardReProduct;
import com.task.entity.sop.ProcardSbWwDetail;
import com.task.entity.sop.ProcardSpecification;
import com.task.entity.sop.ProcardTemForProcess;
import com.task.entity.sop.ProcardTemplate;
import com.task.entity.sop.ProcardTemplateBanBen;
import com.task.entity.sop.ProcardTemplateBanBenApply;
import com.task.entity.sop.ProcardVo;
import com.task.entity.sop.ProcardWGCenter;
import com.task.entity.sop.ProcardWxTuiLiao;
import com.task.entity.sop.ProcessAndWgProcardTem;
import com.task.entity.sop.ProcessFuLiaoTemplate;
import com.task.entity.sop.ProcessInfor;
import com.task.entity.sop.ProcessInforReceiveLog;
import com.task.entity.sop.ProcessInforWWApply;
import com.task.entity.sop.ProcessInforWWApplyDetail;
import com.task.entity.sop.ProcessInforWWProcard;
import com.task.entity.sop.ProcessInfordeleteApply;
import com.task.entity.sop.ProcessInfordeleteApplyDetail;
import com.task.entity.sop.ProcessSaveLog;
import com.task.entity.sop.ProcessTemplate;
import com.task.entity.sop.ProcessTemplateFile;
import com.task.entity.sop.ProcessWlqr;
import com.task.entity.sop.ProcessZj;
import com.task.entity.sop.ProcessinforFuLiao;
import com.task.entity.sop.ProcessinforPeople;
import com.task.entity.sop.RunningWaterCard;
import com.task.entity.sop.WaigouDeliveryDetail;
import com.task.entity.sop.WaigouOrder;
import com.task.entity.sop.WaigouPlan;
import com.task.entity.sop.WaigouWaiweiPlan;
import com.task.entity.sop.WaigouWaiweisbCompare;
import com.task.entity.sop.Waiweishow;
import com.task.entity.sop.qd.CheckAlert;
import com.task.entity.sop.qd.LogoStickers;
import com.task.entity.sop.ycl.YuanclAndWaigj;
import com.task.entity.system.CircuitRun;
import com.task.entity.system.CompanyInfo;
import com.task.entity.system.ExecutionNode;
import com.task.entity.wlWeizhiDt.WlWeizhiDt;
import com.task.entity.zhuseroffer.NoPriceprocess;
import com.task.util.DateUtil;
import com.task.util.FieldMeta;
import com.task.util.LedSendServer;
import com.task.util.LedSendUtil;
import com.task.util.MD5;
import com.task.util.RtxUtil;
import com.task.util.Util;
import com.tast.entity.zhaobiao.ChargebackNotice;
import com.tast.entity.zhaobiao.GysMarkIdjiepai;
import com.tast.entity.zhaobiao.MarkIdZijian;
import com.tast.entity.zhaobiao.ProcessMarkIdZijian;
import com.tast.entity.zhaobiao.Waigoujianpinci;
import com.tast.entity.zhaobiao.WaigoujianpinciZi;
import com.tast.entity.zhaobiao.ZhUser;

/**
 * 流水卡片操作
 * 
 * @author 刘培
 * 
 */

@SuppressWarnings("unchecked")
public class ProcardServerImpl implements ProcardServer {
	private final static String gxtzPath = "/upload/file/processTz";
	private static TotalDao totalDao;
	private GoodsStoreServer goodsStoreServer;
	private WageStandardServer wss; // 工资模板
	private InsuranceGoldServer igs; // 五险一金Server层
	private ProcardBlServer procardBlServer;
	private static final Double SECONDS = 619200.0;
	private LEDServer ledServer;
	private List<Integer> deptIds = null;
	private Integer count_ = 0;
	private ManualOrderPlanServer manualPlanServer;
	private MachineDayYZSJServer mdyServer;
	private ProductEBServer productEBServer;
	private boolean isbgbl = false;// 是否有包工包料工序;
	private CircuitRunServer circuitRunServer;
	private List<Integer> glIdList=null;

	public ProcardBlServer getProcardBlServer() {
		return procardBlServer;
	}

	public void setProcardBlServer(ProcardBlServer procardBlServer) {
		this.procardBlServer = procardBlServer;
	}

	public GoodsStoreServer getGoodsStoreServer() {
		return goodsStoreServer;
	}

	public void setGoodsStoreServer(GoodsStoreServer goodsStoreServer) {
		this.goodsStoreServer = goodsStoreServer;
	}

	public ManualOrderPlanServer getManualPlanServer() {
		return manualPlanServer;
	}

	public void setManualPlanServer(ManualOrderPlanServer manualPlanServer) {
		this.manualPlanServer = manualPlanServer;
	}

	public MachineDayYZSJServer getMdyServer() {
		return mdyServer;
	}

	public void setMdyServer(MachineDayYZSJServer mdyServer) {
		this.mdyServer = mdyServer;
	}

	public ProductEBServer getProductEBServer() {
		return productEBServer;
	}

	public void setProductEBServer(ProductEBServer productEBServer) {
		this.productEBServer = productEBServer;
	}

	public CircuitRunServer getCircuitRunServer() {
		return circuitRunServer;
	}

	public void setCircuitRunServer(CircuitRunServer circuitRunServer) {
		this.circuitRunServer = circuitRunServer;
	}

	public List getProcessInforById(Integer pid, String[] mrkIds) {
		/*
		 * String hql = "from ProcessInfor c where c.procard.id=? and c.id";
		 * ProcessInfor topInfor = (ProcessInfor) totalDao
		 * .getObjectByCondition(hql, process.getProcard() .getId(),
		 * process.getProcessNO());
		 */
		String ids = "";
		for (int i = 0, len = mrkIds.length; i < len; i++) {
			String a = mrkIds[i];
			String[] strarray = a.split(",");
			String selfCard1 = strarray[0].replace("[", "");
			if (len - 1 == i) {
				ids += Integer.parseInt(selfCard1.toString());
			} else {
				ids += Integer.parseInt(selfCard1.toString()) + ",";
			}
		}
		String hql = "from ProcessInfor c where c.processNO in (" + ids
				+ ") and c.procard.id=" + pid;
		List newl = totalDao.query(hql);
		// ------------
		List newps = new ArrayList<ProcessInfor>(newl.size());
		for (int i = 0; i < newl.size(); i++) {
			ProcessInfor newp = (ProcessInfor) newl.get(i);
			Float numbers = 0F;
			for (int j = 0; j < mrkIds.length; j++) {
				String a = mrkIds[j];
				String[] strarray = a.split(",");
				Integer selfCard1 = Integer.parseInt(strarray[0].replace("[",
						""));
				Float nums = Float.parseFloat(strarray[3].toString());
				if (selfCard1 == newp.getProcessNO()) {
					numbers = numbers + nums;
				}
			}
			newp.setTotalCount(numbers);
			newps.add(newp);
		}

		return newps;
	}

	public Procard listMarkIdselfCard(String[] mrkIds) {
		String a = mrkIds[0];
		String[] strarray = a.split(",");
		String markId1 = strarray[1];
		String selfCard1 = strarray[2].replace("]", "");
		String hql15 = " from  Procard  where markId='" + markId1.trim()
				+ "'   and selfCard='" + selfCard1.trim() + "'";
		Procard old = (Procard) totalDao.getObjectByCondition(hql15);
		return old;
	}

	public List listByIdAll(String[] strings) {
		List list = new ArrayList<WaigouWaiweiPlan>(strings.length);
		// List list = new ArrayList(strings.length);
		for (int i = 0; i < strings.length; i++) {
			String a = strings[i];
			String[] strarray = a.split(",");
			String b = strarray[0].replace("[", "");
			String hql = "from WaigouWaiweiPlan where  id=?";
			List newl = totalDao.query(hql, Integer.parseInt(b));
			if (newl.size() > 0) {
				list.add(newl.get(0));
			}
			// String a = strings[i];
			// String[] strarray = a.split(",");
			// String b = strarray[0].replace("[", "");
			// String hql = "from WaigouWaiweiPlan where  id=?";
			// List newl = totalDao.query(hql, Integer.parseInt(b));
			list.add(newl);
		}
		return list;
	}

	public TotalDao getTotalDao() {
		return totalDao;
	}

	public void setTotalDao(TotalDao totalDao) {
		this.totalDao = totalDao;
	}

	public void addMarkIdZijian(Integer id, int[] selected) {
		String hql = "from MarkIdZijian where  procardTemplateId=?";
		List newl = totalDao.query(hql, id);
		if (newl != null && newl.size() >= 0) {
			for (int i = 0; i < newl.size(); i++) {
				MarkIdZijian oldold = (MarkIdZijian) newl.get(i);
				// String hql155 =
				// " from  MarkIdZijian  where procardTemplateId=? and provisionId=?";
				// GysMarkIdjiepai old1 = (GysMarkIdjiepai)
				// totalDao.getObjectByCondition(hql155,id,oldold.getProvisionId());
				// if (old1==null) {
				// totalDao.delete(oldold);
				// }
				int k = 0;// 定义变量保存指定元素的下标
				if (selected != null && selected.length > 0) {
					for (int j = 0; j < selected.length; j++) {
						if (selected[j] == oldold.getProvisionId()) {
							k = j;
						}
					}
				}
				if (k == 0) {
					totalDao.delete(oldold);
				}
			}
		}

		// ----------------------------------
		if (selected != null && selected.length >= 0) {
			for (int i = 0; i < selected.length; i++) {
				String hql15 = " from  MarkIdZijian  where procardTemplateId=? and provisionId=?";
				GysMarkIdjiepai old = (GysMarkIdjiepai) totalDao
						.getObjectByCondition(hql15, id, selected[i]);
				if (old == null) {
					MarkIdZijian newMarkIdZijian = new MarkIdZijian();
					newMarkIdZijian.setProcardTemplateId(id);
					newMarkIdZijian.setProvisionId(selected[i]);
					String hql56 = " from ProcardTemplate where id=?";
					ProcardTemplate p = (ProcardTemplate) totalDao
							.getObjectByCondition(hql56, id);
					newMarkIdZijian.setMarkId(p.getMarkId());
					totalDao.save(newMarkIdZijian);
				}
			}
		}
		// ---------------------

	}

	public List listbandingZijian(Integer id) {
		String hql = "from Provision p,ProcardTemplate pt,MarkIdZijian mz   "
				+ "where  p.provisionStatus='zj' and pt.id=mz.procardTemplateId and mz.provisionId=p.id and pt.id=?";

		String hql1 = "from Provision where  provisionStatus='zj' "
				+ "and id in (select provisionId from MarkIdZijian where procardTemplateId=?)";
		List newlist = totalDao.query(hql1, id);
		return newlist;
	}

	public Object[] listprovision(Provision p, Integer cpage, Integer PageSize) {
		if (p == null) {
			p = new Provision();
		}
		String hql = totalDao.criteriaQueries(p, null, null)
				+ "  and provisionStatus='zj'";
		List list = totalDao.findAllByPage(hql, cpage, PageSize);
		int count = totalDao.getCount(hql);
		Object[] o = { list, count };
		return o;
	}

	public Object[] listmarkId(ProcardTemplate p, Integer cpage,
			Integer PageSize) {
		if (p == null) {
			p = new ProcardTemplate();
		}

		// String hql =
		// "from ProcardTemplate where markId in (select distinct markId  from  ProcardTemplate)";
		// String hql = totalDao.criteriaQueries(p, null)+" and  markId in " +
		// "(select distinct markId  from  ProcardTemplate)";
		String hql = totalDao.criteriaQueries(p, null);
		List list = totalDao.findAllByPage(hql, cpage, PageSize);
		int count = totalDao.getCount(hql);
		Object[] o = { list, count };
		return o;
	}

	/**
	 * 查询流水卡片信息
	 */
	@SuppressWarnings("unchecked")
	public Object[] findProcard(Procard procard, String startDate,
			String endDate, Integer cpage, Integer PageSize) {
		String hql = "from Procard order by id desc";
		String[] between = new String[2];
		if (null != startDate && null != endDate && !"".equals(endDate)
				&& !"".equals(startDate)) {
			between[0] = startDate;
			between[1] = endDate;
		}
		if (null != procard) {
			hql = totalDao.criteriaQueries(procard, "procardTime", between, "");
		}
		Object[] procardAarr = new Object[2];
		Integer count = totalDao.getCount(hql);
		List list = totalDao.findAllByPage(hql, cpage, PageSize);
		procardAarr[0] = count;
		procardAarr[1] = list;
		return procardAarr;
	}

	/***
	 * 生成流水卡片
	 * 
	 * @param orderId
	 *            订单id
	 * @return
	 * @throws Exception
	 */
	@Override
	public Object[] addProCard(Integer orderId, Integer[] inorderId,
			Float[] number, String[] rootJihuoDate, String pageStatus,
			String tag, Integer procardId) throws Exception {
		String message = "生成流水卡片错误!原因如下:\\n";
		List<Procard> procardList = new ArrayList();
		if ((orderId != null) && (orderId.intValue() > 0)) {
			String hql = "from InternalOrder where id=? ";
			InternalOrder internalOrder = (InternalOrder) totalDao
					.getObjectByCondition(hql, new Object[] { orderId });
			Boolean bool = Boolean.valueOf(false);
			if (internalOrder != null) {
				Set<OrderManager> orderSet = internalOrder.getOuterOrders();
				String orderIds = "";
				String orderNums = "";
				for (OrderManager orderManager : orderSet) {
					orderIds = orderIds + orderManager.getId();
					orderNums = orderNums + orderManager.getOrderNum();
				}
				internalOrder.setOrderIds(orderIds);
				internalOrder.setOrderNums(orderNums);
				Set<InternalOrderDetail> set = internalOrder
						.getInterOrderDetails();
				for (InternalOrderDetail iod : set) {
					Float numberDetail = Float.valueOf(0.0F);
					String jihuodate = "";
					for (int i = 0; i < inorderId.length; i++) {
						if (inorderId[i].equals(iod.getId())) {
							numberDetail = number[i];
							jihuodate = rootJihuoDate[i];
						}
					}
					if ((numberDetail != null)
							&& (numberDetail.floatValue() > 0.0F)) {
						if (procardId == null) {
							boolean b = false;
							if ("true".equals(iod.getIsPeiJian())) {
								b = true;
							}
							iod.setJihuoDate(jihuodate);
							String productStyle = internalOrder
									.getProducttype();

							String hql2 = "from ProcardTemplate where (markId=? or ywMarkId=?) and (banbenStatus is null or banbenStatus ='默认') and (dataStatus is null or dataStatus !='删除')";
							if (!b) {
								hql2 = hql2 + " and belongLayer = 1 ";
							}
							String hql3 = null;
							String hql4 = null;
							if ((productStyle == null)
									|| (productStyle.length() == 0)) {
								productStyle = "批产";
							}
							if (productStyle.equals("批产")) {
								hql3 = "  and (productStyle is null  or productStyle <> '试制')";
								hql4 = "  and productStyle = '试制'";
							} else {
								hql3 = "  and productStyle = '试制'";
								hql4 = "  and (productStyle is null  or productStyle <> '试制')";
							}
							ProcardTemplate procardTemplate = (ProcardTemplate) totalDao
									.getObjectByCondition(hql2 + hql3,
											new Object[] {
													iod.getPieceNumber(),
													iod.getPieceNumber() });
							if (procardTemplate == null) {
								String ywMarkId = iod.getYwMarkId() == null ? ""
										: iod.getYwMarkId();
								Float tqcount = (Float) totalDao
										.getObjectByCondition(
												"select count(*) from ProcardTemplatePrivilege where markId=? or markId =?",
												new Object[] {
														iod.getPieceNumber(),
														ywMarkId });
								if ((tqcount != null)
										&& (tqcount.floatValue() > 0.0F)) {
									procardTemplate = (ProcardTemplate) totalDao
											.getObjectByCondition(
													hql2 + hql4,
													new Object[] {
															iod
																	.getPieceNumber(),
															iod
																	.getPieceNumber() });
								}
							}
							boolean bo = false;
							YuanclAndWaigj andWaigj = null;
							andWaigj = (YuanclAndWaigj) totalDao
									.getObjectByCondition(
											"from YuanclAndWaigj where markId = ? and status <> '禁用'",
											new Object[] { iod.getPieceNumber() });
							if ((b) && (procardTemplate == null)) {
								if (andWaigj != null) {
									procardTemplate = new ProcardTemplate();
									procardTemplate.setProcardStyle("外购");
									bo = true;
								} else if (procardTemplate == null) {
									throw new RuntimeException(iod
											.getPieceNumber()
											+ "件号在外购件库不存在!");
								}
							}
							if (procardTemplate != null) {
								if ("外购".equals(procardTemplate
										.getProcardStyle())) {
									bo = true;
								}
								if (!bo) {
									int id2 = procardTemplate.getRootId();
									String se = "select count(*) from ProcardTemplate where (bzStatus is null or bzStatus!='已批准') and (banbenStatus is null or banbenStatus ='默认') and (dataStatus is null or dataStatus !='删除')";
									if (b) {
										se = se + " and fatherId=?";
										id2 = procardTemplate.getId();
									} else {
										se = se + " and rootId=?";
									}
									Float noPzCount = (Float) totalDao
											.getObjectByCondition(se, id2);
									if ((noPzCount != null)
											&& (noPzCount.floatValue() > 0.0F)) {
										throw new RuntimeException(
												procardTemplate.getMarkId()
														+ "的BOM模版有" + noPzCount
														+ "个物料未审批通过,请等待!");
									}
								}
								Float num = numberDetail;
								if (iod.getTurnCount().floatValue()
										+ num.floatValue() > iod.getNum()) {
									message = message + "件号为"
											+ iod.getPieceNumber()
											+ "的总转换数量不能大于计划总数量,请修改转换数量!";
								} else {
									if (!b) {
										ProductManager productManager = (ProductManager) totalDao
												.getObjectById(
														ProductManager.class,
														iod
																.getProductManagerId()
																.intValue());
										if (productManager != null) {
											procardTemplate
													.setCarStyle(productManager
															.getType());
											if (productManager.getPieceNumber() != null
													&& !productManager
															.getPieceNumber()
															.equals(
																	procardTemplate
																			.getMarkId())) {
												productManager
														.setPieceNumber(procardTemplate
																.getMarkId());
												totalDao.update(productManager);
											}
											totalDao.update(procardTemplate);
										}
									}
									ProcardTemplate procardTemplate2 = null;
									if ((b) && (!bo)) {
										procardTemplate2 = new ProcardTemplate();
										BeanUtils.copyProperties(
												procardTemplate,
												procardTemplate2, new String[] {
														"rootId", "fatherId",
														"id", "sbStatus" });
										procardTemplate2.setProcardStyle("总成");
										procardTemplate2.setCorrCount(1f);
									}
									Procard procard = null;
									if (iod.getNum()
											- iod.getTurnCount().floatValue() != num
											.floatValue()) {
										InternalOrderDetail newIod = new InternalOrderDetail();
										BeanUtils.copyProperties(iod, newIod);
										newIod.setNum(num);
										newIod.setTurnCount(num);
										totalDao.save(newIod);
										Product_Internal pi = (Product_Internal) totalDao.getObjectByCondition("from Product_Internal where ioDetailId=? and allcount>=?",iod.getId(),  num);
										if(pi!=null){
											pi.setAllcount(pi.getAllcount()-num.intValue());	
											Product_Internal newpi = new Product_Internal();
											newpi.setMarkId(pi.getMarkId());//件号
											newpi.setProductId(pi.getProductId());//订单产品id
											newpi.setIoDetailId(newIod.getId());//订单明细的id
											newpi.setAllcount(num);//数量
											newpi.setHasruku(0f);//已入库数量
											newpi.setStatus(pi.getStatus());//状态（申请中，同意，打回）
											totalDao.save(newpi);
											totalDao.update(pi);
										}
										iod.setNum(iod.getNum()
												- num.intValue());
										iod.setJihuoDate(null);
										iod.setTurnCount(Float.valueOf(0.0F));
										iod.setPieceNumber(procardTemplate.getMarkId());
										if (b) {
											if (bo) {
												procard = waiProcard(iod,
														andWaigj, num);
											} else {
												procard = genProCard(
														procardTemplate2,
														newIod,
														null,
														Integer.valueOf(0),
														num,
														productStyle,
														procardTemplate2
																.getMarkId(),
														Integer
																.valueOf(procardTemplate2
																		.getBelongLayer()
																		.intValue() - 1));
											}
										} else {
											procard = genProCard(
													procardTemplate, newIod,
													null, Integer.valueOf(0),
													num, productStyle);
										}
									} else {
										if (b) {
											if (bo) {
												procard = waiProcard(iod,
														andWaigj, num);
											} else {
												procard = genProCard(
														procardTemplate2,
														iod,
														null,
														Integer.valueOf(0),
														num,
														productStyle,
														procardTemplate2
																.getMarkId(),
														Integer
																.valueOf(procardTemplate2
																		.getBelongLayer()
																		.intValue() - 1));
											}
										} else {
											procard = genProCard(
													procardTemplate, iod, null,
													Integer.valueOf(0), num,
													productStyle);
										}
										iod.setTurnCount(Float.valueOf(iod
												.getTurnCount().floatValue()
												+ num.floatValue()));
									}
									procardList.add(procard);

									totalDao.update(iod);

									String hql_count = "from InternalOrderDetail where internalOrder.id=? and num>turnCount";
									Integer count = totalDao.getCount(
											hql_count, new Object[] { Integer
													.valueOf(internalOrder
															.getId()) });
									if (count.intValue() == 0) {
										internalOrder.setZhStatus("已转完");
									} else {
										internalOrder.setZhStatus("未转完");
									}
									totalDao.update(internalOrder);

									totalDao.update(iod);

									updateProductStauts(iod);// 内部计划转换后更新订单明细状态用于判定是否能够删除的依据
									updateInternalOrderStatus(internalOrder);// 更新内部计划状态为"已转完"未转完
									message = "本计划的所有生产工艺卡片已经全部生成成功!";
								}
							} else {
								message = message + "不存在件号为"
										+ iod.getPieceNumber() + "的 "
										+ (b ? "配件" : "总成") + " 流水卡片模版,请添加!";
							}
						} else {
							boolean b = false;
							if ("true".equals(iod.getIsPeiJian())) {
								b = true;
							}
							iod.setJihuoDate(jihuodate);
							String productStyle = internalOrder
									.getProducttype();

							String hql2 = "from ProcardTemplate where (markId=? or ywMarkId=?) and (banbenStatus is null or banbenStatus ='默认') and (dataStatus is null or dataStatus !='删除')";
							if (!b) {
								hql2 = hql2 + " and belongLayer = 1 ";
							}
							String hql3 = null;
							String hql4 = null;
							if ((productStyle == null)
									|| (productStyle.length() == 0)) {
								productStyle = "批产";
							}
							if (productStyle.equals("批产")) {
								hql3 = "  and (productStyle is null  or productStyle <> '试制')";
								hql4 = "  and productStyle = '试制'";
							} else {
								hql3 = "  and productStyle = '试制'";
								hql4 = "  and (productStyle is null  or productStyle <> '试制')";
							}
							Procard procardTemplate = (Procard) totalDao
									.getObjectById(Procard.class, procardId
											.intValue());
							if (procardTemplate != null) {
								Float num = numberDetail;
								if (iod.getTurnCount().floatValue()
										+ num.floatValue() > iod.getNum()) {
									message = message + "件号为"
											+ iod.getPieceNumber()
											+ "的总转换数量不能大于计划总数量,请修改转换数量!";
								} else {
									if ((!b)
											&& ((procardTemplate.getCarStyle() == null) || (""
													.equals(procardTemplate
															.getCarStyle())))) {
										ProductManager productManager = (ProductManager) totalDao
												.getObjectById(
														ProductManager.class,
														iod
																.getProductManagerId()
																.intValue());
										if (productManager != null) {
											procardTemplate
													.setCarStyle(productManager
															.getType());
											totalDao.update(procardTemplate);
										}
									}
									Procard procard = null;
									if (iod.getNum()
											- iod.getTurnCount().floatValue() != num
											.floatValue()) {
										InternalOrderDetail newIod = new InternalOrderDetail();
										BeanUtils.copyProperties(iod, newIod);
										newIod.setNum(num);
										newIod.setTurnCount(num);
										totalDao.save(newIod);
										iod.setNum(iod.getNum()
												- num.intValue());
										iod.setJihuoDate(null);
										iod.setTurnCount(Float.valueOf(0.0F));

										procard = genProCard(procardTemplate,
												newIod, null, Integer
														.valueOf(0), num,
												productStyle);
									} else {
										procard = genProCard(procardTemplate,
												iod, null, Integer.valueOf(0),
												num, productStyle);
										iod.setTurnCount(Float.valueOf(iod
												.getTurnCount().floatValue()
												+ num.floatValue()));
									}
									procardList.add(procard);
									totalDao.update(iod);

									String hql_count = "from InternalOrderDetail where internalOrder.id=? and num>turnCount";
									Integer count = totalDao.getCount(
											hql_count, new Object[] { Integer
													.valueOf(internalOrder
															.getId()) });
									if (count.intValue() == 0) {
										internalOrder.setZhStatus("已转完");
									} else {
										internalOrder.setZhStatus("未转完");
									}
									totalDao.update(internalOrder);
									message = "本计划的所有生产工艺卡片已经全部生成成功!";

									totalDao.update(iod);
									updateProductStauts(iod);// 内部计划转换后更新订单明细状态用于判定是否能够删除的依据
									updateInternalOrderStatus(internalOrder);// 更新内部计划状态为"已转完"未转完
									message = "本计划的所有生产工艺卡片已经全部生成成功!";
								}
							} else {
								message = message + "不存在件号为"
										+ iod.getPieceNumber() + "的 "
										+ (b ? "配件" : "总成") + " 流水卡片模版,请添加!";
							}
						}
						// procardList.add(procard);
						// } catch (Exception e) {
						// message += "请检查" + procardTemplate.getMarkId()
						// + "的工艺模版信息是否有误!如:权值等";
						// e.printStackTrace();4
						// }
					} else {
						message += "不存在件号为" + iod.getPieceNumber()
								+ "的流水卡片模版,请添加!";
					}
				}
			} else {
				message = "不存在您要查询的订单信息!";
			}
		} else {
			message = "无效的订单信息!";
		}
		return new Object[] { message, procardList };
	}

	/**
	 * 更新内部计划状态为"已转完"未转完
	 * 如果该内部计划下turnCount(已转数量)==num(总数量)证明已经都转完了，有num>turnCount(不等于)则未转完
	 * 
	 * @param internalOrder
	 */
	private void updateInternalOrderStatus(InternalOrder internalOrder) {
		String hql_count = "from InternalOrderDetail where internalOrder.id=? and num>turnCount";
		Integer count = totalDao.getCount(hql_count, internalOrder.getId());
		if (count == 0) {
			internalOrder.setZhStatus("已转完");
		} else {
			internalOrder.setZhStatus("未转完");
		}
		totalDao.update(internalOrder);
	}

	/**
	 * 内部计划转换后更新订单明细状态
	 * 
	 * @author licong
	 * @param iod
	 */
	private void updateProductStauts(InternalOrderDetail iod) {
		if (iod.getProductManagerId() != null) {
			ProductManager manager = (ProductManager) totalDao.getObjectById(
					ProductManager.class, iod.getProductManagerId());
			if (manager != null) {
				if (iod.getTurnCount().floatValue() == iod.getNum()
						.floatValue()) {
					manager.setStatus("已转完");
				} else {
					manager.setStatus("未转完");
				}
				totalDao.update(manager);
			}
		}
	}

	public Procard waiProcard(InternalOrderDetail iod, YuanclAndWaigj andWaigj,
			Float num) {
		Procard pt = new Procard();
		// 生成配件流水卡
		// 设置零件属性
		pt.setMarkId(iod.getPieceNumber());
		pt.setRootMarkId(iod.getPieceNumber());
		pt.setProName(iod.getName());
		pt.setProcardStyle("总成");
		pt.setIsPeiJian("true");// 配件标识
		pt.setUnit(andWaigj.getUnit());
		pt.setBelongLayer(1);
		pt.setLingliaoType("part");
		pt.setLingliaostatus("是");
		pt.setRootId(0);
		pt.setFatherId(null);
		pt.setProductStyle("批产");
		pt.setFilnalCount(num);
		pt.setStatus("初始");
		pt.setPlanOrderId(iod.getInternalOrder().getId());// 内部计划单id
		pt.setPlanOrderDetailId(iod.getId());// 内部计划单id
		pt.setPlanOrderNum(iod.getInternalOrder().getNum());// 内部计划单号
		pt.setOrderNumber(iod.getInternalOrder().getOrderNums());// 订单编号
		pt.setOrderId(iod.getInternalOrder().getOrderIds());// 订单id
		pt.setProcardTime(Util.getDateTime());// 制卡时间
		pt.setSelfCard(updateMaxSelfCard(pt.getMarkId()));// 批次号
		pt.setZhikaren(Util.getLoginUser().getName());// 制卡人(当前登录用户)
		pt.setBarcode(UUID.randomUUID().toString());// 条码
		dingdanBei(iod, pt);
		pt.setWlstatus("待定");
		pt.setJihuoDate(iod.getJihuoDate());// 设置装配时间
		pt.setJioafuDate(iod.getPaymentDate());// 设置交付时间
		pt.setBanci(0);
		pt.setMinNumber(0F);
		totalDao.save(pt);
		pt.setRootId(pt.getId());

		Procard pt1 = new Procard();
		// 设置零件属性
		pt1.setMarkId(iod.getPieceNumber());
		pt1.setRootMarkId(iod.getPieceNumber());
		pt1.setProName(iod.getName());
		pt1.setProcardStyle("外购");
		pt1.setUnit(iod.getUnit());
		pt1.setLingliaostatus("是");
		pt1.setIsPeiJian("true");// 配件标识
		pt1.setKgliao(andWaigj.getKgliao());
		pt1.setYuanUnit(andWaigj.getUnit());
		pt1.setWgType(andWaigj.getWgType());
		pt1.setQuanzi1(1f);
		pt1.setQuanzi2(1f);
		pt1.setFilnalCount(num);
		pt1.setCorrCount(0f);
		pt1.setBelongLayer(2);
		pt1.setRootId(pt.getId());
		pt1.setFatherId(pt.getId());
		pt1.setProductStyle("批产");
		pt1.setStatus("初始");
		pt1.setProcard(pt);
		pt1.setPlanOrderId(iod.getInternalOrder().getId());// 内部计划单id
		pt1.setPlanOrderDetailId(iod.getId());// 内部计划单id
		pt1.setPlanOrderNum(iod.getInternalOrder().getNum());// 内部计划单号
		pt1.setOrderNumber(iod.getInternalOrder().getOrderNums());// 订单编号
		pt1.setOrderId(iod.getInternalOrder().getOrderIds());// 订单id
		pt1.setProcardTime(Util.getDateTime());// 制卡时间
		pt1.setSelfCard(updateMaxSelfCard(pt1.getMarkId()));// 批次号
		pt1.setRootSelfCard(pt.getMarkId());// 总成批次号
		pt1.setZhikaren(Util.getLoginUser().getName());// 制卡人(当前登录用户)
		pt1.setBarcode(UUID.randomUUID().toString());// 条码
		pt1.setJihuoDate(iod.getJihuoDate());// 设置装配时间
		pt1.setJioafuDate(iod.getPaymentDate());// 设置交付时间
		pt1.setBanci(0);
		pt1.setMinNumber(0F);
		totalDao.save(pt1);
		Set<ProcessInfor> processtSet = new HashSet<ProcessInfor>();
		ProcessInfor processt = new ProcessInfor();
		// 设置在工艺规程中找的到的属性
		processt.setProcessNO(5);
		processt.setProcessName("包装入库");
		processt.setShebeistatus("否");// 设备验证
		processt.setGongzhuangstatus("否");// 工装验证
		processt.setLiangjustatus("否");// 量具验证
		processt.setProductStyle("自制");// 默认为自制
		processt.setZjStatus("no");// 默认首检
		processt.setProcessStatus("yes");// 默认并行
		processt.setIsPrice("no");// 默认参与
		processt.setGuding("是");// 固定节拍
		processt.setTotalCount(pt.getFilnalCount());// 可领取量
		processt.setStatus("初始");
		processt.setProcard(pt);
		processt.setIsSpecial("特殊");
		processt.setKaoqingstatus("是");// 默认考勤
		processt.setGuifanstatus("否");// 不用规范
		// 将工序放入集合中
		// totalDao.save(processt);
		processtSet.add(processt);
		pt.setProcessInforSet(processtSet);
		totalDao.update(pt);
		return pt;

	}

	/***
	 * 递归 生成配件(自制件)卡片
	 * 
	 * @param procardTemplate
	 *            流水卡片模板
	 * @param internalOrder
	 *            内部计划单
	 * @param fatherProcard
	 *            上层流水卡片
	 * @return
	 */
	public Procard genProCard(ProcardTemplate procardTemplate,
			InternalOrderDetail iod, Procard fatherProcard, Integer rootId,
			Float number, String productStyle, String peiMarkId, Integer ceng) {
		String message = "";
		if (procardTemplate != null
				&& (procardTemplate.getBanbenStatus() == null || !procardTemplate
						.getBanbenStatus().equals("历史"))
				&& (procardTemplate.getDataStatus() == null || !procardTemplate
						.getDataStatus().equals("删除"))) {
			if (!"外购".equals(procardTemplate.getProcardStyle())
					&& !"自制".equals(procardTemplate.getProcardStyle())
					&& !"总成".equals(procardTemplate.getProcardStyle())) {
				throw new RuntimeException("产品类型错误:"
						+ procardTemplate.getMarkId() + ":"
						+ procardTemplate.getProcardStyle());
			}
			// 生成流水卡片
			message += procardTemplate.getMarkId();
			// if (procardTemplate.getMarkId().equals("DKBA4.102.7120")) {
			// System.out.println(procardTemplate.getMarkId());
			// }
			Procard procard = new Procard();
			/**
			 * 将流水卡片模板转换为流水卡片
			 */
			BeanUtils.copyProperties(procardTemplate, procard, new String[] {
					"rootId", "fatherId", "id", "sbStatus", "sbId" });// sbStatus在两个表中代表不同的含义
			procard.setProductStyle(productStyle);
			if (procard.getBanci() == null) {
				procard.setBanci(0);
			}
			procard.setRootMarkId(peiMarkId);
			procard.setIsPeiJian("true");
			procard.setBelongLayer(procard.getBelongLayer() - ceng);
			// 阳天的临时全部设置为部分配齐
			procard.setLingliaoType("part");
			procard.setMinNumber(0F);

			Float needNumber = null;
			if ("外购".equals(procard.getProcardStyle())) {
				Map<String, String> markidMap = new HashMap<String, String>();
				markidMap.put("1.01.30017", "1.01.30022");
				markidMap.put("1.01.30005", "1.01.30011");
				markidMap.put("1.01.30012", "1.01.30007");
				markidMap.put("1.01.10025", "1.01.10055");
				markidMap.put("1.01.10021", "1.01.10040");
				markidMap.put("1.01.10028", "1.01.10043");
				markidMap.put("1.01.10027", "1.01.10042");
				markidMap.put("1.01.10026", "1.01.10062");
				markidMap.put("1.01.10030", "1.01.12501");
				markidMap.put("1.01.10029", "1.01.12537");
				markidMap.put("1.01.30018", "1.01.30014");
				markidMap.put("1.01.30026", "1.01.30016");
				markidMap.put("1.01.30034", "1.01.30010");
				markidMap.put("2.09.00014", "30100005");
				markidMap.put("DKBA8.840.0069", "30040054");
				markidMap.put("QDKBA4.409.0670", "26020187");
				markidMap.put("1.04.00560", "28010212");
				markidMap.put("DKBA3360.1", "30060106");

				String zhmarkid = markidMap.get(procard.getMarkId());
				if (zhmarkid != null && zhmarkid.length() > 0) {
					String sql1 = "from YuanclAndWaigj where  (banbenStatus is null or banbenStatus!='历史') and markId=? and kgliao =? ";
					YuanclAndWaigj yuanclAndWaigj = null;
					try {
						yuanclAndWaigj = (YuanclAndWaigj) totalDao
								.getObjectByCondition(sql1, zhmarkid, procard
										.getKgliao());
					} catch (Exception e) {
						e.printStackTrace();
					}

					if (yuanclAndWaigj != null) {
						BeanUtils.copyProperties(yuanclAndWaigj, procard,
								new String[] { "id" });
						// procard.setMarkId(zhmarkid);
						procard.setProName(yuanclAndWaigj.getName());
					}
				}

				needNumber = number * procard.getQuanzi2()
						/ procard.getQuanzi1();
				// 如果存在损耗，则重新计算用量以及权值
				if (procard.getSunhao() != null && procard.getSunhao() > 0) {
					if (procard.getSunhaoType() != null
							&& procard.getSunhaoType() == 1) {
						needNumber = needNumber + procard.getSunhao();
					} else {
						needNumber = needNumber * (procard.getSunhao()+100) / 100F;
					}
					Float qz2 = needNumber / number;
					procard.setQuanzi2(qz2);
					procard.setQuanzi1(1F);
				}

				if (procard.getUnit() == null || procard.getUnit().equals("")) {
					throw new RuntimeException("零件" + procard + "无单位!");
				}
				if (procard.getUnit().equals("PCS")
						|| procard.getUnit().equals("套")
						|| procard.getUnit().equals("瓶")
						|| procard.getUnit().equals("个")) {
					needNumber = (float) Math.ceil(needNumber);
					// needNumber = Util.FomartFloat(needNumber, 0);
					if(procard.getProcardStyle().equals("外购")){
						Float qz2 = needNumber / number;
						procard.setQuanzi2(qz2);
						procard.setQuanzi1(1F);
					}
				} else {
					needNumber = Util.FomartFloat(needNumber, 4);
				}
				number = needNumber;
				if (!"否".equals(procard.getLingliaostatus())) {
					procard.setLingliaostatus("是");
				}
			} else {
				procard.setLingliaostatus("是");
			}

			// Double d = Math.ceil(needNumber);
			// procard.setNeedCount(Float.parseFloat(d.toString()));//
			// 计算外购/自制的实际需求数量(自动进1取整)
			// procard.setFilnalCount(Float.parseFloat(d.toString()));
			// Double d = Math.ceil(needNumber);
			// procard.setNeedCount(needNumber);// 计算外购/自制的实际需求数量(自动进1取整)

			procard.setPlanOrderId(iod.getInternalOrder().getId());// 内部计划单id
			procard.setPlanOrderDetailId(iod.getId());// 内部计划单id
			procard.setPlanOrderNum(iod.getInternalOrder().getNum());// 内部计划单号
			procard.setOrderNumber(iod.getInternalOrder().getOrderNums());// 订单编号
			procard.setOrderId(iod.getInternalOrder().getOrderIds());// 订单id
			// 订单明细不为空，赋值
			dingdanBei(iod, procard);
			procard.setProcardTemplateId(procardTemplate.getId());// bom模板id
			procard.setStatus("初始");
			procard.setProcardTime(Util.getDateTime());// 制卡时间
			procard.setSelfCard(updateMaxSelfCard(procard.getMarkId()));// 批次号
			procard.setZhikaren(Util.getLoginUser().getName());// 制卡人(当前登录用户)
			procard.setBarcode(UUID.randomUUID().toString());// 条码
			procard.setFilnalCount(number);// 生产数量

			// 设置调用关系
			if (fatherProcard != null) {
				procard.setFatherId(fatherProcard.getId());// 父类id
				procard.setRootId(rootId);// 更新rootId
				procard.setProcard(fatherProcard);// 设置父类
			}

			totalDao.save(procard);// 添加

			if (fatherProcard == null) {
				// 说明是总成
				rootId = procard.getId();
				procard.setRootId(rootId);// 更新rootId
				procard.setRootSelfCard(procard.getSelfCard());
				procard.setWlstatus("待定");
				procard.setJihuoDate(iod.getJihuoDate());// 设置装配时间
				procard.setJioafuDate(iod.getPaymentDate());// 设置交付时间
			} else {
				procard.setRootSelfCard(fatherProcard.getRootSelfCard());
				procard.setJioafuDate(fatherProcard.getJioafuDate());
			}

			// 遍历该流水卡片对应工序并生成工序
			Set<ProcessTemplate> setProCess = procardTemplate
					.getProcessTemplate();
			for (ProcessTemplate processTem : setProCess) {
				if (processTem.getDataStatus() != null
						&& processTem.getDataStatus().equals("删除")) {
					continue;
				}
				ProcessInfor process = new ProcessInfor();
				BeanUtils.copyProperties(processTem, process, new String[] {
						"id", "procardTemplate" });
				// process.setProcessNO(processTem.getProcessNO());// 工序号
				// process.setProcessName(processTem.getProcessName());// 工序名称
				// process.setProcessStatus(processTem.getProcessStatus());//
				// 状态(并行/单独)
				// process.setParallelId(processTem.getParallelId());// 并行开始id

				// 人工节拍和设备节拍处理
				if (process.getProductStyle() != null
						&& process.getProductStyle().equals("外委")) {// 外委工序节拍设为1
					process.setOpcaozuojiepai(1f);
					process.setOpshebeijiepai(1f);
					process.setGzzhunbeijiepai(1f);
					process.setGzzhunbeicishu(1f);
					process.setAllJiepai(1f);
				} else {
					if (process.getOpcaozuojiepai() == null) {
						process.setOpcaozuojiepai(0F);
					}
					if (process.getOpshebeijiepai() == null) {
						process.setOpshebeijiepai(0F);
					}
				}
				process.setTotalCount(procard.getFilnalCount());// 可领取量
				process.setStatus("初始");
				process.setWlqrcount(0f);
				process.setProcessTemplateId(processTem.getId());
				process.setProcard(procard);
				// -----------------辅料------------------
				if (processTem.getIsNeedFuliao() != null
						&& processTem.getIsNeedFuliao().equals("yes")) {
					process.setIsNeedFuliao("yes");
					Set<ProcessFuLiaoTemplate> fltmpSet = processTem
							.getProcessFuLiaoTemplate();
					if (fltmpSet.size() > 0) {
						Set<ProcessinforFuLiao> pinfoFlSet = new HashSet<ProcessinforFuLiao>();
						for (ProcessFuLiaoTemplate fltmp : fltmpSet) {
							ProcessinforFuLiao pinfoFl = new ProcessinforFuLiao();
							BeanUtils.copyProperties(fltmp, pinfoFl,
									new String[] { "id" });
							if (pinfoFl.getQuanzhi1() == null) {
								pinfoFl.setQuanzhi1(1f);
							}
							if (pinfoFl.getQuanzhi2() == null) {
								pinfoFl.setQuanzhi2(1f);
							}
							pinfoFl.setTotalCount(procard.getFilnalCount()
									* pinfoFl.getQuanzhi2()
									/ pinfoFl.getQuanzhi1());
							pinfoFl.setProcessInfor(process);
							pinfoFl.setOutCount(0f);
							pinfoFl.setAddUser(Util.getLoginUser().getName());
							pinfoFl.setAddTime(Util.getDateTime());
							pinfoFlSet.add(pinfoFl);
						}
						process.setProcessinforFuLiao(pinfoFlSet);
					}
				}
				if ("试制".equals(procard.getProductStyle())) {
					process.setZjStatus("no");
				}
				try {
					totalDao.save(process);
				} catch (Exception e) {
					// TODO: handle exception
					System.out.println("hh");
				}
			}

			// 遍历查询子类流水卡片
			Set<ProcardTemplate> setProCard = procardTemplate.getProcardTSet();
			for (ProcardTemplate procardTem2 : setProCard) {
				if (procardTem2.getDataStatus() != null
						&& procardTem2.getDataStatus().equals("删除")) {
					continue;
				}
				if ("外购".equals(procardTem2.getProcardStyle())) {
					genProCard(procardTem2, iod, procard, rootId, procard
							.getFilnalCount(), productStyle, peiMarkId, ceng);
				} else {
					Float num = number * procardTem2.getCorrCount();// 上层流水卡片数量*权值=总数量
					num = (float) Math.ceil(num);
					genProCard(procardTem2, iod, procard, rootId, num,
							productStyle, peiMarkId, ceng);
					// Float maxCount = procardTem2.getMaxCount();// 流水卡片模板最大数量
					// if (maxCount > 0) {
					// int chuNum = (int) (num / maxCount);// 相除数量(倍数)
					// Float moNum = num % maxCount;// 余数
					//
					// if (chuNum >= 1) {
					// for (int i = 0; i < chuNum; i++) {
					// genProCard(procardTem2, internalOrder, procard,
					// rootId, procardTem2.getMaxCount());
					// }
					// }
					// if (moNum != 0) {
					// genProCard(procardTem2, internalOrder, procard,
					// rootId, moNum);
					// }
					// } else {
					// return null;
					// }
				}
			}
			return procard;
		}
		return null;
	}

	/***
	 * 递归 生成流水卡片
	 * 
	 * @param procardTemplate
	 *            流水卡片模板
	 * @param internalOrder
	 *            内部计划单
	 * @param fatherProcard
	 *            上层流水卡片
	 * @return
	 */
	public Procard genProCard(ProcardTemplate procardTemplate,
			InternalOrderDetail iod, Procard fatherProcard, Integer rootId,
			Float number, String productStyle) {
		String message = "";
		boolean peijian = false;
		if (procardTemplate.getId() == null) {// 兼容配件总成号
			peijian = true;
		}
		if (procardTemplate != null
				&& (procardTemplate.getBanbenStatus() == null || !procardTemplate
						.getBanbenStatus().equals("历史"))
				&& (procardTemplate.getDataStatus() == null || !procardTemplate
						.getDataStatus().equals("删除"))) {
			if (!"外购".equals(procardTemplate.getProcardStyle())
					&& !"自制".equals(procardTemplate.getProcardStyle())
					&& !"总成".equals(procardTemplate.getProcardStyle())) {
				throw new RuntimeException("产品类型错误:"
						+ procardTemplate.getMarkId() + ":"
						+ procardTemplate.getProcardStyle());
			}
			// 生成流水卡片
			message += procardTemplate.getMarkId();
			// if (procardTemplate.getMarkId().equals("DKBA4.102.7120")) {
			// System.out.println(procardTemplate.getMarkId());
			// }
			Procard procard = new Procard();
			/**
			 * 将流水卡片模板转换为流水卡片
			 */
			BeanUtils.copyProperties(procardTemplate, procard, new String[] {
					"rootId", "fatherId", "id", "sbStatus", "sbId" });// sbStatus在两个表中代表不同的含义
			procard.setProductStyle(productStyle);
			if (procard.getBanci() == null) {
				procard.setBanci(0);
			}

			if (procard.getLingliaoType() == null) {
				procard.setLingliaoType("part");
			}
			// 阳天的临时全部设置为部分配齐
			procard.setLingliaoType("part");
			procard.setMinNumber(0F);

			Float needNumber = null;
			if ("外购".equals(procard.getProcardStyle())) {
				Map<String, String> markidMap = new HashMap<String, String>();
				markidMap.put("1.01.30017", "1.01.30022");
				markidMap.put("1.01.30005", "1.01.30011");
				markidMap.put("1.01.30012", "1.01.30007");
				markidMap.put("1.01.10025", "1.01.10055");
				markidMap.put("1.01.10021", "1.01.10040");
				markidMap.put("1.01.10028", "1.01.10043");
				markidMap.put("1.01.10027", "1.01.10042");
				markidMap.put("1.01.10026", "1.01.10062");
				markidMap.put("1.01.10030", "1.01.12501");
				markidMap.put("1.01.10029", "1.01.12537");
				markidMap.put("1.01.30018", "1.01.30014");
				markidMap.put("1.01.30026", "1.01.30016");
				markidMap.put("1.01.30034", "1.01.30010");
				markidMap.put("2.09.00014", "30100005");
				markidMap.put("DKBA8.840.0069", "30040054");
				markidMap.put("QDKBA4.409.0670", "26020187");
				markidMap.put("1.04.00560", "28010212");
				markidMap.put("DKBA3360.1", "30060106");

				String zhmarkid = markidMap.get(procard.getMarkId());
				if (zhmarkid != null && zhmarkid.length() > 0) {
					String sql1 = "from YuanclAndWaigj where  (banbenStatus is null or banbenStatus!='历史') and markId=? and kgliao =? ";
					YuanclAndWaigj yuanclAndWaigj = null;
					try {
						yuanclAndWaigj = (YuanclAndWaigj) totalDao
								.getObjectByCondition(sql1, zhmarkid, procard
										.getKgliao());
					} catch (Exception e) {
						System.out.println(zhmarkid + "  " + procard.getId()
								+ " ===" + procard.getKgliao());
						e.printStackTrace();
					}

					if (yuanclAndWaigj != null) {
						BeanUtils.copyProperties(yuanclAndWaigj, procard,
								new String[] { "id" });
						// procard.setMarkId(zhmarkid);
						procard.setProName(yuanclAndWaigj.getName());
					}
				}
				try {
					needNumber = number * procard.getQuanzi2()
							/ procard.getQuanzi1();
					// 如果存在损耗，则重新计算用量以及权值
					if (procard.getSunhao() != null && procard.getSunhao() > 0) {
						if (procard.getSunhaoType() != null
								&& procard.getSunhaoType() == 1) {
							needNumber = needNumber + procard.getSunhao();
						} else {
							needNumber = needNumber * (procard.getSunhao()+100)
									/ 100F;
						}
						Float qz2 = needNumber / number;
						procard.setQuanzi2(qz2);
						procard.setQuanzi1(1F);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

				// String result = String.format("%.4f", needNumber);
				// needNumber = Float.parseFloat(result);
				// number = needNumber;
				if (procard.getUnit().equals("PCS")
						|| procard.getUnit().equals("套")
						|| procard.getUnit().equals("瓶")
						|| procard.getUnit().equals("个")) {
					needNumber = (float) Math.ceil(needNumber);
					// needNumber = Util.FomartFloat(needNumber, 0);
				} else {
					needNumber = Util.FomartFloat(needNumber, 4);
				}
				number = needNumber;
				if (!"否".equals(procard.getLingliaostatus())) {
					procard.setLingliaostatus("是");
				}
			} else {
				if ("否".equals(procard.getLingliaostatus())) {
					if (peijian) {
						procard.setLingliaostatus("是");
					} else {
						Float llCount = (Float) totalDao
								.getObjectByCondition(
										"select count(*) from ProcardTemplate where procardTemplate.id=? and (banbenStatus is null or banbenStatus!='历史') and (dataStatus is null or dataStatus !='删除')"
												+ " and procardStyle='外购' and (needProcess is null or needProcess !='yes') and (lingliaostatus is null or lingliaostatus!='否')",
										procardTemplate.getId());
						if (llCount != null && llCount > 0) {
							procard.setLingliaostatus("是");
						} else {
							procard.setLingliaostatus("否");
						}
					}
				} else {
					procard.setLingliaostatus("是");
				}
			}

			// Double d = Math.ceil(needNumber);
			// procard.setNeedCount(Float.parseFloat(d.toString()));//
			// 计算外购/自制的实际需求数量(自动进1取整)
			// procard.setFilnalCount(Float.parseFloat(d.toString()));
			// Double d = Math.ceil(needNumber);
			// procard.setNeedCount(needNumber);// 计算外购/自制的实际需求数量(自动进1取整)

			procard.setPlanOrderId(iod.getInternalOrder().getId());// 内部计划单id
			procard.setPlanOrderDetailId(iod.getId());// 内部计划单id
			procard.setPlanOrderNum(iod.getInternalOrder().getNum());// 内部计划单号
			procard.setOrderNumber(iod.getInternalOrder().getOrderNums());// 订单编号
			procard.setOrderId(iod.getInternalOrder().getOrderIds());// 订单id
			// 订单明细不为空，赋值
			if ("总成".equals(procard.getProcardStyle()))
				dingdanBei(iod, procard);
			procard.setProcardTemplateId(procardTemplate.getId());// bom模板id
			procard.setStatus("初始");
			procard.setProcardTime(Util.getDateTime());// 制卡时间
			procard.setSelfCard(updateMaxSelfCard(procard.getMarkId()));// 批次号
			procard.setZhikaren(Util.getLoginUser().getName());// 制卡人(当前登录用户)
			procard.setBarcode(UUID.randomUUID().toString());// 条码
			procard.setFilnalCount(number);// 生产数量

			// 设置调用关系
			if (fatherProcard != null) {
				procard.setFatherId(fatherProcard.getId());// 父类id
				procard.setRootId(rootId);// 更新rootId
				procard.setProcard(fatherProcard);// 设置父类
			}

			totalDao.save(procard);// 添加

			if (fatherProcard == null) {
				// 说明是总成
				rootId = procard.getId();
				procard.setRootId(rootId);// 更新rootId
				procard.setRootSelfCard(procard.getSelfCard());
				procard.setWlstatus("待定");
				procard.setJihuoDate(iod.getJihuoDate());// 设置装配时间
				procard.setJioafuDate(iod.getPaymentDate());// 设置交付时间
			} else {
				procard.setRootSelfCard(fatherProcard.getRootSelfCard());
				procard.setJioafuDate(fatherProcard.getJioafuDate());
			}

			// 遍历该流水卡片对应工序并生成工序
			Set<ProcessTemplate> setProCess = procardTemplate
					.getProcessTemplate();
			for (ProcessTemplate processTem : setProCess) {
				if (processTem.getDataStatus() != null
						&& processTem.getDataStatus().equals("删除")) {
					continue;
				}
				ProcessInfor process = new ProcessInfor();
				BeanUtils.copyProperties(processTem, process, new String[] {
						"id", "procardTemplate" });
				// process.setProcessNO(processTem.getProcessNO());// 工序号
				// process.setProcessName(processTem.getProcessName());// 工序名称
				// process.setProcessStatus(processTem.getProcessStatus());//
				// 状态(并行/单独)
				// process.setParallelId(processTem.getParallelId());// 并行开始id

				// 人工节拍和设备节拍处理
				if (process.getProductStyle() != null
						&& process.getProductStyle().equals("外委")) {// 外委工序节拍设为1
					process.setOpcaozuojiepai(1f);
					process.setOpshebeijiepai(1f);
					process.setGzzhunbeijiepai(1f);
					process.setGzzhunbeicishu(1f);
					process.setAllJiepai(1f);
				} else {
					if (process.getOpcaozuojiepai() == null) {
						process.setOpcaozuojiepai(0F);
					}
					if (process.getOpshebeijiepai() == null) {
						process.setOpshebeijiepai(0F);
					}
				}
				process.setTotalCount(procard.getFilnalCount());// 可领取量
				process.setStatus("初始");
				process.setProcessTemplateId(processTem.getId());
				process.setProcard(procard);

				if ("试制".equals(procard.getProductStyle())) {
					process.setZjStatus("no");
				}
				// -----------------辅料------------------
				if (processTem.getIsNeedFuliao() != null
						&& processTem.getIsNeedFuliao().equals("yes")) {
					process.setIsNeedFuliao("yes");
					Set<ProcessFuLiaoTemplate> fltmpSet = processTem
							.getProcessFuLiaoTemplate();
					if (fltmpSet.size() > 0) {
						Set<ProcessinforFuLiao> pinfoFlSet = new HashSet<ProcessinforFuLiao>();
						for (ProcessFuLiaoTemplate fltmp : fltmpSet) {
							ProcessinforFuLiao pinfoFl = new ProcessinforFuLiao();
							BeanUtils.copyProperties(fltmp, pinfoFl,
									new String[] { "id" });
							if (pinfoFl.getQuanzhi1() == null) {
								pinfoFl.setQuanzhi1(1f);
							}
							if (pinfoFl.getQuanzhi2() == null) {
								pinfoFl.setQuanzhi2(1f);
							}
							pinfoFl.setTotalCount(procard.getFilnalCount()
									* pinfoFl.getQuanzhi2()
									/ pinfoFl.getQuanzhi1());
							pinfoFl.setProcessInfor(process);
							pinfoFl.setOutCount(0f);
							pinfoFl.setAddUser(Util.getLoginUser().getName());
							pinfoFl.setAddTime(Util.getDateTime());
							pinfoFlSet.add(pinfoFl);
						}
						process.setProcessinforFuLiao(pinfoFlSet);
					}
				}
				try {
					totalDao.save(process);
				} catch (Exception e) {
					// TODO: handle exception
					System.out.println("hh");
				}
			}

			// 遍历查询子类流水卡片
			Set<ProcardTemplate> setProCard = procardTemplate.getProcardTSet();
			for (ProcardTemplate procardTem2 : setProCard) {
				if (procardTem2.getDataStatus() != null
						&& procardTem2.getDataStatus().equals("删除")) {
					continue;
				}
				if ("外购".equals(procardTem2.getProcardStyle())) {
					genProCard(procardTem2, iod, procard, rootId, procard
							.getFilnalCount(), productStyle);
				} else {
					Float num = number * procardTem2.getCorrCount();// 上层流水卡片数量*权值=总数量
					num = (float) Math.ceil(num);
					genProCard(procardTem2, iod, procard, rootId, num,
							productStyle);
					// Float maxCount = procardTem2.getMaxCount();// 流水卡片模板最大数量
					// if (maxCount > 0) {
					// int chuNum = (int) (num / maxCount);// 相除数量(倍数)
					// Float moNum = num % maxCount;// 余数
					//
					// if (chuNum >= 1) {
					// for (int i = 0; i < chuNum; i++) {
					// genProCard(procardTem2, internalOrder, procard,
					// rootId, procardTem2.getMaxCount());
					// }
					// }
					// if (moNum != 0) {
					// genProCard(procardTem2, internalOrder, procard,
					// rootId, moNum);
					// }
					// } else {
					// return null;
					// }
				}
			}
			return procard;
		}
		return null;
	}

	public Procard genProCard(Procard procardSelf, InternalOrderDetail iod,
			Procard fatherProcard, Integer rootId, Float number,
			String productStyle) {
		String message = "";
		boolean peijian = false;
		ProcardTemplate procardTemplate = new ProcardTemplate();
		BeanUtils.copyProperties(procardSelf, procardTemplate);
		if (procardTemplate.getId() == null) {
			peijian = true;
		}
		if ((procardTemplate != null)
				&& ((procardTemplate.getBanbenStatus() == null) || (!procardTemplate
						.getBanbenStatus().equals("历史")))
				&& ((procardTemplate.getDataStatus() == null) || (!procardTemplate
						.getDataStatus().equals("删除")))) {
			if (!"外购".equals(procardTemplate.getProcardStyle())
					&& !"自制".equals(procardTemplate.getProcardStyle())
					&& !"总成".equals(procardTemplate.getProcardStyle())) {
				throw new RuntimeException("产品类型错误:"
						+ procardTemplate.getMarkId() + ":"
						+ procardTemplate.getProcardStyle());
			}
			message = message + procardTemplate.getMarkId();

			Procard procard = new Procard();

			BeanUtils.copyProperties(procardTemplate, procard, new String[] {
					"rootId", "fatherId", "id", "sbStatus" });
			procard.setProductStyle(productStyle);
			if (procard.getBanci() == null) {
				procard.setBanci(Integer.valueOf(0));
			}
			if (procard.getLingliaoType() == null) {
				procard.setLingliaoType("part");
			}
			procard.setLingliaoType("part");
			procard.setMinNumber(0F);
			Float needNumber = null;
			String result;
			if ("外购".equals(procard.getProcardStyle())) {
				Map<String, String> markidMap = new HashMap();
				markidMap.put("1.01.30017", "1.01.30022");
				markidMap.put("1.01.30005", "1.01.30011");
				markidMap.put("1.01.30012", "1.01.30007");
				markidMap.put("1.01.10025", "1.01.10055");
				markidMap.put("1.01.10021", "1.01.10040");
				markidMap.put("1.01.10028", "1.01.10043");
				markidMap.put("1.01.10027", "1.01.10042");
				markidMap.put("1.01.10026", "1.01.10062");
				markidMap.put("1.01.10030", "1.01.12501");
				markidMap.put("1.01.10029", "1.01.12537");
				markidMap.put("1.01.30018", "1.01.30014");
				markidMap.put("1.01.30026", "1.01.30016");
				markidMap.put("1.01.30034", "1.01.30010");
				markidMap.put("2.09.00014", "30100005");
				markidMap.put("DKBA8.840.0069", "30040054");
				markidMap.put("QDKBA4.409.0670", "26020187");
				markidMap.put("1.04.00560", "28010212");
				markidMap.put("DKBA3360.1", "30060106");

				String zhmarkid = (String) markidMap.get(procard.getMarkId());
				if ((zhmarkid != null) && (zhmarkid.length() > 0)) {
					String sql1 = "from YuanclAndWaigj where  (banbenStatus is null or banbenStatus!='历史') and markId=? and kgliao =? ";
					YuanclAndWaigj yuanclAndWaigj = null;
					try {
						yuanclAndWaigj = (YuanclAndWaigj) totalDao
								.getObjectByCondition(sql1, new Object[] {
										zhmarkid, procard.getKgliao() });
					} catch (Exception e) {
						System.out.println(zhmarkid + "  " + procard.getId()
								+ " ===" + procard.getKgliao());
						e.printStackTrace();
					}
					if (yuanclAndWaigj != null) {
						BeanUtils.copyProperties(yuanclAndWaigj, procard,
								new String[] { "id" });

						procard.setProName(yuanclAndWaigj.getName());
					}
				}
				needNumber = Float.valueOf(number.floatValue()
						* procard.getQuanzi2().floatValue()
						/ procard.getQuanzi1().floatValue());
				// 如果存在损耗，则重新计算用量以及权值
				if (procard.getSunhao() != null && procard.getSunhao() > 0) {
					if (procard.getSunhaoType() != null
							&& procard.getSunhaoType() == 1) {
						needNumber = needNumber + procard.getSunhao();
					} else {
						needNumber = needNumber *  (procard.getSunhao()+100) / 100F;
					}
					Float qz2 = needNumber / number;
					procard.setQuanzi2(qz2);
					procard.setQuanzi1(1F);
				}
				// result = String.format("%.4f", new Object[] { needNumber });
				// needNumber = Float.valueOf(Float.parseFloat(result));
				if (procard.getUnit().equals("PCS")
						|| procard.getUnit().equals("套")
						|| procard.getUnit().equals("瓶")
						|| procard.getUnit().equals("个")) {
					needNumber = (float) Math.ceil(needNumber);
					// needNumber = Util.FomartFloat(needNumber, 0);
				} else {
					needNumber = Util.FomartFloat(needNumber, 4);
				}
				number = needNumber;
				if (!"否".equals(procard.getLingliaostatus())) {
					procard.setLingliaostatus("是");
				}
			} else if ("否".equals(procard.getLingliaostatus())) {
				if (peijian) {
					procard.setLingliaostatus("是");
				} else {
					Float llCount = (Float) totalDao
							.getObjectByCondition(
									"select count(*) from Procard where procard.id=? and procardStyle='外购' and (needProcess is null or needProcess !='yes') and (lingliaostatus is null or lingliaostatus!='否')",
									new Object[] {

									procardTemplate.getId() });
					if ((llCount != null) && (llCount.floatValue() > 0.0F)) {
						procard.setLingliaostatus("是");
					} else {
						procard.setLingliaostatus("否");
					}
				}
			} else {
				procard.setLingliaostatus("是");
			}
			procard.setPlanOrderId(Integer.valueOf(iod.getInternalOrder()
					.getId()));
			procard.setPlanOrderDetailId(iod.getId());
			procard.setPlanOrderNum(iod.getInternalOrder().getNum());
			procard.setOrderNumber(iod.getInternalOrder().getOrderNums());
			procard.setOrderId(iod.getInternalOrder().getOrderIds());
			if ("总成".equals(procard.getProcardStyle())) {
				dingdanBei(iod, procard);
			}
			procard.setProcardTemplateId(procardTemplate.getId());
			procard.setStatus("初始");
			procard.setProcardTime(Util.getDateTime());
			procard.setSelfCard(updateMaxSelfCard(procard.getMarkId()));
			procard.setZhikaren(Util.getLoginUser().getName());
			procard.setBarcode(UUID.randomUUID().toString());
			procard.setFilnalCount(number);
			if (fatherProcard != null) {
				procard.setFatherId(fatherProcard.getId());
				procard.setRootId(rootId);
				procard.setProcard(fatherProcard);
			}
			totalDao.save(procard);
			if (fatherProcard == null) {
				rootId = procard.getId();
				procard.setRootId(rootId);
				procard.setRootSelfCard(procard.getSelfCard());
				procard.setWlstatus("待定");
				procard.setJihuoDate(iod.getJihuoDate());
				procard.setJioafuDate(iod.getPaymentDate());
			} else {
				procard.setRootSelfCard(fatherProcard.getRootSelfCard());
				procard.setJioafuDate(fatherProcard.getJioafuDate());
			}
			Set<ProcessInfor> setProcessInfor = procardSelf
					.getProcessInforSet();
			ProcessTemplate processTem;
			for (ProcessInfor ProcessInfor : setProcessInfor) {
				processTem = new ProcessTemplate();
				BeanUtils.copyProperties(ProcessInfor, processTem);
				if ((processTem.getDataStatus() == null)
						|| (!processTem.getDataStatus().equals("删除"))) {
					ProcessInfor process = new ProcessInfor();
					BeanUtils.copyProperties(processTem, process, new String[] {
							"id", "procardTemplate" });
					if ((process.getProductStyle() != null)
							&& (process.getProductStyle().equals("外委"))) {
						process.setOpcaozuojiepai(Float.valueOf(1.0F));
						process.setOpshebeijiepai(Float.valueOf(1.0F));
						process.setGzzhunbeijiepai(Float.valueOf(1.0F));
						process.setGzzhunbeicishu(Float.valueOf(1.0F));
						process.setAllJiepai(Float.valueOf(1.0F));
					} else {
						if (process.getOpcaozuojiepai() == null) {
							process.setOpcaozuojiepai(Float.valueOf(0.0F));
						}
						if (process.getOpshebeijiepai() == null) {
							process.setOpshebeijiepai(Float.valueOf(0.0F));
						}
					}
					process
							.setTotalCount(procard.getFilnalCount()
									.floatValue());
					process.setStatus("初始");
					process.setProcessTemplateId(processTem.getId());
					process.setProcard(procard);
					if ("试制".equals(procard.getProductStyle())) {
						process.setZjStatus("no");
					}
					if ((processTem.getIsNeedFuliao() != null)
							&& (processTem.getIsNeedFuliao().equals("yes"))) {
						process.setIsNeedFuliao("yes");
						Set<ProcessFuLiaoTemplate> fltmpSet = processTem
								.getProcessFuLiaoTemplate();
						if (fltmpSet.size() > 0) {
							Set<ProcessinforFuLiao> pinfoFlSet = new HashSet();
							for (ProcessFuLiaoTemplate fltmp : fltmpSet) {
								ProcessinforFuLiao pinfoFl = new ProcessinforFuLiao();
								BeanUtils.copyProperties(fltmp, pinfoFl,
										new String[] { "id" });
								if (pinfoFl.getQuanzhi1() == null) {
									pinfoFl.setQuanzhi1(Float.valueOf(1.0F));
								}
								if (pinfoFl.getQuanzhi2() == null) {
									pinfoFl.setQuanzhi2(Float.valueOf(1.0F));
								}
								pinfoFl.setTotalCount(

								Float.valueOf(procard.getFilnalCount()
										.floatValue()
										* pinfoFl.getQuanzhi2().floatValue()
										/ pinfoFl.getQuanzhi1().floatValue()));
								pinfoFl.setProcessInfor(process);
								pinfoFl.setOutCount(Float.valueOf(0.0F));
								pinfoFl.setAddUser(Util.getLoginUser()
										.getName());
								pinfoFl.setAddTime(Util.getDateTime());
								pinfoFlSet.add(pinfoFl);
							}
							process.setProcessinforFuLiao(pinfoFlSet);
						}
					}
					try {
						totalDao.save(process);
					} catch (Exception e) {
						System.out.println("hh");
					}
				}
			}
			Set<Procard> setProCard = procardSelf.getProcardSet();
			for (Procard procardson : setProCard) {
				ProcardTemplate procardTem2 = new ProcardTemplate();
				BeanUtils.copyProperties(procardson, procardTem2);
				if ((procardTem2.getDataStatus() == null)
						|| (!procardTem2.getDataStatus().equals("删除"))) {
					if ("外购".equals(procardTem2.getProcardStyle())) {
						genProCard(procardson, iod, procard, rootId, procard
								.getFilnalCount(), productStyle);
					} else {
						Float num = Float.valueOf(number.floatValue()
								* procardTem2.getCorrCount().floatValue());
						num = Float
								.valueOf((float) Math.ceil(num.floatValue()));
						genProCard(procardson, iod, procard, rootId, num,
								productStyle);
					}
				}
			}
			return procard;
		}
		return null;
	}

	/**
	 * 订单明细备注
	 * 
	 * @param iod
	 * @param procard
	 */
	private void dingdanBei(InternalOrderDetail iod, Procard procard) {
		try {
			Integer orderId = Integer.parseInt(iod.getInternalOrder()
					.getOrderIds());
			if (orderId != null) {
				ProductManager product = (ProductManager) totalDao
						.getObjectByCondition(
								" from  ProductManager where (pieceNumber =? or ywMarkId =?) and orderManager.id=? ",
								procard.getMarkId(), procard.getMarkId(),
								orderId);
				if (product != null) {
					procard.setRemark(product.getRemark());// 订单明细备注
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 以procard的外购件生成procardGys
	 * 
	 * @param procard
	 * @return
	 */
	public boolean productProcardGys(String markId, float number,
			ProcardGys fprocardGys, Integer internalOrderId,
			String internalOrderNum, String selfCard) {
		boolean b = false;
		List<GysMarkIdjiepai> gysMarkIdjiepaiList = totalDao.query(
				"from GysMarkIdjiepai where markId=?", markId);
		if (gysMarkIdjiepaiList.size() > 0) {
			GysMarkIdjiepai gysMarkIdjiepai = gysMarkIdjiepaiList.get(0);
			ProcardGys procardGys = new ProcardGys();
			BeanUtils.copyProperties(gysMarkIdjiepai, procardGys, new String[] {
					"rootId", "fatherId", "id" });
			float needNumber = 0;
			if ("自制".equals(procardGys.getProcardStyle())) {
				needNumber = number * procardGys.getQuanzi2()
						/ procardGys.getQuanzi1();
			} else if ("外购".equals(procardGys.getProcardStyle())) {
				needNumber = number * procardGys.getQuanzi2()
						/ procardGys.getQuanzi1();
			}

			Double d = Math.ceil(needNumber);
			procardGys.setNeedCount(Float.parseFloat(d.toString()));// 计算外购/自制的实际需求数量(自动进1取整)
			if ("外购".equals(procardGys.getProcardStyle())) {
				number = procardGys.getNeedCount();
			}
			if (internalOrderId == null) {// 确认采购时采购计划中只有内部计划单号没有内部计划单的id
				List<Integer> internalOrderIds = totalDao.query(
						"select id from InternalOrder where num=?",
						internalOrderNum);
				if (internalOrderIds.size() > 0) {
					internalOrderId = internalOrderIds.get(0);
				}
			}
			procardGys.setPlanOrderId(internalOrderId);// 内部计划单id
			procardGys.setPlanOrderNum(internalOrderNum);// 内部计划单号
			procardGys.setProcardTime(Util.getDateTime());// 制卡时间
			procardGys.setSelfCard(selfCard);// 批次号和procard的批次号一样
			procardGys.setZhikaren(Util.getLoginUser().getName());// 制卡人(当前登录用户)
			procardGys.setBarcode(Util.getDateTime("yyyyMMddHHmmss"));// 条码
			procardGys.setStatus("已发料");
			procardGys.setFilnalCount(number);// 生产数量
			// 设置调用关系
			if (fprocardGys != null) {
				procardGys.setFatherId(fprocardGys.getId());// 父类id
				procardGys.setRootId(fprocardGys.getRootId());// 更新rootId
				procardGys.setProcardGys(fprocardGys);// 设置父类
			}

			b = totalDao.save(procardGys);// 添加
			if (fprocardGys != null) {
				procardGys.setRootId(fprocardGys.getId());// 更新rootId
			} else {
				procardGys.setRootId(procardGys.getId());
			}
			// 遍历该流水卡片对应工序并生成工序
			Set<ProcessMarkIdZijian> processSet = gysMarkIdjiepai
					.getProcessMarkIdZijian();
			for (ProcessMarkIdZijian processTem : processSet) {
				ProcessGysInfor process = new ProcessGysInfor();
				BeanUtils.copyProperties(processTem, process, new String[] {
						"id", "procardTemplate" });
				// process.setProcessNO(processTem.getProcessNO());// 工序号
				// process.setProcessName(processTem.getProcessName());// 工序名称
				// process.setProcessStatus(processTem.getProcessStatus());//
				// 状态(并行/单独)
				// process.setParallelId(processTem.getParallelId());// 并行开始id

				// 人工节拍和设备节拍处理
				if (process.getOpcaozuojiepai() == null) {
					process.setOpcaozuojiepai(0F);
				}
				if (process.getOpshebeijiepai() == null) {
					process.setOpshebeijiepai(0F);
				}
				process.setTotalCount(procardGys.getFilnalCount());// 可领取量
				process.setStatus("初始");
				process.setProcardGys(procardGys);
				b = totalDao.save(process);
			}
			// 遍历查询子类流水卡片
			Set<GysMarkIdjiepai> proCardSet = gysMarkIdjiepai.getProcardTSet();
			for (GysMarkIdjiepai procardTem2 : proCardSet) {
				if ("外购".equals(procardTem2.getProcardStyle())) {
					productProcardGys(procardTem2.getMarkId(), procardGys
							.getFilnalCount(), procardGys, internalOrderId,
							internalOrderNum, selfCard);
				} else {
					Float num = number * procardTem2.getCorrCount();// 上层流水卡片数量*权值=总数量
					num = (float) Math.ceil(num);
					Float maxCount = procardTem2.getMaxCount();// 流水卡片模板最大数量
					int chuNum = (int) (num / maxCount);// 相除数量(倍数)
					Float moNum = num % maxCount;// 余数
					if (chuNum >= 1) {
						for (int i = 0; i < chuNum; i++) {
							productProcardGys(procardTem2.getMarkId(),
									procardTem2.getMaxCount(), procardGys,
									internalOrderId, internalOrderNum, selfCard);
						}
					}
					if (moNum != 0) {
						productProcardGys(procardTem2.getMarkId(), procardGys
								.getFilnalCount(), procardGys, internalOrderId,
								internalOrderNum, selfCard);
					}
				}
			}
		}
		return b;
	}

	// 查询该件号最大批次号
	public String updateMaxSelfCard(String markId) {
		String mouth = new SimpleDateFormat("yyyyMMdd").format(new Date());
		int yy = Integer.parseInt(mouth.substring(0, 4));
		int mm = Integer.parseInt(mouth.substring(4, 6));
		int dd = Integer.parseInt(mouth.substring(6, 8));
		// if (dd >= 26) {
		// if (mm == 12) {
		// mm = 1;
		// yy++;
		// } else {
		// mm++;
		// }
		// }
		if (mm < 10) {
			mouth = yy + "0" + mm;
		} else {
			mouth = yy + "" + mm;
		}
		String hql = "select max(selfCard) from Procard where markId=? and selfCard like '"
				+ mouth + "%'";
		Object object = (Object) totalDao.getObjectByCondition(hql, markId);
		if (object != null) {
			Long selfCard = Long.parseLong(object.toString().substring(0, 11)) + 1;// 当前最大流水卡片
			return selfCard.toString();
		} else {
			return mouth + "00001";
		}
	}

	/***
	 * 根据id查询流水卡片
	 * 
	 * @param procardTemplate
	 * @return
	 */
	@Override
	public Procard findProcardById(int id) {
		if ((Object) id != null && id > 0) {
			Procard procard = (Procard) totalDao.getObjectById(Procard.class,
					id);
			if (procard.getOldProcardId() != null) {
				Procard oldProcard = (Procard) totalDao.get(Procard.class,
						procard.getOldProcardId());
				procard.setOldSelfCard(oldProcard.getSelfCard());
			}
			Integer maxBelongLayer = (Integer) totalDao
					.getObjectByCondition(
							"select belongLayer from Procard where rootId=? order by belongLayer desc",
							id);
			procard.setMaxBelongLayer(maxBelongLayer);
			return procard;
		}
		return null;
	}

	/***
	 * 查询所有总成流水卡片(分页)
	 * 
	 * @param procardTemplate
	 * @return
	 */
	@Override
	public Object[] findAllProcard(Procard procard, int pageNo, int pageSize,
			String startDate, String endDate, String pageStatus) {
		if (procard == null) {
			procard = new Procard();
			if (!"nocaigou".equals(pageStatus)) {
				procard.setProcardStyle("总成"); // 只查询第一层的总成模板
			}

		}
		String hql = totalDao.criteriaQueries(procard, null, "status")
				+ " and (sbStatus is null or sbStatus !='删除')";
		if (procard.getStatus() != null && !"".equals(procard.getStatus())) {
			String[] p_status = procard.getStatus().split(",");
			if (p_status != null && p_status.length > 0) {
				String status_str = "";
				for (int i = 0; i < p_status.length; i++) {
					if ("".equals(status_str)) {
						status_str += "'" + p_status[i] + "'";
					} else {
						status_str += "," + "'" + p_status[i] + "'";
					}
				}
				hql += " and status in (" + status_str + ")";
			}
		}
		if (startDate != null && endDate != null && !startDate.equals("")
				&& !endDate.equals("")) {
			hql += " and procardTime between '" + startDate + "' and '"
					+ endDate + "'";
		} else if (startDate != null && !startDate.equals("")
				&& (endDate == null || endDate.equals(""))) {
			hql += " and procardTime >= '" + startDate + "'";
		} else if ((startDate == null || startDate.equals(""))
				&& endDate != null && !endDate.equals("")) {
			hql += " and procardTime <= '" + endDate + "'";
		}
		if ("ruku".equals(pageStatus)) {
			hql += " and status  in ('完成','入库')";
		} else if ("scz".equals(pageStatus)
				&& (procard == null || procard.getStatus() == null || procard
						.getStatus().length() == 0)) {
			hql += " and status not in ('完成','入库')";
		} else if ("buliao".equals(pageStatus)) {
			hql += " and oldProcardId is not null ";
		} else if ("nocaigou".equals(pageStatus)) {
			hql += " and status in('初始','已发卡') and procardStyle = '外购'";
			if (procard.getMarkId() != null && procard.getMarkId().length() > 0) {
				pageSize = totalDao.getCount(hql);
			}
		}
		// 外购外委查询列表
		if (pageStatus != null
				&& (pageStatus.equals("materials")
						|| pageStatus.equals("forwaiwei") || pageStatus
						.equals("forwaiweisq"))) {
			if (pageStatus.equals("forwaiwei")) {
				hql += " and wlStatus<>'待定'";
			} else
				hql += " and status not in('完成','待入库','入库','暂停','取消')";
		}
		if ("noCardPlan".equals(pageStatus)) {
			/***
			 * 查询所有待生产计划(已激活，小于等于今天应开始生产任务)
			 */
			// String date = Util.getDateTime("yyyy-MM-dd");
			// hql += " and (jihuoDate<='"
			// + Util.getDateTime()
			// + "' or jihuoDate like '%"
			// + date
			// + "%' or jihuoDate is null) "
			// +
			// "and (procardstyle in ('总成','自制','组合') or (needProcess ='yes' and procardstyle='外购')) "
			// +
			// "and status not in ('入库','完成') and jihuoStatua='激活' order by jihuoDate";
			hql += " and procardstyle in ('总成') and status not in ('入库','完成') and jihuoDate is not null and jihuoDate<>'' order by jihuoDate";
		} else {
			// 排序
			// if (pageStatus != null && pageStatus.equals("noCard")){
			hql += " order by id";
			// }

			if (pageNo > 0) {
				hql += " desc";
			}
		}
		List list = totalDao.findAllByPage(hql, pageNo, pageSize);
		// if (list != null) {
		// for (int i = 0, len = list.size(); i < len; i++) {
		// Procard nowProcard = (Procard) list.get(i);
		// // 查询业务件号
		// String ywmarkid = (String) totalDao.getObjectByCondition(
		// "select ywMarkId from Procard where id=?", nowProcard
		// .getRootId());
		// nowProcard.setYwMarkId(ywmarkid);
		// // 查询总成件号
		// String rootMarkid = (String) totalDao.getObjectByCondition(
		// "select markId from Procard where id=?", nowProcard
		// .getRootId());
		// nowProcard.setRootMarkId(rootMarkid);
		// }
		// }
		Float sum = 0f;
		for (Object obj : list) {
			Procard procard1 = (Procard) obj;
			sum += procard1.getFilnalCount();
		}
		int count = totalDao.getCount(hql);
		Object[] o = { list, count, sum, pageSize };
		return o;
	}

	/***
	 * 根据首层父类id查询流水卡片(组装树形结构)
	 * 
	 * @param procardTemplate
	 * @return
	 */
	@Override
	public List findProcardByRootId(int rootId, String status) {
		if ((Object) rootId != null && rootId > 0) {
			String hql = "from Procard where rootId=?";
			if ("gxjd".equals(status)) {
				hql += " and id in ( SELECT procard.id FROM ProcessInfor  where  (dataStatus is null or dataStatus <>'删除') and  procard.id  IN ( SELECT id FROM  Procard  where  rootId = "
						+ rootId
						+ " ) )  and (sbStatus is null or sbStatus <> '删除' )  ";
			} else if ("wllb".equals(status)) {
				hql = " from Procard where id in (select fatherId FROM Procard where rootId = ? AND procardStyle = '外购') and (sbStatus is null or sbStatus <> '删除' ) order by belongLayer desc";
			}

			List<Procard> procardList = totalDao.query(hql, rootId);
			if ("plan".equals(status)) {
				return procardList;
			}
			Integer maxBelongLayer = (Integer) totalDao
					.getObjectByCondition(
							"select belongLayer from Procard where rootId=? order by belongLayer desc",
							rootId);
			List<Procard> pdList = new ArrayList<Procard>();
			for (Procard procard : procardList) {
				Procard p = new Procard();
				p.setId(procard.getId());
				p.setBelongLayer(procard.getBelongLayer());
				p.setMarkId(procard.getMarkId());
				p.setProName(procard.getProName());
				p.setJihuoStatua(procard.getJihuoStatua());
				p.setSelfCard(procard.getSelfCard());
				p.setStatus(procard.getStatus());
				p.setFilnalCount(procard.getFilnalCount());
				p.setProcardStyle(procard.getProcardStyle());
				p.setNeedProcess(procard.getNeedProcess());
				p.setWwblCount(procard.getWwblCount());
				String belongLayerstr = "";
				Integer belongLayer = procard.getBelongLayer();
				for (int i = 1; i < maxBelongLayer; i++) {
					if (i == belongLayer) {
						belongLayerstr += "<td><font color='#0000FF'>"
								+ belongLayer + "</td>";
					} else {
						belongLayerstr += "<td></td>";
					}
				}
				p.setLingliaoDetail(belongLayerstr);
				pdList.add(p);
			}
			return pdList;
		}
		return null;
	}

	/***
	 * 查询流水卡片(页面显示流水卡片详细使用)
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public Object[] findCardForShow(int id) {
		if ((Object) id != null && id > 0) {
			Procard pc = (Procard) totalDao.getObjectById(Procard.class, id);
			if (pc != null) {
				// 下层流水卡片模板
				Set<Procard> pcSet = pc.getProcardSet();
				List<Procard> pclist = new ArrayList<Procard>();
				pclist.addAll(pcSet);
				// 对应工序信息
				Set<ProcessInfor> pceSet = pc.getProcessInforSet();
				List<ProcessInfor> pcelist = new ArrayList<ProcessInfor>();
				pcelist.addAll(pceSet);
				return new Object[] { pc, pclist, pcelist };
			}
		}
		return null;
	}

	/***
	 * 通过流水卡id查询对应工艺卡片
	 * 
	 * @param cardId
	 * @return
	 */
	@Override
	public Object[] findProcardByRunCard(Integer cardId, String pageStatus) {
		if (cardId != null && cardId > 0) {
			Procard procard = (Procard) totalDao.getObjectById(Procard.class,
					cardId);
			if (procard != null) {
				// 获取设变信息
				boolean hadsbmsg = false;
				if (procard.getSbId() != null && procard.getSbId() > 0) {
					ProcardTemplateBanBen ptbb = (ProcardTemplateBanBen) totalDao
							.getObjectByCondition(
									"from ProcardTemplateBanBen where procardTemplateBanBenApply.id=? and markId=?",
									procard.getSbId(), procard.getMarkId());
					if (ptbb != null) {
						hadsbmsg = true;
						procard.setSbmsg(ptbb.getRemark());
					}
				}
				if (!hadsbmsg) {
					String productStyle = null;
					if (procard.getProcardTemplateId() != null) {
						productStyle = (String) totalDao
								.getObjectByCondition(
										"select productStyle from ProcardTemplate where id=?",
										procard.getProcardTemplateId());
					}
					if (productStyle == null) {
						productStyle = procard.getProcardStyle();
						if (productStyle == null || productStyle.length() == 0) {
							productStyle = (String) totalDao
									.getObjectByCondition(
											"select productStyle from Procard where id=?",
											procard.getRootId());
						}
					}
					Integer banci = procard.getBanci();
					if (banci == null) {
						banci = 0;
					}
					ProcardTemplateBanBen ptbb = null;
					if (banci > 1) {
						banci--;
						ptbb = (ProcardTemplateBanBen) totalDao
								.getObjectByCondition(
										"from ProcardTemplateBanBen where banci=? and productStyle=? and  procardTemplateBanBenApply.processStatus in('关联并通知生产','生产后续','上传佐证','关闭') and markId=? order by id desc",
										banci, productStyle, procard
												.getMarkId());
					} else if (banci == 1) {
						ptbb = (ProcardTemplateBanBen) totalDao
								.getObjectByCondition(
										"from ProcardTemplateBanBen where (banci is null or banci=0) and productStyle=? and  procardTemplateBanBenApply.processStatus in('关联并通知生产','生产后续','上传佐证','关闭') and markId=? order by id desc",
										productStyle, procard.getMarkId());
					}
					if (ptbb != null) {
						hadsbmsg = true;
						procard.setSbmsg(ptbb.getRemark());
					}
				}

				// 如果是领取工序查看,判断是否为最小批次
				// if (pageStatus == null || !"history".equals(pageStatus)
				// && !"out".equals(pageStatus)) {
				// if ("已发料".equals(procard.getStatus())) {
				// String hql2 =
				// "from Procard where markId=? and status='已发料' and oldProcardId=null and"
				// + " procardStyle=? and rootId in "
				// +
				// "(select id from Procard where status not in('完成','入库') and markId in "
				// +
				// "(select markId from Procard where rootId=?)) order by selfCard ";
				// Procard minProcard = (Procard) totalDao
				// .getObjectByCondition(hql2,
				// procard.getMarkId(), procard
				// .getProcardStyle(), procard
				// .getRootId());
				// if (minProcard != null
				// && !procard.getId().equals(minProcard.getId())) {
				// return new Object[] {
				// null,
				// null,
				// null,
				// "请先领取该件号的最小批次,更换卡号为"
				// + minProcard.getCardNum()
				// + "的生产周转卡!" };
				// }
				// }
				// }
				if (procard.getHascount() == null) {
					procard.setYlNumber(0f);
				} else {
					if (procard.getKlNumber() == null
							|| procard.getKlNumber() >= procard
									.getFilnalCount()) {
						procard.setYlNumber(Float.parseFloat(String.format(
								"%.4f", procard.getFilnalCount()))
								- Float.parseFloat(String.format("%.4f",
										procard.getHascount())));
					} else {
						procard.setYlNumber(Float.parseFloat(String.format(
								"%.4f", procard.getKlNumber()))
								- Float.parseFloat(String.format("%.4f",
										procard.getHascount())));
					}
				}
				// 下层流水卡片
				Set<Procard> pcSet = procard.getProcardSet();
				List<Procard> pclist = new ArrayList<Procard>();
				if (pcSet != null && pcSet.size() > 0) {
					for (Procard son : pcSet) {
						if (son.getSbStatus() == null
								|| !son.getSbStatus().equals("删除")) {
							if (son.getHascount() == null) {
								son.setYlNumber(0f);
							} else {
								if (son.getKlNumber() == null
										|| son.getKlNumber() >= son
												.getFilnalCount()) {
									son.setYlNumber(son.getFilnalCount()
											- son.getHascount());
								} else {
									son.setYlNumber(son.getKlNumber()
											- son.getHascount());
								}
							}
							if ("外购".equals(son.getProcardStyle())) {
								String kgsql = "";
								if (son.getKgliao() != null
										&& son.getKgliao().length() > 0) {
									kgsql += " and kgliao ='" + son.getKgliao()
											+ "'";
								}
								// goodsClassSql =
								// " and ((goodsClass in ('外购件库','中间库') "
								// + kgsql + " ) or goodsClass = '备货库')";
								String goodsClassSql = " and goodsClass in ('外购件库') "
										+ kgsql;
								String banben_hql = "";
								if (son.getBanBenNumber() != null
										&& son.getBanBenNumber().length() > 0) {
									banben_hql = " and banBenNumber='"
											+ son.getBanBenNumber() + "'";
								}

								// 库存量(件号+版本+供料属性+库别)
								String hqlGoods = "";
								hqlGoods = "select sum(goodsCurQuantity) from Goods where goodsMarkId=? "
										+ goodsClassSql
										+ " and goodsCurQuantity>0 "
										+ banben_hql
										+ " and (fcStatus is null or fcStatus='可用')";
								Float kcCount = (Float) totalDao
										.getObjectByCondition(hqlGoods, son
												.getMarkId());
								if (kcCount == null || kcCount < 0) {
									kcCount = 0f;
								}
								son.setKcNumber(kcCount);// 库存
							} else {
								// 半成品入库量
								String hqlGoodsStore = "select sum(goodsStoreCount) from GoodsStore where goodsStoreMarkId=? "
										+ "and goodsStoreLot=? and goodsStoreWarehouse in ('半成品库') and status='入库'";
								Float gskcCount = (Float) totalDao
										.getObjectByCondition(hqlGoodsStore,
												son.getMarkId(), son
														.getSelfCard());
								if (gskcCount == null || gskcCount < 0) {
									gskcCount = 0f;
								}
								// 半成品出库量
								String hqlSell = "select sum(sellCount) from Sell where sellMarkId=?"
										+ " and sellLot=? and sellWarehouse in ('半成品库')";
								Float sellkcCount = (Float) totalDao
										.getObjectByCondition(hqlSell, son
												.getMarkId(), son.getSelfCard());
								if (sellkcCount == null || sellkcCount < 0) {
									sellkcCount = 0f;
								}
								// 半成品库存量
								String hqlGoods = "select sum(goodsCurQuantity) from Goods where goodsMarkId=?"
										+ " and goodsLotId=? and goodsClass in ('半成品库')";
								Float goodskcCount = (Float) totalDao
										.getObjectByCondition(hqlGoods, son
												.getMarkId(), son.getSelfCard());
								if (goodskcCount == null || goodskcCount < 0) {
									goodskcCount = 0f;
								}

								son.setZzNumber(gskcCount);// 入库
								son.setZtNumber(sellkcCount);// 出库
								son.setKcNumber(goodskcCount);// 库存
							}
							pclist.add(son);
						}
					}
				}
				// 对应工序信息
				Set<ProcessInfor> pceSet = procard.getProcessInforSet();
				List<ProcessInfor> pcelist = new ArrayList<ProcessInfor>();
				// 根据当前登录人查询对应的提交数量小于领取数量的工序领取记录，没有领取记录的工序以null填充
				Users user = Util.getLoginUser();
				List<ProcessInforReceiveLog> pgList = new ArrayList<ProcessInforReceiveLog>();
				if (user != null && pceSet != null && pceSet.size() > 0) {
					for (ProcessInfor process : pceSet) {
						if (process.getDataStatus() != null
								&& process.getDataStatus().equals("删除")) {
							continue;
						}
						// 查询关联外购件
						List<String> xcmarkIdList = totalDao
								.query(
										"select distinct(wgprocardMardkId) from ProcessAndWgProcardTem where procardMarkId=? and processName=?",
										procard.getMarkId(), process
												.getProcessName());
						StringBuffer xcmarkIdsb = new StringBuffer();
						if (xcmarkIdList == null || xcmarkIdList.size() == 0) {
						} else {
							for (String xcmarkId : xcmarkIdList) {
								if (xcmarkIdsb.length() == 0) {
									xcmarkIdsb.append(xcmarkId);
								} else {
									xcmarkIdsb.append("；" + xcmarkId);
								}
							}
						}
						process.setGlMarkId(xcmarkIdsb.toString());
						pcelist.add(process);
						List<ProcardReProduct> prplist = totalDao.query(
								"from ProcardReProduct where processId=?",
								process.getId());
						if (prplist != null && prplist.size() > 0) {
							List<ProcessInfor> fxProcessList = new ArrayList<ProcessInfor>();
							for (ProcardReProduct prp : prplist) {
								ProcessInfor fxprocess = (ProcessInfor) totalDao
										.getObjectByCondition(
												"from ProcessInfor where reProductId=? and (dataStatus is null or dataStatus <>'删除')",
												prp.getId());
								if (fxprocess == null) {
									continue;
								}
								fxprocess.setProcard(procard);
								ProcessInforReceiveLog fxpg = null;
								if ("初始".equals(fxprocess.getStatus())) {
									fxpg = new ProcessInforReceiveLog();
									fxpg.setGxstatus("初始");
									fxpg
											.setFk_processInforId(fxprocess
													.getId());
								} else if (!"完成".equals(process.getStatus())) {
									String hql_pg = " from ProcessInforReceiveLog where usercodes like '%"
											+ user.getCode()
											+ "%' and fk_processInforId = '"
											+ fxprocess.getId()
											+ "'"
											+ " and  status='领取' ";
									fxpg = (ProcessInforReceiveLog) totalDao
											.getObjectByCondition(hql_pg);
									if (fxpg != null) {
										if (user.getId().equals(
												fxpg.getUserId())) {
											fxprocess.setShowTz("yes");
										}
										fxpg.setGxstatus("已领");
									} else {
										fxpg = new ProcessInforReceiveLog();
										fxpg.setGxstatus("待领");
									}
								}
								fxprocess.setPg(fxpg);
								fxProcessList.add(fxprocess);
							}
							process.setFxProcessList(fxProcessList);
						}
						ProcessInforReceiveLog pg = null;
						if ("初始".equals(process.getStatus())) {
							pg = new ProcessInforReceiveLog();
							pg.setGxstatus("初始");
							pg.setFk_processInforId(process.getId());
						} else if (!"完成".equals(process.getStatus())) {
							String hql_pg = " from ProcessInforReceiveLog where usercodes like '%"
									+ user.getCode()
									+ "%' and fk_processInforId = '"
									+ process.getId()
									+ "'"
									+ " and  status='领取' ";
							pg = (ProcessInforReceiveLog) totalDao
									.getObjectByCondition(hql_pg);
							if (pg != null) {
								if (user.getId().equals(process.getUserId())) {
									process.setShowTz("yes");
								}
								pg.setGxstatus("已领");
							} else {
								pg = new ProcessInforReceiveLog();
								pg.setGxstatus("待领");
							}
						}
						process.setPg(pg);
						pgList.add(pg);
					}

				}

				// 查询业务件号
				// String ywmarkid = (String) totalDao.getObjectByCondition(
				// "select ywMarkId from Procard where id=?", procard
				// .getRootId());
				// procard.setYwMarkId(ywmarkid);

				// 查询采购订单
				String hql_cgPlan = " FROM WaigouPlan where mopId in (SELECT A.id FROM ManualOrderPlan A JOIN  A.modSet B   where  B.procardId =?) or id in (select wgOrderId from ProcardWGCenter where procardId=?)";
				// String hql_cgPlan =
				// "from WaigouPlan where id in (select wgOrderId from ProcardWGCenter where procardId=?)";
				List wgPlanList = totalDao.query(hql_cgPlan, procard.getId(),
						procard.getId());
				if (wgPlanList != null && wgPlanList.size() > 0) {
					for (int i = 0; i < wgPlanList.size(); i++) {
						WaigouPlan waigouPlan = (WaigouPlan) wgPlanList.get(i);
						List<ManualOrderPlanDetail> pwgcList = totalDao
								.query(
										"from ManualOrderPlanDetail where manualPlan.id=?",
										waigouPlan.getMopId());
						if (pwgcList != null && pwgcList.size() > 0) {
							StringBuffer pcDeatil = new StringBuffer();
							for (ManualOrderPlanDetail pwgc : pwgcList) {
								if (pwgc.getProcardId() == null)
									continue;
								String selfCard = (String) totalDao
										.getObjectByCondition(
												"select selfCard from Procard where id=?",
												pwgc.getProcardId());
								if (selfCard != null) {
									if (pcDeatil.length() == 0) {
										pcDeatil.append(selfCard + ":"
												+ pwgc.getCgnumber());
									} else {
										pcDeatil.append(";" + selfCard + ":"
												+ pwgc.getCgnumber());
									}
								}
							}
							waigouPlan.setPcDetail(pcDeatil.toString());

						}
						// 获取物料位置
						List<WlWeizhiDt> wlList = totalDao.query(
								"from WlWeizhiDt where waigouPlanId = ?",
								waigouPlan.getId());
						String str_WlWeizhiDt = "";
						for (WlWeizhiDt wld : wlList) {
							str_WlWeizhiDt += wld.getAddDate() + ":"
									+ wld.getDetail();
						}
						waigouPlan.setWlWeizhiDt(str_WlWeizhiDt);// 用于显示(不存储)
					}
				}
				if (procard.getProcardStyle().equals("外购")) {
					String kgsql = "";
					if (procard.getKgliao() != null
							&& procard.getKgliao().length() > 0) {
						kgsql += " and kgliao ='" + procard.getKgliao() + "'";
					}
					// goodsClassSql =
					// " and ((goodsClass in ('外购件库','中间库') "
					// + kgsql + " ) or goodsClass = '备货库')";
					String goodsClassSql = " and goodsClass in ('外购件库') "
							+ kgsql;
					String banben_hql = "";
					String banben_hql2 = "";
					if (procard.getBanBenNumber() != null
							&& procard.getBanBenNumber().length() > 0) {
						banben_hql = " and banBenNumber='"
								+ procard.getBanBenNumber() + "'";
						banben_hql2 = " and banben='"
								+ procard.getBanBenNumber() + "'";
					}
					String specification_sql = "";
					// if (procard.getSpecification() != null
					// && procard.getSpecification().length() > 0) {
					// specification_sql = " and specification = '"
					// + procard.getSpecification() + "'";
					// }

					// 库存量(件号+版本+供料属性+库别)
					String hqlGoods = "";
					hqlGoods = "select sum(goodsCurQuantity) from Goods where goodsMarkId=? "
							+ goodsClassSql
							+ " and goodsCurQuantity>0 "
							+ banben_hql
							+ " and (fcStatus is null or fcStatus='可用')";
					Float kcCount = (Float) totalDao.getObjectByCondition(
							hqlGoods, procard.getMarkId());
					if (kcCount == null || kcCount < 0) {
						kcCount = 0f;
					}

					/****************** 占用量=生产占用量+导入占用量 ******************************/
					// 系统占用量(含损耗)(已计算过采购量(1、有库存 2、采购中)，未领料)
					String zyCountSql = "select sum(hascount) from Procard where markId=? and kgliao=? "
							+ banben_hql
							+ " and jihuoStatua='激活' and (status='已发卡' or (oldStatus='已发卡' and status='设变锁定')) and procardStyle='外购' and (lingliaostatus='是' or lingliaostatus is null ) "
							+ " and (sbStatus<>'删除' or sbStatus is null ) ";
					Double zyCountD = (Double) totalDao.getObjectByConditionforDouble(
							zyCountSql, procard.getMarkId(), procard
									.getKgliao());
					if (zyCountD == null || zyCountD < 0) {
						zyCountD = 0d;
					}
					Float zyCount = zyCountD.floatValue();

					// // 导入占用量(系统切换时导入占用量)
					// String hqlGoods_zy =
					// "select sum(goodsCurQuantity) from Goods where goodsMarkId=?"
					// + banben_hql
					// +
					// " and goodsClass in ('占用库') and kgliao=? and goodsCurQuantity>0 and (fcStatus is null or fcStatus='可用')";
					// Float kcCount_zy = (Float) totalDao.getObjectByCondition(
					// hqlGoods_zy, procard.getMarkId(), procard
					// .getKgliao());
					// if (kcCount_zy == null || kcCount_zy < 0) {
					// kcCount_zy = 0f;
					// }
					// zyCount += kcCount_zy;
					// if (zyCount < 0) {
					// zyCount = 0F;
					// }
					/****************** 结束 占用量=生产占用量+导入占用量 结束 ******************************/
					/****************** 在途量=采购在途量+导入在途量 ******************************/
					// 系统在途量(已生成采购计划，未到货)
					// String hql_zc =
					// "select sum(cgNumber-dhNumber) from  Procard where markId=? and productStyle=? "
					// + banben_hql
					// +
					// " and kgliao=? and jihuoStatua='激活' and status='已发卡' and procardStyle='外购'"
					// +
					// " and cgNumber >0 and dhNumber is not null and (sbStatus is null or sbStatus!='删除')";
					// Float ztCount = (Float) totalDao.getObjectByCondition(
					// hql_zc, procard.getMarkId(), procard
					// .getProductStyle(), procard.getKgliao());

					// 系统在途量(已生成物料需求信息，未到货)
					String hql_zc0 = "select sum(number-ifnull(rukuNum,0)) from ManualOrderPlan where markId = ?  "
							+ banben_hql2
							+ " and kgliao=? and (number>rukuNum or rukuNum is null) and (status<>'取消' or status is null) "
							+ specification_sql;
					Double ztCountd = (Double) totalDao.getObjectByCondition(
							hql_zc0, procard.getMarkId(), procard.getKgliao());
					if (ztCountd == null) {
						ztCountd = 0D;
					}
					Float ztCount = ztCountd.floatValue();

					procard.setZzNumber(zyCount);// 占用
					procard.setZtNumber(ztCount.floatValue());// 在途
					procard.setKcNumber(kcCount);// 库存

					Float qjnumber = zyCount - (kcCount + ztCount.floatValue());
					if (qjnumber < 0) {
						qjnumber = 0F;
					}
					procard.setQjCount(qjnumber);

					// 外委出去数量
					Float wwCount2 = (Float) totalDao
							.getObjectByCondition(
									"select sum(applyCount) from ProcessInforWWProcard where procardId=? and applyDtailId in(select id from ProcessInforWWApplyDetail where wwType='工序外委' and (dataStatus is null or dataStatus  not in('删除','取消')) and processInforWWApply.status !='打回')",
									procard.getId());
					if (wwCount2 == null) {
						wwCount2 = 0f;
					}
					// 外委出去剩余未被领取数量
					Float wwhascount = (Float) totalDao
							.getObjectByCondition(
									"select sum(hascount) from ProcessInforWWProcard where procardId=? and applyDtailId in(select id from ProcessInforWWApplyDetail where wwType='工序外委' and (dataStatus is null or dataStatus  not in('删除','取消')) and processInforWWApply.status !='打回')",
									procard.getId());
					if (wwhascount == null) {
						wwhascount = 0f;
					}
					if (procard.getWwblCount() == null) {
						procard.setWwblCount(0f);
					}
					procard.setWwCount(wwCount2 + procard.getWwblCount());
					if (procard.getWwblreceiveCount() == null) {
						procard.setWwblreceiveCount(0f);
					}
					procard.setWwhascount(wwhascount
							+ (procard.getWwblCount() - procard
									.getWwblreceiveCount()));

					// 查询外购件的委外占用量
					String hql_wwzy = "from ProcessInforWWProcard where procardId=? and (status is null or status not in ('删除','取消'))";
					ProcessInforWWProcard piww = (ProcessInforWWProcard) totalDao
							.getObjectByCondition(hql_wwzy, procard.getId());
					if (piww != null) {
						WaigouPlan waigouPlan = null;
						if (piww.getApplyDtailId() != null) {
							waigouPlan = (WaigouPlan) totalDao
									.getObjectByCondition(
											"from  WaigouPlan where wwSource='手动外委' and id in (select wgOrderId from ProcardWGCenter where wwxlId=? and procardId=?)",
											piww.getApplyDtailId(), procard
													.getProcard().getId());
						} else {
							waigouPlan = (WaigouPlan) totalDao
									.getObjectByCondition(
											"from  WaigouPlan where wwSource='BOM外委' and id in (select wgOrderId from ProcardWGCenter where wwxlId=? and procardId=?)",
											piww.getWwxlId(), procard
													.getProcard().getId());
						}
						if (waigouPlan == null) {
							if (waigouPlan == null) {
								waigouPlan = new WaigouPlan();
								waigouPlan.setType("外委");
								waigouPlan.setWwType("外委未下单");
								waigouPlan.setNumber(piww.getApplyCount());
								waigouPlan.setSyNumber(piww.getApplyCount());
								wgPlanList.add(waigouPlan);
							}
						} else {
							try {
								Integer processno = Util.getSplitNumber(
										waigouPlan.getProcessNOs(), ";", "max");
								Float wxckCount = (Float) totalDao
										.getObjectByCondition(
												"select sum(ckCount) from ProcardProductRelation where procardId=? and ckCount is not null and goodsId "
														+ "in(select goodsId from  Goods where goodsMarkId=? and goodsClass='外协库' and processNo=?)",
												procard.getId(), procard
														.getMarkId(), processno);
								waigouPlan.setWxckCount(wxckCount);
							} catch (Exception e) {
								// TODO: handle exception
							}
						}
					}
				} else {
					// 显示关联件号
					for (int i = 0; i < wgPlanList.size(); i++) {
						WaigouPlan waigouPlan = (WaigouPlan) wgPlanList.get(i);
						List<ProcessInforWWProcard> pwList = null;
						if (waigouPlan.getWwSource().equals("手动外委")) {
							pwList = totalDao
									.query(
											"from ProcessInforWWProcard where applyDtailId in(select wwxlId from ProcardWGCenter where wgOrderId=? and procardId=?) "
													+ "and (status is null or status not in ('删除','取消'))",
											waigouPlan.getId(), procard.getId());
						} else {
							pwList = totalDao
									.query(
											"from ProcessInforWWProcard where wwxlId in(select wwxlId from ProcardWGCenter where wgOrderId=? and procardId=?) "
													+ "and (status is null or status not in ('删除','取消'))",
											waigouPlan.getId(), procard.getId());
						}
						String markIds = "";
						for (ProcessInforWWProcard processInforWWProcard : pwList) {
							markIds += processInforWWProcard.getMarkId()
									+ " : "
									+ processInforWWProcard.getApplyCount()
									+ "<br/>";
						}
						waigouPlan.setRemark(markIds);
						List<ProcardWGCenter> pwgcList = totalDao.query(
								"from ProcardWGCenter where wgOrderId=?",
								waigouPlan.getId());
						if (pwgcList != null && pwgcList.size() > 0) {
							StringBuffer pcDeatil = new StringBuffer();
							for (ProcardWGCenter pwgc : pwgcList) {
								String selfCard = (String) totalDao
										.getObjectByCondition(
												"select selfCard from Procard where id=?",
												pwgc.getProcardId());
								if (selfCard != null) {
									if (pcDeatil.length() == 0) {
										pcDeatil.append(selfCard + ":"
												+ pwgc.getProcardCount());
									} else {
										pcDeatil.append(";" + selfCard + ":"
												+ pwgc.getProcardCount());
									}
								}
							}
							waigouPlan.setPcDetail(pcDeatil.toString());
						}
						try {
							Integer processno = Util.getSplitNumber(waigouPlan
									.getProcessNOs(), ";", "max");
							Float wxckCount = (Float) totalDao
									.getObjectByCondition(
											"select sum(ckCount) from ProcardProductRelation where procardId=? and ckCount is not null and goodsId "
													+ "in(select goodsId from  Goods where goodsMarkId=? and goodsClass='外协库' and processNo=?)",
											procard.getId(), procard
													.getMarkId(), processno);
							waigouPlan.setWxckCount(wxckCount);
						} catch (Exception e) {
							// TODO: handle exception
							e.printStackTrace();
						}

					}

					// 查询申请中外购件的委外占用量
					String hql_wwzy = "from  ProcessInforWWApplyDetail where procardId=? and (dataStatus is null or dataStatus not in('删除','取消'))";
					ProcessInforWWApplyDetail piww = (ProcessInforWWApplyDetail) totalDao
							.getObjectByCondition(hql_wwzy, procard.getId());
					if (piww != null) {
						String hql_wgPlan = "from  WaigouPlan where wwDetailId=?";
						WaigouPlan waigouPlan = (WaigouPlan) totalDao
								.getObjectByCondition(hql_wgPlan, piww.getId());
						if (waigouPlan == null) {
							waigouPlan = (WaigouPlan) totalDao
									.getObjectByCondition(
											"from  WaigouPlan where wwSource='手动外委' and wwDetailId in (select wgOrderId from ProcardWGCenter where wwxlId=?)",
											piww.getId());
							if (waigouPlan == null) {
								waigouPlan = new WaigouPlan();
								waigouPlan.setType("外委");
								waigouPlan
										.setWwType(piww.getWwType() + "外委申请中");
								waigouPlan.setRemark(piww.getWwMarkId());// 关联外购件
								waigouPlan.setNumber(piww.getApplyCount());
								waigouPlan.setSyNumber(piww.getApplyCount());
								waigouPlan.setProcessNames(piww
										.getProcessNames());
								List<String> markIdList = totalDao
										.query(
												"select markId from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
												piww.getId());
								StringBuffer sb = new StringBuffer();
								if (markIdList != null && markIdList.size() > 0) {
									for (String markId : markIdList) {
										if (sb.length() == 0) {
											sb.append(markId);
										} else {
											sb.append("," + markId);
										}
									}
								}
								waigouPlan.setRemark(sb.toString());
								// 获取物料位置
								// List<WlWeizhiDt> wlList = totalDao.query(
								// "from WlWeizhiDt where procardId = ?",
								// procard.getId());
								// String str_WlWeizhiDt = "";
								// for (WlWeizhiDt wld : wlList) {
								// str_WlWeizhiDt += wld.getAddDate() + ":"
								// + wld.getDetail();
								// }
								// procard.setWlWeizhiDt(str_WlWeizhiDt);//
								// 用于显示(不存储)
								wgPlanList.add(waigouPlan);
							}

						}
					}
				}

				// ----------------------工装-------------------------------------

				// --------------------------------------------------------------
				if (procard.getOldProcardId() != null) {
					Procard oldProcard = (Procard) totalDao.get(Procard.class,
							procard.getOldProcardId());
					procard.setOldSelfCard(oldProcard.getSelfCard());
				}
				return new Object[] { procard, pclist, pcelist, wgPlanList,
						pgList };
			}
		}
		return null;
	}

	/***
	 * 根据id查询工序(判断如何领取工序)
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public Object[] findProcess(Integer id) {
		if (id != null && id > 0) {
			ProcessInfor process = (ProcessInfor) totalDao.getObjectById(
					ProcessInfor.class, id);
			if (process != null) {
				/********
				 * 判断工位设备是否可用
				 */
				ProcessInforReceiveLog pg1 = (ProcessInforReceiveLog) totalDao
						.getObjectByCondition(
								" from ProcessInforReceiveLog where  "
										+ " shebeiNo = ?  and status = '领取' "
										+ "and shebeiNo not in "
										+ "(SELECT no FROM  Machine where islsxgw = '是' and no=?)  ",
								process.getShebeiNo(), process.getShebeiNo());
				if (pg1 != null) {
					process.setMsg("<b><font color='red'>" + pg1.getUsernames()
							+ "正在" + process.getGongwei() + "操作"
							+ process.getShebeiNo()
							+ "，请更换工位设备后，再领取。谢谢!</font></b>");
				}

				List list = new ArrayList();
				ProcessInfor topInfor = null;
				if (process.getReProductId() == null) {// 不是返修
					String hql = "from ProcessInfor c where c.procard.id=? and processNO<? and productStyle='自制' and (dataStatus is null or dataStatus <>'删除') order by processNO desc";
					topInfor = (ProcessInfor) totalDao.getObjectByCondition(
							hql, process.getProcard().getId(), process
									.getProcessNO());
				}
				// 判断该工序在某个工位之前是否有做过首件;
				int count = totalDao
						.getCount(
								" from ProcessInforReceiveLog where  fk_processInforId = ? and gongwei = ? ",
								process.getId(), process.getGongwei());
				Float ylNumber = 0f;
				List<ProcessInforReceiveLog> listpg = totalDao
						.query(
								" from ProcessInforReceiveLog where  fk_processInforId = ? and (istuliao is null or istuliao <> '是')",
								process.getId());
				if (listpg != null && listpg.size() > 0) {
					for (ProcessInforReceiveLog p : listpg) {
						if ("领取".equals(p.getStatus())) {
							ylNumber += p.getReceiveNumber();
						} else if ("提交".equals(p.getStatus())) {
							if (p.getBreakCount() == null) {
								p.setBreakCount(0F);
							}
							if (p.getReceiveNumber().equals(
									p.getSubmitNumber() + p.getBreakCount())) {
								ylNumber += p.getReceiveNumber();
							} else if (p.getReceiveNumber() > p
									.getSubmitNumber()
									+ p.getBreakCount()) {
								ylNumber += p.getSubmitNumber()
										+ p.getBreakCount();
							}
						}
					}
				}
				if (ylNumber != null && ylNumber > 0) {
					process.setTotalCount(process.getTotalCount() - ylNumber);
				}
				if (count == 0 && process.getZjStatus() != null
						&& process.getZjStatus().equals("yes")) {
					// process.setZjStatus("yes");
					// process.setHadsj("no");
					// process.setApplyCount(0);
				}
				Float fxdeleteCount = 0f;
				Float allsubCount = 0F;
				if (topInfor != null) {
					// 查看上道工序是否下挂返修工序
					ProcessInfor fxProcess = (ProcessInfor) totalDao
							.getObjectByCondition(
									"from ProcessInfor where (dataStatus is null or dataStatus <>'删除') and reProductId in(select id from ProcardReProduct where processId=?)",
									topInfor.getId());
					if (fxProcess != null) {
						fxdeleteCount += fxProcess.getTotalCount()
								- fxProcess.getSubmmitCount();
					}
					// 判断上一道工序是否完成
					if (!topInfor.getStatus().equals("完成")) {
						// 并行工序根据已领数量设定下一工序可领数量
						if (process.getProcessStatus() != null
								&& process.getProcessStatus().equals("yes")) {// 自身的并行状态决定与上层的并行关系
							allsubCount = topInfor.getApplyCount()
									- topInfor.getBreakCount();
						} else {
							// 不并行，根据提交数量设定
							allsubCount = topInfor.getSubmmitCount();
						}
						if (topInfor.getSubmmitCount() > 0F
								&& allsubCount > process.getSubmmitCount()) {
							if (process.getZjStatus() != null
									&& process.getZjStatus().equals("yes")
									&& (process.getHadsj() == null || process
											.getHadsj().equals("no"))) {
								if (allsubCount > 1) {
									allsubCount = 1f;
								}
							}
							if (allsubCount > fxdeleteCount) {
								allsubCount -= fxdeleteCount;
							} else {
								fxdeleteCount = 0f;
							}
							if (process.getSubmmitCount() > allsubCount) {
								process.setTotalCount(0f);
							} else {
								process.setTotalCount((float) Math
										.floor(allsubCount
												- process.getSubmmitCount()));

							}
							list.add(process);
						} else {
							if (process.getProcessStatus() == null
									|| !process.getProcessStatus()
											.equals("yes")) {
								return new Object[] { null,
										"上一道工序尚未提交,请先提交上一道工序!谢谢!", false };
							} else {
								allsubCount -= process.getSubmmitCount();
								if (allsubCount > fxdeleteCount) {
									allsubCount -= fxdeleteCount;
								} else {
									fxdeleteCount = 0f;
								}
								process.setTotalCount((float) Math
										.floor(allsubCount));
								list.add(process);
							}
						}
					} else {
						if (process.getZjStatus() != null
								&& process.getZjStatus().equals("yes")
								&& (process.getHadsj() == null || process
										.getHadsj().equals("no"))) {
							allsubCount = 1f;
							process.setTotalCount((float) Math
									.floor(allsubCount));
						}
						allsubCount = process.getTotalCount();
						if (allsubCount > fxdeleteCount) {
							allsubCount -= fxdeleteCount;
						} else {
							fxdeleteCount = 0f;
						}
						list.add(process);
					}
				} else {
					if (process.getZjStatus() != null
							&& process.getZjStatus().equals("yes")
							&& (process.getHadsj() == null || process
									.getHadsj().equals("no"))) {
						allsubCount = 1f;
						process.setTotalCount((float) Math.floor(allsubCount));
					}
					process.setTotalCount((float) Math.floor(process
							.getTotalCount()));
					allsubCount = process.getTotalCount();
					if (allsubCount > fxdeleteCount) {
						allsubCount -= fxdeleteCount;
					} else {
						fxdeleteCount = 0f;
					}
					list.add(process);
				}

				if (process.getReProductId() == null
						&& "yes".equals(process.getProcessStatus())) {
					// 查看是否有返修有则不继续
					Float fxCount = (Float) totalDao
							.getObjectByCondition(
									"select count(*) from ProcardReProduct where processId=?",
									process.getId());
					if (fxCount == null || fxCount == 0) {
						/************ 开始查询下层并行的工序 ***************/
						String hql_nextbing = "from ProcessInfor c where c.procard.id=? and processNO>? and (dataStatus is null or dataStatus <>'删除') and status<>'完成' order by processNO";
						List<ProcessInfor> next_processInfor = totalDao.query(
								hql_nextbing, process.getProcard().getId(),
								process.getProcessNO());
						for (ProcessInfor processInfor : next_processInfor) {
							if ("自制".equals(processInfor.getProductStyle())
									&& processInfor.getProcessStatus().equals(
											"yes")
									&& !processInfor.getStatus().equals("初始")
									&& !processInfor.getStatus().equals("物料确认")) {
								Float ylNumber1 = 0f;
								List<ProcessInforReceiveLog> listpg1 = totalDao
										.query(
												" from ProcessInforReceiveLog where  fk_processInforId = ? ",
												processInfor.getId());
								if (listpg1 != null && listpg1.size() > 0) {
									for (ProcessInforReceiveLog p : listpg1) {
										if ("领取".equals(p.getStatus())) {
											ylNumber1 += p.getReceiveNumber();
										} else if ("提交".equals(p.getStatus())) {
											if (p
													.getReceiveNumber()
													.equals(
															p.getSubmitNumber()
																	+ p
																			.getBreakCount())) {
												ylNumber1 += p
														.getReceiveNumber();
											} else if (p.getReceiveNumber() > p
													.getSubmitNumber()
													+ p.getBreakCount()) {
												ylNumber1 += p
														.getSubmitNumber()
														+ p.getBreakCount();
											}
										}
									}
								}
								if (ylNumber1 != null && ylNumber1 > 0) {
									if (processInfor.getTotalCount()
											- ylNumber1 <= 0) {
										continue;
									}
									processInfor.setTotalCount(processInfor
											.getTotalCount()
											- ylNumber1);
								}
								if (allsubCount > 0) {
									if (processInfor.getZjStatus() != null
											&& processInfor.getZjStatus()
													.equals("yes")
											&& (processInfor.getHadsj() == null || processInfor
													.getHadsj().equals("no"))) {
										if (allsubCount > 1) {
											allsubCount = 1f;
										}
									}
									if (processInfor.getTotalCount() > allsubCount) {
										processInfor.setTotalCount((float) Math
												.floor(allsubCount));
										// processInfor
										// .setTotalCount((float) Math
										// .floor(allsubCount
										// - processInfor
										// .getSubmmitCount()));
									}

								}
								if (processInfor.getGongwei() != null
										&& processInfor.getGongwei().length() > 0) {
									ProcessInforReceiveLog pg2 = (ProcessInforReceiveLog) totalDao
											.getObjectByCondition(
													" from ProcessInforReceiveLog where  "
															+ " shebeiNo = ?  and status = '领取' "
															+ "and shebeiNo not in "
															+ "(SELECT no FROM  Machine where islsxgw = '是' and no=?)  ",
													processInfor.getShebeiNo(),
													processInfor.getShebeiNo());
									if (pg2 != null) {
										processInfor
												.setMsg("<b><font color='red'>"
														+ pg2.getUsernames()
														+ "正在"
														+ processInfor
																.getGongwei()
														+ "操作"
														+ processInfor
																.getShebeiNo()
														+ "，请更换工位设备后，再领取。谢谢!</font></b>");
									}
									list.add(processInfor);
								}
							} else {
								break;
							}
						}
					}
				}
				//
				// // 判断是否并行
				// if (process.getProcessStatus().equals("yes")
				// && process.getParallelId() != null) {
				// String hql2 =
				// "from ProcessInfor c where c.procard.id=? and parallelId=?  and productStyle='自制' and totalCount!=applyCount and status <>'初始' order by processNO";
				// List list2 = totalDao.query(hql2, process.getProcard()
				// .getId(), process.getParallelId());
				// if (list2 != null && list2.size() > 0) {
				// return new Object[] { list2, "可以领取", true };
				// } else {
				// return new Object[] { list, "可以领取", true };
				// }
				// }
				// 开始领取
				return new Object[] { list, "可以领取", true };
			}
		}
		return null;
	}

	/***
	 * 根据产品查询工序信息
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public List findProcessByProcard(Integer id) {
		if (id != null && id > 0) {
			return totalDao.query("from ProcessInfor where procard.id=?", id);
		}
		return null;
	}

	/***
	 * 领取工序
	 * 
	 * @param processIds
	 * @param processNumbers
	 * @param processCards
	 * @return
	 */
	@Override
	public String collorProcess(Integer[] processIds, Float[] processNumbers,
			List processCards) {

		String message = "";
		Procard p = null;
		for (int i = 0; i < processIds.length; i++) {
			// 先判断卡号是否为空
			String[] cards = (String[]) processCards.get(i);
			List<String> cards2 = new ArrayList<String>();
			StringBuffer cardsSb = new StringBuffer();
			StringBuffer cardssbfz = new StringBuffer();// 辅助人员卡号和奖金比例
			StringBuffer cardssbfzname = new StringBuffer();// 辅助人员姓名和奖金比例
			if (i == 0 && (cards == null || cards.length <= 0)) {
				message = "卡号不能为空,请刷员工卡!谢谢。";
				break;
			} else if (cards == null || cards.length <= 0
					|| cards[0].length() <= 0) {
				message = "领取成功";
				break;
			}
			ProcessInfor process = (ProcessInfor) totalDao.getObjectById(
					ProcessInfor.class, processIds[i]);
			boolean hasfz = false;
			for (int fz = 0; fz < cards.length; fz++) {
				String c = cards[fz];
				if (c != null && c.length() > 0) {// 判断某人是否这个技能;
					if (process.getReProductId() == null) {
						String hql_jn = " from ProcessGzstore P  join P.users U  where processName = ? and U.cardId = ?  ";
						int aa = totalDao.getCount(hql_jn, process
								.getProcessName(), c);
						if (aa == 0) {
							return "卡号为" + c + "的员工，没有绑定"
									+ process.getProcessName() + "技能";
						}
					}
					// 判断某人是否有未提交工序？
					String hql_log = " from ProcessInforReceiveLog where userCardId like '%"
							+ c
							+ "%' and  fk_processInforId = ? and status = '领取'";
					ProcessInforReceiveLog proLog = (ProcessInforReceiveLog) totalDao
							.getObjectByCondition(hql_log, process.getId());
					if (proLog != null) {
						return "卡号为" + c + "的员工," + "已领取过该工序，还未提交，请先提交后再领取。";
					}
				}
				if (fz < (cards.length - 1)) {
					String tag = cards[fz + 1];
					if (tag.equals(";")) {
						String name = (String) totalDao.getObjectByCondition(
								"select name from Users where cardId=?", c);
						if (cardssbfz.length() == 0) {
							cardssbfz.append(c + ":" + cards[fz + 2]);
							cardssbfzname.append(name + ":" + cards[fz + 2]);
						} else {
							cardssbfz.append("," + c + ":" + cards[fz + 2]);
							cardssbfzname.append("," + name + ":"
									+ cards[fz + 2]);
						}
						fz = fz + 2;
					} else {
						cards2.add(c);
						if (cardsSb.length() == 0) {
							cardsSb.append(c);
						} else {
							cardsSb.append("," + c);
						}
					}
				} else {
					cards2.add(c);
					if (cardsSb.length() == 0) {
						cardsSb.append(c);
					} else {
						cardsSb.append("," + c);
					}
				}
			}
			// System.out.println(cardsSb);
			// System.out.println(cardssbfz);
			if (p == null) {
				if (process.getReProductId() == null) {
					p = (Procard) totalDao
							.getObjectByCondition(
									"from Procard where id=(select procard.id from ProcessInfor where id=?)",
									processIds[i]);
				} else {
					p = (Procard) totalDao
							.getObjectByCondition(
									"from Procard where id =(select procardId from ProcardReProduct where id=?)",
									process.getReProductId());
				}
			}

			if (processNumbers.length < (i + 1) || processNumbers[i] == null
					|| processNumbers[i] <= 0) {
				return message = "第" + process.getProcessNO() + "工序领取数量必须大于0";
			}
			Float selectWwcount = process.getSelectWwCount() == null ? 0
					: process.getSelectWwCount();
			Float applyWwcount = process.getApplyWwCount() == null ? 0
					: process.getApplyWwCount();
			Float agreeWwcount = process.getAgreeWwCount() == null ? 0
					: process.getAgreeWwCount();
			Float klcount = p.getFilnalCount() - selectWwcount - applyWwcount
					- agreeWwcount;
			if (process.getTotalCount() < klcount) {
				klcount = process.getTotalCount();
			}
			if (klcount < (process.getApplyCount() + processNumbers[i] - agreeWwcount)) {
				return message = "第" + process.getProcessNO() + "工序领取不能超过可领数量（"
						+ (klcount - process.getApplyCount()) + "）";
			}
			// if(p==null){
			// p=(Procard)
			// totalDao.getObjectByCondition("from Procard where id=?",
			// process.getProcard().getId());
			// }
			if (p.getRootMarkId() == null) {
				String rootMarkId = (String) totalDao.getObjectByCondition(
						"select markId from Procard where id=?", p.getRootId());
				p.setRootMarkId(rootMarkId);
				totalDao.update(p);
			}
			if (process.getZjStatus() != null
					&& process.getZjStatus().equals("yes")) {
				// 检查首检样品的内容已经存在，并且已经打印
				String hqlLs = "from LogoStickers where markId=?  and lotId=? and processNO=? and (isGys is null or isGys='no') and gongwei = ?";
				LogoStickers ls = (LogoStickers) totalDao.getObjectByCondition(
						hqlLs, p.getMarkId(), p.getSelfCard(), process
								.getProcessNO().toString(), process
								.getGongwei());
				if (ls != null && ("NO".equals(ls.getIsPrint()))) {
					return process.getProcessNO()
							+ "工序首检尚未完成,请等待检验完成后再领取工序!谢谢!";
				}
			}

			// 获取上个批次的此工序的提交数量
			// Procard last = (Procard) totalDao
			// .getObjectByCondition(
			// " from Procard where productStyle=? and rootMarkId=? and markId=? and selfCard<? and rootId!=? and jihuoStatua='激活' and status not in('完成','待入库','入库','取消')",
			// p.getProductStyle(), p.getRootMarkId(), p
			// .getMarkId(), p.getSelfCard(), p
			// .getRootId());
			// if (last != null) {
			// ProcessInfor process2 = (ProcessInfor) totalDao
			// .getObjectByCondition(
			// "from ProcessInfor where processNO=?  and (dataStatus is null or dataStatus!='删除') and procard.id =? and status<>'完成'",
			// process.getProcessNO(), last.getId());
			// if (process2 != null
			// && !last.getFilnalCount().equals(
			// process2.getApplyCount())
			// && process2.getApplyCount() < (processNumbers[i] + process
			// .getApplyCount())) {
			// message = "第" + process.getProcessNO() + "工序领取数量不能大于上一批次("
			// + last.getSelfCard() + ")的领取数量("
			// + process2.getApplyCount() + p.getUnit() + ")";
			// break;
			// }
			// }
			if (process != null) {
				// 计算设备时间
				if (process.getOpshebeijiepai() == null
						|| process.getOpcaozuojiepai() == null) {

				}

				if (!process.getStatus().equals("完成")) {

					// 根据工序对应设备编号，查询对应的PMI设备
					String hql_pmi = "from PmiManagement where id in (select pmiManagements.id from Machine where workPosition=? and no=?)";
					PmiManagement pmiManagement = (PmiManagement) totalDao
							.getObjectByCondition(hql_pmi,
									process.getGongwei(), process.getShebeiNo());
					if (pmiManagement != null) {
						// // 每次领取前先重置PMI
						String openStatus = openJdqQ(pmiManagement
								.getPmi_serverIp(), Integer
								.parseInt(pmiManagement.getPmi_port()),
								pmiManagement.getMin_num(), 2,
								processNumbers[i], pmiManagement
										.getRated_Current());
						if ("操作失败!".equals(openStatus)) {
							message = "无法连接" + process.getProcessNO() + "工序("
									+ process.getProcessName() + ")的设备电源,请检查"
									+ process.getGongwei()
									+ "工位的PMI设备是否通电!PMI编号:"
									+ pmiManagement.getPmi_name() + ",谢谢!";
							AlertMessagesServerImpl.addAlertMessages("系统维护异常组",
									"PMI操作失败  --IP:"
											+ pmiManagement.getPmi_ip()
											+ "、端口:"
											+ pmiManagement.getPmi_port()
											+ "、操作方式:领取工序,重置PMI、工序信息:"
											+ process.getProcessNO()
											+ ",件号:"
											+ process.getProcard().getMarkId()
											+ ",批次:"
											+ process.getProcard()
													.getSelfCard(), "PMI操作失败",
									"2");
							break;
						}
					}

					// 工序总领取数量
					Float allApplyCount = processNumbers[i]
							+ process.getApplyCount();// 本工序总提交量

					/***
					 * 判断领取数量不能高于上一道工序的提交量
					 */
					ProcessInfor sdProcess = null;
					if (process.getReProductId() == null) {
						sdProcess = (ProcessInfor) totalDao
								.getObjectByCondition(
										" from ProcessInfor where processNO<? and (dataStatus is null or dataStatus!='删除') and procard.id=?  order by processNO desc",
										process.getProcessNO(), process
												.getProcard().getId());// 上道工序
					}
					if (sdProcess != null) {
						if (sdProcess.getProductStyle() != null
								&& sdProcess.getProductStyle().equals("外委")
								&& allApplyCount > sdProcess.getSubmmitCount()) {
							return "抱歉!第" + process.getProcessNO()
									+ "工序您的领取量不能大于上一道工序的总提交量!";
						} else if (allApplyCount > sdProcess.getSubmmitCount()) {
							if ("yes".equals(process.getProcessStatus())
									&& "yes".equals(sdProcess
											.getProcessStatus())) {
								if (allApplyCount > sdProcess.getApplyCount()) {
									return "抱歉!第" + process.getProcessNO()
											+ "工序您的领取量[" + allApplyCount
											+ "]不能大于上一道工序("
											+ sdProcess.getProcessNO() + ":"
											+ sdProcess.getProcessName()
											+ ")的总领取量:"
											+ sdProcess.getApplyCount();
								}
							} else {
								return "抱歉!第" + process.getProcessNO()
										+ "工序您的领取量不能大于上一道工序的总提交量!";
							}

						}
					}

					// 查询上一道非特殊工序
					ProcessInfor onProcessInfor = null;
					if (sdProcess != null) {// 有上道工序
						if (sdProcess.getIsSpecial() == null
								|| !sdProcess.getIsSpecial().equals("特殊")) {// 上道工序为普通工序
							onProcessInfor = sdProcess;
						} else {// 上道工序为特殊工序
							String hql3 = "from ProcessInfor where processNO<? and (dataStatus is null or dataStatus!='删除') and procard.id=? and (isSpecial is null or isSpecial !='特殊') order by processNO desc";
							onProcessInfor = (ProcessInfor) totalDao
									.getObjectByCondition(hql3, process
											.getProcessNO(), process
											.getProcard().getId());
						}
					}
					// 查询领取人是否是已领取工序，领取的工序是否是上道并行工序
					List<List<Integer>> allProcessIdList = new ArrayList<List<Integer>>();
					for (int j = 0; j < cards2.size(); j++) {
						List<Integer> processIdList = totalDao
								.query(
										"select id from ProcessInfor where status='已领'  and (dataStatus is null or dataStatus!='删除') and (isSpecial is null or isSpecial !='特殊') and userCardId=?",
										cards2.get(j));
						// 通过卡号去查找此人有无权限对此工序进行操作
						Integer id = null;
						if (process.getReProductId() == null) {
							id = (Integer) totalDao
									.getObjectByCondition(
											"select id from ProcessInfor where id=? and (dataStatus is null or dataStatus!='删除') and processName in(select pg.processName from ProcessGzstore pg join pg.users u where u.id in (select id from Users where cardId=? and onWork not in('离职','离职中','内退','病休')))"
													+ "and procard.id in (select procard.id from ProcessinforPeople where  userId in (select id from Users where cardId=? and onWork not in('离职','离职中','内退','病休')))",
											process.getId(), cards2.get(j),
											cards2.get(j));
						} else {
							id = (Integer) totalDao
									.getObjectByCondition(
											"select id from ProcessInfor where id=? "
													+ "and (dataStatus is null or dataStatus!='删除') and reProductId in(select id from ProcardReProduct where procardId in  (select procard.id from ProcessinforPeople where  userId in (select id from Users where cardId=? and onWork not in('离职','离职中','内退','病休')))) ",
											process.getId(), cards2.get(j));
						}
						if (id == null) {
							// return cards2.get(j) + "卡对"
							// + process.getProcessName() + "工序无操作权限!";
						}
						allProcessIdList.add(processIdList);
					}
					if (process.getIsSpecial() == null
							|| !process.getIsSpecial().equals("特殊")) {
						if (onProcessInfor != null) {
							if ("no".equals(process.getProcessStatus())) {// 此工序与上道工序关系非并行
								if (allProcessIdList.size() > 0) {
									for (int k = 0; k < allProcessIdList.size(); k++) {
										if (allProcessIdList.get(k).size() > 0) {
											return cards2.get(k)
													+ "卡有未提交工序，请先提交后再领取'"
													+ process.getProcessName()
													+ "'工序!";
										}
									}
								}
							} else {// 此工序与上道工序并行
								if (allProcessIdList.size() > 0) {
									int n = 0;
									String msg = "";
									for (int k = 0; k < allProcessIdList.size(); k++) {
										if (allProcessIdList.get(k).size() > 0) {
											if (!allProcessIdList.get(k)
													.contains(
															onProcessInfor
																	.getId())) {
												msg += cards2.get(k)
														+ "卡有未提交工序，请先提交再领取'"
														+ process
																.getProcessName()
														+ "'工序!";
											} else {
												n++;
											}
										} else {
											n++;
										}
									}
									if (n == 0) {
										return msg;
									}
								}
							}
						} else {// 无上道工序
							if (allProcessIdList.size() > 0) {
								for (int k = 0; k < allProcessIdList.size(); k++) {
									if (allProcessIdList.get(k).size() > 0) {
										return cards2.get(k)
												+ "卡有已领未提交工序，请先提交再领取"
												+ process.getProcessName()
												+ "工序!";
									}
								}
							}
						}
					}

					// -------------------------------设备-------------------------------------------------------------------
					// 检查设备是否正常
					// if (!"否".equals(process.getShebeistatus())) {
					String sbhql = "from Machine where  workPosition=? and no=?";
					Machine machine = (Machine) totalDao.getObjectByCondition(
							sbhql, process.getGongwei(), process.getShebeiNo());
					if (machine != null) {
						// if (!"正常".equals(machine.getStatus())) {
						// message = process.getProcessName()
						// + " 工序对应的设备已报修,请等待维修完成或更换工位!";
						// break;
						// }
						if ("故障".equals(machine.getStatus())
								|| "故障指派".equals(machine.getStatus())) {
							message = process.getProcessName()
									+ " 工序对应的设备已报修,请等待维修完成或更换工位!";
							break;
						}
						if (!"是".equals(machine.getIsManual())
								&& !"是".equals(machine.getIslsxgw())) {
							List<ProcessInfor> mpList = (List<ProcessInfor>) totalDao
									.query(
											"from ProcessInfor where productStyle='自制' and (dataStatus is null or dataStatus!='删除') and shebeiNo=? and status='已领' and id!=?",
											machine.getNo(), processIds[i]);
							if (mpList != null && mpList.size() > 0) {
								for (ProcessInfor mp : mpList) {
									if (!mp.getProcard().getId().equals(
											process.getProcard().getId())) {
										// 有问题（有人领取一半并且提交后状态还是已领，然后是正在使用这个提示）
										message = process.getProcessName()
												+ " 的设备正在使用中(使用者:"
												+ mp.getUsernames()
												+ "),请稍后领取!";
										break;
									} else {
										ProcessInforReceiveLog processlog = (ProcessInforReceiveLog) totalDao
												.getObjectByCondition(
														"from ProcessInforReceiveLog where fk_processInforId=? and status='领取'",
														mp.getId());
										if (processlog != null
												&& !processlog
														.getUserCardId()
														.equals(
																cardsSb
																		.toString())) {
											message = process.getProcessName()
													+ " 的设备正在使用中(使用者:"
													+ mp.getUsernames()
													+ "),请稍后领取!";
											break;
										}
										Integer max = mp.getProcessNO();
										Integer min = process.getProcessNO();
										if (process.getProcessNO() > mp
												.getProcessNO()) {
											max = process.getProcessNO();
											min = mp.getProcessNO();
										}
										ProcessInfor bbx = (ProcessInfor) totalDao
												.getObjectByCondition(
														"from ProcessInfor where (dataStatus is null or dataStatus!='删除') and processStatus='no' and processNO>=? and processNO<? and procard.id=?",
														min, max, mp
																.getProcard()
																.getId());
										if (bbx != null) {// 两工序之间存在不并行工序
											message = process.getProcessName()
													+ " 的设备正在使用中(使用者:"
													+ mp.getUsernames()
													+ "),请稍后领取!";
											break;
										}
									}
								}
							}
							if (message != null && message.length() > 0
									&& !message.equals("true")) {
								break;
							}
						}
						// 开始计算记录设备稼动率;每天8:00:00~18:00:00统计
						/************************* wxf *********************************************/
						IgiftSet igiftset = (IgiftSet) totalDao
								.getObjectByCondition(" from IgiftSet where type = '设备稼动率' ");
						if (igiftset == null) {
							igiftset = new IgiftSet();
							igiftset.setBeginTime("08:00:00");
							igiftset.setEndTime("18:00:00");
						}
						boolean bool = Util.betweenTime(Util.StringToDate(Util
								.getDateTime("yyyy-MM-dd")
								+ " " + igiftset.getBeginTime(), ""), Util
								.StringToDate(Util.getDateTime("yyyy-MM-dd")
										+ " " + igiftset.getEndTime(), ""),
								new Date());
						if (bool) {
							MachineDayYZSJ mdy = (MachineDayYZSJ) totalDao
									.getObjectByCondition(
											"from MachineDayYZSJ where machineNo=? and machineday=? order by id desc",
											machine.getNo(), Util
													.getDateTime("yyyy-MM-dd"));
							if (mdy == null) {
								mdy = new MachineDayYZSJ();
								mdy.setMachineNo(machine.getNo());
								mdy.setMachineday(Util
										.getDateTime("yyyy-mm-dd"));
								mdy
										.setMachineMonth(Util
												.getDateTime("yyyy-mm"));
								mdy.setMachine_id(machine.getId());
								mdyServer.add(mdy);
							}
						}
					} else {
						if (!"否".equals(process.getShebeistatus())) {
							message = process.getProcessName()
									+ " 的设备校验已启用,请您先完善设备信息!";
							break;
						}
					}
					// }

					// -----------------------工艺规范-------------------------------------------------------、
					/*** 判断工序对应工艺规范是否存在 ****/
					if (process.getReProductId() != null) {
						Float tzCount = (Float) totalDao
								.getObjectByCondition(
										"select count(*) from ProcardReProductFile where reProductId=?",
										process.getReProductId());
						if (tzCount == null || tzCount == 0) {
							message = process.getProcard().getMarkId() + "批次:"
									+ process.getProcard().getSelfCard() + "第"
									+ process.getProcessNO() + "工序"
									+ process.getProcessName()
									+ "无对应工艺规范信息,请通知工艺部门上传!";
							break;
						}
					} else if (!"否".equals(process.getGuifanstatus())) {
						Integer banci = process.getProcard().getBanci();// 版次
						String addSql = null;
						if (banci == null || banci == 0) {
							addSql = " and (banci is null  or banci =0)";
						} else {
							addSql = " and banci is not null and banci ="
									+ banci;
						}
						String addSql2 = null;
						if (process.getProcard().getProductStyle().equals("批产")) {
							addSql2 = " and (productStyle is null or productStyle !='试制') ";
						} else {
							addSql2 = " and glId = "
									+ process.getProcessTemplateId();
						}
						// 查询工艺规程
						List list = totalDao.query(
								"from ProcessTemplateFile where markId=? and processNO=? "// and processName=? "
										+ addSql2 + addSql, process
										.getProcard().getMarkId(), process
										.getProcessNO()//, process.getProcessName()
										);
						if (list == null || list.size() == 0) {
//							Procard rootProcard = (Procard) totalDao
//									.getObjectById(Procard.class, process
//											.getProcard().getRootId());
//							Float tqcount = (Float) totalDao
//									.getObjectByCondition(
//											"select count(*) from ProcardTemplatePrivilege where markId=? "
//													+ "or markId =?",
//											rootProcard.getMarkId(),
//											rootProcard.getYwMarkId());
//							// if(true){
//							if (tqcount != null && tqcount > 0) {
//								list = totalDao
//										.query(
//												"from ProcessTemplateFile where glId in(select id from ProcessTemplate where  (dataStatus is null or dataStatus!='删除') and procardTemplate.markId=? and procardTemplate.rootId=? )"
//														+ addSql, process
//														.getProcard()
//														.getMarkId(),
//												rootProcard
//														.getProcardTemplateId());
//								if (list == null || list.size() == 0) {
//									message = process.getProcard().getMarkId()
//											+ "批次:"
//											+ process.getProcard()
//													.getSelfCard() + "第"
//											+ process.getProcessNO() + "工序"
//											+ process.getProcessName()
//											+ "无对应工艺规范信息,请通知工艺部门上传!";
//									break;
//								}
//							} else {
//							}
							message = process.getProcard().getMarkId()
							+ "批次:"
							+ process.getProcard().getSelfCard()
							+ "第" + process.getProcessNO() + "工序"
							+ process.getProcessName()
							+ "无对应工艺规范信息,请通知工艺部门上传!";
							break;
						}
						// boolean gongyiBool = false;
						// String hql_gongyi1 =
						// "select id from GongyiGuicheng where jianNumb=?";
						// Integer gongyigcId = (Integer) totalDao
						// .getObjectByCondition(hql_gongyi1, process
						// .getProcard().getMarkId());
						// if (gongyigcId != null) {
						// // 查找工序
						// String hql_gongyi2 =
						// "select id from ProcessData where gongyiGuichengId = ? and gongxuNo=?";
						// Integer processDataId = (Integer) totalDao
						// .getObjectByCondition(hql_gongyi2,
						// gongyigcId, process.getProcessNO());
						// if (processDataId != null) {
						// String hql_gongyi3 =
						// "select url from GongyiGuichengAffix where gongyiGuichengId=? and processDataId=?"
						// + " and affixType='tupian' and weizhi='gxsmlq'";
						// String fileName = (String) totalDao
						// .getObjectByCondition(hql_gongyi3,
						// gongyigcId, processDataId);
						// if (fileName != null && fileName.length() > 0) {
						// gongyiBool = true;
						// }
						// }
						// }
						// if (gongyiBool == false) {
						// message = process.getProcessName()
						// + " 工序无对应工艺规范信息,请通知工艺部门上传!";
						// break;
						// }
					}
					/*** 判断工序对应工艺规范是否存在结束 ****/

					// --------------------------------------量具------------------------------------------------
					if (!"否".equals(process.getLiangjustatus())) {
						if (process.getMeasuring_no() != null) {
							String measuring_no = "'"
									+ process.getMeasuring_no().replaceAll(
											"[;,]+", "','") + "'";
							// 根据本工序绑定所有量具本厂编号，查出这些编号所有校验未到期的信息。
							String hql = "from Measuring where  measuring_no in ("
									+ measuring_no
									+ ") and  DATEDIFF(nextcalibrationTime,CURRENT_DATE)>0 ";
							List<Measuring> newmList = totalDao.query(hql);
							if (newmList == null || newmList.size() == 0) {
								// 一个也没查到，说明该工序绑定的量具，校验期都已过。
								message = process.getProcessName() + "量具"
										+ process.getMeasuring_no() + "尚未校验!";
								break;
							} else {
								String str = process.getMeasuring_no();
								for (Measuring measuring : newmList) {
									str = str.replace(measuring
											.getMeasuring_no(), "");
								}
								str = str.replaceAll("[;,]+", "");
								if (str.length() > 0) {
									message = process.getProcessName() + "量具"
											+ str + "尚未校验!";
									break;
								}
								// for (int j = 0; j < processCards.size(); j++)
								// {
								// //查选是否有借领记录
								// String sbhql5 =
								// "from Borrow where number=? and cardNum  in '"+processCards.get(j)+"'";
								// Borrow br = (Borrow)
								// totalDao.getObjectByCondition( sbhql5,
								// newm.getMeasuring_no());
								// if (br==null) {
								// message=process.getProcessName()+" 请选去工具库领去量具！！！";
								// break;
								// }
								// }
								// long chashi = ((Util
								// .StringToDate(
								// newm.getCalibrationTime(),
								// "yyyy-MM-dd").getTime() - Util
								// .StringToDate(
								// Util.getDateTime("yyyy-MM-dd"),
								// "yyyy-MM-dd").getTime()) / 1000 / 60 / 60 /
								// 24);
								// int shijian = (int) chashi;
								// if (shijian < 0) {
								// message = process.getProcessName()
								// + " 该量具校验时间已过，请去校验!";
								// break;
								// }
							}
						}
					}

					// ------------------------------工装------------------------
					// 查询人员信息
					Users user = null;
					String hql = "from Users where cardId=?";
					String cardid = "";
					String code = "";
					String name = "";
					String usermes = "";
					for (int j = 0; j < cards2.size(); j++) {
						if (cards2.get(j) != null && cards2.get(j).length() > 0) {
							user = (Users) totalDao.getObjectByCondition(hql,
									cards2.get(j));
							if (user == null) {
								usermes += "不存在卡号为" + cards2.get(j)
										+ "的人员,请检查卡号";
							} else {
								// ------------------------------工装使用记录------------------------
								if ("是".equals(process.getGongzhuangstatus())) {
									GzstoreUseLog gzstoreUseLog = new GzstoreUseLog();
									gzstoreUseLog.setGzId(process
											.getGzstoreId());
									gzstoreUseLog.setGzNumber(process
											.getMatetag());
									gzstoreUseLog
											.setGzName(process.getNumber());
									gzstoreUseLog.setProcessId(process.getId());
									gzstoreUseLog.setMarkId(process
											.getProcard().getMarkId());
									gzstoreUseLog.setProcessNo(process
											.getProcessNO());
									gzstoreUseLog.setProcessName(process
											.getProcessName());
									gzstoreUseLog.setUserCode(process
											.getOperatorCode());
									gzstoreUseLog.setUserName(process
											.getOperatorName());
									gzstoreUseLog.setStratTime(Util
											.getDateTime());
									totalDao.save(gzstoreUseLog);
								}
								// --------------------------------------//-------------------------验证考勤--------------------------------------------------------
								if (!"否".equals(process.getKaoqingstatus())
										&& !"否".equals(user.getInternal())) {// 外部人员不需要考勤验证
									String cardId = user.getCardId();
									int card = Integer.parseInt(cardId);

									// String hql2 =
									// " from BrushCard where personId= (select id from Person where cardNo=? ) and brushDate=?";
									// BrushCard bc = (BrushCard) totalDao
									// .getObjectByCondition(hql2, card
									// + "", Util
									// .getDateTime("yyyy-MM-dd"));
									// if (bc == null) {
									// usermes += "员工     " + user.getName()
									// + "(" + user.getCode()
									// + "),无当日考勤记录,无法领取工序!";
									// break;
									// }
								}
								// --------------------------------------验证考勤 完毕
								if (j == cards.length - 1) {
									cardid += user.getCardId();
									code += user.getCode();
									name += user.getName();
								} else {
									cardid += user.getCardId() + ",";
									code += user.getCode() + ",";
									name += user.getName() + ",";
								}
							}
						}
					}
					// 移动余料位置
					List<Goods> ylList = totalDao
							.query(
									"from Goods where goodsCurQuantity>0 and id in(select goodsId from ProcardProductRelation where procardId=? and flagType='余料')",
									p.getId());
					if (ylList != null && ylList.size() > 0) {
						for (Goods yl : ylList) {
							yl.setGoodHouseName(process.getGongwei());
							yl.setGoodsPosition(process.getShebeiName());
							totalDao.update(yl);
						}
					}
					if (usermes != null && usermes.length() > 0) {
						message += process.getProcessNO() + "工序领取问题:" + usermes;
						break;
					}

					if (user != null && code != null && code.length() > 0) {
						if (processNumbers[i] <= (process.getTotalCount() - process
								.getApplyCount())) {
							process.setFirstApplyDate(Util.getDateTime());
							// -------------------------------LED推送开始-------------------------------------------------------------------
							// 通过工位查询对应的LED显示屏
							String sendMessge = ledSendManage(process,
									processNumbers[i], name, "");
							// if (sendMessge == null
							// || !"true".equals(sendMessge)) {
							// message = sendMessge;
							// // break;
							// }

							// -------------------------------LED推送结束-------------------------------------------------------------------

							// -------------------------------打开PMI-------------------------------------------------------------------
							// 打开设备电源
							try {
								if (pmiManagement != null) {
									if ("空闲".equals(pmiManagement.getStatus())) {

										String openStatus = "";
										// 传递生产件数
										if ("强控".equals(pmiManagement
												.getPmi_type())) {
											openStatus = openJdqQ(pmiManagement
													.getPmi_serverIp(), Integer
													.parseInt(pmiManagement
															.getPmi_port()),
													pmiManagement.getMin_num(),
													1, processNumbers[i],
													pmiManagement
															.getRated_Current());
										} else {
											openStatus = openJdqQ(pmiManagement
													.getPmi_serverIp(), Integer
													.parseInt(pmiManagement
															.getPmi_port()),
													pmiManagement.getMin_num(),
													1, 0, pmiManagement
															.getRated_Current());
										}
										if ("操作失败!".equals(openStatus)) {
											message = "无法打开"
													+ process.getProcessNO()
													+ "工序("
													+ process.getProcessName()
													+ ")的设备电源,请检查"
													+ process.getGongwei()
													+ "工位的PMI设备是否通电!PMI编号:"
													+ pmiManagement
															.getPmi_name()
													+ ",谢谢!";

											AlertMessagesServerImpl
													.addAlertMessages(
															"系统维护异常组",
															"PMI操作失败  --IP:"
																	+ pmiManagement
																			.getPmi_ip()
																	+ "、端口:"
																	+ pmiManagement
																			.getPmi_port()
																	+ "、操作方式:领取工序,打开PMI、工序信息:"
																	+ process
																			.getProcessNO()
																	+ ",件号:"
																	+ process
																			.getProcard()
																			.getMarkId()
																	+ ",批次:"
																	+ process
																			.getProcard()
																			.getSelfCard(),
															"PMI操作失败", "2");
											break;
										}
										process.setPmiType(pmiManagement
												.getPmi_type());// 记录pmi类型，进行后续跟进
										process.setPmiId(pmiManagement.getId());// 记录pmiID
										process.setPmiName(pmiManagement
												.getPmi_name());// pmi名称
										pmiManagement.setStatus("生产中");
										totalDao.update(pmiManagement);
									} else {
										message = "抱歉,"
												+ process.getProcessNO()
												+ "工序("
												+ process.getProcessName()
												+ ")的对应设备正在生产中,请先完成后再领取工序!谢谢!(PMI编号:"
												+ pmiManagement.getPmi_name()
												+ ";工位:" + process.getGongwei()
												+ "),";
										break;
									}
								} else {
									process.setPmiType("");// 清空pmi类型，进行后续跟进
									process.setPmiId(null);// 清空pmiID
									process.setPmiName("");// pmi名称
								}
							} catch (Exception e) {
								e.printStackTrace();
								AlertMessagesServerImpl.addAlertMessages(
										"系统维护异常组", "PMI操作失败  --IP:"
												+ pmiManagement.getPmi_ip()
												+ "、端口:"
												+ pmiManagement.getPmi_port()
												+ "、操作方式:领取工序,打开PMI、工序号:"
												+ process.getProcessNO()
												+ ",件号:"
												+ process.getProcard()
														.getMarkId()
												+ ",批次:"
												+ process.getProcard()
														.getSelfCard(),
										"PMI操作失败", "2");
							}
							// -------------------------------打开PMI结束-------------------------------------------------------------------
							// 处理领取工序
							process.setApplyCount(processNumbers[i]
									+ process.getApplyCount());// 已领数量
							process.setUserCardId(cardid);
							process.setUsercodes(code);
							process.setUsernames(name);
							process.setUserId(user.getId());
							process.setFzwork(cardssbfz.toString());
							process.setFzworkname(cardssbfzname.toString());
							process.setFirstApplyDate(Util.getDateTime());
							process.setSubmitDate("");
							process.setStatus("已领");

							// 更新工艺卡片状态为"领工序"
							p.setStatus("领工序");

							/***************** 领取记录信息处理 ********************/
							ProcessInforReceiveLog pirlog = new ProcessInforReceiveLog();
							pirlog.setUsercodes(code);
							pirlog.setUserCardId(cardid);
							pirlog.setUsernames(name);
							pirlog.setUserId(user.getId());
							pirlog.setFirstApplyDate(Util.getDateTime());
							pirlog.setReceiveNumber(processNumbers[i]);// 本次领取数量
							pirlog.setFzwork(cardssbfz.toString());
							pirlog.setFzworkname(cardssbfzname.toString());
							if (processNumbers[i] == 1) {
								String hql_count = " from ProcessInforReceiveLog where  fk_processInforId = ? and gongwei = ?";
								int count = totalDao.getCount(hql_count,
										process.getId(), process.getGongwei());
								if (count == 0) {
									pirlog.setSjStatus("yes");
									pirlog.setHadsj("no");
								}
							}
							pirlog.setStatus("领取");
							pirlog.setFk_processInforId(process.getId());
							pirlog.setGongwei(process.getGongwei());
							pirlog.setBarcode(UUID.randomUUID().toString());
							pirlog.setProcessjjMoney(process
									.getProcessjjMoney());// 工序计件单价
							pirlog.setProcesdianshu(process.getProcesdianshu());// 工序点数
							pirlog.setIstuliao("否");
							// totalDao.save(pirlog);
							totalDao.save(pirlog);
							// 更新产品所在工位信息
							if (p.getGongwei() == null) {
								String hql2 = "from ProcessInfor pi where pi.procard.id=? order by processNO ";
								ProcessInfor minPi = (ProcessInfor) totalDao
										.getObjectByCondition(hql2, process
												.getProcard().getId());
								if (minPi != null) {
									p.setGongwei(minPi.getGongwei());
									p.setShebeiName(minPi.getShebeiName());
									p.setShebeiNo(minPi.getShebeiNo());
								}
							}

							// 更新流水卡信息(有卡)
							if (p.getCardNum() != null) {
								String hql2 = "from RunningWaterCard where cardNum=?";
								RunningWaterCard rwc = (RunningWaterCard) totalDao
										.getObjectByCondition(hql2, process
												.getProcard().getCardNum());
								if (rwc != null) {
									rwc.setOwnUsername(process.getUsernames());// 更新目前持有人
									rwc.setCardStatus("领工序");
									message = "领取成功";
								}
							}
							totalDao.update(process);

							// if ("强控".equals(process.getPmiType())) {
							// // 开始调用进程。。。。
							// Thread thread2 = new Thread(
							// new Pmi_processinfor(process, pirlog,
							// totalDao), process.getId()
							// + "的进程");
							// thread2.start();
							// }
						} else {
							message = "领取数量不能大于总数量!";
							break;
						}
					} else {
						break;
					}
				}
			} else {
				message = "数据异常,工序不存在!";
				break;
			}
		}
		if (message.length() <= 0) {
			message = "领取成功";
		}
		return message;
	}

	/***
	 * LED 发送抽象
	 * 
	 * @param process
	 *            工序
	 * @param processNumbers
	 *            领取数量
	 * @param name
	 *            领取人员
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public String ledSendManage(ProcessInfor process, Float processNumbers,
			String name, String message) {
		String hql_Led = "from LED where stations =?";
		LED ledManagement = (LED) totalDao.getObjectByCondition(hql_Led,
				process.getGongwei());
		if (ledManagement != null) {
			// 本次信息推送内容
			float num = processNumbers + process.getApplyCount()
					- process.getSubmmitCount() - process.getBreakCount();
			int number = (int) num;// 数量取整
			String sendMessage = message;// 64*32
			String sendMessage2 = message;// 192*64
			String sendMessage3 = message;// 128*64
			// String[] sendMessages4 = { "", "" };// // // 4、192*64* 倒计时&连续上移
			// String[] sendMessages5 = { "", "", "", "" };// // 5、192*64
			// 倒计时&单条左移
			Procard procard = null;
			if (process.getReProductId() == null) {
				procard = process.getProcard();
			} else {
				procard = (Procard) totalDao
						.getObjectByCondition(
								"from Procard where id =(select procardId from ProcardReProduct where id=?)",
								process.getReProductId());
			}
			Integer proCardId = procard.getId();// proCardId
			Integer processNo = process.getProcessNO();// 工序号
			String needFinalDate = "";
			if (number > 0) {
				// 推送产品工序领取信息
				if (name == null || name.length() <= 0) {
					name = process.getUsernames();
				}
				if (name == null || name.length() <= 0) {
					name = "";
				}

				sendMessage += process.getGongwei() + "\n"
						+ procard.getMarkId() + "\n" + procard.getSelfCard()
						+ "\n工序号:" + processNo + "\n数量:" + (number)
						+ "\n工序名称:\n" + process.getProcessName() + "\n操作者:\n"
						+ name;
				sendMessage2 += "件 号:" + procard.getMarkId() + "\n批 次:"
						+ procard.getSelfCard() + "\n工序号:" + processNo + " 数量:"
						+ (number) + "\n" + process.getProcessName() + "\n操作者:"
						+ name;
				String hql_yw = "select ywMarkId from Procard where id=?";
				String ywMarkid = (String) totalDao.getObjectByCondition(
						hql_yw, procard.getRootId());
				if (ywMarkid == null) {
					ywMarkid = procard.getMarkId();
				}
				// 根据工位获取检验员
				Map<String, String> map = new HashMap<String, String>();
				String aBefore = "A-";
				for (int i = 1; i <= 76; i++) {
					if (i <= 7 || i == 26) {
						map.put(aBefore + "0" + i, "刘加林,李哲宇");
					} else if (i <= 9) {
						map.put(aBefore + "0" + i, "铙先富,尹雪华");
					} else if (i <= 65) {
						map.put(aBefore + i, "铙先富,尹雪华");
					} else {
						map.put(aBefore + i, "刘加翠,资金晓");
					}
				}
				String bBefore = "B-";
				for (int i = 1; i <= 80; i++) {
					if (i <= 9) {
						map.put(bBefore + "0" + i, "王平,彭水元");
					} else {
						map.put(bBefore + i, "王平,彭水元");
					}
				}
				String cBefore = "C-";
				for (int i = 1; i <= 19; i++) {
					if (i <= 2) {
						map.put(cBefore + "0" + i, "周海群,陈金华");
					} else if (i == 3) {
						map.put(cBefore + "0" + i, "陈金华");
					} else if (i <= 8 || i == 15) {
						map.put(cBefore + "0" + i, "廖付菊");
					} else if (i <= 9) {
						map.put(cBefore + i, "杨女英");
					} else if (i <= 12) {
						map.put(cBefore + i, "杨女英");
					} else if (i <= 14 || i == 19) {
						map.put(cBefore + i, "朱建发");
					} else if (i <= 18) {
						map.put(cBefore + i, "陈金华");
					}
				}
				// 检验员
				String jyy = "";
				if (process.getGongwei() != null
						&& process.getGongwei().length() > 0) {
					jyy = map.get(process.getGongwei());
				}
				sendMessage3 += "产品编码:" + ywMarkid + "\n图号:"
						+ procard.getMarkId() + "\n批次:" + procard.getSelfCard()
						+ "\n第" + processNo + "工序  " + process.getProcessName()
						+ "\n数量:" + (number) + "pcs" + "\n作业员:" + name
						+ "\n检验员:" + jyy + "\n首检:合格";

				// 穿戴规范信息
				sendMessage += " \n" + process.getGongwei() + "\n穿戴规范: "
						+ ledManagement.getDress();
				// 穿戴规范信息
				sendMessage2 += "\n穿戴规范: " + ledManagement.getDress();

				// 设备状态
				if (process.getShebeiNo() != null
						&& process.getShebeiNo().length() > 0) {
					String hql_machine = "from Machine where no=? and workPosition=?";
					List<Machine> list = totalDao.query(hql_machine, process
							.getShebeiNo(), process.getGongwei());
					if (list != null && list.size() > 0) {
						sendMessage += " \n" + process.getGongwei()
								+ "\n设备状态: ";
						sendMessage2 += "\n设备状态: ";
						sendMessage3 += "\n";
						for (Machine machine2 : list) {
							// sbStatus += machine2.getNo() + ":"
							// + machine2.getStatus();
							sendMessage += machine2.getNo() + ":"
									+ machine2.getStatus();
							sendMessage2 += machine2.getNo() + ":"
									+ machine2.getStatus();
							if (machine2.getMore() == null) {
								machine2.setMore("");
							}
							if (machine2.getJiadonglv() == null) {
								machine2.setJiadonglv(0f);
							}
							sendMessage3 += "设备编号:" + machine2.getNo()
									+ "\n设备状态:" + machine2.getStatus() + "\n"
									+ machine2.getMore() + "\n" + "稼动率:"
									+ machine2.getJiadonglv() + "%\n";
						}
					}
				}
				// 图纸位置信息
				// select mf.id from ModuleFunction mf join mf.users u where
				// u.id=?
				String hql_machine = "from Push where id in (select p.id from Push p join p.taSopGongweis t  where t.gongweihao=?)";
				List<Push> list = totalDao.query(hql_machine, process
						.getGongwei());
				if (list != null && list.size() > 0) {
					Push push = list.get(0);
					sendMessage3 += "您需要查看的图纸已经推送至" + push.getFlatStation()
							+ "工位的" + push.getFlatNum() + "号平板上,请您前往查看!";
				}

				// 穿戴规范信息
				sendMessage3 += "\n穿戴规范: " + ledManagement.getDress();
				/******** 倒计时 *********/
				if (process.getGzzhunbeijiepai() == null) {
					process.setGzzhunbeijiepai(1F);
				}
				if (process.getOpshebeijiepai() == null) {
					process.setOpshebeijiepai(1F);
				}
				if (process.getOpcaozuojiepai() == null) {
					process.setOpcaozuojiepai(1F);
				}
				if (process.getGzzhunbeicishu() == null) {
					process.setGzzhunbeicishu(1F);
				}
				Float needTime = number
						* (process.getOpshebeijiepai()
								+ process.getOpcaozuojiepai() + process
								.getGzzhunbeijiepai()
								* process.getGzzhunbeicishu());
				if (needTime == null) {
					needTime = 0F;
				}
				needFinalDate = Util.getCalendarModified(process
						.getFirstApplyDate(), 11, needTime.intValue());
				// sendMessages5[0] = needFinalDate + ";" + process.getGongwei()
				// + "  ";
				// sendMessages4[0] = needFinalDate + ";" + process.getGongwei()
				// + "  ";
				/******** 产品信息 *********/
				// sendMessages5[1] = "COLOR_GREEN;"
				// + process.getProcard().getMarkId() + " "
				// + process.getProcard().getSelfCard() + " 第" + processNo
				// + "工序 " + process.getProcessName() + "  数量:" + (number)
				// + " " + name;
				/******** 设备信息 *********/
				// if (sbStatus == null || sbStatus.length() <= 0)
				// sbStatus = "无设备";
				// sendMessages5[2] = "COLOR_GREEN;" + sbStatus;
				/******** 穿戴规范 *********/
				// sendMessages5[3] = "COLOR_GREEN;" + " " +
				// process.getGongwei()
				// + "穿戴规范:" + ledManagement.getDress();

				// new LedSendServer(ledManagement.getNumber(), sendMessages, 3,
				// ledManagement.getId(), ledManagement.getWidth()
				// .intValue(), ledManagement.getHigth()
				// .intValue(), 1).start();
				// return "true";
			}
			// 将本产品、工序的推送信息发送，用于累计多个工序
			LEDLog ledLog = new LEDLog();
			ledLog.setProcardId(proCardId);
			ledLog.setProcessNo(processNo);
			ledLog.setContext(sendMessage);
			ledLog.setContext2(sendMessage2);
			ledLog.setContext3(sendMessage3);
			ledLog.setProductStatus("生产");
			ledLog.setProcessInforId(process.getId());
			ledLog.setMinFinishTime(needFinalDate);
			ledLog.setGongwei(process.getGongwei());
			ledServer.addLEDLog(ledManagement.getId(), ledLog);
			return "true";
		}
		return "true";
	}

	/****
	 * 发送工序对应led推送统一调用接口
	 * 
	 * @param processInfroId
	 *            工序id
	 */
	@SuppressWarnings( { "unchecked" })
	@Override
	public void processToLedSend(Integer[] processInfroIds) {
		try {
			if (processInfroIds != null && processInfroIds.length > 0) {
				String ids = "";
				for (Integer processid : processInfroIds) {
					ids += processid + ",";
				}
				ids += "0";

				String hql = " select id from LED where sendStatus='待推送' and id in (select led.id from LEDLog where processInforId in ("
						+ ids + ") and (productStatus ='生产' or status='默认' ))";
				List list = totalDao.query(hql);
				if (list != null) {
					String hql1 = "select valueCode from CodeTranslation where type = 'sys' and keyCode='LEDSERVER' and valueName='LED'";
					String valueCode = (String) totalDao
							.getObjectByCondition(hql1);
					for (int i = 0; i < list.size(); i++) {
						new LedSendServer(Integer.parseInt(list.get(i)
								.toString()), valueCode).sendLedMs();
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void processToupdate(Integer[] processInfroIds) {
		try {
			if (processInfroIds != null && processInfroIds.length > 0) {
				// 更新节拍
				for (Integer processinforid : processInfroIds) {
					ProcessInfor oldProcess = (ProcessInfor) totalDao
							.getObjectById(ProcessInfor.class, processinforid);

					if (oldProcess.getProcessTemplateId() != null) {
						/*************** 更新模版节拍 ********************/
						ProcessTemplate processTemplate = (ProcessTemplate) totalDao
								.getObjectById(ProcessTemplate.class,
										oldProcess.getProcessTemplateId());
						if (processTemplate != null) {
							// 查询本工序模版对应的工序提交记录
							String prolog = "from ProcessInforReceiveLog  where fk_processInforId in "
									+ "(select id from ProcessInfor where processTemplateId=? and submitDate is not null) "
									+ "and allJiepai is not null";

							// String hql_allProcess =
							// "from ProcessInfor where processTemplateId=? and submitDate is not null";
							Integer processcount = totalDao.getCount(prolog,
									processTemplate.getId());

							prolog += " order by allJiepai";

							List getzws = new ArrayList();
							if (processcount % 2 == 0) {// 偶数 （1/2+1）
								getzws = totalDao.findAllByPage(prolog,
										(int) Math.ceil(processcount / 2 / 2),
										2, processTemplate.getId());
							} else {// 奇数
								getzws = totalDao.findAllByPage(prolog,
										(int) Math.ceil(processcount / 2), 1,
										processTemplate.getId());
							}

							Integer updateAllCount = processTemplate
									.getUpdateAllCount();
							if (updateAllCount == null) {
								updateAllCount = 1;// 默认一次
							}

							// 数据有效性验证
							if (processTemplate.getOpcaozuojiepai() == null) {
								processTemplate.setOpcaozuojiepai(1F);
							}
							if (processTemplate.getOpshebeijiepai() == null) {
								processTemplate.setOpshebeijiepai(1F);
							}
							if (processTemplate.getGzzhunbeijiepai() == null) {
								processTemplate.setGzzhunbeijiepai(1F);
							}
							if (processTemplate.getGzzhunbeicishu() == null) {
								processTemplate.setGzzhunbeicishu(1F);
							}

							Float allOpcaozuojiepai = 0F;
							for (int i = 0; i < getzws.size(); i++) {
								ProcessInforReceiveLog processInfor_zws = (ProcessInforReceiveLog) getzws
										.get(i);
								if (processInfor_zws.getAllJiepai() != null
										&& processInfor_zws.getSubmitNumber() > 0) {
									if (processInfor_zws.getAllSbJiepai() == null) {
										processInfor_zws.setAllSbJiepai(0.1F);
									}
									allOpcaozuojiepai += (processInfor_zws
											.getAllJiepai() - processTemplate
											.getGzzhunbeijiepai()
											* processTemplate
													.getGzzhunbeicishu())
											/ processInfor_zws
													.getSubmitNumber()
											- processInfor_zws.getAllSbJiepai()
											/ processInfor_zws
													.getSubmitNumber();
								}
							}

							/**** 求工序节拍的中位数 ****/
							Float nowOpcaozuojiepai = allOpcaozuojiepai
									/ getzws.size();

							// // 计算总提交的平均人工节拍
							// [(历史平均值*历史更新次数+本次单件节拍)/(历史更新次数+1)]
							// Float opcaozuojiepai = (processTemplate
							// .getOpcaozuojiepai()
							// * updateAllCount + nowOpcaozuojiepai)
							// / (updateAllCount + 1);
							// opcaozuojiepai = Util
							// .FomartFloat(opcaozuojiepai, 4);
							processTemplate
									.setOpcaozuojiepai(nowOpcaozuojiepai);

							/**** 计算 操作过程的操作设备节拍 *****/
							Float nowOpshebeijiepai = (processTemplate
									.getOpshebeijiepai() * updateAllCount)
									/ (updateAllCount + 1);
							nowOpshebeijiepai = Util.FomartFloat(
									nowOpshebeijiepai, 4);
							processTemplate
									.setOpshebeijiepai(nowOpshebeijiepai);
							/****
							 * 计算 准备过程的准备次数和准备节拍--------------------------------
							 * 暂时不处理
							 *****/

							Float allJiepai = processTemplate
									.getOpcaozuojiepai()
									+ processTemplate.getOpshebeijiepai()
									+ processTemplate.getGzzhunbeijiepai()
									* processTemplate.getGzzhunbeicishu();

							processTemplate
									.setUpdateAllCount(updateAllCount + 1);
							allJiepai = Util.FomartFloat(allJiepai, 4);
							processTemplate.setAllJiepai(allJiepai);
							totalDao.update(processTemplate);

						}

					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void processToShebei(Integer[] processInfroIds) {
		try {
			if (processInfroIds != null && processInfroIds.length > 0) {
				for (Integer processinforid : processInfroIds) {
					ProcessInfor oldProcess = (ProcessInfor) totalDao
							.getObjectById(ProcessInfor.class, processinforid);
					if (oldProcess != null) {
						/********************* wxf 设备点检表开始 ******************/
						ProcessInforReceiveLog proLog = (ProcessInforReceiveLog) totalDao
								.getObjectByCondition(
										" from ProcessInforReceiveLog where fk_processInforId = ? and status ='提交' order by id desc",
										oldProcess.getId());
						if (proLog != null) {
							MachineDayYZSJ mdy = (MachineDayYZSJ) totalDao
									.getObjectByCondition(
											"from MachineDayYZSJ where machineNo=? and machineday=? order by id desc",
											oldProcess.getShebeiNo(), Util
													.getDateTime("yyyy-MM-dd"));
							if (mdy != null && proLog.getAllDjJiepai() != null) {
								float sc = (proLog.getAllDjJiepai() / 3600);
								MachineDayYZSJServerImpl.update1(mdy, sc, null);
							}
						}
						/********************* 设备点检表结束 ******************/
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void processToBanChenPin(Integer[] processInfroIds) {
		try {
			if (processInfroIds != null && processInfroIds.length > 0) {
				for (Integer processinforid : processInfroIds) {
					ProcessInfor oldProcess = (ProcessInfor) totalDao
							.getObjectById(ProcessInfor.class, processinforid);
					if (oldProcess != null
							&& "是".equals(oldProcess.getNeedSave())) {
						ProcessInforReceiveLog proLog = (ProcessInforReceiveLog) totalDao
								.getObjectByCondition(
										" from ProcessInforReceiveLog where fk_processInforId = ? and status ='提交' order by sumitApplyDate desc",
										oldProcess.getId());
						if (proLog != null) {
							Procard procard = oldProcess.getProcard();
							Integer maxpno = (Integer) totalDao
									.getObjectByCondition(
											"select max(processNO) from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除')",
											procard.getId());
							if (oldProcess.getProcessNO().equals(maxpno)) {// 最大工序
								if (procard.getProcard() != null) {// 判断上层首工序是否需要外委
									ProcessInfor scFirstprocess = (ProcessInfor) totalDao
											.getObjectByCondition(
													" from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除') "
															+ "and processNO =(select min(processNO) from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除')))",
													procard.getProcard()
															.getId(), procard
															.getProcard()
															.getId());
									if (scFirstprocess.getProductStyle()
											.equals("外委")
											|| (scFirstprocess
													.getAgreeWwCount() != null && scFirstprocess
													.getAgreeWwCount() > 0)) {
										// 上层首工序外委
										return;
									}
								}
							}
							if (procard != null) {
								GoodsStore gs = new GoodsStore(null, "半成品库",
										"", "", procard.getMarkId(), procard
												.getBanBenNumber(), procard
												.getKgliao(), procard
												.getSelfCard(), procard
												.getProName(), procard
												.getSpecification(), procard
												.getWgType(),
										procard.getUnit(), proLog
												.getSubmitNumber(), "",
										"半成品转库", "半成品系统自动入库", null, null, null,
										null, null);
								gs.setApplyTime(Util.getDateTime());
								gs.setProcessNo(oldProcess.getProcessNO());// 工序号
								gs.setProcessName(oldProcess.getProcessName());// 工序名
								gs.setNeiorderId(procard.getOrderNumber());
								gs.setYwmarkId(procard.getYwMarkId());
								gs.setProcardId(procard.getId());
								gs.setStatus("待入库");
								totalDao.save(gs);
								if (procard.getZaizhiApplyZk() == null) {
									procard.setZaizhiApplyZk(proLog
											.getSubmitNumber());
								} else {
									procard.setZaizhiApplyZk(procard
											.getZaizhiApplyZk()
											+ proLog.getSubmitNumber());
								}
								totalDao.update(procard);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static String strAddOne(String bianhao) {
		Integer intHao = Integer.parseInt(bianhao.substring(14));
		intHao++;
		String strHao = intHao.toString();
		while (strHao.length() < 3)
			strHao = "0" + strHao;
		return strHao;
	}

	/***
	 * 查询工艺规范
	 * 
	 * @param markid
	 *            件号
	 * @param processNO
	 *            工序号
	 * @return
	 */
	@Override
	public List findGongyiGuifan(String markid, Integer processNO,
			Integer productStyle, Integer banci) {
		// String hql_gongyi1 =
		// "select id from GongyiGuicheng where jianNumb=?";
		// Integer gongyigcId = (Integer) totalDao.getObjectByCondition(
		// hql_gongyi1, markid);
		// if (gongyigcId != null) {
		// // 查找工序
		// String hql_gongyi2 =
		// "select id from ProcessData where gongyiGuichengId = ? and gongxuNo=?";
		// Integer processDataId = (Integer) totalDao.getObjectByCondition(
		// hql_gongyi2, gongyigcId, processNO);
		// if (processDataId != null) {
		// String hql_gongyi3 =
		// "select url from GongyiGuichengAffix where gongyiGuichengId=? and processDataId=?"
		// + " and affixType='tupian' and weizhi='gxsmlq'";
		// String fileName = (String) totalDao.getObjectByCondition(
		// hql_gongyi3, gongyigcId, processDataId);
		// if (fileName != null && fileName.length() > 0) {
		// return fileName;
		// }
		// }
		// }
		String sql = " and productStyle='试制'";
		if (productStyle == null || productStyle == 1) {
			sql = " and (productStyle is null or productStyle='' or  productStyle='批产')";
		}
		String sql2 = null;
		if (banci == null || banci == 0) {
			sql2 = " and (banci is null or banci =0)";
		} else {
			sql2 = " and banci =" + banci;
		}
		List<ProcessTemplateFile> list = totalDao.query(
				" from ProcessTemplateFile  where processNO=? and markId=? "
						+ sql + sql2, processNO, markid);
		List<String> list2 = new ArrayList<String>();
		// if (list != null && list.size() > 0) {
		// for (ProcessTemplateFile file : list) {
		// String url = gxtzPath + "/" + file.getMonth() + "/"
		// + file.getFileName();
		// list2.add(url);
		// }
		// }
		// if (list2.size() > 0) {
		// return list2;
		// }
		return list;
	}

	public ProcessInfor getObjectByIdProcessInfor(Integer id) {
		ProcessInfor oldProcess = (ProcessInfor) totalDao.getObjectById(
				ProcessInfor.class, id);
		return oldProcess;
	}

	public Gzstore getObjectByIdGzstore(Integer id) {
		Gzstore oldProcess = (Gzstore) totalDao
				.getObjectById(Gzstore.class, id);
		return oldProcess;
	}

	public void updateGzstore(Gzstore g) {
		totalDao.update(g);
	}

	/***
	 * 提交工序
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	public String updateProcess(ProcessInfor process, ProcessInfor oldProcess,
			String barcode, ProcessSaveLog processSaveLog, String[] markIds,
			Float[] breakscount, BreakSubmit breaksubmit) {
		if (process != null) {
			if (oldProcess != null) {
				boolean isShouJian = false;
				Procard procard = null;
				if (oldProcess.getReProductId() == null) {
					procard = (Procard) totalDao
							.getObjectByCondition(
									"from Procard where id =(select procard.id from ProcessInfor where id=?)",
									oldProcess.getId());
				} else {
					procard = (Procard) totalDao
							.getObjectByCondition(
									"from Procard where id =(select procardId from ProcardReProduct where id=?)",
									oldProcess.getReProductId());
				}
				// 如果是总成的最后一道工序，则判断是否有过巡检，没有巡检则不能提交；
				if (procard != null && "总成".equals(procard.getProcardStyle())
						&& process.getSubmmitCount() > 1
						&& procard.getProductStyle().equals("批产")) {
					ProcessInfor maxprocess = (ProcessInfor) totalDao
							.getObjectByCondition(
									" from ProcessInfor where (dataStatus is null or dataStatus!='删除') and procard.id=? order by processNO desc",
									procard.getId());
					if (maxprocess != null
							&& maxprocess.getId().equals(oldProcess.getId())) {
						String hql1 = "select valueCode from CodeTranslation where type = 'sys' and keyCode='提交巡检验证' and valueName='提交巡检验证'";
						String valueCode = (String) totalDao
								.getObjectByCondition(hql1);
						if (valueCode == null || !valueCode.equals("否")) {
							String hql_xj = "from OsRecord i where i.template.id in (select distinct(id) from OsTemplate t where t.partNumber=? ) and i.jcpc=?";
							Integer xjcount = totalDao.getCount(hql_xj, procard
									.getMarkId(), procard.getSelfCard());
							if (xjcount == 0) {
								// -测试屏蔽
								return "件号" + procard.getMarkId() + " 批次"
										+ procard.getSelfCard()
										+ "无巡检记录,无法提交工序";
							}
						}
					}
				}

				ProcessInforReceiveLog proLog = null;
				// 查询该工序的领取记录

				oldProcess = getObjectByIdProcessInfor(oldProcess.getId());
				if (barcode != null && barcode.length() > 0) {
					proLog = (ProcessInforReceiveLog) totalDao
							.getObjectByCondition(
									" from ProcessInforReceiveLog where barcode = ?",
									barcode);
				} else {
					String hql_proLog = "from ProcessInforReceiveLog where status='领取' and fk_processInforId=? ";
					proLog = (ProcessInforReceiveLog) totalDao
							.getObjectByCondition(hql_proLog, oldProcess
									.getId());
				}
				Float sumNumber = oldProcess.getApplyCount()
						- oldProcess.getSubmmitCount()
						- oldProcess.getBreakCount()
						- process.getSubmmitCount() - process.getBreakCount();
				if (sumNumber >= 0) {
					Float allSubmieNum = oldProcess.getSubmmitCount()
							+ process.getSubmmitCount()
							+ oldProcess.getBreakCount()
							+ process.getBreakCount();// 本工序总提交量
					/***
					 * 判断提交数量不能高于上一道工序的提交量
					 */
					if (oldProcess.getReProductId() == null) {
						// 查询上一道工序
						String hql3 = "from ProcessInfor where (dataStatus is null or dataStatus!='删除') and processNO<? and procard.id=? order by processNO desc";
						ProcessInfor onProcessInfor = (ProcessInfor) totalDao
								.getObjectByCondition(hql3, oldProcess
										.getProcessNO(), procard.getId());
						if (onProcessInfor != null) {
							if (allSubmieNum > onProcessInfor.getSubmmitCount()) {
								return "抱歉!您的提交量不能大于上一道工序的总提交量!";
							}
						}
					}
					/**
					 * 计算设备节拍
					 */
					// 计算设备时间
					if (oldProcess.getOpshebeijiepai() != null) {
						float alltime = (oldProcess.getOpshebeijiepai())
								* (process.getSubmmitCount());// (历史提交、损坏数量+当前提交、损坏数量)*设备节拍
						if (alltime > 0) {
							long time = (long) alltime;
							try {
								Date firstTime = null;
								// 如果是第一次提交，===----并是首检数据,从领取时间计算
								// if (oldProcess.getSubmmitCount() == 0
								// && process.getSubmmitCount() == 1) {
								firstTime = Util.StringToDate(oldProcess
										.getFirstApplyDate(),
										"yyyy-MM-dd HH:mm:ss");
								// } else {// 从第一次提交时间开始计算
								// // 分割第一次提交时间
								// String subDate = oldProcess.getSubmitDate();
								// int dirstIndex = subDate.indexOf(",");
								// if (dirstIndex > 0) {
								// subDate = subDate.substring(0,
								// dirstIndex);
								// }
								// firstTime = Util.StringToDate(subDate,
								// "yyyy-MM-dd HH:mm:ss");
								// }

								Date nowTime = Util.StringToDate(Util
										.getDateTime(), "yyyy-MM-dd HH:mm:ss");
								Long time2 = (nowTime.getTime() - firstTime
										.getTime()) / 1000;
								if (time2 < time) {
									// return "您比设备干的还快，请诚信提交! 倒计时:"
									// + (time - time2) / 60 + "分钟"
									// + (time - time2) % 60 + "秒";
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					} else {
						return "请先添加" + oldProcess.getProcessName()
								+ "的设备节拍或 操作人工节拍!谢谢!";
					}
					List<ProcessinforFuLiao> fuliaoList = process
							.getFuliaoList();
					if (fuliaoList != null
							&& fuliaoList.size() > 0
							&& (process.getSubmmitCount() + process
									.getBreakCount()) > 0) {
						ProcessTemplate processt = null;
						Set<ProcessFuLiaoTemplate> flptSet = null;
						if (procard.getProcardTemplateId() != null) {
							processt = (ProcessTemplate) totalDao
									.getObjectByCondition(
											"from ProcessTemplate where (dataStatus is null or dataStatus!='删除') and processNO =? and procardTemplate.id=?",
											oldProcess.getProcessNO(), procard
													.getProcardTemplateId());
							if (processt != null) {
								flptSet = processt.getProcessFuLiaoTemplate();
							}
						}
						Set<ProcessinforFuLiao> flSet = process
								.getProcessinforFuLiao();
						for (ProcessinforFuLiao fl : fuliaoList) {
							if (fl != null && fl.getName() != null
									&& fl.getName().length() > 0) {
								Float ckCount = fl.getOutCount();
								if (flSet == null) {
									flSet = new HashSet<ProcessinforFuLiao>();
									flSet.add(fl);
									fl.setProcessInfor(oldProcess);
									fl
											.setAddUser(Util.getLoginUser()
													.getName());
									fl.setAddTime(Util.getDateTime());
									totalDao.save(fl);
								} else {
									int i = 0;
									for (ProcessinforFuLiao fl2 : flSet) {
										if (fl2.getName().equals(fl.getName())) {
											i = 1;
											if (fl2.getOutCount() == null) {
												fl2.setOutCount(fl
														.getOutCount());
											} else {
												fl2.setOutCount(fl2
														.getOutCount()
														+ fl.getOutCount());
												ckCount = fl2.getOutCount()
														+ fl.getOutCount();
											}
											continue;
										}
									}
									if (i == 0) {
										flSet.add(fl);
										fl.setProcessInfor(oldProcess);
										fl.setAddUser(Util.getLoginUser()
												.getName());
										fl.setAddTime(Util.getDateTime());
										totalDao.save(fl);
									}
								}
								// 反馈模板
								if (processt != null) {
									processt.setIsNeedFuliao("yes");
									if (flptSet == null) {// 模板没有找到对应的数量
										flptSet = new HashSet<ProcessFuLiaoTemplate>();
										ProcessFuLiaoTemplate flpt = new ProcessFuLiaoTemplate();
										flpt.setQuanzhi1(1f);// 权值1代表工序
										flpt
												.setQuanzhi2(ckCount
														/ (process
																.getSubmmitCount()
																+ process
																		.getBreakCount()
																+ oldProcess
																		.getSubmmitCount() + oldProcess
																.getBreakCount()));// 权值2代表辅料
										flpt.setName(fl.getName());// 名称
										flpt.setType(fl.getType());// 类别
										flpt.setSpecification(fl
												.getSpecification());// 规格
										flpt.setUnit(fl.getUnit());// 单位
										flpt.setProcessTemplate(processt);
										flptSet.add(flpt);
										totalDao.save(flptSet);
									} else {
										boolean has = false;
										for (ProcessFuLiaoTemplate flpt : flptSet) {
											if (flpt.getName().equals(
													fl.getName())) {// 匹配到
												flpt
														.setQuanzhi2(ckCount
																/ (process
																		.getSubmmitCount()
																		+ process
																				.getBreakCount()
																		+ oldProcess
																				.getSubmmitCount() + oldProcess
																		.getBreakCount()));
												totalDao.update(flpt);
												has = true;

											}
										}
										if (!has) {// 没有匹配到
											ProcessFuLiaoTemplate flpt = new ProcessFuLiaoTemplate();
											flpt.setQuanzhi1(1f);// 权值1代表工序
											flpt
													.setQuanzhi2(ckCount
															/ (process
																	.getSubmmitCount()
																	+ process
																			.getBreakCount()
																	+ oldProcess
																			.getSubmmitCount() + oldProcess
																	.getBreakCount()));// 权值2代表辅料
											flpt.setName(fl.getName());// 名称
											flpt.setType(fl.getType());// 类别
											flpt.setSpecification(fl
													.getSpecification());// 规格
											flpt.setUnit(fl.getUnit());// 单位
											flpt.setProcessTemplate(processt);
											flptSet.add(flpt);
											totalDao.save(flpt);
										}

									}
									processt.setProcessFuLiaoTemplate(flptSet);
									totalDao.update(processt);
								}
							}
						}
						process.setProcessinforFuLiao(flSet);
						if (flSet != null && flSet.size() > 0) {
							process.setIsNeedFuliao("yes");
						}
					}
					/********************************************** 添加首检记录 **/
					String str = "";
					// if (proLog != null) {瞎搞,这代码把我的外委工序弄得总是缺斤少两
					// str = " and gongwei = '" + proLog.getGongwei() + "'";
					// oldProcess.setZjStatus(proLog.getSjStatus());
					// oldProcess.setHadsj(proLog.getHadsj());
					// proLog.setHadsj("yes");
					// }
					String newNumber = null;
					if (oldProcess.getZjStatus() != null
							&& oldProcess.getZjStatus().equals("yes")
							&& (oldProcess.getHadsj() == null || oldProcess
									.getHadsj().equals("no"))
							&& process.getSubmmitCount() == 1) {
						isShouJian = true;
						// 查询最近首检数据
						// String hqlLs =
						// "from LogoStickers where markId=? and processNO=?  and isPrint='YES' and billDate = "
						// +
						// "(select max(billDate) from LogoStickers where markId=? and processNO =?  and isPrint='YES')";
						// hqlLs += str;
						// LogoStickers ls = (LogoStickers) totalDao
						// .getObjectByCondition(hqlLs, procard
						// .getMarkId(), oldProcess.getProcessNO()
						// .toString(), procard.getMarkId(),
						// oldProcess.getProcessNO().toString());
						// 添加首检数据
						LogoStickers newLs = new LogoStickers();
						// if (ls != null) {
						// BeanUtils.copyProperties(ls, newLs);
						// } else {
						newLs.setProcardId(procard.getId());
						newLs.setStickStyle("首检样品");
						newLs.setMarkId(procard.getMarkId());
						newLs.setPartsName(procard.getProName());
						// }
						newLs.setCount(1F);
						newLs.setLotId(procard.getSelfCard());// 批次
						newLs.setGongwei(proLog.getGongwei());// 工位
						newLs.setMachineNo(proLog.getShebeiNo());// 设备编号
						newLs.setProcessName(oldProcess.getProcessName());
						newLs
								.setProcessNO(oldProcess.getProcessNO()
										.toString());// 工序号
						newLs.setProcessName(oldProcess.getProcessName());// 工序名称
						newLs.setOperator(proLog.getUsernames());// 操作者
						newLs.setCode(proLog.getUsercodes());// 操作者工号
						newLs.setExaminerCode(null);// 检验者工号
						newLs.setExaminerName(null);// 检验者姓名
						newLs.setBillDate(Util.getDateTime());// 添加时间
						newLs.setIsPrint("NO");// 是否打印
						// 材料信息
						if (procard.getProcardStyle().equals("外购件")) {
							newLs.setClMarkId(procard.getMarkId());
						} else {
							newLs.setClMarkId(procard.getTrademark());
						}
						newLs.setClSelfCard(procard.getLingliaoDetail());
						newLs.setWgType(procard.getWgType());
						// 计算编号
						String hqlLsnumber = "select max(number) from LogoStickers where stickStyle='"
								+ newLs.getStickStyle() + "'";
						String maxjynum = (String) totalDao
								.getObjectByCondition(hqlLsnumber);
						SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
						if (null != maxjynum && maxjynum.length() >= 17) {
							String maxNumber = maxjynum;
							String y = sdf.format(new Date());
							String headStr = maxNumber.substring(0, 14);
							String headStr2 = maxNumber.substring(0, 6);
							if (maxNumber.contains(y)) {
								newNumber = headStr + strAddOne(maxNumber);
							} else {
								newNumber = headStr2 + y + "001";
							}
						} else {
							if ("报废品".equals(newLs.getStickStyle())) {
								newNumber = "QD-RP-" + sdf.format(new Date())
										+ "001";
							} else if ("待处理品".equals(newLs.getStickStyle())) {
								newNumber = "QD-WP-" + sdf.format(new Date())
										+ "001";
							} else if ("首检样品".equals(newLs.getStickStyle())) {
								newNumber = "QD-FP-" + sdf.format(new Date())
										+ "001";
							}
						}
						newLs.setNumber(newNumber);
						oldProcess.setHadsj("yes");
						totalDao.save(newLs);

						// // 发送消息提醒、

						String hql = "select u.code from Users u join u.machine m where m.workPosition=?";
						List user_list = totalDao.query(hql, oldProcess
								.getGongwei());
						RtxUtil.sendNotify(user_list, "首检检验提醒\n件 号:"
								+ procard.getMarkId() + "\n批 次: "
								+ procard.getSelfCard() + "\n工序号:"
								+ oldProcess.getProcessNO() + "\n工序名称:"
								+ oldProcess.getProcessName() + "\n工 位:"
								+ oldProcess.getGongwei() + "\n提交人:"
								+ oldProcess.getUsernames() + "\n提交时间:"
								+ newLs.getBillDate() + "\n请您前往检验!谢谢",
								"首检检验提醒", "0", "0");
					}

					// 库位临时存储
					if (processSaveLog != null
							&& processSaveLog.getWarehouse().equals("半成品库")) {
						processSaveLog.setProcessId(oldProcess.getId());
						processSaveLog.setProcessNo(oldProcess.getProcessNO());
						processSaveLog.setProcessName(oldProcess
								.getProcessName());
						processSaveLog.setMarkId(procard.getMarkId());
						processSaveLog.setSelfCard(procard.getSelfCard());
						processSaveLog.setCcCount(process.getSubmmitCount());
						processSaveLog.setAddTime(Util.getDateTime());
						processSaveLog
								.setAddUser(Util.getLoginUser().getName());
						totalDao.save(processSaveLog);
					}

					/****
					 * -------------------------------LED推送--------------------
					 * -----------------------------------------------
					 ***/
					// 通过工位查询对应的LED显示屏
					String hql_Led = "from LED where stations =?";
					LED ledManagement = (LED) totalDao.getObjectByCondition(
							hql_Led, oldProcess.getGongwei());
					if (ledManagement != null) {
						String sendMessage = "";
						String sendStatus = "";

						// 每次提交后 只显示 工位+卫生责任人
						sendMessage = oldProcess.getGongwei();

						// 将本产品、工序的推送信息发送保存，用于累计多个工序
						LEDLog ledLog = new LEDLog();
						ledLog.setProcardId(procard.getId());
						ledLog.setProcessNo(oldProcess.getProcessNO());
						ledLog.setContext(sendMessage);
						ledLog.setProductStatus("完成");
						ledLog.setProcessInforId(oldProcess.getId());
						ledLog.setMinFinishTime("");
						ledLog.setGongwei(oldProcess.getGongwei());
						sendMessage = ledServer.addLEDLog(
								ledManagement.getId(), ledLog);// 保存并查询需要显示的内容

						// if (sendMessage == null || sendMessage.length() <= 0)
						// {
						// 如果查询不到led记录,只显示 工位+卫生责任人 （并且是固定移动方式）
						// sendMessage = oldProcess.getGongwei();
						// sendStatus = LedSendUtil.OnAddtext(ledManagement
						// .getNumber(), sendMessage, 1, ledManagement
						// .getId());
						// new LedSendServer(ledManagement.getId()).start();
						// new LedSendServer(ledManagement.getId())
						// .sendLedMs();
						// } else {
						// 发送LED （向左移动）
						// sendStatus = LedSendUtil.OnAddtext(ledManagement
						// .getNumber(), sendMessage, ledManagement
						// .getId());
						// new LedSendServer(ledManagement.getId()).start();
						// new LedSendServer(ledManagement.getId())
						// .sendLedMs();
						// }
						// }
						// 保存记录
						// ledServer.addLEDLog(ledManagement.getId(),
						// sendMessage);
						// if (!"true".equals(sendStatus)) {
						// return "抱歉!系统向" + oldProcess.getGongwei()
						// + "工位的LED屏推送工作信息时出错,请您联系管理员!谢谢!\n错误原因:"
						// + sendStatus;
						// }
					}
					// // 查询下一道工序的工位信息
					String hql_nextpro = "from ProcessInfor where (dataStatus is null or dataStatus!='删除') and processNO >? and procard.id=? order by processNO";
					ProcessInfor nextpi = (ProcessInfor) totalDao
							.getObjectByCondition(hql_nextpro, oldProcess
									.getProcessNO(), procard.getId());
					// 向本工序提交的下一个工位推送待干信息
					// if (nextpi != null && nextpi.getGongwei() != null
					// && nextpi.getGongwei().length() > 0) {
					// // 通过工位查询对应的LED显示屏
					// String hql_nextLed = "from LED where stations =?";
					// LED nextledManagement = (LED) totalDao
					// .getObjectByCondition(hql_nextLed, nextpi
					// .getGongwei());
					// if (nextledManagement != null) {
					// String sendMessage = "";
					// String sendStatus = "";
					// float num = process.getSubmmitCount();
					// int number = (int) num;
					// // 上一工序的提交推送信息
					// sendMessage = nextpi.getGongwei() + " 您好,"
					// + oldProcess.getGongwei() + "工位向您提交"
					// + number + "件产品,请您前往加工!谢谢! ";
					// sendStatus = ledSendManage(nextpi, 0F, null,
					// sendMessage);
					// // if (!"true".equals(sendStatus)) {
					// // return sendStatus;
					// // }
					// }
					// }
					/****
					 * -------------------------------LED推送结束------------------
					 * -------------------------------------------------
					 ***/

					/********************************************** 添加首检记录结束 **/

					/***
					 * 补料单提交处理
					 */

					/***************************** 报废处理 *************************************/
					float breakCount = process.getBreakCount();
					if (process.getBreakCount() > 0
							|| (breakscount != null && breakscount.length > 0)) {
						// 添加一次不合格品提交记录;
						Users user = Util.getLoginUser();
						breaksubmit.setProcardId(procard.getId());
						breaksubmit.setProcessId(oldProcess.getId());
						breaksubmit.setBreakgroup("本工序不合格");
						breaksubmit.setProcessNo(oldProcess.getProcessNO());
						breaksubmit.setProcessName(oldProcess.getProcessName());
						breaksubmit.setMarkId(procard.getMarkId());
						breaksubmit.setTjUsersId(user.getId());
						breaksubmit.setTjUsersName(user.getName());
						breaksubmit.setTjTime(Util.getDateTime());
						breaksubmit.setSelfcard(procard.getSelfCard());
						breaksubmit.setYwmarkId(procard.getYwMarkId());
						breaksubmit.setTjtype("提交工序时");
						breaksubmit.setProName(procard.getProName());
						breaksubmit.setGongwei(proLog.getGongwei());
						process.setBreakCount(oldProcess.getBreakCount());// 不合格数量还原等检验确认后再记录不合格数量
						if ("零件损坏".equals(breaksubmit.getType())) {
							breaksubmit.setPrologId(proLog.getId() + "");
							breaksubmit.setTjbreakcount(breakCount);
							totalDao.save(breaksubmit);
							String workPosition = oldProcess.getGongwei();
							Integer processNo = process.getProcessNO();
							List<Integer> userIdList = totalDao
									.query(
											"select u.id from Users u join u.machine m where m.workPosition = ?  ",
											workPosition);
							Integer[] userIds = null;
							if (userIdList != null && userIdList.size() > 0) {
								userIds = new Integer[userIdList.size()];
								for (int i = 0; i < userIdList.size(); i++) {
									userIds[i] = userIdList.get(i);
									// breaksubmit.setTjbreakcount(process
									// .getBreakCount());
									// totalDao.save(breaksubmit);
									AlertMessagesServerImpl.addAlertMessages(
											"检验提醒", "件号:"
													+ breaksubmit.getMarkId()
													+ ",生产批次:"
													+ breaksubmit.getSelfcard()
													+ ",工序号:"
													+ processNo
													+ "工位:"
													+ workPosition
													+ "提交工序时 。提交不良品数量:"
													+ breaksubmit
															.getTjbreakcount()
													+ " 请及时检验确认!", userIds, "",
											true);
								}
							}
							/**
							 * 更新后面工序的总数量
							 */
							// String updateSql =
							// "update ta_sop_w_processinfor set totalCount=?,applyCount= "
							// +
							// "CASE applyCount WHEN 0 THEN applyCount ELSE applyCount-"
							// + process.getBreakCount()
							// + " END where fk_procardId=? and processNO>?";
							// totalDao.createQueryUpdate(null, updateSql,
							// oldProcess
							// .getTotalCount()
							// - oldProcess.getBreakCount(), oldProcess
							// .getProcard().getId(), oldProcess
							// .getProcessNO());
						} else if ("外购件不合格".equals(breaksubmit.getType())) {
							if (markIds != null && markIds.length > 0) {
								// Float maxbreakscount = 0f;
								// Float[] beakscounts = new
								// Float[breakscount.length];
								for (int i = 0; i < markIds.length; i++) {
									if (breakscount[i] != null
											&& breakscount[i] > 0) {
										BreakSubmit breaksubmit1 = new BreakSubmit();
										Procard wgprocard = (Procard) totalDao
												.getObjectByCondition(
														" from Procard where fatherId = ? and markId = ?",
														procard.getId(),
														markIds[i]);
										BeanUtils.copyProperties(breaksubmit,
												breaksubmit1);
										breaksubmit1.setWgmarkId(markIds[i]);
										breaksubmit1
												.setTjbreakcount(breakscount[i]);
										breaksubmit1.setTjtype("提交工序时");
										breaksubmit1.setWgproName(wgprocard
												.getProName());
										breaksubmit1.setWgselfcard(wgprocard
												.getSelfCard());
										totalDao.save(breaksubmit1);
										// 发消息给检验员;
										String hql_user = "SELECT u.id from Category c join c.userSet u where c.name=?";
										List<Integer> userIdList = totalDao
												.query(hql_user, wgprocard
														.getWgType());
										Integer[] userIds = null;
										if (userIdList != null
												&& userIdList.size() > 0) {
											userIds = new Integer[userIdList
													.size()];
											for (int j = 0; j < userIdList
													.size(); j++) {
												userIds[i] = userIdList.get(i);
											}
										}
										AlertMessagesServerImpl
												.addAlertMessages(
														"检验提醒",
														"员工:"
																+ breaksubmit
																		.getTjUsersName()
																+ "提交工序时提交外购件:"
																+ markIds[i]
																+ "不合格，不合格数量:"
																+ breaksubmit1
																		.getTjbreakcount()
																+ " 请及时检验确认!",
														userIds, "", true);
									}
								}

							}
						}
						/**
						 * 生成补料单
						 */
						// LogoStickers logoStickers = new LogoStickers();
						// // 生成编号
						// String date = Util.getDateTime("yyyyMM");
						// String number = "";
						// String hql =
						// "select max(number) from LogoStickers where stickStyle='补料单' and number like '%QD-RP-"
						// + date + "%'";
						// Object object = (Object) totalDao
						// .getObjectByCondition(hql);
						// if (object != null) {
						// String maxNumber = object.toString();
						// Long selfCard = Long.parseLong(maxNumber.substring(
						// 6, maxNumber.length())) + 1;// 当前最大流水卡片
						// number = "QD-RP-" + selfCard.toString();
						// } else {
						// number = "QD-RP-" + date + "001";
						// }
						// logoStickers.setNumber(number);// 编号
						// logoStickers.setStickStyle("补料单");
						// logoStickers.setMarkId(procard.getMarkId());// 件号
						// logoStickers.setLotId(procard.getSelfCard());// 批次号
						// logoStickers.setProcessNO(oldProcess.getProcessNO()
						// .toString());
						// Users loginUser = Util.getLoginUser();// 获得登录用户
						// logoStickers.setOperator(loginUser.getName());
						// logoStickers.setCode(loginUser.getCode());
						// logoStickers.setCount(process.getBreakCount());//
						// 报废数量
						// logoStickers.setPartsName(procard.getProName());// 名称
						// logoStickers.setBillDate(Util.getDateTime());
						// logoStickers.setOldProcardId(procard.getId());//
						// 老流水单id
						// logoStickers.setWorkingGroup(loginUser.getPassword()
						// .getDeptNumber());// 部门编码
						// logoStickers.setIsPrint("NO");
						// logoStickers.setStatus("报废");
						// // 材料信息
						// if (procard.getProcardStyle().equals("外购件")) {
						// logoStickers.setClMarkId(procard.getMarkId());
						// } else {
						// logoStickers.setClMarkId(procard.getTrademark());
						// }
						// logoStickers.setClSelfCard(procard.getLingliaoDetail());
						// logoStickers.setWgType(procard.getWgType());
						// totalDao.save(logoStickers);
					}
					/***************************** 报废处理结束 *************************************/

					// 本次的提交量和不合格量
					oldProcess.setSubmmitCount(process.getSubmmitCount()
							+ oldProcess.getSubmmitCount());// 提交量
					oldProcess.setBreakCount(process.getBreakCount()
							+ oldProcess.getBreakCount());// 不合格量

					String subDatetime = Util.getDateTime();
					oldProcess.setSubmitDate(subDatetime);
					if (proLog != null) {
						// 1、 如果提交数量等于领取数量，关闭对应PMI设备
						// 2、更改为每次提交都关闭电源
						// 关闭设备电源
						Float allDjNenghao = 0F;// 待机能耗
						Float allSbJiepai = 0F;// 设备节拍
						// 分批提交处理
						List<ProcessInforReceiveLog> pirlogList = new ArrayList<ProcessInforReceiveLog>();
						// 当前时间
						String sumDate = Util.getDateTime();
						// 根据工序对应设备编号，查询对应的PMI设备
						String hql_pmi = "from PmiManagement where id in (select pmiManagements.id from Machine where workPosition=? and no=?)";
						PmiManagement pmiManagement = (PmiManagement) totalDao
								.getObjectByCondition(hql_pmi, oldProcess
										.getGongwei(), oldProcess.getShebeiNo());
						if (pmiManagement != null) {
							Socket socket;
							// int num = 0;
							int ccnum = 0;
							try {
								socket = new Socket(pmiManagement.getPmi_ip(),
										Integer.parseInt(pmiManagement
												.getPmi_port()));
								socket.setSoTimeout(1000);// 设置超时等待时间
								/****** 因为必须是同一个Socket才能接收数据,所以这里单独关闭,请注意!!!! **********/
								BufferedWriter bw = new BufferedWriter(
										new OutputStreamWriter(socket
												.getOutputStream()));
								// bw.write(new char[] { 00, 0x7F, 00, 00, 00,
								// 00,
								// 00 });
								bw.flush();

								// 读取节拍和能耗的数据
								InputStream ins = socket.getInputStream();
								boolean boolWhile = true;
								while (boolWhile) {
									// 每次接收的数据
									String oneString = readBis(ins);// 先接收第一个字符
									if ("AA".equals(oneString)) {
										// AA 00 00 00 07 00 00 00 04 02 01
										// FF

										// 截取生产节拍 "00 00 00 07"==生产节拍
										Integer nowJiepai = 0;
										String nowJiepai_str = "";
										for (int j = 0; j < 4; j++) {
											String jiepai_data2 = readBis(ins);
											nowJiepai_str += Integer
													.parseInt(jiepai_data2);// 累计节拍字符
										}
										nowJiepai = Integer
												.parseInt(nowJiepai_str);// 生产节拍
										allSbJiepai += nowJiepai;// 累计本次设备总节拍

										// 截取生产能耗 "00 00. 00 04 02 01"==能耗
										Float nowNenghao = 0F;
										String nowNenghao_str = "";
										// 先截取前两位
										for (float j = 0; j < 2; j++) {
											String nenghao_data2 = readBis(ins);
											nowNenghao_str += Integer
													.parseInt(nenghao_data2);// 累计节拍字符
										}
										nowNenghao_str += ".";// 添加小数点
										// 再截取后四位
										for (float j = 0; j < 4; j++) {
											String nenghao_data2 = readBis(ins);
											nowNenghao_str += Integer
													.parseInt(nenghao_data2);// 累计节拍字符
										}
										nowNenghao = Float
												.parseFloat(nowNenghao_str);

										// 读取最后的BB
										readBis(ins);

										/*********** 添加领取记录信息 ***********/
										ProcessInforReceiveLog pirlog_new = new ProcessInforReceiveLog();
										pirlog_new.setUsercodes(proLog
												.getUsercodes());
										pirlog_new.setUserCardId(proLog
												.getUserCardId());
										pirlog_new.setUsernames(proLog
												.getUsernames());
										pirlog_new
												.setUserId(proLog.getUserId());
										pirlog_new.setFirstApplyDate(proLog
												.getFirstApplyDate());
										pirlog_new.setReceiveNumber(1F);// 本次领取数量
										pirlog_new.setFk_pirLId(proLog.getId());
										pirlog_new.setGongwei(proLog
												.getGongwei());
										pirlog_new.setSubmitNumber(1F);
										pirlog_new.setBreakCount(0F);
										pirlog_new.setSumitApplyDate(sumDate);
										// 计算本次节拍
										pirlog_new
												.setAllSbJiepai(nowJiepai * 1F);
										// 本次能耗
										pirlog_new.setAllNenghao(nowNenghao);
										pirlog_new.setStatus("提交");
										pirlogList.add(pirlog_new);
									} else if ("CC".equals(oneString)) {
										ccnum++;
										// 开始处理待机能耗
										// CC 表示已经断电，显示获取待机能耗
										// 数据 CC 00 00. 00 00 00 00 DD
										String nowNenghao_str = "";
										// 先截取前两位
										for (float j = 0; j < 2; j++) {
											String nenghao_data2 = readBis(ins);
											nowNenghao_str += Integer
													.parseInt(nenghao_data2);// 累计能耗字符
										}
										nowNenghao_str += ".";// 添加小数点
										// 再截取后四位
										for (float j = 0; j < 4; j++) {
											String nenghao_data2 = readBis(ins);
											nowNenghao_str += Integer
													.parseInt(nenghao_data2);// 累计能耗字符
										}
										allDjNenghao = Float
												.parseFloat(nowNenghao_str);
										boolWhile = false;
									}
								}
								bw.close();
								socket.close();
								// 延迟执行
								// Thread.sleep(5 * 1000);
							} catch (Exception e) {
								e.printStackTrace();
								AlertMessagesServerImpl.addAlertMessages(
										"系统维护异常组", "PMI操作失败  --IP:"
												+ pmiManagement.getPmi_ip()
												+ "、端口:"
												+ pmiManagement.getPmi_port()
												+ "、操作方式:提交工序;工序号:"
												+ oldProcess.getProcessNO()
												+ ",件号:" + procard.getMarkId()
												+ ",批次:"
												+ procard.getSelfCard()
												+ ",异常:" + e, "PMI操作失败", "2");
							}
							pmiManagement.setStatus("空闲");
							totalDao.update(pmiManagement);
							// 指令成功,开始处理工序逻辑
						}

						proLog.setSubmitNumber(process.getSubmmitCount());
						proLog.setBreakCount(process.getBreakCount());
						proLog.setSumitApplyDate(subDatetime);
						proLog.setAllDjNenghao(allDjNenghao);// 本次能耗
						proLog.setAllSbJiepai(allSbJiepai);// 本次设备节拍
						proLog.setStatus("提交");
						// 计算本次节拍
						float nowallJiepai = 0;
						try {
							long datetime = Util.getDateDiff(proLog
									.getFirstApplyDate(),
									"yyyy-MM-dd HH:mm:ss", proLog
											.getSumitApplyDate(),
									"yyyy-MM-dd HH:mm:ss");
							nowallJiepai = datetime;
							proLog.setAllJiepai(nowallJiepai);
						} catch (ParseException e) {
							e.printStackTrace();
							proLog.setAllJiepai(0F);
						}
						/*************************** 计件工资计算 (wxf) *******************************************************************/
						String hql_ = " from CodeTranslation where type = 'sys' and keyCode = '计件工资'";
						int count = totalDao.getCount(hql_);
						if (count > 0) {
							Double processjjAllMoney = 0d;
							Double processjjAllMoneygc = 0d;
							if (proLog.getProcessjjMoney() != null
									&& proLog.getProcessjjMoney() > 0) {
								Double jjratio = oldProcess.getJjratio();
								if (jjratio == null || jjratio == 0) {
									jjratio = 1d;
								}
								processjjAllMoney = proLog.getProcessjjMoney()
										* proLog.getSubmitNumber() * jjratio
										* oldProcess.getProcesdianshu();
								processjjAllMoneygc = proLog
										.getProcessjjMoney()
										* proLog.getSubmitNumber()
										* oldProcess.getProcesdianshu();
							}
							proLog.setProcessjjAllMoney(processjjAllMoney);
							String userCardId = proLog.getUserCardId();
							if (userCardId != null && userCardId.length() > 0) {
								String[] userCardIds = userCardId.split(",");
								for (int i = 0; i < userCardIds.length; i++) {
									String nowMonth = Util
											.getDateTime("yyyy-MM月");// 当前月份
									String nowtime = Util.getDateTime();
									Users user = (Users) totalDao
											.getObjectByCondition(
													" from Users where cardId = ? ",
													userCardIds[i]);
									UserMonthMoney userMonthMoney = (UserMonthMoney) totalDao
											.getObjectByCondition(
													" from UserMonthMoney where userId =? and month = ? ",
													user.getId(), nowMonth);
									Double nowMoney = 0d;
									Double processjjMoneygc = 0d;
									if (proLog.getFzwork() != null
											&& proLog.getFzwork().length() > 0) {
										String[] fzworks = proLog.getFzwork()
												.split(",");
										for (int j = 0; j < fzworks.length; j++) {
											String[] UserAndBili = fzworks[j]
													.split(":");
											if (UserAndBili != null
													&& UserAndBili.length == 2) {
												String FzUserCardId = UserAndBili[0];
												Double Bili = Double
														.parseDouble(UserAndBili[1]);
												if (FzUserCardId.equals(user
														.getCardId())) {

												}
											}
										}
									} else {
										nowMoney = processjjAllMoney
												/ userCardIds.length;// 多人合作平均分
										processjjMoneygc = processjjAllMoneygc
												/ userCardIds.length;
									}
									Float subnmitBZJiepai = 0f;
									if (oldProcess.getAllJiepai() != null
											&& oldProcess.getAllJiepai() > 0) {
										subnmitBZJiepai = oldProcess
												.getAllJiepai()
												* proLog.getSubmitNumber();
									}
									UserMoneyDetail umd = new UserMoneyDetail(
											procard.getId(), procard
													.getRootId(), procard
													.getRootMarkId(), procard
													.getMarkId(), procard
													.getProName(), procard
													.getSelfCard(), procard
													.getProductStyle(),
											oldProcess.getId(), oldProcess
													.getProcessNO(), oldProcess
													.getProcessName(), proLog
													.getGongwei(), proLog
													.getId(), proLog
													.getFirstApplyDate(),
											proLog.getSumitApplyDate(), proLog
													.getSubmitNumber(), proLog
													.getAllJiepai(), proLog
													.getNowCsJiepai(), nowMoney
													.floatValue(), 0f, nowtime,
											userMonthMoney, subnmitBZJiepai,
											processjjMoneygc);
									umd.setYwmarkId(procard.getYwMarkId());
									umd
											.setOrderNumber(procard
													.getOrderNumber());
									Float orderNum = (Float) totalDao
											.getObjectByCondition(
													" select filnalCount from Procard where id = ?",
													procard.getRootId());
									umd.setOrderNum(orderNum);
									String tcTime = (String) totalDao
											.getObjectByCondition(
													" select addtime from ProcardBl where procardId=? ",
													procard.getId());
									umd.setTcTime(tcTime);
									umd.setPlanfinalTime(procard
											.getNeedFinalDate());
									umd.setCount(procard.getFilnalCount());
									Set<UserMoneyDetail> umdSet = null;
									if (userMonthMoney == null) {
										userMonthMoney = new UserMonthMoney();
										userMonthMoney.setCode(user.getCode());// 工号
										userMonthMoney.setUsername(user
												.getName());// 用户姓名
										userMonthMoney.setUserId(user.getId());// userId
										userMonthMoney.setDept(user.getDept());// 部门
										userMonthMoney.setMonth(nowMonth);// 月份
										userMonthMoney.setAddTime(nowtime);
										umd.setUserMonthMoney(userMonthMoney);
										userMonthMoney.setMoney(nowMoney
												.floatValue());
										Float caozhanbi = 0f;
										if (proLog.getNowCsJiepai() != null
												&& proLog.getNowCsJiepai() > 0
												&& subnmitBZJiepai != null
												&& subnmitBZJiepai > 0) {
											caozhanbi = proLog.getNowCsJiepai()
													/ subnmitBZJiepai;
										}
										userMonthMoney.setCaozhanbi(caozhanbi);
										umdSet = new HashSet<UserMoneyDetail>();
										umdSet.add(umd);
										userMonthMoney.setUserdetailSet(umdSet);
										Float sumWorkingHours = Util
												.FomartFloat(
														umd.getSubmmitJiepai() / 3600,
														4);
										userMonthMoney
												.setSumWorkingHours(sumWorkingHours);
										Float avgHoursMoney = 0f;
										if (userMonthMoney.getMoney() != null
												&& userMonthMoney.getMoney() > 0) {
											avgHoursMoney = Util
													.FomartFloat(
															sumWorkingHours
																	/ userMonthMoney
																			.getMoney(),
															4);
										}
										userMonthMoney
												.setAvgHoursMoney(avgHoursMoney);
										totalDao.save(userMonthMoney);
									} else {
										userMonthMoney.setMoney(userMonthMoney
												.getMoney()
												+ nowMoney.floatValue());
										Float monthAllbzepais = 0f;
										Float monthAllcsJiepais = 0f;
										monthAllbzepais = (Float) totalDao
												.getObjectByCondition(
														"select sum(subnmitBZJiepai) from UserMoneyDetail where userMonthMoney.id =?  ",
														userMonthMoney.getId());

										monthAllcsJiepais = (Float) totalDao
												.getObjectByCondition(
														"select sum(nowCsJiepai) from UserMoneyDetail where userMonthMoney.id =?  ",
														userMonthMoney.getId());

										if (monthAllbzepais == null) {
											monthAllbzepais = 0f;
										}
										if (monthAllcsJiepais == null) {
											monthAllcsJiepais = 0f;
										}

										Float caozhanbi = 0f;
										if (proLog.getNowCsJiepai() != null
												&& proLog.getNowCsJiepai() > 0
												&& subnmitBZJiepai != null
												&& subnmitBZJiepai > 0) {
											monthAllbzepais += subnmitBZJiepai;
											monthAllcsJiepais += proLog
													.getNowCsJiepai();
										}
										if (monthAllcsJiepais > 0) {
											caozhanbi = monthAllcsJiepais
													/ monthAllcsJiepais;
										}
										umdSet = userMonthMoney
												.getUserdetailSet();
										umdSet.add(umd);
										userMonthMoney.setUserdetailSet(umdSet);
										Float sumWorkingHours = Util
												.FomartFloat(
														umd.getSubmmitJiepai() / 3600,
														4);
										if (userMonthMoney.getSumWorkingHours() == null) {
											userMonthMoney
													.setSumWorkingHours(sumWorkingHours);
										} else {
											userMonthMoney
													.setSumWorkingHours(sumWorkingHours
															+ userMonthMoney
																	.getSumWorkingHours());
										}
										Float avgHoursMoney = 0f;
										if (userMonthMoney.getMoney() != null
												&& userMonthMoney.getMoney() > 0) {
											avgHoursMoney = Util
													.FomartFloat(
															userMonthMoney
																	.getSumWorkingHours()
																	/ userMonthMoney
																			.getMoney(),
															4);
										}

										userMonthMoney
												.setAvgHoursMoney(avgHoursMoney);
										totalDao.update(userMonthMoney);
									}
								}
							}
						}
						/*************************** 计件工资计算结束 (wxf) *******************************************************************/

						totalDao.update(proLog);

						// 添加领取记录明细（PMI产生）
						for (ProcessInforReceiveLog processInforReceiveLog : pirlogList) {
							processInforReceiveLog
									.setFk_processInforId(oldProcess.getId());
							totalDao.save2(processInforReceiveLog);
						}

						/**************** 计算本工序的所有领取的总节拍以及总能耗 ***************/
						String hql_jiepai = "select sum(allJiepai),sum(allNenghao),sum(allDjNenghao),sum(allSbJiepai) from ProcessInforReceiveLog where status='提交' and fk_processInforId=? and fk_pirLId is null ";
						List list = totalDao.query(hql_jiepai, oldProcess
								.getId());
						Float alljiepai = 0F;
						Float allNenghao = 0F;
						Float daiNeghao = 0F;
						Float allSbJiepais = 0F;
						if (list != null && list.size() > 0) {
							Object[] obj = (Object[]) list.get(0);
							if (obj[0] != null) {
								alljiepai = Float.parseFloat(obj[0].toString());
							}
							if (obj[1] != null) {
								allNenghao = Float
										.parseFloat(obj[1].toString());
							}
							if (obj[2] != null) {
								daiNeghao = Float.parseFloat(obj[2].toString());
							}
							if (obj[3] != null) {
								allSbJiepais = Float.parseFloat(obj[3]
										.toString());
								if (allSbJiepais == null) {
									allSbJiepais = 0F;
								}
							}
						}
						oldProcess.setNowAllJiepai(alljiepai);
						oldProcess.setNowAllSbJiepai(allSbJiepais);
						oldProcess.setNowAllNenghao(allNenghao);
						oldProcess.setDaiNeghao(daiNeghao);
						/**************** 计算本工序的所有领取的总节拍以及总能耗结束 ***************/
						/**************** 计算本产品的所有工序的总节拍以及总能耗 ***************/
						String hql_projiepai = "select sum(nowAllJiepai),sum(nowAllNenghao+daiNeghao) from ProcessInfor where  procard.id=? ";
						List list_pro = totalDao.query(hql_projiepai, procard
								.getId());
						Float procard_alljiepai = 0F;
						Float procard_allNenghao = 0F;
						if (list_pro != null && list_pro.size() > 0) {
							Object[] obj = (Object[]) list_pro.get(0);
							if (obj[0] != null) {
								procard_alljiepai = Float.parseFloat(obj[0]
										.toString());
							}
							if (obj[1] != null) {
								procard_allNenghao = Float.parseFloat(obj[1]
										.toString());
							}
						}
						procard.setNowAllJiepai(procard_alljiepai);
						procard.setNowAllNenghao(procard_allNenghao);
						/**************** 计算本产品的所有工序的总节拍以及总能耗结束 ***************/
					}
					// 查询本工序未提交的工序记录的数量之和

					// String hql_sum =
					// " SELECT 	sum(receiveNumber-IFNULL(breakCount,0)-IFNULL(submitNumber,0)) sumcount from ta_sop_w_ProcessInforReceiveLog where fk_processInforId='"+oldProcess.getId()+"' and  status = '领取'";
					// List<Map> list = totalDao.findBySql(hql_sum);
					// int sumcount = 0;
					// if(list!=null && list.size()>0){
					// Map map = list.get(0);
					// if(map.get("sumcount")!=null){
					// double a = (Double)map.get("sumcount");
					// sumcount = (int) a;
					// }
					// }
					// 设置工序的已领数量=提交数量+报废数量（因为提交后要重新领取）+领取未提交数量

					Double ylwtjNum = (Double) totalDao
							.getObjectByCondition(
									" select sum(receiveNumber) from ProcessInforReceiveLog   where fk_processInforId = ? and status = '领取' and id <> ?",
									oldProcess.getId(), proLog.getId());
					if (ylwtjNum == null) {
						ylwtjNum = 0d;
					}
					oldProcess.setApplyCount(oldProcess.getSubmmitCount()
							+ oldProcess.getBreakCount()
							+ ylwtjNum.floatValue());
					Float gzDateTime = oldProcess.getGzDateTime();
					if (gzDateTime != null) {
						gzDateTime += proLog.getAllJiepai();
					} else {
						gzDateTime = proLog.getAllJiepai();
					}
					oldProcess.setGzDateTime(gzDateTime);
					oldProcess.setStatus("自检");// 提交工序后从新开始领取
					// 查询是否存在下一道工序
					// String hql2 =
					// "from ProcessInfor pi where pi.procard.id=? and processNO>? order by processNO";
					// ProcessInfor nextpi = (ProcessInfor) totalDao
					// .getObjectByCondition(hql2, procard.getId(),
					// oldProcess.getProcessNO());
					// 数量全部完成 wxf
					if (procard.getFilnalCount() == oldProcess.getTotalCount()
							&& oldProcess.getTotalCount() == oldProcess
									.getSubmmitCount() && sumNumber == 0) {
						oldProcess.setStatus("完成");// 完成工序
						// 工序完成封闭检验提醒
						List<CheckAlert> caList = totalDao
								.query(
										"from CheckAlert where markId=? and selfCard =? and processNo=? and status !='完成'",
										procard.getMarkId(), procard
												.getSelfCard(), oldProcess
												.getProcessNO());
						if (caList != null && caList.size() > 0) {
							for (CheckAlert ca : caList) {
								ca.setStatus("完成");
								ca.setEndTime(Util.getDateTime());
								totalDao.update(ca);
							}
						}
						/*** 更新物品所在工位信息 ***/
						if (nextpi != null) {
							procard.setGongwei(nextpi.getGongwei());
							procard.setShebeiName(nextpi.getShebeiName());
							procard.setShebeiNo(nextpi.getShebeiNo());
						} else {
							procard.setGongwei(oldProcess.getGongwei());
							procard.setShebeiName(oldProcess.getShebeiName());
							procard.setShebeiNo(oldProcess.getShebeiNo());
						}
					}
					Procard father = procard.getProcard();// 判断是否需要解除上层最后一道工序的限制
					if (nextpi == null) {
						if (father != null && process.getSubmmitCount() > 0) {
							// 如果上层零件首工序为外委工序
							List<ProcessInfor> scProcessslist = totalDao
									.query(
											"from ProcessInfor where (dataStatus is null or dataStatus!='删除') and procard.id=? and (dataStatus is null or dataStatus!='删除') order by processNO asc",
											father.getId());
							if (scProcessslist != null
									&& scProcessslist.size() > 0) {
								ProcessInfor scfirstProcess = scProcessslist
										.get(0);
								if ("外委".equals(scfirstProcess
										.getProductStyle())
										|| (scfirstProcess.getAgreeWwCount() != null && scfirstProcess
												.getAgreeWwCount() > 0)) {
									Float needWwcount1 = 0f;
									if (procard.getProcardStyle().equals("外购")) {
										needWwcount1 = oldProcess
												.getSubmmitCount()
												* procard.getQuanzi1()
												/ procard.getQuanzi2();
									} else {
										needWwcount1 = oldProcess
												.getSubmmitCount()
												/ procard.getCorrCount();
									}
									if (needWwcount1 % 1 > 0.95) {
										needWwcount1 = (float) Math
												.ceil(needWwcount1);
									} else {
										needWwcount1 = (float) Math
												.floor(needWwcount1);
									}
									// (Float) totalDao
									// .getObjectByCondition(
									// "select min(minNumber) from Procard where fatherId=? "
									// +
									// "and (procardStyle in('总成','自制') or (procardStyle ='外购' and (needProcess is null or needProcess!='yes ')))"
									// +
									// "and (sbStatus is null or sbStatus !='删除') ",
									// father.getId());
									if (needWwcount1 != null
											&& needWwcount1 > 0) {
										Float needWwcount2 = (Float) totalDao
												.getObjectByCondition(
														"select sum(beginCount) from WaigouWaiweiPlan where markId=? and selfCard=? and (processNo =? or processNo like '"
																+ scfirstProcess
																		.getProcessNO()
																+ ";%')",
														father.getMarkId(),
														father.getSelfCard(),
														scfirstProcess
																.getProcessNO()
																+ "");
										Float needWwcount = null;
										if (needWwcount2 == null) {
											needWwcount = needWwcount1;
										} else if (needWwcount1 > needWwcount2) {
											needWwcount = needWwcount1
													- needWwcount2;
										} else {
											needWwcount = 0f;
										}
										if (needWwcount > 0) {
											wwgongxu(scProcessslist, procard,
													process, null, father,
													needWwcount);
										}
									}
									// 生成一条此次提交的零件的外委库入库申请
									addWwdrk(procard, oldProcess, process
											.getSubmmitCount(), null);
								}
							}

						}

						// 扣减下层在制品
						List<Procard> sonProcardList = totalDao.query(
								"from Procard where fatherId = ? ", procard
										.getId());
						if (procard.getProcardStyle().equals("总成")) {
							sonProcardList.add(procard);
						}
						if (sonProcardList != null && sonProcardList.size() > 0) {
							for (Procard son : sonProcardList) {
								Float deletCount = 0f;
								if (!son.getId().equals(procard.getId())) {
									if (son.getProcardStyle().equals("外购")) {
										if (son.getQuanzi2() != null
												&& son.getQuanzi2() > 0
												&& son.getQuanzi1() != null
												&& son.getQuanzi1() > 0) {
											deletCount = process
													.getSubmmitCount()
													* son.getQuanzi2()
													/ son.getQuanzi1();
										} else {
											continue;
										}
									} else {
										deletCount = process.getSubmmitCount()
												* son.getCorrCount();
										deletCount = (float) Math
												.ceil(deletCount);
									}
								} else {
									deletCount = process.getSubmmitCount();
								}
								List<ProcardProductRelation> pprList = totalDao
										.query(
												"from ProcardProductRelation where procardId =? and zyCount>ckCount and flagType in('本批在制品','余额在制品')"
														+ " and goodsId in (select goodsId from Goods where goodsClass='在制品')",
												son.getId());
								if (pprList != null & pprList.size() > 0) {
									for (ProcardProductRelation ppr : pprList) {
										Goods goods = (Goods) totalDao
												.getObjectById(Goods.class, ppr
														.getGoodsId());
										// 在制品出库记录
										if (goods != null) {
											Sell zzpSell = new Sell();
											zzpSell.setSellArtsCard(son
													.getSelfCard());
											zzpSell.setSellSupplier(goods
													.getGoodsSupplier());
											zzpSell.setSellFormat(goods
													.getGoodsFormat());
											zzpSell.setSellLot(goods
													.getGoodsLotId());
											zzpSell.setSellMarkId(goods
													.getGoodsMarkId());
											zzpSell.setSellAdminName(Util
													.getLoginUser().getName());
											zzpSell.setSellGoods(goods
													.getGoodsFullName());
											zzpSell.setSellDate(Util
													.getDateTime("yyyy-MM-dd"));
											zzpSell.setSellTime(Util
													.getDateTime());
											zzpSell.setSellWarehouse(goods
													.getGoodsClass());
											zzpSell.setSellUnit(goods
													.getGoodsUnit());
											zzpSell
													.setWgType(goods
															.getWgType());
											if (ppr.getFlagType().equals(
													"余额在制品")) {
												Float kekouCount = ppr
														.getYlCount()
														- ppr.getCkCount();
												if (kekouCount > deletCount) {
													kekouCount = deletCount;
												}
												if (goods != null) {
													if (goods
															.getGoodsCurQuantity() < kekouCount) {
														// 数据有误
														zzpSell
																.setSellCount(goods
																		.getGoodsCurQuantity());
														ppr
																.setCkCount(ppr
																		.getCkCount()
																		+ goods
																				.getGoodsCurQuantity());
														totalDao.update(ppr);
														deletCount -= goods
																.getGoodsCurQuantity();
														goods
																.setGoodsCurQuantity(0f);
													} else {
														zzpSell
																.setSellCount(kekouCount);
														ppr.setCkCount(ppr
																.getCkCount()
																+ kekouCount);
														totalDao.update(ppr);
														deletCount -= kekouCount;
														goods
																.setGoodsCurQuantity(goods
																		.getGoodsCurQuantity()
																		- kekouCount);
													}
												}
											} else {
												if (goods != null) {
													if (goods
															.getGoodsCurQuantity() < deletCount) {
														zzpSell
																.setSellCount(goods
																		.getGoodsCurQuantity());
														ppr
																.setCkCount(ppr
																		.getCkCount()
																		+ goods
																				.getGoodsCurQuantity());
														totalDao.update(ppr);
														deletCount -= goods
																.getGoodsCurQuantity();
														goods
																.setGoodsCurQuantity(0f);
													} else {
														zzpSell
																.setSellCount(deletCount);
														ppr.setCkCount(ppr
																.getCkCount()
																+ deletCount);
														totalDao.update(ppr);
														goods
																.setGoodsCurQuantity(goods
																		.getGoodsCurQuantity()
																		- deletCount);
														deletCount = 0f;
													}
												}
											}
											totalDao.update(goods);
											totalDao.save(zzpSell);
											if (deletCount == 0) {
												break;
											}

										}
									}
								}
							}
						}
					}
					/**************** 更新工装使用结束时间 ***************/
					if ("是".equals(oldProcess.getGongzhuangstatus())) {
						GzstoreUseLog gzstoreUseLog = (GzstoreUseLog) totalDao
								.getObjectByCondition(
										"from GzstoreUseLog where processId=? order by id desc",
										oldProcess.getId());
						if (gzstoreUseLog != null) {
							if (gzstoreUseLog.getEndTime() == null
									|| gzstoreUseLog.getEndTime().equals("")) {
								gzstoreUseLog.setEndTime(Util.getDateTime());
							} else {
								gzstoreUseLog.setEndTime(gzstoreUseLog
										.getEndTime()
										+ "," + Util.getDateTime());
							}
							totalDao.update(gzstoreUseLog);
						}
						if (oldProcess.getGzstoreId() != null) {
							Gzstore gz = (Gzstore) totalDao.get(Gzstore.class,
									oldProcess.getGzstoreId());
							if (gz != null) {
								if (gz.getSybjcs() != null
										&& gz.getSybjcs() > 0) {
									Float num = oldProcess.getSubmmitCount()
											+ oldProcess.getBreakCount();
									Float sybjcs = gz.getSybjcs() - num;
									gz.setSybjcs(sybjcs.intValue());
									if (gz.getSumshuliang() == null) {
										gz.setSumshuliang(num + 0d);
									} else {
										gz.setSumshuliang(gz.getSumshuliang()
												+ num);
									}
									if (sybjcs < 1000) {
										gz.setStatus("待检验");
									}
									totalDao.update(gz);
								}

							}
						}
					}
					totalDao.update(oldProcess);

					// 补料提交的更新之前流水卡片
					if (procard.getOldProcardId() != null) {
						Procard blprocard = (Procard) totalDao.get(
								Procard.class, procard.getOldProcardId());
						ProcessInfor blprocess = (ProcessInfor) totalDao
								.getObjectByCondition(
										" from ProcessInfor where (dataStatus is null or dataStatus!='删除') and procard.id = ? and processNO = ? ",
										blprocard.getId(), oldProcess
												.getProcessNO());
						ProcessInfor finalprocess = (ProcessInfor) totalDao
								.getObjectByCondition(
										" from ProcessInfor where procard.id = ? and processNO > ? ",
										blprocard.getId(), oldProcess
												.getProcessNO());
						if (blprocess != null) {
							blprocess.setSubmmitCount(blprocess
									.getSubmmitCount()
									+ oldProcess.getSubmmitCount());
							if (blprocess.getBreakCount() > 0) {
								blprocess.setBreakCount(blprocess
										.getBreakCount()
										- oldProcess.getSubmmitCount());
							}
							if (blprocess.getTotalCount() == blprocard
									.getFilnalCount()
									&& blprocess.getSubmmitCount() == blprocess
											.getTotalCount()) {
								blprocess.setStatus("完成");
							}
							if (finalprocess == null) {
								if (blprocess != null
										&& "完成".equals(blprocess.getStatus())) {
									blprocard.setStatus("完成");
									totalDao.update(blprocard);
									// 处理补料单;
									LogoStickers ls = (LogoStickers) totalDao
											.getObjectByCondition(
													" from LogoStickers where procardId =? and status = '已发卡'",
													blprocard.getId());
									if (ls != null) {
										ls.setStatus("完成");
										totalDao.update(ls);
									}
								}
							} else {

							}
							totalDao.update(blprocess);
						}

					}
					totalDao.update(procard);
					// 为打印用
					process.setProcessNO(oldProcess.getProcessNO());
					process.setProcessName(oldProcess.getProcessName());
					process.setUsernames(oldProcess.getUsernames());
					process.setSubmitDate(subDatetime);
					// 查询成型图
					ProcessTemplateFile ptf = null;
					String bancisql = null;
					if (procard.getBanci() == null || procard.getBanci() == 0) {
						bancisql = " and (banci is null or banci=0)";
					} else {
						bancisql = " and banci=" + procard.getBanci();
					}
					if (procard.getProductStyle().equals("批产")) {
						ptf = (ProcessTemplateFile) totalDao
								.getObjectByCondition(
										" from ProcessTemplateFile  where  markId=? and type='成型图' and productStyle='批产' "
												+ bancisql, procard.getMarkId());
						if (ptf == null) {
							Float tqCount = (Float) totalDao
									.getObjectByCondition(
											"select count(*) from ProcardTemplatePrivilege p1,Procard p2"
													+ " where (p1.markId=p2.markId or p1.markId=p2.ywMarkId) and p2.id=?",
											procard.getRootId());
							if (tqCount != null && tqCount > 0) {
								ptf = (ProcessTemplateFile) totalDao
										.getObjectByCondition(
												" from ProcessTemplateFile  where  markId=? and type='成型图' and productStyle='试制' and  glId=?"
														+ bancisql, procard
														.getMarkId(), procard
														.getId());
							}
						}
					} else {
						ptf = (ProcessTemplateFile) totalDao
								.getObjectByCondition(
										" from ProcessTemplateFile  where  markId=? and type='成型图' and productStyle='试制' and  glId=?"
												+ bancisql,
										procard.getMarkId(), procard.getId());
					}

					if (ptf != null) {
						process.setCheckIdea(ptf.getMonth() + "/"
								+ ptf.getFileName());
					}
					// 转序
					if (nextpi != null) {
						// 后续工序
						List<String> processList = totalDao
								.findAllByPage(
										"select processName from ProcessInfor"
												+ "  where procard.id=? and processNO>? order by processNO ",
										1, 3, oldProcess.getProcard().getId(),
										oldProcess.getProcessNO());
						String nextProcessName = "";
						if (processList != null && processList.size() > 0) {
							for (String pname : processList) {
								nextProcessName += pname + ";";
							}
						}
						process.setGuding(nextProcessName);
					}
					if (newNumber != null) {
						process.setMeasuringNumber(newNumber);// 用于生成首检二维码
					}

					// // 直接打印
					// String[] strs = new String[] { "          工序提交单",
					// "件    号: " + procard.getMarkId(),
					// "批    次: " + procard.getSelfCard(),
					// "工 序 号: " + oldProcess.getProcessNO(),
					// "工序名称:	 " + oldProcess.getProcessName(),
					// "提交数量: " + process.getSubmmitCount(),
					// "提 交 人: " + oldProcess.getUsernames(),
					// "提交时间: " + subDatetime };
					// PrintUtil.pagePrint(strs);
					if (procard.getFilnalCount() == 1
							|| (!isShouJian && process.getSubmmitCount() > 0)) {
						/**** 生成外委工序计划 ***/
						String nextWwhql = "from ProcessInfor where (dataStatus is null or dataStatus!='删除') and processNO>? and procard.id=(select procard.id from ProcessInfor where id=?) order by processNO";
						List<ProcessInfor> nextWwProcessInforList = (List<ProcessInfor>) totalDao
								.query(nextWwhql, process.getProcessNO(),
										process.getId());
						if (nextWwProcessInforList.size() > 0) {
							int n = 0;
							WaigouWaiweiPlan wwp = new WaigouWaiweiPlan();
							// // 查看是否有委外库
							// Float wwckCount = (Float) totalDao
							// .getObjectByCondition("select count(*) from WareHouse where name='委外库'");
							for (ProcessInfor nextWwProcessInfor : nextWwProcessInforList) {
								if (nextWwProcessInfor != null) {
									if (nextWwProcessInfor.getAgreeWwCount() != null
											&& nextWwProcessInfor
													.getAgreeWwCount() > 0
											&& n == 0) {// 下工序为手工委外生成此工序待入库委外数据
										// 成品待入库
										Float wwCount = 0f;
										if (oldProcess.getZjStatus() != null
												&& oldProcess.getZjStatus()
														.equals("yes")
												&& oldProcess.getSubmmitCount() == (1 + process
														.getSubmmitCount())) {
											wwCount = process.getSubmmitCount() + 1;
										} else {
											wwCount = process.getSubmmitCount();
										}
										String orderNum = (String) totalDao
												.getObjectByCondition(
														"select orderNumber from Procard where id=?",
														procard.getRootId());
										GoodsStore goodsStore2 = new GoodsStore();
										goodsStore2.setNeiorderId(orderNum);
										goodsStore2.setGoodsStoreMarkId(procard
												.getMarkId());
										goodsStore2.setBanBenNumber(procard
												.getBanBenNumber());
										goodsStore2.setGoodsStoreLot(procard
												.getSelfCard());
										goodsStore2
												.setGoodsStoreGoodsName(procard
														.getProName());
										goodsStore2.setApplyTime(Util
												.getDateTime());
										goodsStore2
												.setGoodsStoreArtsCard((String) totalDao
														.getObjectByCondition(
																"select selfCard from Procard where id=?",
																procard
																		.getRootId()));
										goodsStore2.setGoodsStorePerson(Util
												.getLoginUser().getName());
										goodsStore2.setStatus("待入库");
										goodsStore2.setStyle("半成品转库");
										goodsStore2.setProcardId(procard
												.getId());
										goodsStore2
												.setGoodsStoreWarehouse("委外库");// 库别
										// goodsStore2.setGoodHouseName(goodsStore.getGoodHouseName());//
										// 区名
										// goodsStore2.setGoodsStorePosition(goodsStore.getGoodsStorePosition());//
										// 库位
										goodsStore2.setGoodsStoreUnit(procard
												.getUnit());
										goodsStore2.setGoodsStoreCount(wwCount);
										goodsStore2.setProcessNo(process
												.getProcessNO());
										goodsStore2.setProcessName(process
												.getProcessName());
										totalDao.update(procard);
										totalDao.save(goodsStore2);
									}

									if ("外委".equals(nextWwProcessInfor
											.getProductStyle())
											&& (n == 0 || ("yes")
													.equals(nextWwProcessInfor
															.getProcessStatus()))) {// 下工序为外委
										if (n == 0) {
											wwp.setRootMarkId(procard
													.getRootMarkId());
											wwp.setRootSelfCard(procard
													.getRootSelfCard());
											wwp.setOrderNum(procard
													.getOrderNumber());
											wwp.setYwMarkId(procard
													.getYwMarkId());
											wwp.setBanben(procard
													.getBanBenNumber());
											wwp.setBanci(procard.getBanci());
											wwp.setMarkId(procard.getMarkId());
											wwp.setProcessNo(nextWwProcessInfor
													.getProcessNO()
													+ "");
											wwp
													.setProName(procard
															.getProName());
											wwp
													.setProcessName(nextWwProcessInfor
															.getProcessName());
											wwp.setUnit(procard.getUnit());
											wwp.setType("外委");
											Float wwCount = 0f;
											if (oldProcess.getZjStatus() != null
													&& oldProcess.getZjStatus()
															.equals("yes")
													&& oldProcess
															.getSubmmitCount() == (1 + process
															.getSubmmitCount())) {
												wwp.setNumber(process
														.getSubmmitCount() + 1);
												wwp.setBeginCount(process
														.getSubmmitCount() + 1);
												wwCount = process
														.getSubmmitCount() + 1;
											} else {
												wwp.setNumber(process
														.getSubmmitCount());
												wwp.setBeginCount(process
														.getSubmmitCount());
												wwCount = process
														.getSubmmitCount();
											}
											wwp.setAddTime(Util.getDateTime());
											wwp
													.setJihuoTime(Util
															.getDateTime());
											wwp.setShArrivalTime(procard
													.getNeedFinalDate());// 应到货时间在采购确认通知后计算
											wwp.setCaigouMonth(Util
													.getDateTime("yyyy-MM月"));// 采购月份
											String wwNumber = "";
											String before = null;
											Integer bIndex = 10;
											before = "ww"
													+ Util
															.getDateTime("yyyyMMdd");
											Integer maxNo = 0;
											String maxNumber = (String) totalDao
													.getObjectByCondition("select max(planNumber) from WaigouWaiweiPlan where planNumber like '"
															+ before + "%'");
											if (maxNumber != null) {
												String wwnum = maxNumber
														.substring(
																bIndex,
																maxNumber
																		.length());
												try {
													Integer maxNum = Integer
															.parseInt(wwnum);
													if (maxNum > maxNo) {
														maxNo = maxNum;
													}
												} catch (Exception e) {
													// TODO: handle exception
												}
											}
											maxNo++;
											wwNumber = before
													+ String.format("%03d",
															maxNo);
											wwp.setPlanNumber(wwNumber);// 采购计划编号
											wwp.setSelfCard(procard
													.getSelfCard());// 批次
											// wwp.setGysId(nextWwProcessInfor
											// .getZhuserId());// 供应商id
											// wwp.setGysName(nextWwProcessInfor
											// .getGys());// 供应商名称
											wwp.setAllJiepai(nextWwProcessInfor
													.getAllJiepai());// 单件总节拍
											wwp
													.setDeliveryDuration(nextWwProcessInfor
															.getDeliveryDuration());// 耽误时长
											wwp.setSingleDuration(procard
													.getSingleDuration());// 单班时长(工作时长)
											wwp.setProcardId(procard.getId());
											wwp.setProcard(procard);
											// if (wwckCount != null
											// && wwckCount > 0) {
											wwp.setStatus("待入库");
											// 在制品待入库
											if (procard.getZaizhiApplyZk() == null) {
												procard.setZaizhiApplyZk(0f);
											}
											if (procard.getZaizhizkCount() == null) {
												procard.setZaizhizkCount(0f);
											}
											if (procard.getKlNumber() == null) {
												procard.setKlNumber(procard
														.getFilnalCount());
											}
											if (procard.getHascount() == null) {
												procard.setHascount(procard
														.getKlNumber());
											}
											// procard.getKlNumber()-procard.getHascount()=已生产数量
											// 可转库数量=已生产数量-已转库数量-转库申请中数量
											procard
													.setZaizhikzkCount(procard
															.getFilnalCount()
															- procard
																	.getZaizhizkCount()
															- procard
																	.getZaizhiApplyZk());
											// if (procard.getZaizhikzkCount()
											// >= wwCount) {
											procard.setZaizhiApplyZk(procard
													.getZaizhiApplyZk()
													+ wwCount);
											String orderNum = (String) totalDao
													.getObjectByCondition(
															"select orderNumber from Procard where id=?",
															procard.getRootId());
											// 成品待入库
											GoodsStore goodsStore2 = new GoodsStore();
											goodsStore2.setNeiorderId(orderNum);
											goodsStore2
													.setGoodsStoreMarkId(procard
															.getMarkId());
											goodsStore2.setBanBenNumber(procard
													.getBanBenNumber());
											goodsStore2
													.setGoodsStoreLot(procard
															.getSelfCard());
											goodsStore2
													.setGoodsStoreGoodsName(procard
															.getProName());
											goodsStore2.setApplyTime(Util
													.getDateTime());
											goodsStore2
													.setGoodsStoreArtsCard((String) totalDao
															.getObjectByCondition(
																	"select selfCard from Procard where id=?",
																	procard
																			.getRootId()));
											goodsStore2
													.setGoodsStorePerson(Util
															.getLoginUser()
															.getName());
											goodsStore2.setStatus("待入库");
											goodsStore2.setStyle("半成品转库");
											goodsStore2.setProcardId(procard
													.getId());
											goodsStore2.setWaiorderId(procard
													.getOutOrderNum());
											goodsStore2
													.setGoodsStoreWarehouse("委外库");// 库别
											// goodsStore2.setGoodHouseName(goodsStore.getGoodHouseName());//
											// 区名
											// goodsStore2.setGoodsStorePosition(goodsStore.getGoodsStorePosition());//
											// 库位
											goodsStore2
													.setGoodsStoreUnit(procard
															.getUnit());
											goodsStore2
													.setGoodsStoreCount(wwCount);
											goodsStore2.setProcessNo(process
													.getProcessNO());
											goodsStore2.setProcessName(process
													.getProcessName());
											totalDao.update(procard);
											totalDao.save(goodsStore2);
											// 判断外委进委外入库是否要做
											String hql1 = "select valueCode from CodeTranslation where type = 'sys' and keyCode='委外库接收半成品' and valueName='委外库接收半成品'";
											String valueCode = (String) totalDao
													.getObjectByCondition(hql1);
											if (valueCode != null
													&& valueCode.equals("否")) {
												// 入库记录直接通过
												goodsStore2.setStatus("入库");
												goodsStore2
														.setPrintStatus("YES");
												totalDao.update(goodsStore2);
												// 增加库存记录
												String hqlgoods = "from Goods where goodsMarkId='"
														+ procard.getMarkId()
														+ "' and goodsLotId='"
														+ procard.getSelfCard()
														+ "' and goodsStyle='半成品转库' and processNo="
														+ process
																.getProcessNO()
														+ " and goodsClass='委外库'";
												Goods goods = (Goods) totalDao
														.getObjectByCondition(hqlgoods);
												if (goods != null) {
													goods
															.setGoodsCurQuantity(goods
																	.getGoodsCurQuantity()
																	+ goodsStore2
																			.getGoodsStoreCount());
													totalDao.update(goods);
												} else {
													goods = new Goods();
													goods
															.setGoodsMarkId(goodsStore2
																	.getGoodsStoreMarkId());
													goods
															.setGoodsFormat(goodsStore2
																	.getGoodsStoreFormat());
													goods
															.setBanBenNumber(goodsStore2
																	.getBanBenNumber());
													goods
															.setGoodsFullName(goodsStore2
																	.getGoodsStoreGoodsName());
													goods.setGoodsClass("委外库");
													goods
															.setGoodsBeginQuantity(goodsStore2
																	.getGoodsStoreCount());
													goods
															.setGoodsCurQuantity(goodsStore2
																	.getGoodsStoreCount());
													totalDao.save(goods);
												}
												// 添加零件与在制品关系表
												ProcardProductRelation pprelation = new ProcardProductRelation();
												pprelation.setAddTime(Util
														.getDateTime());
												pprelation.setProcardId(procard
														.getId());
												pprelation.setGoodsId(goods
														.getGoodsId());
												pprelation
														.setZyCount(goodsStore2
																.getGoodsStoreCount());
												pprelation.setFlagType("本批在制品");
												totalDao.save(pprelation);
												// 将外购外委激活序列状态改为待激活
												wwp.setStatus("待激活");
												// totalDao.save(wwp);
											}
											// } else {
											// return "对不起超过可申请数量("
											// + procard
											// .getZaizhikzkCount()
											// + ")";
											// }
											// } else {
											// wwp.setStatus("待激活");
											// }
											totalDao.save(wwp);
											// wgSet.add(wwp);
										} else {
											wwp.setProcessNo(wwp.getProcessNo()
													+ nextWwProcessInfor
															.getProcessNO());
											wwp.setProcessName(wwp
													.getProcessName()
													+ ";"
													+ nextWwProcessInfor
															.getProcessName());
											totalDao.update(wwp);
										}
									} else {
										break;
									}
								} else {
									break;
								}
								n++;
							}
							if (wwp.getId() != null) {
								// 匹配供应商
								Price price = (Price) totalDao
										.getObjectByCondition(
												"from Price where wwType='工序外委' and partNumber=? and gongxunum=? and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
														+ Util.getDateTime()
														+ "')  order by hsPrice",
												wwp.getMarkId(), wwp
														.getProcessNo());
								if (price != null) {
									wwp.setPriceId(price.getId());
									wwp.setGysId(price.getGysId());
									ZhUser zhUser = (ZhUser) totalDao
											.getObjectById(ZhUser.class, price
													.getGysId());
									wwp.setGysName(zhUser.getName());
									wwp.setUserCode(zhUser.getUsercode());
									wwp.setUserId(zhUser.getUserid());
									totalDao.update(wwp);
								}
							}
							if (wwp.getStatus() != null
									&& wwp.getStatus().equals("待激活")) {// 说明自动跳过了半成品入委外库操作
								// 下一步操作
								zijihuoww(wwp);
							}
						}
					}
					// System.out.println("客户端全部结束");
					return "提交工序成功";
				} else {
					return "累计提交数量不能大于领取数量!";
				}
			} else {
				return "不存在您提交的工序!";
			}
		}
		return "数据异常!";
	}

	/**
	 * 生成委外序列
	 * 
	 * @param nextWwProcessInforList之后要委外的工序
	 * @param procard提交工序的零件
	 * @param process提交的工序
	 *            （页面）
	 * @param oldProcess提交的工序
	 *            （数据库）
	 * @param fatherProcard因为下层提交而要生成外委的上层零件
	 * @param needWwcount外委数量
	 * @return
	 */
	private String wwgongxu(List<ProcessInfor> nextWwProcessInforList,
			Procard procard, ProcessInfor process, ProcessInfor oldProcess,
			Procard fatherProcard, Float needWwcount) {
		// TODO Auto-generated method stub
		if (nextWwProcessInforList.size() > 0) {
			int n = 0;
			WaigouWaiweiPlan wwp = new WaigouWaiweiPlan();
			Procard wwProcard = null;
			if (fatherProcard != null) {// 下层提交导致上层委外
				wwProcard = fatherProcard;
			} else {
				wwProcard = procard;
			}
			// // 查看是否有委外库
			// Float wwckCount = (Float) totalDao
			// .getObjectByCondition("select count(*) from WareHouse where name='委外库'");
			for (ProcessInfor nextWwProcessInfor : nextWwProcessInforList) {
				if (nextWwProcessInfor != null) {
					if ("外委".equals(nextWwProcessInfor.getProductStyle())
							&& (n == 0 || ("yes").equals(nextWwProcessInfor
									.getProcessStatus()))) {
						if (n == 0) {
							wwp.setRootMarkId(wwProcard.getRootMarkId());
							wwp.setRootSelfCard(wwProcard.getRootSelfCard());
							wwp.setOrderNum(wwProcard.getOrderNumber());
							wwp.setYwMarkId(wwProcard.getYwMarkId());
							wwp.setBanben(wwProcard.getBanBenNumber());
							wwp.setBanci(wwProcard.getBanci());
							wwp.setMarkId(wwProcard.getMarkId());
							wwp.setProcessNo(nextWwProcessInfor.getProcessNO()
									+ "");
							wwp.setProName(wwProcard.getProName());
							wwp.setProcessName(nextWwProcessInfor
									.getProcessName());
							wwp.setUnit(wwProcard.getUnit());
							wwp.setType("外委");
							Float wwCount = 0f;
							if (oldProcess != null
									&& oldProcess.getZjStatus() != null
									&& oldProcess.getZjStatus().equals("yes")
									&& oldProcess.getSubmmitCount() == (1 + needWwcount)) {
								wwp.setNumber(needWwcount + 1);
								wwp.setBeginCount(needWwcount + 1);
								wwCount = needWwcount + 1;
							} else {
								wwp.setNumber(needWwcount);
								wwp.setBeginCount(needWwcount);
								wwCount = needWwcount;
							}
							wwp.setAddTime(Util.getDateTime());
							wwp.setJihuoTime(Util.getDateTime());
							wwp.setShArrivalTime(wwProcard.getNeedFinalDate());// 应到货时间在采购确认通知后计算
							wwp.setCaigouMonth(Util.getDateTime("yyyy-MM月"));// 采购月份
							String wwNumber = "";
							String before = null;
							Integer bIndex = 10;
							before = "ww" + Util.getDateTime("yyyyMMdd");
							Integer maxNo = 0;
							String maxNumber = (String) totalDao
									.getObjectByCondition("select max(planNumber) from WaigouWaiweiPlan where planNumber like '"
											+ before + "%'");
							if (maxNumber != null) {
								String wwnum = maxNumber.substring(bIndex,
										maxNumber.length());
								try {
									Integer maxNum = Integer.parseInt(wwnum);
									if (maxNum > maxNo) {
										maxNo = maxNum;
									}
								} catch (Exception e) {
									// TODO: handle exception
								}
							}
							maxNo++;
							wwNumber = before + String.format("%03d", maxNo);
							wwp.setPlanNumber(wwNumber);// 采购计划编号
							wwp.setSelfCard(wwProcard.getSelfCard());// 批次
							// wwp.setGysId(nextWwProcessInfor
							// .getZhuserId());// 供应商id
							// wwp.setGysName(nextWwProcessInfor
							// .getGys());// 供应商名称
							wwp.setAllJiepai(nextWwProcessInfor.getAllJiepai());// 单件总节拍
							wwp.setDeliveryDuration(nextWwProcessInfor
									.getDeliveryDuration());// 耽误时长
							wwp
									.setSingleDuration(wwProcard
											.getSingleDuration());// 单班时长(工作时长)
							wwp.setProcardId(wwProcard.getId());
							wwp.setProcard(wwProcard);
							// if (wwckCount != null
							// && wwckCount > 0) {
							wwp.setStatus("待入库");
							if (fatherProcard == null) {// 自身工序提交
								// 生成委外待入库数据
								addWwdrk(procard, process, wwCount, wwp);
							}
							totalDao.save(wwp);
						} else {
							wwp.setProcessNo(wwp.getProcessNo() + ";"
									+ nextWwProcessInfor.getProcessNO());
							wwp.setProcessName(wwp.getProcessName() + ";"
									+ nextWwProcessInfor.getProcessName());
							totalDao.update(wwp);
						}
					} else {
						break;
					}
				} else {
					break;
				}
				n++;
			}
			if (wwp.getId() != null) {
				// 匹配供应商
				Price price = (Price) totalDao
						.getObjectByCondition(
								"from Price where wwType='工序外委' and partNumber=? and gongxunum=? and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
										+ Util.getDateTime()
										+ "')  order by hsPrice", wwp
										.getMarkId(), wwp.getProcessNo());
				if (price != null) {
					wwp.setPriceId(price.getId());
					wwp.setGysId(price.getGysId());
					ZhUser zhUser = (ZhUser) totalDao.getObjectById(
							ZhUser.class, price.getGysId());
					wwp.setGysName(zhUser.getName());
					wwp.setUserCode(zhUser.getUsercode());
					wwp.setUserId(zhUser.getUserid());
					totalDao.update(wwp);
				}
			}
			if (wwp.getStatus() != null && wwp.getStatus().equals("待激活")) {// 说明自动跳过了半成品入委外库操作
				// 下一步操作
				zijihuoww(wwp);
			}
		}
		return "true";
	}

	/**
	 * 生成外委待入库数据
	 * 
	 * @param procard
	 * @param process
	 * @param wwCount
	 * @param wwp
	 * @return
	 */
	private String addWwdrk(Procard procard, ProcessInfor process,
			Float wwCount, WaigouWaiweiPlan wwp) {
		// TODO Auto-generated method stub
		// 在制品待入库
		if (procard.getZaizhiApplyZk() == null) {
			procard.setZaizhiApplyZk(0f);
		}
		if (procard.getZaizhizkCount() == null) {
			procard.setZaizhizkCount(0f);
		}
		if (procard.getKlNumber() == null) {
			procard.setKlNumber(procard.getFilnalCount());
		}
		if (procard.getHascount() == null) {
			procard.setHascount(procard.getKlNumber());
		}
		// procard.getKlNumber()-procard.getHascount()=已生产数量
		// 可转库数量=已生产数量-已转库数量-转库申请中数量
		procard.setZaizhikzkCount(procard.getFilnalCount()
				- procard.getZaizhizkCount() - procard.getZaizhiApplyZk());
		// if (procard.getZaizhikzkCount() >= wwCount) {
		procard.setZaizhiApplyZk(procard.getZaizhiApplyZk() + wwCount);
		String orderNum = (String) totalDao.getObjectByCondition(
				"select orderNumber from Procard where id=?", procard
						.getRootId());
		// 成品待入库
		GoodsStore goodsStore2 = new GoodsStore();
		goodsStore2.setNeiorderId(orderNum);
		goodsStore2.setWaiorderId(procard.getOutOrderNum());
		goodsStore2.setGoodsStoreMarkId(procard.getMarkId());
		goodsStore2.setBanBenNumber(procard.getBanBenNumber());
		goodsStore2.setGoodsStoreLot(procard.getSelfCard());
		goodsStore2.setGoodsStoreGoodsName(procard.getProName());
		goodsStore2.setApplyTime(Util.getDateTime());
		goodsStore2.setGoodsStoreArtsCard((String) totalDao
				.getObjectByCondition(
						"select selfCard from Procard where id=?", procard
								.getRootId()));
		goodsStore2.setGoodsStorePerson(Util.getLoginUser().getName());
		goodsStore2.setStatus("待入库");
		goodsStore2.setStyle("半成品转库");
		goodsStore2.setProcardId(procard.getId());
		goodsStore2.setGoodsStoreWarehouse("委外库");// 库别
		// goodsStore2.setGoodHouseName(goodsStore.getGoodHouseName());//
		// 区名
		// goodsStore2.setGoodsStorePosition(goodsStore.getGoodsStorePosition());//
		// 库位
		goodsStore2.setGoodsStoreUnit(procard.getUnit());
		goodsStore2.setGoodsStoreCount(wwCount);
		goodsStore2.setProcessNo(process.getProcessNO());
		goodsStore2.setProcessName(process.getProcessName());
		totalDao.update(procard);
		totalDao.save(goodsStore2);
		// 将外购外委激活序列状态改为待激活
		if (wwp != null) {
			// 判断外委进委外入库是否要做
			String hql1 = "select valueCode from CodeTranslation where type = 'sys' and keyCode='委外库接收半成品' and valueName='委外库接收半成品'";
			String valueCode = (String) totalDao.getObjectByCondition(hql1);
			if (valueCode != null && valueCode.equals("否")) {
				// 入库记录直接通过
				goodsStore2.setStatus("入库");
				goodsStore2.setPrintStatus("YES");
				totalDao.update(goodsStore2);
				// 增加库存记录
				String hqlgoods = "from Goods where goodsMarkId='"
						+ procard.getMarkId() + "' and goodsLotId='"
						+ procard.getSelfCard()
						+ "' and goodsStyle='半成品转库' and processNo="
						+ process.getProcessNO() + " and goodsClass='委外库'";
				Goods goods = (Goods) totalDao.getObjectByCondition(hqlgoods);
				if (goods != null) {
					goods.setGoodsCurQuantity(goods.getGoodsCurQuantity()
							+ goodsStore2.getGoodsStoreCount());
					totalDao.update(goods);
				} else {
					goods = new Goods();
					goods.setGoodsMarkId(goodsStore2.getGoodsStoreMarkId());
					goods.setGoodsFormat(goodsStore2.getGoodsStoreFormat());
					goods.setBanBenNumber(goodsStore2.getBanBenNumber());
					goods
							.setGoodsFullName(goodsStore2
									.getGoodsStoreGoodsName());
					goods.setGoodsClass("委外库");
					goods.setGoodsBeginQuantity(goodsStore2
							.getGoodsStoreCount());
					goods.setGoodsCurQuantity(goodsStore2.getGoodsStoreCount());
					totalDao.save(goods);
				}
				// 添加零件与在制品关系表
				ProcardProductRelation pprelation = new ProcardProductRelation();
				pprelation.setAddTime(Util.getDateTime());
				pprelation.setProcardId(procard.getId());
				pprelation.setGoodsId(goods.getGoodsId());
				pprelation.setZyCount(goodsStore2.getGoodsStoreCount());
				pprelation.setFlagType("本批在制品");
				totalDao.save(pprelation);

				wwp.setStatus("待激活");
			}
			// totalDao.save(wwp);
		}
		// } else {
		// return "对不起超过可申请数量(" + procard.getZaizhikzkCount() + ")";
		// }
		return "true";
	}

	/**
	 * PMI自动提交程序(强控类型)
	 * 
	 * @param process
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	public String updateProcessForPMI(ProcessInfor process) {
		if (process != null) {
			String mes = "";
			// 查询PMI信息
			PmiManagement pmi = (PmiManagement) totalDao.getObjectById(
					PmiManagement.class, process.getPmiId());
			Socket socket;
			int num = 0;
			int ccnum = 0;
			Float nowNenghao = 0F;// 待机能耗
			try {
				socket = new Socket(pmi.getPmi_ip(), Integer.parseInt(pmi
						.getPmi_port()));
				socket.setSoTimeout(3000);// 设置超时等待时间
				BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(
						socket.getOutputStream()));
				bw.write(new char[] { 00, 0x7F, 00, 00, 00, 00, 00 });
				bw.flush();

				// 读取节拍和能耗的数据
				InputStream ins = socket.getInputStream();
				boolean boolWhile = true;
				while (boolWhile) {
					// 每次接收的数据
					String oneString = readBis(ins);// 先接收第一个字符
					// 如果第一个字符是
					// "AA",说明是正在生产中，并且是持续的传递单件产品的生产节拍
					// 第一条数据肯定是AA(上方读取)
					if ("AA".equals(oneString)) {
						num++;
						for (int i = 0; i < 100; i++) {
							System.out.println(i);
						}
					} else if ("CC".equals(oneString)) {
						ccnum++;
						// 开始处理待机能耗
						// CC 表示已经断电，显示获取待机能耗
						// 数据 CC 00 00. 00 00 00 00 DD
						String nowNenghao_str = "";
						// 先截取前两位
						for (float j = 0; j < 2; j++) {
							String nenghao_data2 = readBis(ins);
							nowNenghao_str += Integer.parseInt(nenghao_data2);// 累计节拍字符
							System.out.print(nenghao_data2);
						}
						nowNenghao_str += ".";// 添加小数点
						// 再截取后四位
						for (float j = 0; j < 4; j++) {
							String nenghao_data2 = readBis(ins);
							nowNenghao_str += Integer.parseInt(nenghao_data2);// 累计节拍字符
							System.out.print(nenghao_data2);
						}
						nowNenghao = Float.parseFloat(nowNenghao_str);
						boolWhile = false;
					} else {
						boolWhile = false;
					}
				}
				bw.close();
				socket.close();
				// 延迟执行
				Thread.sleep(4 * 1000);
			} catch (Exception e) {
				e.printStackTrace();
				mes = "操作失败!";
				AlertMessagesServerImpl.addAlertMessages("系统维护异常组",
						"PMI操作失败  --IP:" + pmi.getPmi_ip() + "、端口:"
								+ pmi.getPmi_port() + "、操作方式:PMI自动提交工序、工序号:"
								+ process.getProcessNO() + ",件号:"
								+ process.getProcard().getMarkId() + ",批次:"
								+ process.getProcard().getSelfCard(), "2");
			}

			// 指令成功,开始处理工序逻辑
			if (mes == "" && ccnum > 0) {
				ProcessInfor oldProcess = (ProcessInfor) totalDao
						.getObjectById(ProcessInfor.class, process.getId());
				/****
				 * -------------------------------LED推送--------------------
				 * -----------------------------------------------
				 ***/
				// 通过工位查询对应的LED显示屏
				String hql_Led = "from LED where stations =?";
				LED ledManagement = (LED) totalDao.getObjectByCondition(
						hql_Led, oldProcess.getGongwei());
				// // 查询下一道工序的工位信息
				String hql_nextpro = "from ProcessInfor where processNO >? and procard.id=? order by processNO";
				ProcessInfor nextpi = (ProcessInfor) totalDao
						.getObjectByCondition(hql_nextpro, oldProcess
								.getProcessNO(), oldProcess.getProcard()
								.getId());
				if (ledManagement != null) {
					String sendMessage = "";
					String sendStatus = "";

					// 每次提交后 只显示 工位+卫生责任人
					sendMessage = oldProcess.getGongwei();

					// 将本产品、工序的推送信息发送保存，用于累计多个工序
					LEDLog ledLog = new LEDLog();
					ledLog.setProcardId(oldProcess.getProcard().getId());
					ledLog.setProcessNo(oldProcess.getProcessNO());
					ledLog.setContext(sendMessage);
					ledLog.setProductStatus("完成");
					ledLog.setGongwei(process.getGongwei());
					sendMessage = ledServer.addLEDLog(ledManagement.getId(),
							ledLog);

					if (sendMessage == null || sendMessage.length() <= 0) {
						// 如果查询不到led记录,只显示 工位+卫生责任人 （并且是固定移动方式）
						sendMessage = oldProcess.getGongwei();
						sendStatus = LedSendUtil.OnAddtext(ledManagement
								.getNumber(), sendMessage, 1, ledManagement
								.getId());
					} else {
						// 发送LED （向左移动）
						sendStatus = LedSendUtil.OnAddtext(ledManagement
								.getNumber(), sendMessage, ledManagement
								.getId());
					}
					// }
					if (!"true".equals(sendStatus)) {
						// 保存记录
						ledServer.addLEDLog(ledManagement.getId(), sendMessage);
						return "抱歉!系统向" + oldProcess.getGongwei()
								+ "工位的LED屏推送工作信息时出错,请您联系管理员!谢谢! 错误原因:"
								+ sendStatus;
					}
				}

				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, oldProcess.getProcard().getId());

				// 开始延时程序，用于防止数据异常。(等待服务端先完成)

				// 查询该工序的领取记录
				String hql_proLog = "from ProcessInforReceiveLog where status='待提交' and fk_processInforId=?";
				ProcessInforReceiveLog proLog = (ProcessInforReceiveLog) totalDao
						.getObjectByCondition(hql_proLog, oldProcess.getId());
				if (proLog != null) {
					// 向本工序提交的下一个工位推送待干信息
					if (nextpi != null && nextpi.getGongwei() != null
							&& nextpi.getGongwei().length() > 0) {
						// 通过工位查询对应的LED显示屏
						String hql_nextLed = "from LED where stations =?";
						LED nextledManagement = (LED) totalDao
								.getObjectByCondition(hql_nextLed, nextpi
										.getGongwei());
						if (nextledManagement != null) {
							String sendMessage = "";
							String sendStatus = "";
							float sumnum = proLog.getSubmitNumber();
							int number = (int) sumnum;
							// 上一工序的提交推送信息
							sendMessage = nextpi.getGongwei() + " 您好,"
									+ oldProcess.getGongwei() + "工位向您提交"
									+ number + "件产品,请您前往加工!谢谢! ";
							sendStatus = ledSendManage(nextpi, 0F, null,
									sendMessage);
							// if (!"true".equals(sendStatus)) {
							// return sendStatus;
							// }
						}
					}
					/****
					 * -------------------------------LED推送结束------------------
					 * -------------------------------------------------
					 ***/
					boolean isShouJian = false;
					/********************************************** 添加首检记录 **/
					if (oldProcess.getZjStatus() != null
							&& oldProcess.getZjStatus().equals("yes")
							&& (oldProcess.getHadsj() == null || oldProcess
									.getHadsj().equals("no"))
							&& process.getSubmmitCount() == 1) {
						isShouJian = true;
						// 查询最近首检数据
						String hqlLs = "from LogoStickers where markId=?  and billDate = (select max(billDate) from LogoStickers where markId=? and processNO = '"
								+ oldProcess.getProcessNO() + "' )";
						LogoStickers ls = (LogoStickers) totalDao
								.getObjectByCondition(hqlLs, procard
										.getMarkId(), procard.getMarkId());
						// 添加首检数据
						LogoStickers newLs = new LogoStickers();
						if (ls != null) {
							BeanUtils.copyProperties(ls, newLs);
						} else {
							newLs.setStickStyle("首检样品");
							newLs.setMarkId(procard.getMarkId());
							newLs.setPartsName(procard.getProName());

						}
						newLs.setCount(1F);
						newLs.setLotId(procard.getSelfCard());// 批次
						newLs
								.setProcessNO(oldProcess.getProcessNO()
										.toString());// 工序号
						newLs.setOperator(oldProcess.getUsernames());// 操作者
						newLs.setCode(oldProcess.getUsercodes());// 操作者工号
						newLs.setExaminerCode(null);// 检验者工号
						newLs.setExaminerName(null);// 检验者姓名
						newLs.setBillDate(Util.getDateTime());// 时间
						newLs.setIsPrint("NO");// 是够打印
						// 计算编号
						String hqlLsnumber = "select max(number) from LogoStickers where stickStyle='"
								+ newLs.getStickStyle() + "'";
						List list = totalDao.find(hqlLsnumber);
						String newNumber = "";
						SimpleDateFormat sdf = new SimpleDateFormat("yyyyMM");
						if (null != list && list.size() > 0
								&& null != list.get(0)) {
							String maxNumber = (String) list.get(0);
							String y = sdf.format(new Date());
							String headStr = maxNumber.substring(0, 12);
							String headStr2 = maxNumber.substring(0, 6);
							if (maxNumber.contains(y)) {
								newNumber = headStr + strAddOne(maxNumber);
							} else {
								newNumber = headStr2 + y + "001";
							}
						} else {
							if ("报废品".equals(newLs.getStickStyle())) {
								newNumber = "QD-RP-" + sdf.format(new Date())
										+ "001";
							} else if ("待处理品".equals(newLs.getStickStyle())) {
								newNumber = "QD-WP-" + sdf.format(new Date())
										+ "001";
							} else if ("首检样品".equals(newLs.getStickStyle())) {
								newNumber = "QD-FP-" + sdf.format(new Date())
										+ "001";
							}
						}
						newLs.setNumber(newNumber);
						oldProcess.setHadsj("yes");
						totalDao.save(newLs);
					} else if (oldProcess.getZjStatus().equals("yes")) {
						// 检查首检样品的内容已经存在，并且已经打印
						String hqlLs = "from LogoStickers where markId=?  and lotId=? and processNO=? and (isGys is null or isGys='no')";
						LogoStickers ls = (LogoStickers) totalDao
								.getObjectByCondition(hqlLs, procard
										.getMarkId(), procard.getSelfCard(),
										oldProcess.getProcessNO().toString());
						if (ls == null || ls.getDemandExamContent() == null
								|| ls.getDemandExamContent().length() <= 0) {
							return "首检模版的内容不能为空，请相关负责人补全首检内容后再提交工序!谢谢!";
						}

						if ("NO".equals(ls.getIsPrint())) {
							return "首检记录尚未打印，请打印后再提交工序!谢谢!";
						}
					}
					/********************************************** 添加首检记录结束 **/

					/***
					 * 补料单提交处理
					 */
					Integer oldProcardId = procard.getOldProcardId();
					if (oldProcardId != null && oldProcardId > 0) {
						String hql = "from ProcessInfor pi where pi.procard.id=? and processNO=?  ";
						ProcessInfor zcProcessInfor = (ProcessInfor) totalDao
								.getObjectByCondition(hql, oldProcardId,
										oldProcess.getProcessNO());
						if (zcProcessInfor != null) {
							zcProcessInfor.setTotalCount(zcProcessInfor
									.getTotalCount()
									+ process.getSubmmitCount());
							zcProcessInfor.setApplyCount(zcProcessInfor
									.getApplyCount()
									+ process.getSubmmitCount());
						}
					}

					/*** 报废需要新加功能来完善 */

					// 设置工序的已领数量=提交数量+报废数量（因为提交后要重新领取）
					oldProcess.setApplyCount(oldProcess.getSubmmitCount()
							+ oldProcess.getBreakCount());
					oldProcess.setStatus("自检");// 提交工序后从新开始领取
					// 数量全部完成
					if (procard.getFilnalCount().equals(
							oldProcess.getTotalCount())
							&& oldProcess.getTotalCount() == oldProcess
									.getApplyCount()) {

						oldProcess.setStatus("完成");// 完成工序

						/*** 更新物品所在工位信息 ***/
						// 查询是否存在下一道工序
						String hql2 = "from ProcessInfor pi where pi.procard.id=? and processNO>? order by processNO";
						ProcessInfor nextPi = (ProcessInfor) totalDao
								.getObjectByCondition(hql2, oldProcess
										.getProcard().getId(), oldProcess
										.getProcessNO());
						if (nextPi != null) {
							oldProcess.getProcard().setGongwei(
									nextPi.getGongwei());
							oldProcess.getProcard().setShebeiName(
									nextPi.getShebeiName());
							oldProcess.getProcard().setShebeiNo(
									nextPi.getShebeiNo());
						} else {
							oldProcess.getProcard().setGongwei(
									oldProcess.getGongwei());
							oldProcess.getProcard().setShebeiName(
									oldProcess.getShebeiName());
							oldProcess.getProcard().setShebeiNo(
									oldProcess.getShebeiNo());
						}
					}
					/**************** 计算本工序的所有领取的总节拍以及总能耗 ***************/
					String hql_jiepai = "select sum(allJiepai),sum(allNenghao) from ProcessInforReceiveLog where status='提交' and fk_processInforId=? and fk_pirLId is null ";
					List list = totalDao.query(hql_jiepai, oldProcess.getId());
					Float alljiepai = 0F;
					Float allNenghao = 0F;
					if (list != null && list.size() > 0) {
						Object[] obj = (Object[]) list.get(0);
						if (obj[0] != null) {
							alljiepai = Float.parseFloat(obj[0].toString());
						}
						if (obj[1] != null) {
							allNenghao = Float.parseFloat(obj[1].toString());
						}
					}
					oldProcess.setNowAllJiepai(alljiepai);
					oldProcess.setNowAllNenghao(allNenghao);
					/**************** 计算本工序的所有领取的总节拍以及总能耗结束 ***************/
					/**************** 计算本产品的所有工序的总节拍以及总能耗 ***************/
					String hql_projiepai = "select sum(nowAllJiepai),sum(nowAllNenghao) from ProcessInfor where  procard.id=? ";
					List list_pro = totalDao.query(hql_projiepai, procard
							.getId());
					Float procard_alljiepai = 0F;
					Float procard_allNenghao = 0F;
					if (list_pro != null && list_pro.size() > 0) {
						Object[] obj = (Object[]) list_pro.get(0);
						if (obj[0] != null) {
							procard_alljiepai = Float.parseFloat(obj[0]
									.toString());
						}
						if (obj[1] != null) {
							procard_allNenghao = Float.parseFloat(obj[1]
									.toString());
						}
					}
					procard.setNowAllJiepai(procard_alljiepai);
					procard.setNowAllNenghao(procard_allNenghao);
					/**************** 计算本产品的所有工序的总节拍以及总能耗结束 ***************/
					String subDatetime = Util.getDateTime();
					oldProcess.setSubmitDate(subDatetime);
					proLog.setAllDjNenghao(nowNenghao);// 待机能耗
					proLog.setStatus("提交");
					pmi.setStatus("空闲");
					totalDao.update(proLog);
					totalDao.update(pmi);
					totalDao.update(oldProcess);
					totalDao.update(procard);

					// 为打印用
					process.setProcessNO(oldProcess.getProcessNO());
					process.setProcessName(oldProcess.getProcessName());
					process.setUsernames(oldProcess.getUsernames());
					process.setSubmitDate(subDatetime);
					if (!isShouJian) {
						/**** 生成外委工序计划 ***/
						String nextWwhql = "from ProcessInfor where processNO>? and procard.id=(select procard.id from ProcessInfor where id=?) order by processNO";
						List<ProcessInfor> nextWwProcessInforList = (List<ProcessInfor>) totalDao
								.query(nextWwhql, process.getProcessNO(),
										process.getId());
						if (nextWwProcessInforList.size() > 0) {
							int n = 0;
							WaigouWaiweiPlan wwp = new WaigouWaiweiPlan();
							// 查看是否有委外库
							Float wwckCount = (Float) totalDao
									.getObjectByCondition("select count(*) from WareHouse where name='委外库'");
							for (ProcessInfor nextWwProcessInfor : nextWwProcessInforList) {
								if (nextWwProcessInfor != null) {
									if ("外委".equals(nextWwProcessInfor
											.getProductStyle())
											&& (n == 0 || ("yes")
													.equals(nextWwProcessInfor
															.getProcessStatus()))) {
										if (n == 0) {
											wwp.setRootMarkId(procard
													.getRootMarkId());
											wwp.setRootSelfCard(procard
													.getRootSelfCard());
											wwp.setOrderNum(procard
													.getOrderNumber());
											wwp.setYwMarkId(procard
													.getYwMarkId());
											wwp.setMarkId(procard.getMarkId());
											wwp.setProcessNo(nextWwProcessInfor
													.getProcessNO()
													+ "");
											wwp
													.setProName(procard
															.getProName());
											wwp
													.setProcessName(nextWwProcessInfor
															.getProcessName());
											wwp.setBanben(procard
													.getBanBenNumber());
											wwp.setBanci(procard.getBanci());
											wwp.setType("外委");
											wwp.setUnit(procard.getUnit());
											Float wwCount = 0f;
											if (oldProcess.getZjStatus() != null
													&& oldProcess.getZjStatus()
															.equals("yes")
													&& oldProcess
															.getSubmmitCount() == (1 + process
															.getSubmmitCount())) {
												wwp.setNumber(process
														.getSubmmitCount() + 1);
												wwp.setBeginCount(process
														.getSubmmitCount() + 1);
												wwCount = process
														.getSubmmitCount() + 1;
											} else {
												wwp.setNumber(process
														.getSubmmitCount());
												wwp.setBeginCount(process
														.getSubmmitCount());
												wwCount = process
														.getSubmmitCount();
											}
											wwp.setAddTime(Util.getDateTime());
											wwp
													.setJihuoTime(Util
															.getDateTime());
											wwp.setShArrivalTime(procard
													.getNeedFinalDate());// 应到货时间在采购确认通知后计算
											wwp.setCaigouMonth(Util
													.getDateTime("yyyy-MM月"));// 采购月份
											String wwNumber = "";
											String before = null;
											Integer bIndex = 10;
											before = "ww"
													+ Util
															.getDateTime("yyyyMMdd");

											Integer maxNo = 0;
											String maxNumber = (String) totalDao
													.getObjectByCondition("select max(planNumber) from WaigouOrder where planNumber like '"
															+ before + "%'");
											if (maxNumber != null) {
												String wwnum = maxNumber
														.substring(
																bIndex,
																maxNumber
																		.length());
												try {
													Integer maxNum = Integer
															.parseInt(wwnum);
													if (maxNum > maxNo) {
														maxNo = maxNum;
													}
												} catch (Exception e) {
													// TODO: handle exception
												}
											}
											maxNo++;
											wwNumber = before
													+ String.format("%03d",
															maxNo);
											wwp.setPlanNumber(wwNumber);// 采购计划编号
											wwp.setSelfCard(procard
													.getSelfCard());// 批次
											wwp.setGysId(nextWwProcessInfor
													.getZhuserId());// 供应商id
											wwp.setGysName(nextWwProcessInfor
													.getGys());// 供应商名称
											wwp.setAllJiepai(nextWwProcessInfor
													.getAllJiepai());// 单件总节拍
											wwp
													.setDeliveryDuration(nextWwProcessInfor
															.getDeliveryDuration());// 耽误时长
											wwp.setSingleDuration(procard
													.getSingleDuration());// 单班时长(工作时长)
											wwp.setProcardId(procard.getId());
											wwp.setProcard(procard);
											if (wwckCount != null
													&& wwckCount > 0) {
												wwp.setStatus("待在制入库");
												// 在制品待入库
												if (procard.getZaizhiApplyZk() == null) {
													procard
															.setZaizhiApplyZk(0f);
												}
												if (procard.getZaizhizkCount() == null) {
													procard
															.setZaizhizkCount(0f);
												}
												if (procard.getKlNumber() == null) {
													procard.setKlNumber(procard
															.getFilnalCount());
												}
												if (procard.getHascount() == 0) {
													procard.setHascount(procard
															.getKlNumber());
												}
												// procard.getKlNumber()-procard.getHascount()=已生产数量
												// 可转库数量=已生产数量-已转库数量-转库申请中数量
												procard
														.setZaizhikzkCount(procard
																.getKlNumber()
																- procard
																		.getHascount()
																- procard
																		.getZaizhizkCount()
																- procard
																		.getZaizhiApplyZk());
												// if
												// (procard.getZaizhikzkCount()
												// >= wwCount) {
												procard
														.setZaizhiApplyZk(procard
																.getZaizhiApplyZk()
																+ wwCount);
												String orderNum = (String) totalDao
														.getObjectByCondition(
																"select orderNumber from Procard where id=?",
																procard
																		.getRootId());
												// 成品待入库
												GoodsStore goodsStore2 = new GoodsStore();
												goodsStore2
														.setNeiorderId(orderNum);
												goodsStore2
														.setWaiorderId(procard
																.getOutOrderNum());
												goodsStore2
														.setGoodsStoreMarkId(procard
																.getMarkId());
												goodsStore2
														.setBanBenNumber(procard
																.getBanBenNumber());
												goodsStore2
														.setGoodsStoreLot(procard
																.getSelfCard());
												goodsStore2
														.setGoodsStoreGoodsName(procard
																.getProName());
												goodsStore2.setApplyTime(Util
														.getDateTime());
												goodsStore2
														.setGoodsStoreArtsCard((String) totalDao
																.getObjectByCondition(
																		"select selfCard from Procard where id=?",
																		procard
																				.getRootId()));
												goodsStore2
														.setGoodsStorePerson(Util
																.getLoginUser()
																.getName());
												goodsStore2.setStatus("待入库");
												goodsStore2.setStyle("半成品转库");
												goodsStore2
														.setProcardId(procard
																.getId());
												goodsStore2
														.setGoodsStoreWarehouse("委外库");// 库别
												// goodsStore2.setGoodHouseName(goodsStore.getGoodHouseName());//
												// 区名
												// goodsStore2.setGoodsStorePosition(goodsStore.getGoodsStorePosition());//
												// 库位
												goodsStore2
														.setGoodsStoreUnit(procard
																.getUnit());
												goodsStore2
														.setGoodsStoreCount(wwCount);
												totalDao.update(procard);
												return ""
														+ totalDao
																.save(goodsStore2);
												// } else {
												// return "对不起超过可申请数量("
												// + procard
												// .getZaizhikzkCount()
												// + ")";
												// }
											} else {
												wwp.setStatus("待激活");
											}
											totalDao.save(wwp);
											// wgSet.add(wwp);
										} else {
											wwp.setProcessNo(wwp.getProcessNo()
													+ ";"
													+ nextWwProcessInfor
															.getProcessNO());
											wwp.setProcessName(wwp
													.getProcessName()
													+ ";"
													+ nextWwProcessInfor
															.getProcessName());
											totalDao.update(wwp);
										}
									} else {
										break;
									}
								} else {
									break;
								}
								n++;
							}
							if (wwp.getId() != null) {
								// 匹配供应商
								Price price = (Price) totalDao
										.getObjectByCondition(
												"from Price where wwType='工序外委' and partNumber=? and gongxunum=? and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
														+ Util.getDateTime()
														+ "')  order by hsPrice",
												wwp.getMarkId(), wwp
														.getProcessNo());
								if (price != null) {
									wwp.setPriceId(price.getId());
									wwp.setGysId(price.getGysId());
									ZhUser zhUser = (ZhUser) totalDao
											.getObjectById(ZhUser.class, price
													.getGysId());
									wwp.setGysName(zhUser.getName());
									wwp.setUserCode(zhUser.getUsercode());
									wwp.setUserId(zhUser.getUserid());
									totalDao.update(wwp);
								}
							}
						}
					}
					return "提交工序成功";
				}
			} else {
				return mes;
			}
		}
		return "数据异常!";
	}

	/***
	 * 提交激活
	 * 
	 * @param processId
	 * @return
	 */
	@Override
	public String updateJihuo(Integer processId, Integer id, String op) {
		Procard fatherProcard = findProcardById(id);
		ProcessInfor oldProcess = (ProcessInfor) totalDao.getObjectById(
				ProcessInfor.class, processId);
		// 检查是否是最后一道工序
		// String processNOhql =
		// "select max(processNO) from ProcessInfor where procard.id=? and productStyle='自制'";
		String processNOhql = "select max(processNO) from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除')";// 所有工序
		Object proObj = totalDao.getObjectByCondition(processNOhql, oldProcess
				.getProcard().getId());
		if (proObj != null) {
			Integer maxProcessNO = Integer.parseInt(proObj.toString());
			// 最后一道工序
			if (oldProcess.getProcessNO().equals(maxProcessNO)) {
				// 提交数量

				fatherProcard.setTjNumber(oldProcess.getSubmmitCount());// 提交数量
				if (fatherProcard.getTjNumber() > fatherProcard
						.getFilnalCount()) {
					fatherProcard.setTjNumber(fatherProcard.getFilnalCount());
				}
				if ("外购".equals(fatherProcard.getProcardStyle())) {
					// 半成品用权值计算
					fatherProcard.setMinNumber(fatherProcard.getTjNumber()
							/ fatherProcard.getQuanzi2()
							* fatherProcard.getQuanzi1());// 最小提交数量
				} else {
					fatherProcard.setMinNumber(fatherProcard.getTjNumber()
							/ (fatherProcard.getCorrCount() == null ? 1
									: fatherProcard.getCorrCount()));// 最小提交数量
				}
				// 完成操作
				if (fatherProcard.getFilnalCount().equals(
						fatherProcard.getTjNumber())) {
					fatherProcard.setStatus("完成");
				} else {
					fatherProcard.setStatus("领工序");
				}
				totalDao.update(fatherProcard);

				if (fatherProcard != null
						&& "总成".equals(fatherProcard.getProcardStyle())) {
					if (fatherProcard.getRukuCount() == null)
						fatherProcard.setRukuCount(0F);// 入库数量清0
					return "";
				} else {
					// /** 开始激活上层数据 */
					// jihuoProcard(fatherProcard.getRootId(), fatherProcard
					// .getBelongLayer() - 1, op);
					// 获取上层零件并解锁上层最后一道工序数量
					Procard sc = fatherProcard.getProcard();
					if (sc != null) {
						Float llCount = (Float) totalDao
								.getObjectByCondition(
										"select count(*) from Procard where procard.id=?  and (sbStatus is null or sbStatus !='删除')"
												+ " and procardStyle='外购' "
												+ "and (needProcess is null or needProcess !='yes') "
												+ "and (lingliaostatus is null or lingliaostatus!='否')",
										sc.getId());
						if (llCount != null && llCount > 0) {
							sc.setLingliaostatus("是");
						} else {
							if ("是".equals(sc.getLingliaostatus())) {
								AlertMessagesServerImpl.addAlertMessages(
										"系统维护异常组",
										"procard的Lingliaostatus应该是否，被设置为是，需要排查。id:"
												+ sc.getId(), "提交工序", "2");
							}
							sc.setLingliaostatus("否");
						}
						if ("否".equals(sc.getLingliaostatus())) {
							sc.setHascount(0F);
							Float nowMinNumber = oldProcess.getSubmmitCount();
							if (fatherProcard.getProcardStyle().equals("外购")) {
								nowMinNumber = nowMinNumber
										* fatherProcard.getQuanzi2()
										/ fatherProcard.getQuanzi1();
							} else {
								nowMinNumber = nowMinNumber
										/ fatherProcard.getCorrCount();
								nowMinNumber = (float) Math.ceil(nowMinNumber);
							}
							if (sc.getKlNumber() == null
									|| sc.getKlNumber() < nowMinNumber) {
								sc.setKlNumber(nowMinNumber);
							}
							if (sc.getKlNumber() > sc.getFilnalCount()) {
								sc.setKlNumber(sc.getFilnalCount());
							}
							if (sc.getStatus().equals("已发卡")
									|| sc.getStatus().equals("初始")) {
								sc.setStatus("已发料");
								sc.setJihuoStatua("激活");
							}
							totalDao.update(sc);

							// 设置
							Float maxNumber = null;
							if (sc.getProcardStyle().equals("总成")) {
								maxNumber = (Float) totalDao
										.getObjectByCondition(
												"select max(minNumber) from Procard where procard.id=? and (oldProcardId is null or oldProcardId=0) and (procardStyle='自制' or (procardStyle='外购' and  needProcess='yes') )and (sbStatus is null or sbStatus !='删除') ",
												sc.getId());

							} else {
								maxNumber = (Float) totalDao
										.getObjectByCondition(
												"select max(minNumber) from Procard where procard.id=? and (procardStyle='自制' or (procardStyle='外购' and  needProcess='yes') )and (sbStatus is null or sbStatus !='删除') ",
												sc.getId());
							}
							String hql_process = "from ProcessInfor where procard.id=? ";
							List<ProcessInfor> list_process = totalDao.query(
									hql_process, sc.getId());
							if (maxNumber > sc.getFilnalCount()) {
								maxNumber = sc.getFilnalCount();
								AlertMessagesServerImpl.addAlertMessages(
										"系统维护异常组",
										"下层的minnumber大于上层的finallcount。id:"
												+ sc.getId(), "提交工序", "2");
							}
							for (ProcessInfor processInfor : list_process) {
								processInfor.setTotalCount(maxNumber);
								totalDao.update(processInfor);
							}
						}
						if ((sc.getStatus().equals("已发卡")
								|| sc.getStatus().equals("已发料") || sc
								.getStatus().equals("领工序"))
								&& (sc.getKlNumber() != null && sc
										.getHascount() != null)) {
							if (sc.getStatus().equals("已发卡")) {
								sc.setStatus("已发料");
							}
							// 重算一下上层hascount
							List<Procard> peitaoSonList = null;
							Float scpeitao = sc.getFilnalCount();
							if (sc.getProcardStyle().equals("外购")) {
								peitaoSonList = new ArrayList<Procard>();
								peitaoSonList.add(sc);
							} else {
								peitaoSonList = totalDao
										.query(
												"from Procard where procard.id=? and (sbStatus is null or sbStatus !='删除') and procardStyle='外购'"
														+ " and (needProcess is null or needProcess !='yes') and (lingliaostatus is null or lingliaostatus!='否')",
												sc.getId());
							}
							for (Procard son : peitaoSonList) {
								if (son.getHascount() == null) {// 被包工包料外委出去了
									scpeitao = 0f;
								} else {
									// 生产已领数量
									Float scylCount = son.getKlNumber()
											- son.getHascount();
									// - wwylCount;
									if (son.getNeedProcess() == null
											|| !son.getNeedProcess().equals(
													"yes")) {
										if (scpeitao == null) {
											scpeitao = scylCount
													* son.getQuanzi1()
													/ son.getQuanzi2();
										} else if (scpeitao > scylCount
												* son.getQuanzi1()
												/ son.getQuanzi2()) {
											scpeitao = scylCount
													* son.getQuanzi1()
													/ son.getQuanzi2();
										}
										if ((scpeitao - Math.floor(scpeitao)) > 0.95) {
											scpeitao = (float) Math
													.floor(scpeitao) + 1f;
										}
									} else {
										if (scpeitao == null) {
											scpeitao = scylCount;
										} else if (scpeitao > scylCount) {
											scpeitao = scylCount;
										}
										if ((scpeitao - Math.floor(scpeitao)) > 0.95) {
											scpeitao = (float) Math
													.floor(scpeitao) + 1f;
										}
									}
								}

							}
							if (scpeitao == null) {
								scpeitao = 0f;
							}
							if (scpeitao % 1 < 0.95) {
								scpeitao = (float) Math.floor(scpeitao);
							} else {
								scpeitao = (float) Math.ceil(scpeitao);
							}
							Float hascount = sc.getKlNumber() - scpeitao;
							if (hascount < 0) {
								hascount = 0f;
							}
							sc.setHascount(hascount);
							// 物料配齐数量
							Float pqCount = sc.getKlNumber() - sc.getHascount();
							Float minNumber = null;
							if (sc.getProcardStyle().equals("总成")) {
								minNumber = (Float) totalDao
										.getObjectByCondition(
												"select min(minNumber) from Procard where procard.id=? and (oldProcardId is null or oldProcardId=0) and (procardStyle='自制' or (procardStyle='外购' and  needProcess='yes') )and (sbStatus is null or sbStatus !='删除') ",
												sc.getId());
							} else {
								minNumber = (Float) totalDao
										.getObjectByCondition(
												"select min(minNumber) from Procard where procard.id=? and (procardStyle='自制' or (procardStyle='外购' and  needProcess='yes') )and (sbStatus is null or sbStatus !='删除') ",
												sc.getId());
							}

							// 查询同一父层下最小完成的数数量
							if (minNumber != null && minNumber > 0) {
								float cminNumber = (float) Math.ceil(minNumber);
								if ((cminNumber - minNumber) > 0.05) {
									minNumber = (float) Math.floor(minNumber);
								} else {
									minNumber = cminNumber;
								}
								// 获取较小数量作为限制
								Float lastCount = pqCount > minNumber ? minNumber
										: pqCount;
								// 关联件号，控制工序总数
								String hql_process = "from ProcessInfor where procard.id=?  and status<>'完成'"
										+ " and processNO in (select processNo from ProcessAndWgProcardTem where procardMarkId=?)";
								List<ProcessInfor> list_process = totalDao
										.query(hql_process, sc.getId(), sc
												.getMarkId());
								for (ProcessInfor processInfor : list_process) {
									String hql_glprocess = null;
									if (sc.getProcardStyle().equals("总成")) {
										hql_glprocess = "select min(minNumber) from Procard where procard.id=? and (oldProcardId is null or oldProcardId=0)  "
												+ "and markId in (select wgprocardMardkId from ProcessAndWgProcardTem "
												+ "where procardMarkId=? and processNo=? and processName=?)";
									} else {
										hql_glprocess = "select min(minNumber) from Procard where procard.id=? "
												+ "and markId in (select wgprocardMardkId from ProcessAndWgProcardTem "
												+ "where procardMarkId=? and processNo=? and processName=?)";
									}
									Float minNumber2 = (Float) totalDao
											.getObjectByCondition(
													hql_glprocess,
													sc.getId(),
													sc.getMarkId(),
													processInfor.getProcessNO(),
													processInfor
															.getProcessName());
									if (minNumber2 != null) {
										float cminNumber2 = (float) Math
												.ceil(minNumber2);
										if ((cminNumber2 - minNumber2) > 0.05) {
											minNumber2 = (float) Math
													.floor(minNumber2);
										} else {
											minNumber2 = cminNumber2;
										}
										processInfor.setTotalCount(minNumber2);
										totalDao.update(processInfor);
									}
								}

								// 获取上层最后一道工序
								ProcessInfor scProcess = (ProcessInfor) totalDao
										.getObjectByCondition(
												"from ProcessInfor where procard.id=? "
														+ "and (dataStatus is null or dataStatus !='删除')"
														+ " order by processNO desc ",
												sc.getId());
								if (lastCount > sc.getFilnalCount()) {
									lastCount = sc.getFilnalCount();
									AlertMessagesServerImpl.addAlertMessages(
											"系统维护异常组",
											"下层的minnumber大于上层的finallcount。id:"
													+ sc.getId(), "提交工序", "2");
								}
								// if (scProcess.getTotalCount() > lastCount) {
								scProcess.setTotalCount(lastCount);
								totalDao.update(scProcess);
								// }
							}

						}
					}

					// // 查询本层是否存在未提交数据
					// String thisHql =
					// "from Procard where rootId=? and belongLayer=? and (minNumber is null or minNumber<1) and (sbStatus is null or sbStatus !='删除')";
					// int count = totalDao.getCount(thisHql, fatherProcard
					// .getRootId(), fatherProcard.getBelongLayer());
					// if (count == 0) {// 本层都已经提交
					//						
					// }
				}

			}
		}
		return "";
	}

	/***
	 * 通过废品单Id查询流水单
	 * 
	 * @param stickersId
	 * @return
	 */
	public List findProcardForzj(Integer stickersId) {
		if (stickersId != null) {
			LogoStickers ls = (LogoStickers) totalDao.getObjectById(
					LogoStickers.class, stickersId);
			if (ls != null) {
				List<Procard> list = new ArrayList<Procard>();
				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, ls.getOldProcardId());
				if (procard != null) {
					String hql = "from Procard p where p.procard.id=? and oldProcardId is null or oldProcardId =0";
					list = totalDao.query(hql, procard.getId());
					// list.add(procard);
					return list;
				}
			}
		}
		return null;
	}

	/***
	 * 生成新的报废单以及新流水单
	 * 
	 * @param stickersId
	 * @return
	 */
	public String addNewzj(Integer stickersId, Integer[] procardId,
			String responsible) {
		if (stickersId != null) {
			LogoStickers ls = (LogoStickers) totalDao.getObjectById(
					LogoStickers.class, stickersId);
			if (ls != null) {
				// 正常流水单
				Procard fatherProcard = (Procard) totalDao.getObjectById(
						Procard.class, ls.getOldProcardId());
				if ("外购".equals(fatherProcard.getProcardStyle())) {
					// 如果为外购报废直接判断库存是否足够，然后进入采购流程。不必从新生成新流水卡片
					Float needNumber = ls.getCount();// 原材料/外购件的需求总量

					/***************** MRP计算(库存量&&&&&占用量) *****************/
					String kgsql = " and 1=1";
					if (fatherProcard.getKgliao() != null
							&& fatherProcard.getKgliao().length() > 0) {
						kgsql += " and kgliao ='" + fatherProcard.getKgliao()
								+ "'";
					}
					// String goodsClassSql =
					// " and goodsClass in ('外购件库','中间库') "
					// + kgsql;
					String goodsClassSql = " and goodsClass in ('外购件库') "
							+ kgsql;
					String banben_hql = "";
					if (fatherProcard.getBanBenNumber() != null
							&& fatherProcard.getBanBenNumber().length() > 0) {
						banben_hql = " and banBenNumber='"
								+ fatherProcard.getBanBenNumber() + "'";
					}
					String specification_sql = "";
					// if (fatherProcard.getSpecification() != null
					// && fatherProcard.getSpecification().length() > 0) {
					// specification_sql = " and specification = '"
					// + fatherProcard.getSpecification() + "'";
					// } else {
					// specification_sql =
					// " and (specification = '' and specification is null)";
					// }

					// 库存量(件号+版本+供料属性+库别)
					String hqlGoods = "select sum(goodsCurQuantity) from Goods where goodsMarkId=? "
							+ goodsClassSql
							+ " and goodsCurQuantity>0 "
							+ banben_hql
							+ " and (fcStatus is null or fcStatus='可用')";
					Float kcCount = (Float) totalDao.getObjectByCondition(
							hqlGoods, fatherProcard.getMarkId());
					if (kcCount == null || kcCount < 0) {
						kcCount = 0f;
					}
					/****************** 占用量=生产占用量+导入占用量 ******************************/
					// 系统占用量(已计算过采购量(1、有库存 2、采购中)，未领料)
					String zyCountSql = "select sum(hascount) from Procard where markId=? and productStyle=? and kgliao=? "
							+ banben_hql
							+ " and jihuoStatua='激活' and (status='已发卡' or (oldStatus='已发卡' and status='设变锁定')) and procardStyle='外购'"
							+ " and (sbStatus<>'删除' or sbStatus is null ) ";
					// Float zyCount = (Float) totalDao
					// .getObjectByCondition(zyCountSql, procard
					// .getMarkId(),
					// procard.getProductStyle(), procard
					// .getKgliao());
					Float zyCount = (Float) totalDao.getObjectByCondition(
							zyCountSql, fatherProcard.getMarkId(),
							fatherProcard.getProductStyle(), fatherProcard
									.getKgliao());
					if (zyCount == null || zyCount < 0) {
						zyCount = 0f;
					}

					// 导入占用量(系统切换时导入占用量)
					String hqlGoods_zy = "select sum(goodsCurQuantity) from Goods where goodsMarkId=?"
							+ banben_hql
							+ " and goodsClass in ('占用库') and kgliao=? and goodsCurQuantity>0 and (fcStatus is null or fcStatus='可用')";
					Float kcCount_zy = (Float) totalDao.getObjectByCondition(
							hqlGoods_zy, fatherProcard.getMarkId(),
							fatherProcard.getKgliao());
					if (kcCount_zy == null || kcCount_zy < 0) {
						kcCount_zy = 0f;
					}
					zyCount += kcCount_zy;
					if (zyCount < 0) {
						zyCount = 0F;
					}
					/****************** 结束 占用量=生产占用量+导入占用量 结束 ******************************/
					/****************** 在途量=采购在途量+导入在途量 ******************************/
					// 系统在途量(已生成采购计划，未到货)
					// String hql_zc =
					// "select sum(cgNumber-dhNumber) from  Procard where markId=? and productStyle=? "
					// + banben_hql
					// +
					// " and kgliao=? and jihuoStatua='激活' and status='已发卡' and procardStyle='外购'"
					// + " and cgNumber >0 and dhNumber is not null";
					// Float ztCount = (Float) totalDao.getObjectByCondition(
					// hql_zc, fatherProcard.getMarkId(), fatherProcard
					// .getProductStyle(), fatherProcard
					// .getKgliao());
					// 系统在途量(已生成物料需求信息，未到货)
					String hql_zc0 = "select sum(number-ifnull(rukuNum,0)) from ManualOrderPlan where markId = ?  "
							+ banben_hql
							+ " and kgliao=? and (number>rukuNum or rukuNum is null) and (status<>'取消' or status is null)"
							+ specification_sql;
					Double ztCountd = (Double) totalDao.getObjectByCondition(
							hql_zc0, fatherProcard.getMarkId(), fatherProcard
									.getKgliao());
					if (ztCountd == null) {
						ztCountd = 0D;
					}
					Float ztCount = ztCountd.floatValue();

					// 导入在途量(系统切换时导入在途量)
					String hqlGoods_zt = "select sum(goodsCurQuantity) from Goods where goodsMarkId=?"
							+ banben_hql
							+ " and kgliao=? and goodsClass in ('在途库') and goodsCurQuantity>0 and (fcStatus is null or fcStatus='可用')";
					Float kcCount_zt = (Float) totalDao.getObjectByCondition(
							hqlGoods_zt, fatherProcard.getMarkId(),
							fatherProcard.getKgliao());
					if (kcCount_zt == null || kcCount_zt < 0) {
						kcCount_zt = 0f;
					}
					ztCount += kcCount_zt;
					if (ztCount < 0) {
						ztCount = 0F;
					}
					/****************** 结束 在途量=采购在途量+导入在途量 结束 ******************************/
					// 占用量-(库存量+在途量(已生成采购，未到货))=剩余可用库存量
					Float daizhiCount = (kcCount + ztCount) - zyCount;
					// Float caigouCount = 0F;// 临时屏蔽
					// 激活外购件并判断数量是否足够(外购件保持
					// finalCount=klnumber=hasCount，变动是tjNumber,minNumber
					// )
					fatherProcard.setJihuoStatua("激活");
					fatherProcard.setStatus("已发卡");
					fatherProcard.setZzNumber(zyCount);// 占用
					fatherProcard.setZtNumber(ztCount);// 在途
					fatherProcard.setKcNumber(kcCount);// 库存
					// 剩余可用库存量多余
					boolean iscg = false;
					if (daizhiCount > 0) {
						/****
						 * 有库存
						 */
						// 待采购量(需求数量-呆滞数量)
						Float dcgNumber = needNumber - daizhiCount;
						// 库存量小于待采购量
						if (dcgNumber > 0) {
							if (fatherProcard.getCgNumber() != null) {
								fatherProcard.setCgNumber(fatherProcard
										.getCgNumber()
										+ dcgNumber);
							} else {
								fatherProcard.setCgNumber(dcgNumber);
							}
							fatherProcard.setWlstatus("待采购");
							iscg = true;
							// (部分库存)
							if (ztCount > zyCount) {
								fatherProcard.setGongwei("在途");
							} else {
								fatherProcard.setGongwei("外购件库");
							}
						} else {
							// 库存量大于待采购量，不再进行采购(全部库存)
							fatherProcard.setCgNumber(0F);
							fatherProcard.setTjNumber(fatherProcard
									.getFilnalCount());
							fatherProcard.setWlstatus("入库");
							// procard.setWlstatus("待采购");//
							// 初始导入，开放所有物料信息(核对物料)
							if (ztCount > zyCount) {
								fatherProcard.setGongwei("在途");
							}
							// else {
							// //初始校对时期库存不一定标准
							// procard.setWlstatus("待采购");
							// procard.setGongwei("外购件库");
							// }
						}
						// 换算最小激活数量
						// Float minNumber = fatherProcard.getTjNumber()
						// / fatherProcard.getQuanzi2() *
						// fatherProcard.getQuanzi1();
						// if (fatherProcard.getTjNumber().equals(needNumber)) {
						// minNumber = (float) Math.ceil(minNumber);
						// }
						// fatherProcard.setMinNumber(minNumber);

					} else {
						// 无库存，完全采购
						fatherProcard.setCgNumber(needNumber);
						fatherProcard.setWlstatus("待采购");
						fatherProcard.setGongwei("待采购");
						iscg = true;
					}
					// 计算损耗率，提高采购量
					if (fatherProcard.getSunhao() != null
							&& fatherProcard.getSunhao() > 0) {
						fatherProcard.setCgNumber(fatherProcard.getCgNumber()
								* (100 + fatherProcard.getSunhao()) / 100);
					}
					// 客供料，无需采购
					if ("CS".equals(fatherProcard.getKgliao())
							|| "否".equals(fatherProcard.getLingliaostatus())) {
						fatherProcard.setCgNumber(null);
						fatherProcard.setWlstatus("入库");
						fatherProcard.setGongwei("CS");
					}
					if (iscg) {
						Procard rootprocard = (Procard) totalDao.get(
								Procard.class, fatherProcard.getRootId());
						rootprocard.setWlstatus("待定");
						totalDao.update(rootprocard);
					}
					totalDao.update(fatherProcard);

				} else {
					// 新添流水单
					Procard newFProcard = new Procard();
					BeanUtils.copyProperties(fatherProcard, newFProcard,
							new String[] { "id", "procard", "procardSet",
									"processInforSet", "procardPartsSet",
									"procardPro", "oneProcardBonus",
									"planOrderId", "submitDate",
									"processPeopleSet", "planOrderDetailId",
									"wgwwPlanSet", "rukuCount", "tjNumber",
									"klNumber", "zaizhizkCount",
									"zaizhiApplyZk", "zaizhikzkCount",
									"processPeopleSet", "proAndWgList", "sbId",
									"sbNumber", "zzNumber", "ztNumber",
									"qjCount", "cgNumber", "outcgNumber",
									"status", "wlstatus", "wwblCount",
									"hasRuku" });
					newFProcard.setCardId(ls.getId());// 报修单id
					newFProcard.setCardNum(ls.getNumber());// 报修单条码
					newFProcard.setOldProcardId(fatherProcard.getId());// 对应正常流水单id
					newFProcard.setFilnalCount(ls.getCount());// 数量
					if ("自制".equals(newFProcard.getProcardStyle())) {
						float needNumber = ls.getCount()
								* newFProcard.getQuanzi2()
								/ newFProcard.getQuanzi1();
						Double d = Math.ceil(needNumber);// (自动进1取整)
						newFProcard
								.setNeedCount(Float.parseFloat(d.toString()));// 计算外购/自制的实际需求数量
					}

					newFProcard.setStatus("初始");
					newFProcard.setProcardStyle("总成");
					newFProcard.setProcard(null);
					newFProcard.setProcardSet(null);
					newFProcard.setProcessInforSet(null);
					newFProcard.setId(null);
					newFProcard.setProcessPeopleSet(null);
					newFProcard.setTjNumber(null);
					newFProcard.setMaxCount(ls.getCount());
					newFProcard.setWgwwPlanSet(null);
					newFProcard.setJihuoDate(null);
					newFProcard.setNeedFinalDate(null);
					newFProcard.setJihuoStatua(null);
					newFProcard.setKlNumber(ls.getCount());
					newFProcard.setHascount(ls.getCount());
					newFProcard.setOrderId(fatherProcard.getOrderId() + "");
					// 工序处理
					// Set<ProcessInfor> oldProcessInfo = fatherProcard
					// .getProcessInforSet();
					List<ProcessInfor> oldProcessInfo = totalDao
							.query(
									" from ProcessInfor where procard.id=? and processNO>=?",
									fatherProcard.getId(), Integer.parseInt(ls
											.getProcessNO()));
					Set<ProcessInfor> newProcessInfo = new HashSet<ProcessInfor>();
					for (ProcessInfor processInfor : oldProcessInfo) {
						ProcessInfor newProInfor = new ProcessInfor();
						BeanUtils.copyProperties(processInfor, newProInfor,
								new String[] { "id", "totalCount",
										"applyCount", "usercodes",
										"userCardId", "usernames", "userId",
										"submmitCount", "breakCount",
										"firstApplyDate", "procard",
										"procardPro", "productProcess",
										"submitDate", "osWork", "processZjSet",
										"processinforFuLiao", "agreeWwCount",
										"selectWwCount", "applyWwCount",
										"wwbackCount", "hasRuku" });
						newProInfor.setTotalCount(ls.getCount());
						newProInfor.setStatus("初始");
						newProInfor.setWlqrcount(0f);
						newProInfor.setProcard(newFProcard);
						newProcessInfo.add(newProInfor);
					}
					newFProcard.setWlstatus("待定");
					newFProcard.setProcessInforSet(newProcessInfo);
					totalDao.save(newFProcard);
					newFProcard.setRootId(newFProcard.getId());
					totalDao.update(newFProcard);
					Set<Procard> procardSet = new HashSet<Procard>();
					for (int i = 0; i < procardId.length; i++) {
						// if (procardId[i].equals(ls.getOldProcardId())) {
						// if (procardId.length == 1) {
						//								
						// }
						// continue;
						// }
						Procard procard = (Procard) totalDao.getObjectById(
								Procard.class, procardId[i]);
						addblProcard(procard, ls, newFProcard, responsible,
								newFProcard.getId());
						// 新流水单
						// Procard newProcard = new Procard();
						// BeanUtils.copyProperties(procard, newProcard,
						// new String[] { "id", "procard", "procardSet",
						// "processInforSet", "procardPartsSet",
						// "procardPro", "oneProcardBonus",
						// "processPeopleSet", "wgwwPlanSet" });
						// newProcard.setCardId(ls.getId());// 报修单id
						// newProcard.setCardNum(ls.getNumber());// 报修单条码
						// newProcard.setOldProcardId(procard.getId());//
						// 对应正常流水单id
						// float count = ls.getCount();
						// if ("外购".equals(newProcard.getProcardStyle())) {
						// count = ls.getCount() * newProcard.getQuanzi2()
						// / newProcard.getQuanzi1();
						// } else if ("自制".equals(newProcard.getProcardStyle()))
						// {
						// count = ls.getCount() * newProcard.getCorrCount();
						// }
						// newProcard.setFilnalCount(count);// 数量
						// newProcard.setTjNumber(null);
						// newProcard.setMaxCount(ls.getCount());
						// newProcard.setProcard(newFProcard);
						// if ("自制".equals(newFProcard.getProcardStyle())) {
						// float needNumber = ls.getCount()
						// * newFProcard.getQuanzi2()
						// / newFProcard.getQuanzi1();
						// Double d = Math.ceil(needNumber);// (自动进1取整)
						// newFProcard.setNeedCount(Float.parseFloat(d
						// .toString()));// 计算外购/自制的实际需求数量
						// }
						//
						// newProcard.setStatus("初始");
						//
						// // 工序处理
						// Set<ProcessInfor> oldProInfo = procard
						// .getProcessInforSet();
						// Set<ProcessInfor> newProInfo = new
						// HashSet<ProcessInfor>();
						// for (ProcessInfor processInfor : oldProInfo) {
						// ProcessInfor newProInfor = new ProcessInfor();
						// BeanUtils.copyProperties(processInfor, newProInfor,
						// new String[] { "id", "totalCount",
						// "applyCount", "usercodes",
						// "userCardId", "usernames",
						// "userId", "submmitCount",
						// "breakCount", "firstApplyDate",
						// "procard", "procardPro",
						// "productProcess","osWork", "processZjSet",
						// "processinforFuLiao" });
						// newProInfor.setTotalCount(ls.getCount());
						// newProInfor.setStatus("初始");
						// newProInfor.setProcard(newProcard);
						// newProInfo.add(newProInfor);
						// }
						// newProcard.setProcessInforSet(newProInfo);
						// newProcard.setJihuoStatua(null);
						// totalDao.save(newProcard);
						// newFProcard.setRootId(newFProcard.getId());
						// totalDao.update(newFProcard);
						// newProcard.setRootId(newFProcard.getId());
						// newProcard.setFatherId(newFProcard.getId());
						// totalDao.update(newProcard);
						// // 新废品单
						// LogoStickers logoStickers = new LogoStickers();
						// // 生成编号
						// String date = Util.getDateTime("yyyyMM");
						// String number = "";
						// String hql =
						// "select max(number) from LogoStickers where stickStyle='补料单' and number like '%QD-RP-"
						// + date + "%'";
						// Object object = (Object) totalDao
						// .getObjectByCondition(hql);
						// if (object != null) {
						// String maxNumber = object.toString();
						// Long selfCard = Long.parseLong(maxNumber.substring(
						// 6, maxNumber.length())) + 1;// 当前最大流水卡片
						// number = "QD-RP-" + selfCard.toString();
						// } else {
						// number = "QD-RP-" + date + "001";
						// }
						// logoStickers.setNumber(number);// 编号
						// logoStickers.setStickStyle("补料单");
						// logoStickers.setMarkId(procard.getMarkId());// 件号
						// logoStickers.setLotId(procard.getSelfCard());// 批次号
						// logoStickers.setProcessNO("全部");
						// logoStickers.setOperator(ls.getOperator());
						// logoStickers.setCode(ls.getCode());
						// logoStickers.setCount(ls.getCount());// 报废数量
						// logoStickers.setPartsName(procard.getProName());// 名称
						// logoStickers.setBillDate(Util.getDateTime());
						// logoStickers.setOldProcardId(procard.getId());//
						// 老流水单id
						// logoStickers.setWorkingGroup(ls.getWorkingGroup());//
						// 部门编码
						// logoStickers.setIsPrint("NO");
						// logoStickers.setStatus("已发卡");
						// logoStickers.setResponsible(responsible);
						// logoStickers.setProcardId(newProcard.getId());
						// totalDao.save(logoStickers);

					}
					ls.setProcardId(newFProcard.getId());
				}
				// 报废单处理
				Users loginUser = Util.getLoginUser();// 获得登录用户
				ls.setStatus("已发卡");

				ls.setExaminerName(loginUser.getName());
				ls.setExaminerCode(loginUser.getCode());
				ls.setResponsible(responsible);
				return "true";
			}
		}
		return null;
	}

	/***
	 * 通过条码查询流水单
	 * 
	 * @param number
	 * @return
	 */
	@Override
	public LogoStickers findLogoSBynumber(String number) {
		String hql = "from LogoStickers where number=?";
		return (LogoStickers) totalDao.getObjectByCondition(hql, number);
	}

	/***
	 * 通过卡号查询件号，并查询出件号对应的当前最小批次
	 * 
	 * @param cardNumber
	 * @return
	 */
	@Override
	public Procard findMinProcard(String cardNumber) {
		if (cardNumber != null && cardNumber.length() > 0) {
			String hql = "from RunningWaterCard where cardNum=?";
			RunningWaterCard rwc = (RunningWaterCard) totalDao
					.getObjectByCondition(hql, cardNumber);
			if (rwc != null) {
				String hql2 = "from Procard where markId=? and status='初始' order by selfCard ";
				Procard p = (Procard) totalDao.getObjectByCondition(hql2, rwc
						.getMarkId());
				if (p != null) {
					return p;
				} else {
					return (Procard) totalDao.getObjectById(Procard.class, rwc
							.getProcardId());
				}
			}
		}
		return null;
	}

	/***
	 * 交卡管理
	 * 
	 * @param cardNum
	 *            卡号
	 * @return
	 */
	@Override
	public Object[] postCard(String cardNum) {
		if (cardNum != null && cardNum.length() > 0) {
			String hql = "from RunningWaterCard where cardNum=?";
			RunningWaterCard rwc = (RunningWaterCard) totalDao
					.getObjectByCondition(hql, cardNum);
			if (rwc != null) {
				if (rwc.getCardStatus() != null
						&& rwc.getCardStatus().equals("完成")
						|| rwc.getCardStatus().equals("待入库")
						|| rwc.getCardStatus().equals("入库")) {
					Procard procard = (Procard) totalDao.getObjectById(
							Procard.class, rwc.getProcardId());
					if (procard != null) {
						boolean bool = false;
						if (procard.getProcardStyle().equals("总成")) {
							if (procard.getStatus().equals("入库")) {
								bool = true;
							}
						} else {
							if (procard.getStatus().equals("待入库")) {
								bool = true;
							}
						}
						if (bool) {
							// 初始化周转卡信息
							rwc.setCardStatus("初始");
							rwc.setReceiveStatus("初始");
							rwc.setFollowCardId(null);
							rwc.setFollowTime(null);
							Users loginUser = Util.getLoginUser();
							rwc.setOwnUsername(loginUser.getName());// 持卡人为交卡处理登录人员
							rwc.setLastProcessTime(null);
							rwc.setMore(null);
							rwc.setProcardId(null);
							totalDao.update(rwc);
							return new Object[] { true, "交卡完成!" };
						} else {
							return new Object[] { false,
									"该周转卡对应的流水单尚未完成，请联系管理员!" };
						}
					} else {
						return new Object[] { false, "没有找到周转卡对应的流水单信息，请联系管理员!" };
					}
				} else {
					return new Object[] { false, "您的生产周转卡尚未完成!" };
				}
			} else {
				return new Object[] { false, "您的生产周转卡卡号不存在!" };
			}
		} else {
			return new Object[] { false, "请刷生产周转卡!" };
		}

	}

	/***
	 * 更新工序工位信息
	 */
	@Override
	public void updateProcess() {
		String markid = "1KD253059A-1";// 已填写工位件号
		String[] markids = { "1KD253059A-1" };// 待复制件号

		// String markid = "1KD253059AS";// 已填写工位件号
		// String[] markids = { "1KD253059AT", "180253059N" };// 待复制件号

		String hql = "from ProcardTemplate where markid=?";
		ProcardTemplate pt = (ProcardTemplate) totalDao.getObjectByCondition(
				hql, markid);
		if (pt != null) {
			Set<ProcessTemplate> pstSet = pt.getProcessTemplate();
			for (ProcessTemplate processTemplate : pstSet) {
				for (int i = 0; i < markids.length; i++) {
					// String hql2 =
					// "from ProcessTemplate pst where processNO=? and pst.procardTemplate.id=(select id from ProcardTemplate where markid=?)";
					String hql2 = "from ProcessTemplate pst where processNO=? and pst.procardTemplate.id=(select id from ProcardTemplate where markid=? and id =52)";
					ProcessTemplate pst2 = (ProcessTemplate) totalDao
							.getObjectByCondition(hql2, processTemplate
									.getProcessNO(), markids[i]);
					if (pst2 == null) {
						System.out.println("123");
					}
					BeanUtils.copyProperties(processTemplate, pst2,
							new String[] { "id", "parallelId",
									"procardTemplate", "taSopGongwei" });
					totalDao.update(pst2);
				}
			}

		}

	}

	/***
	 * 流水单以及流水卡直接跳到"已领料"状态
	 * 
	 * @param cardNum
	 * @return
	 */
	@Override
	public boolean updateFkToLl(String cardNum) {
		boolean bool = false;
		if (cardNum != null && cardNum.length() > 0) {
			String hql = "from RunningWaterCard where cardNum=?";
			RunningWaterCard rwc = (RunningWaterCard) totalDao
					.getObjectByCondition(hql, cardNum);
			if (rwc != null) {
				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, rwc.getProcardId());
				procard.setStatus("已发料");
				bool = totalDao.update(procard);
				if (bool) {
					rwc.setCardStatus("已发料");
					rwc.setReceiveStatus("yes");
					bool = totalDao.update(rwc);
				}
			}
		}
		return bool;
	}

	/***
	 * 强制收卡
	 * 
	 * @param cardNum
	 * @return
	 */
	@Override
	public boolean updateQzsk(String cardNum) {
		boolean bool = false;
		if (cardNum != null && cardNum.length() > 0) {
			String hql = "from RunningWaterCard where cardNum=?";
			RunningWaterCard rwc = (RunningWaterCard) totalDao
					.getObjectByCondition(hql, cardNum);
			if (rwc != null) {
				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, rwc.getProcardId());
				procard.setStatus("入库");
				bool = totalDao.update(procard);
				if (bool) {
					rwc.setCardStatus("完成");
					rwc.setReceiveStatus("yes");
					bool = totalDao.update(rwc);
				}
			}
		}
		return bool;
	}

	/***
	 * 已领料直接跳到"已发卡"状态
	 * 
	 * @param cardNum
	 * @return
	 */
	@Override
	public boolean updateLlToFk(String cardNum) {
		boolean bool = false;
		if (cardNum != null && cardNum.length() > 0) {
			String hql = "from RunningWaterCard where cardNum=?";
			RunningWaterCard rwc = (RunningWaterCard) totalDao
					.getObjectByCondition(hql, cardNum);
			if (rwc != null) {
				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, rwc.getProcardId());
				procard.setStatus("已发卡");
				bool = totalDao.update(procard);
				if (bool) {
					rwc.setCardStatus("已发卡");
					rwc.setReceiveStatus("no");
					bool = totalDao.update(rwc);
				}
			}
		}
		return bool;
	}

	/***
	 * 查询最大层数
	 * 
	 * @param rootId
	 * @return
	 */
	@Override
	public Integer findMaxbelongLayer(Integer rootId) {
		if (rootId != null && rootId > 0) {
			String hql = "select belongLayer from Procard where rootId=? and procardstyle in ('总成','自制','组合','外购') order by belonglayer desc";
			Object obj = totalDao.getObjectByCondition(hql, rootId);
			return Integer.parseInt(obj.toString());
		}
		return null;
	}

	/***
	 * 根据Id和层数查询显示的节点
	 * 
	 * @param rootId
	 *            Id
	 * @param belongLayer
	 *            层数
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List findProByBel(Integer fatherId, Integer belongLayer,
			String pageStatus) {
		if (fatherId != null && fatherId > 0) {
			String hql = "from Procard where rootId =? and (sbStatus is null or sbStatus!='删除')";
			List<Procard> list_procard = totalDao.query(hql, fatherId);
			List newlist = new ArrayList();
			if (list_procard != null && list_procard.size() > 0) {
				for (Procard procard2 : list_procard) {
					Procard procard3 = new Procard();
					BeanUtils.copyProperties(procard2, procard3,
							new String[] {});
					if (pageStatus != null && "cb".equals(pageStatus)) {
						if ("外购".equals(procard3.getProcardStyle())) {
							String hql_price = "select bhsPrice from Price where partNumber =? order by  pricePeriodEnd desc";
							Double bhsPrice = (Double) totalDao
									.getObjectByCondition(hql_price, procard3
											.getMarkId());
							if (bhsPrice != null) {
								if (procard3.getHascount() == null) {
									procard3.setHascount(procard3
											.getFilnalCount());
								}
								Float wgFei_1 = bhsPrice.floatValue()
										* (procard3.getFilnalCount() - procard3
												.getHascount());
								procard3.setWgFei(wgFei_1);
							} else {
								procard3.setWgFei(0F);
							}
						}
						Float rengongfei = 0F;// 人工成本
						Set<ProcessInfor> processset = procard3
								.getProcessInforSet(); // 此零件需要的工序
						for (ProcessInfor processInfor : processset) {
							if (!"自制".equals(processInfor.getProductStyle())
									|| processInfor.getNowAllJiepai() == null) {
								continue;
							}
							// 遍历所有的工序领取记录,统计所有的领取人员
							String hql_prolog = "from ProcessInforReceiveLog where fk_processInforId=? and fk_pirLId is null and status='提交'";
							List<ProcessInforReceiveLog> list = totalDao.query(
									hql_prolog, processInfor.getId());
							Map<String, String> nameMap = new HashMap<String, String>();
							for (ProcessInforReceiveLog pirl : list) {
								String userCodes = pirl.getUsercodes();
								String[] codes = userCodes.split(",");
								for (String code : codes) {
									String userCode = nameMap.get(code);
									if (userCode == null) {
										nameMap.put(code, code);
									}
								}
							}
							Double workingHoursWages = 0.0; // 工序工时工资
							for (String jobNum : nameMap.keySet()) { // 统计工序中基本工时工资
								WageStandard wageStandard = wss
										.findWSByUser(jobNum); // 根据工号查询工资模板
								if (wageStandard == null) {
									continue;
								}
								InsuranceGold insuranceGold = igs
										.findInsuranceGoldBylc(
												wageStandard.getLocalOrField(),
												wageStandard
														.getCityOrCountryside(),
												wageStandard.getPersonClass()); // 福利系数（计算公司缴纳的保险成本）
								if (insuranceGold == null) {
									workingHoursWages += 0f;
								} else {
									// 单工序总成本（当月个人人力成本）
									workingHoursWages += (wageStandard
											.getGangweigongzi()
											+ wageStandard.getSsBase()
											* (insuranceGold
													.getQYoldageInsurance()
													+ insuranceGold
															.getQYmedicalInsurance()
													+ insuranceGold
															.getQYunemploymentInsurance()
													+ insuranceGold
															.getQYinjuryInsurance() + insuranceGold
													.getQYmaternityInsurance())
											/ 100 + wageStandard.getGjjBase()
											* insuranceGold.getQYhousingFund()
											/ 100);
								}
							}

							Double basicWorkingHoursWages = workingHoursWages
									/ nameMap.size() / SECONDS; // 工序中基本工时工资(秒工资=单工序总成本/21.5天)
							Double processWages = basicWorkingHoursWages
									* processInfor.getNowAllJiepai();// 单个工序的人工成本
							processInfor.setRengongfei(processWages
									.floatValue());// 人工费
							rengongfei += processWages.floatValue();// 累计人工成本
						}
						procard3.setRengongfei(rengongfei);
					}
					newlist.add(procard3);
				}
			}
			return newlist;
		}
		return null;
	}

	/***
	 * 通过卡号查询流水单信息
	 * 
	 * @param cardNumber
	 *            卡号
	 * @return
	 */
	@Override
	public Procard findProcardByCardNum(String cardNumber) {
		String hql = "from RunningWaterCard where cardNum=?";
		RunningWaterCard rwc = (RunningWaterCard) totalDao
				.getObjectByCondition(hql, cardNumber);
		if (rwc != null && rwc.getProcardId() != null) {
			return (Procard) totalDao.getObjectById(Procard.class, rwc
					.getProcardId());
		}
		return null;
	}

	/***
	 * 根据卡号查询人员，得到人员对应工序的对应最小批次、已发卡的件号
	 * 
	 * @param cardNumber
	 *            员工卡卡号
	 * @param pageStatus
	 *            操作状态（noCardLingliao、领工序）
	 * @return
	 */
	@Override
	public Object[] findProcardListByUserCard(Procard p, int parseInt,
			int pageSize, String cardNumber, String pageStatus, String tag) {
		if (cardNumber != null && cardNumber.length() > 0 && pageStatus != null
				&& pageStatus.length() > 0) {
			// 登录用户查询对应的可领信息
			if ("loginLingGx".equals(pageStatus)) {
				Users users = Util.getLoginUser();
				cardNumber = users.getCardId();
			}
			StringBuffer hql = new StringBuffer();

			if (p == null) {
				p = new Procard();
			}
			hql.append(totalDao.criteriaQueries(p, null, "unit"));
			String processname = "";
			if (p.getUnit() != null && p.getUnit().length() > 0) {
				processname = " and processName='" + p.getUnit() + "'";
			}
			// 一、先列出所有可用的件号

			// 3、查询持卡用户绑定工序技能对应的可领取产品
			if ("noCardHadYlGx".equals(pageStatus)) {
				// 用户已领工序查询使用
				hql
						.append(" and id in (select pi.procard.id from ProcessInfor pi where  status");
				hql
						.append(" not in ('完成') and id in ( SELECT fk_processInforId from  ProcessInforReceiveLog WHERE userCardId like '%"
								+ cardNumber + "%' AND status = '领取')");
				hql
						.append(" and pi.processName in (select p.processName from ProcessGzstore p join p.users u where u.cardId='"
								+ cardNumber + "' " + processname + "))");
			} else if ("noCardLingGx".equals(pageStatus)) {
				hql
						.append(" and ((id in "
								+ "(select pi.procard.id from ProcessInfor pi where "
								+ "pi.processName in (select p.processName from ProcessGzstore p join p.users u where u.cardId='"
								+ cardNumber
								+ "' "
								+ processname
								+ ")"
								+ "and status  not in ('完成')))"
								+ " or (id in (select procardId from ProcardReProduct where  status !='完成')))");
			} else {
				hql
						.append(" and id in "
								+ "(select pi.procard.id from ProcessInfor pi where "
								+ " pi.processName in (select p.processName from ProcessGzstore p join p.users u where u.cardId='"
								+ cardNumber + "' " + processname + ")"
								+ " and status  not in ('完成'))");
			}

			// hql.append(" and id in (select procard.id from ProcessinforPeople where userId in (select id from Users where cardId='"+cardNumber+"'))");

			// 1、需要查询的状态
			if ("noCardLingliao".equals(pageStatus))
				hql
						.append(" and (wwblCount is null or klNumber>wwblCount or wwblreceiveCount>0) and status in ('已发卡','已发料','领工序') and (procardstyle in ('总成','自制','组合') or (needProcess ='yes' and procardstyle='外购'))");
			else
				hql.append(" and  status in ('已发料','领工序')");
			// 2、已领料数量比较
			String hascount = "";
			if ("noCardLingliao".equals(pageStatus))
				hascount = " (hascount is null or hascount>0)";
			else
				hascount = " (hascount>=0) and hascount<=klNumber";
			hql.append(" and " + hascount);
			hql.append(" and jihuoStatua='激活' ");
			hql.append(" and (sbStatus is null or sbStatus <> '删除')");
			// hql.append(" order by rootMarkid");

			List list = totalDao.findAllByPage(hql.toString(), parseInt,
					pageSize);

			// 得到最小批次
			// 临时注释
			/*****************************
			 * for (int i = 0,len=list.size(); i <len ; i++) { Procard procard =
			 * (Procard) list.get(i); // if ("phone".equals(tag) ||
			 * "code".equals(tag)) { // if
			 * ("自制".equals(procard.getProcardStyle())) { // String hql_yclgoods
			 * = //" select count(*) FROM WareBangGoogs where fk_good_id in (select goodsId from Goods where goodsMarkId = '"
			 * +procard.getTrademark()+"' and goodsCurQuantity >="+procard.
			 * getKlNumber
			 * ()+" and goodsFormat = '"+procard.getSpecification()+"' ) "; //
			 * long count = (Long) totalDao //
			 * .getObjectByCondition(hql_yclgoods); // if (count <= 0) { //
			 * list.remove(i); // i--; // continue; // } // } else { // String
			 * hql_wgprocard = //
			 * " from Procard where rootId = ? and id <> rootId "; //
			 * List<Procard> wgprocardList = totalDao.query( // hql_wgprocard,
			 * procard.getId()); // boolean bool = true; // if (wgprocardList !=
			 * null && wgprocardList.size() > 0) { // for (int o = 0; o <
			 * wgprocardList.size(); o++) { // Procard procard1 =
			 * wgprocardList.get(o); // String hql_goods = //"select count(*) FROM WareBangGoogs where fk_good_id in( select goodsId from Goods where goodsMarkId = '"
			 * +procard1.getMarkId()+"' and goodsCurQuantity >= "+procard1.
			 * getKlNumber()+")"; // float count = (Float) totalDao //
			 * .getObjectByCondition(hql_goods); // if (count > 0) { // bool =
			 * false; // break; // } // } // } // if (bool) { // list.remove(i);
			 * // i--; // continue; // } // } // } if
			 * ("noCardLingGx".equals(pageStatus)) {// 查看返修 Float fxCount =
			 * (Float) totalDao .getObjectByCondition(
			 * "select count(*) from ProcardReProduct where procardId=? and status !='完成'"
			 * , procard.getId()); if (fxCount != null && fxCount > 0) {
			 * continue; } } if (!"noCardHadYlGx".equals(pageStatus) &&
			 * !"noCardLingliao".equals(pageStatus)) { //
			 * 先判断当前批次的刷卡人对应最小工序号是否可以开始领取 String hql_isprocess =
			 * "from ProcessInfor pi where pi.procard.id=? " +" and pi.processName in (select p.processName from ProcessGzstore p join p.users u where u.cardId=?) "
			 * + " and applyCount <totalCount order by processNO"; ProcessInfor
			 * isprocess = (ProcessInfor) totalDao
			 * .getObjectByCondition(hql_isprocess, procard .getId(),
			 * cardNumber); if (isprocess != null) { // 查询上一工序号 String
			 * hql_oldprocess ="from ProcessInfor pi where pi.procard.id=? and processNO<? order by processNO desc"
			 * ; ProcessInfor oldprocess = (ProcessInfor) totalDao
			 * .getObjectByCondition(hql_oldprocess, procard .getId(),
			 * isprocess.getProcessNO()); if (oldprocess != null) { if
			 * (isprocess.getApplyCount() >= oldprocess .getApplyCount()) {
			 * list.remove(i); i--; continue; } } } else { list.remove(i); i--;
			 * continue; } }
			 * 
			 * // 先查询出该产品的总成件号 Procard rootProcard = (Procard)
			 * totalDao.getObjectById( Procard.class, procard.getRootId());
			 * procard.setRootMarkId(rootProcard.getMarkId());
			 * procard.setYwMarkId(rootProcard.getYwMarkId());
			 * procard.setRootSelfCard(rootProcard.getSelfCard()); if
			 * (!"noCardHadYlGx".equals(pageStatus)) { // 判断批次 String hql2 ="from Procard where productStyle=? and selfCard<? and markId=? and jihuoStatua='激活' and "
			 * + hascount +" and rootId in (select id from Procard where productStyle=? and markId =? and procardStyle='总成') "
			 * ; if ("noCardLingliao".equals(pageStatus)) hql2 +=
			 * " and status in ('已发卡','已发料','领工序')) "; else hql2 +=
			 * " and status in ('已发料','领工序'))"; hql2 +=
			 * " order by selfCard desc";
			 * 
			 * Procard orderProcard = (Procard) totalDao
			 * .getObjectByCondition(hql2, procard .getProductStyle(),
			 * procard.getSelfCard(), procard.getMarkId(), procard
			 * .getProductStyle(), rootProcard .getMarkId()); if (orderProcard
			 * != null) { if ("noCardLingliao".equals(pageStatus)) { //
			 * 如果是部分到齐，则上层必须有领料数据后，下一批次才能开放
			 * 
			 * // 如果上一批尚未领取完成，则上批优先 if
			 * (!"part".equals(orderProcard.getLingliaoType()) &&
			 * (orderProcard.getHascount() == null || orderProcard.getKlNumber()
			 * < orderProcard .getFilnalCount() || !(orderProcard.getRootId()
			 * .equals(rootProcard.getId())) || (orderProcard
			 * .getKlNumber().equals( orderProcard .getFilnalCount()) &&
			 * orderProcard .getHascount() > 0))) { list.remove(i); i--; } else
			 * { // 查询上一批次是否存在领料数据 String hql_procardFw ="from Procard where fatherId=? and procardStyle='外购' and hascount is not null and hascount<filnalCount"
			 * ; Integer old_maxProcessNo = totalDao.getCount( hql_procardFw,
			 * orderProcard.getId()); if (old_maxProcessNo == 0) {
			 * list.remove(i); i--; } } } else { ///*** 和上层批次比较工序的领取进度 //
			 * 查询上一批次的最大领取工序号 // String hql_process_order = //"select min(processNO) from ProcessInfor where procard.id=? and submmitCount<applyCount"
			 * ; // Integer old_maxProcessNo = (Integer) totalDao //
			 * .getObjectByCondition(hql_process_order, //
			 * orderProcard.getId()); // if (old_maxProcessNo != null) { // //
			 * 查询本批次的最大领取工序号 // Integer now_maxProcessNo = (Integer) totalDao //
			 * .getObjectByCondition( // hql_process_order, procard //
			 * .getId()); // if (now_maxProcessNo != null) { // if
			 * (now_maxProcessNo > old_maxProcessNo) { // //
			 * 当前批次比上一批次领取工序还快，果断不给予显示 // list.remove(i); // i--; // } else if
			 * (now_maxProcessNo // .equals(old_maxProcessNo)) { // //***
			 * 工序号相同，需要判断提交数量 // // 查询上一批次最大工序的提交数量 // String hql_subNumber = //
			 * "select submmitCount from ProcessInfor where procard.id=? and processNO=?"
			 * ; // Float oldsubmmitCount = (Float) totalDao //
			 * .getObjectByCondition( // hql_subNumber, // orderProcard.getId(),
			 * // old_maxProcessNo); // // Float nowsubmmitCount = (Float)
			 * totalDao // .getObjectByCondition( // hql_subNumber, procard //
			 * .getId(), // now_maxProcessNo); // if (nowsubmmitCount >=
			 * oldsubmmitCount) { // list.remove(i); // i--; // } // } // } // }
			 * } } } }
			 *************/
			int count = 0;
			if (!"hascount".equals(tag)) {
				count = totalDao.getCount(hql.toString());
			}
			Object[] o = { list, count };
			return o;
		}
		return null;
	}

	@Override
	public List findProcardListByUserCard(String cardNumber, String pageStatus,
			String tag) {
		if (cardNumber != null && cardNumber.length() > 0 && pageStatus != null
				&& pageStatus.length() > 0) {
			// 登录用户查询对应的可领信息
			if ("loginLingGx".equals(pageStatus)) {
				Users users = Util.getLoginUser();
				cardNumber = users.getCardId();
			}
			String hql = "from Procard where 1=1 ";
			// 3、查询持卡用户绑定工序技能对应的可领取产品
			if ("noCardHadYlGx".equals(pageStatus)) {
				// 用户已领工序查询使用
				// where id IN ( SELECT fk_processInforId from
				// ta_sop_w_ProcessInforReceiveLog WHERE userCardId =
				// '0005141643' AND status = '领取') AND status <> '完成'
				// hql += " = '已领' and pi.userCardId like '%" + cardNumber +
				// "%'";
				hql += " and id in "
						+ "(select pi.procard.id from ProcessInfor pi where  status";
				hql += " not in ('完成')  and id in ( SELECT fk_processInforId from  ProcessInforReceiveLog WHERE userCardId like '%"
						+ cardNumber + "%' AND status = '领取')";
				hql += " and pi.processName in (select p.processName from ProcessGzstore p join p.users u where u.cardId=?))";
			} else if ("noCardLingGx".equals(pageStatus)) {
				hql += " and ((id in "
						+ "(select pi.procard.id from ProcessInfor pi where  status  not in ('完成') "
						+ " and pi.processName in (select p.processName from ProcessGzstore p join p.users u where u.cardId=?)))"
						+ " or (id in (select procardId from ProcardReProduct where  status !='完成')))";
			} else {
				hql += " and id in "
						+ "(select pi.procard.id from ProcessInfor pi where  status  not in ('完成') "
						+ " and pi.processName in (select p.processName from ProcessGzstore p join p.users u where u.cardId=?))";
			}

			// hql +=
			// " and id not in(select pi2.procard.id from ProcessInfor pi2 where  pi2.status not in('完成') and pi2.agreeWwCount is not null and  pi2.agreeWwCount=pi2.procard.filnalCount and pi2.submmitCount=0)";
			// 4、查询刷卡用户是否在批次绑定用户中
			// hql +=
			// " and rootId in (select p.id from Procard p join p.processPeopleSet u where u.userId in (select id from Users where cardId=?))";
			// hql +=
			// " and id in (select procard.id from ProcessinforPeople where userId in (select id from Users where cardId=?))";
			// hql += " and rootId in (select id from Procard where id in "
			// +
			// "(select procard.rootId from ProcessinforPeople where userId in (select id from Users where cardId=?)) )";//
			// and
			// wlstatus<>'待定'

			// hql += " and markId='P219605'";
			String date = Util.getDateTime("yyyy-MM-dd");

			// 1、需要查询的状态
			if ("noCardLingliao".equals(pageStatus))
				// hql += " and (jihuoDate<='"
				// + Util.getDateTime()
				// + "' or jihuoDate like '%"
				// + date
				// +
				// "%' or jihuoDate is null) and (wwblCount is null or klNumber>wwblCount or wwblreceiveCount>0) and status in ('已发卡','已发料','领工序') and (procardstyle in ('总成','自制','组合') or (needProcess ='yes' and procardstyle='外购'))";
				hql += " and (wwblCount is null or klNumber>wwblCount or wwblreceiveCount>0) and status in ('已发卡','已发料','领工序') and (procardstyle in ('总成','自制','组合') or (needProcess ='yes' and procardstyle='外购'))";
			// hql +=
			// " and (wwblCount is null or (wwblCount is not null and (klNumber>wwblCount) or wwblreceiveCount>0)) and status in ('已发卡','已发料','领工序') and (procardstyle in ('总成','自制','组合') or (needProcess ='yes' and procardstyle='外购'))";
			else
				// hql += " and (jihuoDate<='"
				// + Util.getDateTime()
				// + "' or jihuoDate like '%"
				// + date
				// + "%' or jihuoDate is null) and status in ('已发料','领工序')";
				hql += " and  status in ('已发料','领工序')";
			// 2、已领料数量比较
			String hascount = "";
			if ("noCardLingliao".equals(pageStatus))
				hascount = " (hascount is null or hascount>0)";
			// hascount =
			// " (hascount is null or hascount>0 or (hascount = 0 and id in(select procard.id from Procard where hascount>0 and procardstyle='外购' and (needProcess is null or needProcess !='yes') )))";
			else
				hascount = " (hascount>=0) and hascount<=klNumber";
			hql += " and " + hascount;
			// 一、先列出所有可用的件号
			hql += " and jihuoStatua='激活' ";
			hql += "  order by rootMarkid";

			List<Procard> list = totalDao.query(hql, cardNumber);

			// 得到最小批次
			// 临时注释

			// for (int i = 0; i < list.size(); i++) {
			// Procard procard = (Procard) list.get(i);
			// // if ("phone".equals(tag) || "code".equals(tag)) {
			// // if ("自制".equals(procard.getProcardStyle())) {
			// // String hql_yclgoods =
			// //
			// " select count(*) FROM WareBangGoogs where fk_good_id in (select goodsId from Goods where goodsMarkId = '"+procard.getTrademark()+"' and goodsCurQuantity >="+procard.getKlNumber()+" and goodsFormat = '"+procard.getSpecification()+"' ) ";
			// // long count = (Long) totalDao
			// // .getObjectByCondition(hql_yclgoods);
			// // if (count <= 0) {
			// // list.remove(i);
			// // i--;
			// // continue;
			// // }
			// // } else {
			// // String hql_wgprocard =
			// // " from Procard where rootId = ? and id <> rootId ";
			// // List<Procard> wgprocardList = totalDao.query(
			// // hql_wgprocard, procard.getId());
			// // boolean bool = true;
			// // if (wgprocardList != null && wgprocardList.size() > 0) {
			// // for (int o = 0; o < wgprocardList.size(); o++) {
			// // Procard procard1 = wgprocardList.get(o);
			// // String hql_goods =
			// //
			// "select count(*) FROM WareBangGoogs where fk_good_id in( select goodsId from Goods where goodsMarkId = '"+procard1.getMarkId()+"' and goodsCurQuantity >= "+procard1.getKlNumber()+")";
			// // float count = (Float) totalDao
			// // .getObjectByCondition(hql_goods);
			// // if (count > 0) {
			// // bool = false;
			// // break;
			// // }
			// // }
			// // }
			// // if (bool) {
			// // list.remove(i);
			// // i--;
			// // continue;
			// // }
			// // }
			// // }
			// if ("noCardLingGx".equals(pageStatus)) {// 查看返修
			// Float fxCount = (Float) totalDao
			// .getObjectByCondition(
			// "select count(*) from ProcardReProduct where procardId=? and status !='完成'",
			// procard.getId());
			// if (fxCount != null && fxCount > 0) {
			// continue;
			// }
			// }
			// if (!"noCardHadYlGx".equals(pageStatus)
			// && !"noCardLingliao".equals(pageStatus)) {
			// // 先判断当前批次的刷卡人对应最小工序号是否可以开始领取
			// String hql_isprocess =
			// "from ProcessInfor pi where pi.procard.id=? "
			// +
			// " and pi.processName in (select p.processName from ProcessGzstore p join p.users u where u.cardId=?) "
			// + " and applyCount <totalCount order by processNO";
			// ProcessInfor isprocess = (ProcessInfor) totalDao
			// .getObjectByCondition(hql_isprocess, procard
			// .getId(), cardNumber);
			// if (isprocess != null) {
			// // 查询上一工序号
			// String hql_oldprocess =
			// "from ProcessInfor pi where pi.procard.id=? and processNO<? order by processNO desc";
			// ProcessInfor oldprocess = (ProcessInfor) totalDao
			// .getObjectByCondition(hql_oldprocess, procard
			// .getId(), isprocess.getProcessNO());
			// if (oldprocess != null) {
			// if (isprocess.getApplyCount() >= oldprocess
			// .getApplyCount()) {
			// list.remove(i);
			// i--;
			// continue;
			// }
			// }
			// } else {
			// list.remove(i);
			// i--;
			// continue;
			// }
			// }
			//
			// // 先查询出该产品的总成件号
			// Procard rootProcard = (Procard) totalDao.getObjectById(
			// Procard.class, procard.getRootId());
			// procard.setRootMarkId(rootProcard.getMarkId());
			// procard.setYwMarkId(rootProcard.getYwMarkId());
			// procard.setRootSelfCard(rootProcard.getSelfCard());
			// if (!"noCardHadYlGx".equals(pageStatus)) {
			// // 判断批次
			// String hql2 =
			// "from Procard where productStyle=? and selfCard<? and markId=? and jihuoStatua='激活' and "
			// + hascount
			// +
			// " and rootId in (select id from Procard where productStyle=? and markId =? and procardStyle='总成') ";
			// if ("noCardLingliao".equals(pageStatus))
			// hql2 += " and status in ('已发卡','已发料','领工序')) ";
			// else
			// hql2 += " and status in ('已发料','领工序'))";
			// hql2 += " order by selfCard desc";
			//
			// Procard orderProcard = (Procard) totalDao
			// .getObjectByCondition(hql2, procard
			// .getProductStyle(), procard.getSelfCard(),
			// procard.getMarkId(), procard
			// .getProductStyle(), rootProcard
			// .getMarkId());
			// if (orderProcard != null) {
			// if ("noCardLingliao".equals(pageStatus)) {
			// // 如果是部分到齐，则上层必须有领料数据后，下一批次才能开放
			//
			// // 如果上一批尚未领取完成，则上批优先
			// if (!"part".equals(orderProcard.getLingliaoType())
			// && (orderProcard.getHascount() == null
			// || orderProcard.getKlNumber() < orderProcard
			// .getFilnalCount()
			// || !(orderProcard.getRootId()
			// .equals(rootProcard.getId())) || (orderProcard
			// .getKlNumber().equals(
			// orderProcard
			// .getFilnalCount()) && orderProcard
			// .getHascount() > 0))) {
			// list.remove(i);
			// i--;
			// } else {
			// // 查询上一批次是否存在领料数据
			// String hql_procardFw =
			// "from Procard where fatherId=? and procardStyle='外购' and hascount is not null and hascount<filnalCount";
			// Integer old_maxProcessNo = totalDao.getCount(
			// hql_procardFw, orderProcard.getId());
			// if (old_maxProcessNo == 0) {
			// list.remove(i);
			// i--;
			// }
			// }
			// } else {
			// /*** 和上层批次比较工序的领取进度 ***/
			// // 查询上一批次的最大领取工序号
			// String hql_process_order =
			// "select min(processNO) from ProcessInfor where procard.id=? and submmitCount<applyCount";
			// Integer old_maxProcessNo = (Integer) totalDao
			// .getObjectByCondition(hql_process_order,
			// orderProcard.getId());
			// if (old_maxProcessNo != null) {
			// // 查询本批次的最大领取工序号
			// Integer now_maxProcessNo = (Integer) totalDao
			// .getObjectByCondition(
			// hql_process_order, procard
			// .getId());
			// if (now_maxProcessNo != null) {
			// if (now_maxProcessNo > old_maxProcessNo) {
			// // 当前批次比上一批次领取工序还快，果断不给予显示
			// list.remove(i);
			// i--;
			// } else if (now_maxProcessNo
			// .equals(old_maxProcessNo)) {
			// /*** 工序号相同，需要判断提交数量 ****/
			// // 查询上一批次最大工序的提交数量
			// String hql_subNumber =
			// "select submmitCount from ProcessInfor where procard.id=? and processNO=?";
			// Float oldsubmmitCount = (Float) totalDao
			// .getObjectByCondition(
			// hql_subNumber,
			// orderProcard.getId(),
			// old_maxProcessNo);
			//
			// Float nowsubmmitCount = (Float) totalDao
			// .getObjectByCondition(
			// hql_subNumber, procard
			// .getId(),
			// now_maxProcessNo);
			// if (nowsubmmitCount >= oldsubmmitCount) {
			// list.remove(i);
			// i--;
			// }
			// }
			// }
			// }
			// }
			// }
			//
			// // String minSelfCard = "";
			// // if (minSelfCard == null) {
			// // list.remove(i);
			// // i--;
			// // } else if (minSelfCard != null
			// // && !minSelfCard.equals(procard.getSelfCard())) {
			// // list.remove(i);
			// // i--;
			// // } else if (minSelfCard != null
			// // && minSelfCard.equals(procard.getSelfCard())) {
			// // // 开始匹配总成件号是否一致
			// // procard.setRootMarkId(rootProcard.getMarkId());
			// // procard.setRootSelfCard(rootProcard.getSelfCard());
			// // }
			// }
			// }
			return list;
		}
		return null;
	}

	/***
	 * 根据卡号查询人员，得到人员对应工序的对应最小批次、已发卡的件号（辅料）
	 * 
	 * @param cardNumber
	 *            员工卡卡号
	 * @param pageStatus
	 *            操作状态（noCardLingliao、领工序）
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List findFlProcardListByUserCard(String cardNumber) {
		if (cardNumber != null && cardNumber.length() > 0) {
			// String hql = "from Procard where procardStyle='总成' and id in "
			// +
			// "(select p.id from Procard p join p.processPeopleSet u where u.userId = (select id from Users where cardId=?)) "
			// +
			// "and id in(select pi.procard.rootId from ProcessInfor pi where pi.processName in "
			// +
			// "(select pg.processName from ProcessGzstore pg join pg.users u where u.cardId=?) "
			// +
			// "and pi.procard.status in ('初始','已发卡','已发料','领工序') and pi.isNeedFuliao='yes')";
			// //
			// +"and id in (select pi2.procard.rootId from ProcessInfor pi2 where pi2.isNeedFuliao='yes' "
			// +
			// //
			// "and pi2.id in(select processInfor.id from ProcessinforFuLiao ))";
			// hql += " order by markId,selfCard,procardTime";

			String hql = "from Procard where id in (select rootId from Procard  where jihuoStatua='激活' and rootId in "
					+ "(select p.id from Procard p join p.processPeopleSet u where u.userId = "
					+ "(select id from Users where cardId=?) )"
					+ " and id in "
					+ "(select pi.procard.id from ProcessInfor pi where pi.processName in "
					+ "(select p.processName from ProcessGzstore p join p.users u where u.cardId=?)  and pi.id in(select processInfor.id from ProcessinforFuLiao ))"
					+ " and status in ('初始','已发卡','已发料','领工序'))";
			hql += " order by selfCard,procardTime";
			List list = totalDao.query(hql, cardNumber, cardNumber);
			return list;
		}
		return null;
	}

	/***
	 * 根据首层父类id查询不包含外购件流水卡片
	 * 
	 * @param procardTemplate
	 * @return
	 */
	@Override
	public List findNoWaiProcardByRootId(int rootId) {
		String hql = "from Procard where rootId=? and procardStyle<>'外购'";
		return totalDao.query(hql, rootId);
	}

	/***
	 * 获得自检表项
	 * 
	 * @return
	 */
	@Override
	public List findZjXiang() {
		String hql = "from Provision where provisionStatus=?";
		return totalDao.query(hql, "zj");
	}

	@SuppressWarnings("unchecked")
	public List listProvisionByMarkId(String markId) {
		String hql = "from Provision where provisionStatus='zj' and id in (select provisionId  from MarkIdZijian  where markId=?)";
		List list = totalDao.query(hql, markId);
		if (list == null || list.size() <= 0) {
			String hql2 = "from Provision where provisionStatus='zj'";
			List list2 = totalDao.query(hql2);
			list.addAll(list2);
		}
		return list;
	}

	/***
	 * 添加自检表
	 * 
	 * @param contentList
	 *            自检项
	 * @param isQualifiedList
	 *            是否合格
	 * @param processId
	 *            工序id
	 * @return
	 */
	@Override
	public String saveZj(List contentList, List isQualifiedList, int processId,
			Integer machineId) {
		if (contentList != null && contentList.size() > 0 && processId > 0) {
			if (machineId == null) {
				return "请先选择设备";
			}
			// 查询工序信息
			ProcessInfor processInfor = (ProcessInfor) totalDao.getObjectById(
					ProcessInfor.class, processId);
			if (processInfor != null) {
				boolean bool = false;
				// 添加自检表
				for (int i = 0; i < contentList.size(); i++) {
					String content = (String) contentList.get(i);
					String isQualified = (String) isQualifiedList.get(i);
					if (content != null) {
						ProcessZj processZj = new ProcessZj();
						processZj.setZjItem(content);
						processZj.setIsQualified(isQualified);
						processZj.setProcessInfo(processInfor);// 对应工序关系
						bool = totalDao.save(processZj);
					}
				}
				Machine machine = (Machine) totalDao.getObjectById(
						Machine.class, machineId);
				if (machine == null) {
					return "设备有误，请选择正确的设备";
				}
				processInfor.setShebeiNo(machine.getNo());
				processInfor.setShebeiName(machine.getName());
				processInfor.setGongwei(machine.getWorkPosition());
				if (processInfor.getReProductId() == null) {
					Object[] rootMsg = (Object[]) totalDao
							.getObjectByCondition(
									"select markId,productStyle from Procard where id=?",
									processInfor.getProcard().getRootId());
					if (rootMsg != null && rootMsg.length == 2) {
						String rootMarkId = rootMsg[0].toString();
						String productStyle = rootMsg[1].toString();
						List<ProcessTemplate> processTList = (List<ProcessTemplate>) totalDao
								.query(
										"from ProcessTemplate where processNO=? "
												+ "and procardTemplate.id in(select id from ProcardTemplate where markId=? and rootId=(select id from ProcardTemplate where markId=? and procardStyle='总成' and productStyle=? and (dataStatus is null or dataStatus !='删除') and (banbenStatus is null or banbenStatus!='历史'))) ",
										processInfor.getProcessNO(),
										processInfor.getProcard().getMarkId(),
										rootMarkId, productStyle);
						if (processTList != null && processTList.size() > 0) {
							for (ProcessTemplate processt : processTList) {
								processt.setShebeiNo(machine.getNo());
								processt.setShebeiName(machine.getName());
								processt.setGongwei(machine.getWorkPosition());
								totalDao.update(processt);
							}
						}
					}
				}
				// totalDao.update(process);
				// 更新工序状态
				if (bool) {
					processInfor.setStatus("自检");
					String hql_pg = " from ProcessInforReceiveLog where fk_processInforId = ? and gongwei = ? and shebeiNo =? ";
					String hql_pg1 = "from ProcessInforReceiveLog where fk_processInforId = ? and usercodes like '%"
							+ Util.getLoginUser().getCode() + "%'";
					int count = totalDao.getCount(hql_pg, processInfor.getId(),
							processInfor.getGongwei(), processInfor
									.getShebeiNo());
					if (count == 0) {
						ProcessInforReceiveLog pg = (ProcessInforReceiveLog) totalDao
								.getObjectByCondition(hql_pg1, processInfor
										.getId());
						if (pg == null) {
							pg = new ProcessInforReceiveLog();
						}
						pg.setSjStatus("YES");
					}
					totalDao.update(processInfor);
				}
			}
			return "true";
		}
		return "没有自检项，请先完善自检项后才能继续自检!";
	}

	/***
	 * 根据id查找工序
	 */
	public ProcessInfor findProcessById(Integer id) {
		return (ProcessInfor) totalDao.getObjectById(ProcessInfor.class, id);
	}

	/***
	 * 工序补打
	 */
	@Override
	public Map findProcessForBd(ProcessInfor process) {
		Map<String, Object> maps = null;
		ProcessInfor oldProcess = (ProcessInfor) totalDao.getObjectById(
				ProcessInfor.class, process.getId());
		if (oldProcess != null) {
			if (process.getSubmmitCount() <= oldProcess.getSubmmitCount()) {
				Procard procard = null;
				if (oldProcess.getReProductId() == null) {
					procard = (Procard) totalDao.getObjectById(Procard.class,
							oldProcess.getProcard().getId());
				} else {
					process.setReProductId(oldProcess.getReProductId());
					procard = (Procard) totalDao
							.getObjectByCondition(
									"from Procard where id =(select procardId from ProcardReProduct where id=?)",
									oldProcess.getReProductId());
				}
				String ywMarkId = (String) totalDao.getObjectByCondition(
						"select ywMarkId from Procard where id=?", procard
								.getRootId());
				if (ywMarkId != null && ywMarkId.length() > 0) {
					procard.setYwMarkId(ywMarkId);
				}
				maps = new HashMap<String, Object>();
				// 为打印用
				process.setProcessNO(oldProcess.getProcessNO());
				process.setProcessName(oldProcess.getProcessName());
				process.setUsernames(oldProcess.getUsernames());

				// 后续工序
				List<String> processList = totalDao
						.findAllByPage(
								"select processName from ProcessInfor"
										+ "  where procard.id=? and processNO>? order by processNO ",
								1, 3, oldProcess.getProcard().getId(),
								oldProcess.getProcessNO());
				String nextProcessName = "";
				if (processList != null && processList.size() > 0) {
					for (String pname : processList) {
						nextProcessName += pname + ";";
					}
				}

				// String nextProcessName = (String) totalDao
				// .getObjectByCondition(
				// "select processName from ProcessInfor"
				// + "  where procard.id=? and processNO>? order by processNO ",
				// oldProcess.getProcard().getId(), oldProcess
				// .getProcessNO());

				process.setGuding(nextProcessName == null ? ""
						: nextProcessName);
				int index = oldProcess.getSubmitDate().lastIndexOf(",");
				int leng = oldProcess.getSubmitDate().length();
				if (index > 0) {
					process.setSubmitDate(oldProcess.getSubmitDate().substring(
							index + 1, leng));
				} else {
					process.setSubmitDate(oldProcess.getSubmitDate());
				}
				// 查询成型图
				if (oldProcess.getReProductId() == null) {
					ProcessTemplateFile ptf = null;
					String bancisql = null;
					if (procard.getBanci() == null || procard.getBanci() == 0) {
						bancisql = " and (banci is null or banci=0)";
					} else {
						bancisql = " and banci=" + procard.getBanci();
					}
					if (procard.getProductStyle().equals("批产")) {
						ptf = (ProcessTemplateFile) totalDao
								.getObjectByCondition(
										" from ProcessTemplateFile  where  markId=? and type='成型图' and productStyle='批产' "
												+ bancisql, procard.getMarkId());
						if (ptf == null) {
							Float tqCount = (Float) totalDao
									.getObjectByCondition(
											"select count(*) from ProcardTemplatePrivilege p1,Procard p2"
													+ " where (p1.markId=p2.markId or p1.markId=p2.ywMarkId) and p2.id=?",
											procard.getRootId());
							if (tqCount != null && tqCount > 0) {
								ptf = (ProcessTemplateFile) totalDao
										.getObjectByCondition(
												" from ProcessTemplateFile  where  markId=? and type='成型图' and productStyle='试制' and  glId=?"
														+ bancisql, procard
														.getMarkId(), procard
														.getId());
							}
						}
					} else {
						ptf = (ProcessTemplateFile) totalDao
								.getObjectByCondition(
										" from ProcessTemplateFile  where  markId=? and type='成型图' and productStyle='试制' and  glId=?"
												+ bancisql,
										procard.getMarkId(), procard.getId());
					}
					if (ptf != null) {
						process.setCheckIdea(ptf.getMonth() + "/"
								+ ptf.getFileName());
					}
				} else {
					String fileName = (String) totalDao
							.getObjectByCondition(
									"select fileName from ProcardReProductFile where reProductId=?",
									oldProcess.getReProductId());
					if (fileName != null) {
						process.setCheckIdea(fileName);
					}
				}

				// 查询工序领取日志的二维码;
				String hql_qr = " select barcode from ProcessInforReceiveLog where fk_processInforId = ? and barcode is not null and barcode <> '' ";
				String barcode = (String) totalDao.getObjectByCondition(hql_qr,
						process.getId());
				maps.put("process", process);
				maps.put("procard", procard);
				maps.put("barcode", barcode);
			}
		}
		return maps;
	}

	/***
	 * 根据内部计划id查询对应的生产周转单
	 * 
	 * @param planOrderId
	 *            内部计划单id
	 * @return
	 */
	@Override
	public List findProcardByPlanOrderId(Integer planOrderId, String markid) {
		String hql = "from Procard where planOrderId=? and belongLayer=1  ";
		if (markid != null && markid.length() > 0) {
			hql += " and markId='" + markid + "'";
		}
		hql += " order by markId";
		return totalDao.query(hql, planOrderId);
	}

	@Override
	public String getExcelpath(Procard procard, String startDate,
			String endDate, Integer id) {
		// TODO Auto-generated method stub
		String hql = totalDao.criteriaQueries(procard, null);
		if (id != null) {
			hql = "select rootId " + hql + " and id = " + id;
		} else if (!"".equals(endDate) && !"".equals(startDate)) {
			hql = "select rootId " + hql + " and procardTime between '"
					+ startDate + "' and '" + endDate + "'";
		} else {
			hql = "select rootId " + hql;
		}
		List<Integer> rootIdLsit = totalDao.query(hql);
		if (rootIdLsit.size() > 0) {
			// 删除所有已生成的文件
			String excelRealPath = ServletActionContext.getServletContext()
					.getRealPath("/upload/procardExcel");
			File folder = new File(excelRealPath);
			if (folder.exists()) {// 文件夹存在
				String filesName[] = folder.list();
				if (filesName != null) {
					for (int j = 0; j < filesName.length; j++) {
						File file = new File(excelRealPath + "\\"
								+ filesName[j]);
						if (!file.isDirectory()) {
							file.delete();
						}
					}
				}
			} else {// 文件夹不存在，创建文件夹
				folder.mkdirs();
			}
			String fileName = Util.getDateTime("yyyyMMddhhmmss")
					+ "Procard.xls";
			String excelRealPath2 = ServletActionContext.getServletContext()
					.getRealPath("/upload")
					+ "/procardExcel/" + fileName;
			File target2 = new File(excelRealPath2);
			WritableWorkbook writeBook = null;
			WritableSheet sheet = null;
			try {
				writeBook = Workbook.createWorkbook(target2);
				sheet = writeBook.createSheet("生成周期卡", 0);

				Set<Integer> rootIdSet = new HashSet<Integer>();
				for (Integer rootId : rootIdLsit) {
					rootIdSet.add(rootId);
				}
				Integer hang = 0;// 行数
				// 定义单元格样式 定义格式 字体 下划线 颜色 斜体 粗体
				WritableCellFormat wcf1 = new WritableCellFormat(
						new WritableFont(WritableFont.ARIAL, 10,
								WritableFont.BOLD));
				if (procard.getProcardStyle().equals("外购")) {
					// 导出条件查询的外购件
					String hql1 = totalDao.criteriaQueries(procard, null,
							"status");
					if (startDate != null && endDate != null
							&& !startDate.equals("") && !endDate.equals("")) {
						hql1 += " and procardTime between '" + startDate
								+ "' and '" + endDate + "'";
					} else if (startDate != null && !startDate.equals("")
							&& (endDate == null || endDate.equals(""))) {
						hql1 += " and procardTime >= '" + startDate + "'";
					} else if ((startDate == null || startDate.equals(""))
							&& endDate != null && !endDate.equals("")) {
						hql1 += " and procardTime <= '" + endDate + "'";
					}
					if (procard.getStatus() != null
							&& !"".equals(procard.getStatus())) {
						String[] p_status = procard.getStatus().split(",");
						if (p_status != null && p_status.length > 0) {
							String status_str = "";
							for (int i = 0; i < p_status.length; i++) {
								if ("".equals(status_str)) {
									status_str += "'" + p_status[i] + "'";
								} else {
									status_str += "," + "'" + p_status[i] + "'";
								}
							}
							hql1 += " and status in (" + status_str + ")";
						}
					}
					hql1 += " and (sbStatus is null or sbStatus <> '删除' )order by id desc";
					List<Procard> listP = totalDao.query(hql1);
					for (Procard procard2 : listP) {
						// 查询业务件号
						String ywmarkid = (String) totalDao
								.getObjectByCondition(
										"select ywMarkId from Procard where id=?",
										procard2.getRootId());

						procard2.setYwMarkId(ywmarkid);
						// 查询总成件号
						String rootMarkid = (String) totalDao
								.getObjectByCondition(
										"select markId from Procard where id=?",
										procard2.getRootId());
						procard2.setRootMarkId(rootMarkid);

					}
					findDaoChuBomByWaigou(listP, "");// 这是导出此外购件总成下面的所有外购件信息
					// findDaoChuBomByRootIdWaigou(rootIdSet,
					// "");//这是导出此外购件总成下面的所有外购件信息
					return fileName;
				}
				// 非外购件号导出
				for (Integer rootId2 : rootIdSet) {
					feiWaiGou(sheet, hang, wcf1, rootId2);
				}
				return fileName;
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return "导出时出现异常";
			} catch (RowsExceededException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return "导出时出现异常";
			} catch (WriteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return "导出时出现异常";
			} finally {
				try {
					// 关闭读写
					writeBook.write();
					writeBook.close();
				} catch (WriteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else {
			return "不存在查询时间段内的生产周期卡数据";
		}

	}

	private void feiWaiGou(WritableSheet sheet, Integer hang,
			WritableCellFormat wcf1, Integer rootId2) throws WriteException,
			RowsExceededException {
		List<Procard> procardlist = totalDao
				.query("from Procard where rootId =" + rootId2);
		for (Procard p : procardlist) {
			if (p.getId().equals(p.getRootId())
					&& (p.getProcardStyle() == null || !p.getProcardStyle()
							.equals("外购"))) {// 第一件为总成件
				Label label0 = new Label(0, hang, "件号", wcf1);
				Label label1 = new Label(1, hang, "名称", wcf1);
				Label label2 = new Label(2, hang, "批次", wcf1);
				Label label3 = new Label(3, hang, "卡片类型", wcf1);
				Label label4 = new Label(4, hang, "数量", wcf1);
				Label label5 = new Label(5, hang, "时间", wcf1);
				sheet.addCell(label0);
				sheet.addCell(label1);
				sheet.addCell(label2);
				sheet.addCell(label3);
				sheet.addCell(label4);
				sheet.addCell(label5);
				hang++;
				Label label00 = new Label(0, hang, p.getMarkId());
				Label label01 = new Label(1, hang, p.getProName());
				Label label02 = new Label(2, hang, p.getSelfCard());
				Label label03 = new Label(3, hang, p.getProcardStyle());
				Label label04 = new Label(4, hang, p.getFilnalCount() + "");
				Label label05 = new Label(5, hang, p.getProcardTime());
				sheet.addCell(label00);
				sheet.addCell(label01);
				sheet.addCell(label02);
				sheet.addCell(label03);
				sheet.addCell(label04);
				sheet.addCell(label05);
				hang++;
				// 总成下面的工序
				Set<ProcessInfor> pinfoSet = p.getProcessInforSet();
				if (pinfoSet.size() > 0) {

					Label label10 = new Label(0, hang, "工序号");
					Label label11 = new Label(1, hang, "名称");
					Label label12 = new Label(2, hang, "提交数量");
					Label label13 = new Label(3, hang, "不合格量");
					Label label14 = new Label(4, hang, "初领时间");
					Label label15 = new Label(5, hang, "提交时间");
					Label label16 = new Label(6, hang, "总时长(s)");
					Label label17 = new Label(7, hang, "生产类型");
					Label label18 = new Label(8, hang, "状态");
					Label label19 = new Label(9, hang, "领取人");
					Label label110 = new Label(10, hang, "工号");
					sheet.addCell(label10);
					sheet.addCell(label11);
					sheet.addCell(label12);
					sheet.addCell(label13);
					sheet.addCell(label14);
					sheet.addCell(label15);
					sheet.addCell(label16);
					sheet.addCell(label17);
					sheet.addCell(label18);
					sheet.addCell(label19);
					sheet.addCell(label110);
					hang++;
					for (ProcessInfor pInfo : pinfoSet) {
						Label label20 = new Label(0, hang, pInfo.getProcessNO()
								+ "");
						Label label21 = new Label(1, hang, pInfo
								.getProcessName());
						Label label22 = new Label(2, hang, pInfo
								.getSubmmitCount()
								+ "");
						Label label23 = new Label(3, hang, pInfo
								.getBreakCount()
								+ "");
						Label label24 = new Label(4, hang, pInfo
								.getFirstApplyDate());
						Label label25 = new Label(5, hang, pInfo
								.getSubmitDate());
						// 提交时间取最后一个参与计算
						String submitTime = pInfo.getSubmitDate();
						if (submitTime != null) {
							String[] times = submitTime.split(",");
							submitTime = times[times.length - 1];
						}

						// 总时长为提交时间减去初领时间
						Label label26 = null;
						if (pInfo.getFirstApplyDate() != null
								&& submitTime != null) {
							Date start = DateUtil
									.parseDate(pInfo.getFirstApplyDate(),
											"yyyy-MM-dd HH:mm:ss");
							Date end = DateUtil.parseDate(submitTime,
									"yyyy-MM-dd HH:mm:ss");
							label26 = new Label(6, hang, (end.getTime() - start
									.getTime())
									/ 1000 + "");
						} else {
							label26 = new Label(6, hang, "0s");
						}
						Label label27 = new Label(7, hang, pInfo
								.getProductStyle());
						Label label28 = new Label(8, hang, pInfo.getStatus());
						Label label29 = new Label(9, hang, pInfo.getUsernames());
						Label label210 = new Label(10, hang, pInfo
								.getUsercodes());
						sheet.addCell(label20);
						sheet.addCell(label21);
						sheet.addCell(label22);
						sheet.addCell(label23);
						sheet.addCell(label24);
						sheet.addCell(label25);
						sheet.addCell(label26);
						sheet.addCell(label27);
						sheet.addCell(label28);
						sheet.addCell(label29);
						sheet.addCell(label210);
						hang++;
					}
				}
				hang++;

			}
		}
		for (Procard p : procardlist) {
			if (!p.getId().equals(p.getRootId())
					&& (p.getProcardStyle() == null || !p.getProcardStyle()
							.equals("外购"))) {// 非总成总成件
				Label label0 = new Label(0, hang, "件号", wcf1);
				Label label1 = new Label(1, hang, "名称", wcf1);
				Label label2 = new Label(2, hang, "批次", wcf1);
				Label label3 = new Label(3, hang, "卡片类型", wcf1);
				Label label4 = new Label(4, hang, "数量", wcf1);
				Label label5 = new Label(5, hang, "时间", wcf1);
				sheet.addCell(label0);
				sheet.addCell(label1);
				sheet.addCell(label2);
				sheet.addCell(label3);
				sheet.addCell(label4);
				sheet.addCell(label5);
				hang++;
				Label label00 = new Label(0, hang, p.getMarkId());
				Label label01 = new Label(1, hang, p.getProName());
				Label label02 = new Label(2, hang, p.getSelfCard());
				Label label03 = new Label(3, hang, p.getProcardStyle());
				Label label04 = new Label(4, hang, p.getFilnalCount() + "");
				Label label05 = new Label(5, hang, p.getProcardTime());
				sheet.addCell(label00);
				sheet.addCell(label01);
				sheet.addCell(label02);
				sheet.addCell(label03);
				sheet.addCell(label04);
				sheet.addCell(label05);
				hang++;
				// 总成下面的工序
				Set<ProcessInfor> pinfoSet = p.getProcessInforSet();
				if (pinfoSet.size() > 0) {
					Label label10 = new Label(0, hang, "工序号");
					Label label11 = new Label(1, hang, "名称");
					Label label12 = new Label(2, hang, "提交数量");
					Label label13 = new Label(3, hang, "不合格量");
					Label label14 = new Label(4, hang, "初领时间");
					Label label15 = new Label(5, hang, "提交时间");
					Label label16 = new Label(6, hang, "总时长(s)");
					Label label17 = new Label(7, hang, "生产类型");
					Label label18 = new Label(8, hang, "状态");
					Label label19 = new Label(9, hang, "领取人");
					Label label110 = new Label(10, hang, "工号");
					sheet.addCell(label10);
					sheet.addCell(label11);
					sheet.addCell(label12);
					sheet.addCell(label13);
					sheet.addCell(label14);
					sheet.addCell(label15);
					sheet.addCell(label16);
					sheet.addCell(label17);
					sheet.addCell(label18);
					sheet.addCell(label19);
					sheet.addCell(label110);
					hang++;
					for (ProcessInfor pInfo : pinfoSet) {
						Label label20 = new Label(0, hang, pInfo.getProcessNO()
								+ "");
						Label label21 = new Label(1, hang, pInfo
								.getProcessName());
						Label label22 = new Label(2, hang, pInfo
								.getSubmmitCount()
								+ "");
						Label label23 = new Label(3, hang, pInfo
								.getBreakCount()
								+ "");
						Label label24 = new Label(4, hang, pInfo
								.getFirstApplyDate());
						Label label25 = new Label(5, hang, pInfo
								.getSubmitDate());
						// 提交时间取最后一个参与计算
						String submitTime = pInfo.getSubmitDate();
						if (submitTime != null) {
							String[] times = submitTime.split(",");
							submitTime = times[times.length - 1];
						}
						// 总时长为提交时间减去初领时间
						Label label26 = null;
						if (submitTime != null
								&& pInfo.getFirstApplyDate() != null) {
							Date start = DateUtil
									.parseDate(pInfo.getFirstApplyDate(),
											"yyyy-MM-dd hh:mm:ss");
							Date end = DateUtil.parseDate(submitTime,
									"yyyy-MM-dd hh:mm:ss");
							label26 = new Label(6, hang, (end.getTime() - start
									.getTime())
									/ 1000 + "");
						} else {
							label26 = new Label(6, hang, "0");
						}

						Label label27 = new Label(7, hang, pInfo
								.getProductStyle());
						Label label28 = new Label(8, hang, pInfo.getStatus());
						Label label29 = new Label(9, hang, pInfo.getUsernames());
						Label label210 = new Label(10, hang, pInfo
								.getUsercodes());
						sheet.addCell(label20);
						sheet.addCell(label21);
						sheet.addCell(label22);
						sheet.addCell(label23);
						sheet.addCell(label24);
						sheet.addCell(label25);
						sheet.addCell(label26);
						sheet.addCell(label27);
						sheet.addCell(label28);
						sheet.addCell(label29);
						sheet.addCell(label210);
						hang++;
					}
				}
				hang++;

			}
		}
	}

	/***
	 * 无卡激活
	 * 
	 * @param oldProcard
	 *            流水卡片
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	@Deprecated
	public String sendRunCard(Procard procard, String op) {
		String message = "";
		Procard oldProcard = (Procard) totalDao.getObjectById(Procard.class,
				procard.getId());

		if ("批产".equals(oldProcard.getProductStyle())) {
			/**** 计算激活时间(根据最大外购时间计算) ***/
			// 得到最大外购时间
			String hql_maxWgProcard = "from Procard where rootId=? and procardStyle='外购' order by needFinalDate desc";
			Procard wgProcard = (Procard) totalDao.getObjectByCondition(
					hql_maxWgProcard, oldProcard.getId());
			String date2 = "";
			Date maxDate = null;
			// 不存在外购件
			if (wgProcard == null) {
				date2 = Util.getDateTime();
				maxDate = new Date();
				oldProcard.setJihuoDate(date2);// 激活时间
			} else {
				date2 = Util.getDateTime();
				maxDate = new Date();
				oldProcard.setJihuoDate(date2);// 激活时间
			}

			/*** 计算生产周期 ****/
			String shangbanTime = " " + Util.shangbanTime() + ":00";// 上班时间
			String xiabanTime = " " + Util.xiabanTime() + ":00";// 下班时间
			// String nowDateTime = Util.getDateTime();// 当前时间
			Date nowDate = maxDate;
			if (oldProcard.getSingleDuration() == null) {
				oldProcard.setSingleDuration(16F);// 默认工作8H
			}
			Float singleDuration = oldProcard.getSingleDuration();// 单班时长
			String hql_zq = "from  Procard where rootId=? ";
			List list = totalDao.query(hql_zq, oldProcard.getId());
			if (list != null && list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Procard zqprocard = (Procard) list.get(i);
					zqprocard.setJihuoDate(date2);// 激活时间

					if (zqprocard.getAllJiepai() == null) {
						zqprocard.setAllJiepai(3F);// 默认节拍3s
					}
					// 根据产品数量计算生产时长
					Float allProcardTime = zqprocard.getAllJiepai()
							* zqprocard.getFilnalCount() / 3600;// 生产时长(h)
					if (zqprocard.getDeliveryDuration() == null) {
						zqprocard.setDeliveryDuration(0F);// 默认延误0H
					}
					Float deliveryDuration = zqprocard.getDeliveryDuration()
							+ allProcardTime;// 延误时长
					// 计算结束时间
					int day = (int) (deliveryDuration / singleDuration);
					Float hour = deliveryDuration % singleDuration;// 总时长
					try {
						Date nextDate = Util.getCalendarDate(nowDate, day);// 累加天数
						String nextDay = Util.DateToString(nextDate,
								"yyyy-MM-dd")
								+ xiabanTime;// 累加后下班时间
						Date nextXiaban = Util.StringToDate(nextDay,
								"yyyy-MM-dd HH:mm:ss");// 累加后时间

						// 如果是下班后处理，下一天的上班时间开始累加
						if (nextXiaban.getTime() - nextDate.getTime() < 0) {
							nextDate = Util.getCalendarDate(nextDate, 1);// 累加1天
							String nextDay2 = Util.DateToString(nextDate,
									"yyyy-MM-dd")
									+ shangbanTime;// 累加后上班时间
							nextDate = Util.StringToDate(nextDay2,
									"yyyy-MM-dd HH:mm:ss");// 累加后时间
							nextXiaban = Util.StringToDate(nextDay2,
									"yyyy-MM-dd HH:mm:ss");// 累加后下班时间
						}

						// 计算累加后那天的时间与下班时间间隔
						Float shengHour = (nextXiaban.getTime() - nextXiaban
								.getTime()) * 1000 * 3600F;
						// 如果距离下班时间大于剩余时间，直接累加小时
						if (shengHour < hour) {
							nextDate = Util.getCalendarDate(nextXiaban, 1);// 累加1天
							String nextDay2 = Util.DateToString(nextDate,
									"yyyy-MM-dd")
									+ shangbanTime;// 累加后上班时间
							nextDate = Util.StringToDate(nextDay2,
									"yyyy-MM-dd HH:mm:ss");// 累加后时间
							hour -= shengHour;
						}
						int gethour = Integer.parseInt(Util.DateToString(
								nextDate, "HH"));
						int newHour = (int) (gethour + hour);
						String needFinalDate = Util.DateToString(nextDate,
								"yyyy-MM-dd ")
								+ newHour
								+ Util.DateToString(nextDate, ":mm:ss");
						zqprocard.setNeedFinalDate(needFinalDate);
						totalDao.update(zqprocard);
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
			}
			// totalDao.clear();
		}

		/*** 开始判断最后一层的的已有材料信息 ***/
		// 查询最后一层信息
		String hql = "select belongLayer from Procard where rootId=? and (procardstyle in ('总成','自制') or (needProcess ='yes' and procardstyle='外购')) order by belonglayer desc";
		Object belonglayerObj = totalDao.getObjectByCondition(hql, oldProcard
				.getId());
		int belonglayer = Integer.parseInt(belonglayerObj.toString());
		Boolean bool = true;

		if ("初始".equals(oldProcard.getStatus())) {
			// 是否需要领料
			if (oldProcard.getLingliaostatus() != null
					&& "否".equals(oldProcard.getLingliaostatus())) {
				oldProcard.setStatus("已发料");
				oldProcard.setHascount(0F);
				if (oldProcard.isZhHasYcl()) {
					oldProcard.setYhascount(0F);
				}
			} else {
				oldProcard.setStatus("已发卡");
			}
		}

		// 先按照层次激活一遍
		bool = jihuoProcard(oldProcard.getRootId(), belonglayer, op);

		// 如果类型是“提前”激活,则激活最后一层自制件
		/** 将所有的自制件并且下层全是外购件的全部激活(因为自制件肯定是最后一层的数据) 开始 **/
		// String hql2 =
		// " from Procard where rootId=? and procardstyle in ('自制','总成') and zzjihuo='提前' and (jihuoStatua<>'激活' or jihuoStatua is null)";
		// List<Procard> zizhiList = totalDao.query(hql2, oldProcard.getId());
		String belonglayerHql = "from Procard where rootId=? and (( procardstyle  ='自制' and status='初始' and id not in ("
				+ "select fatherId from Procard where rootId=? and (procardstyle  ='自制' or (procardStyle='外购' and needProcess ='yes' and status='初始')) ))"
				+ " or (procardStyle='外购' and needProcess ='yes' and status='初始')) ";
		List<Procard> zizhiList = totalDao.query(belonglayerHql, oldProcard
				.getId(), oldProcard.getId());
		if (zizhiList != null && zizhiList.size() > 0) {
			/**** 遍历待激活的产品列表 ******/
			for (Procard procard2 : zizhiList) {
				jihuoSingleProcard(procard2);
			}
		}
		/** 将所有的自制件全部激活(因为自制件肯定是最后一层的数据) 完成 **/

		if (bool)
			return message;
		else
			return "激活失败!";
	}

	/***
	 * 无卡激活（模式2）
	 * 
	 * @param oldProcard
	 *            流水卡片
	 * @return
	 */
	@Override
	@Deprecated
	public String sendRunCard2(Procard procard, String op) {
		String message = "";
		Procard oldProcard = (Procard) totalDao.getObjectById(Procard.class,
				procard.getId());
		if ("批产".equals(oldProcard.getProductStyle())) {
			String nowDateTime = Util.getDateTime();
			/************** 遍历所有外购件，生成外购件到货时间。 同时将到货时间和物料需求表关联，生成外购件的供货计划！ *************************/
			String hql_allWgProcard = "from Procard where rootId=? and procardStyle='外购'";
			List list = totalDao.query(hql_allWgProcard, oldProcard.getId());
			for (int i = 0; i < list.size(); i++) {
				Procard wgProcard = (Procard) list.get(i);
				wgProcard.setJihuoDate(nowDateTime);
				wgProcard.setNeedFinalDate(nowDateTime);
				// 判断是否存在采购量
				if (wgProcard.getCgNumber() != null
						&& wgProcard.getCgNumber() > 0) {
					// 计算外购件到货时间 (cgNumber*生产节拍+送货时间)
					String hql_YuanclAndWaigj = "from YuanclAndWaigj where markId=? and kgliao=? and (banbenStatus='默认' or banbenStatus is null)";
					if (wgProcard.getBanBenNumber() != null
							&& wgProcard.getBanBenNumber().length() > 0) {
						hql_YuanclAndWaigj += " and banbenhao='"
								+ wgProcard.getBanBenNumber() + "'";
					}
					YuanclAndWaigj yuanclAndWaigj = (YuanclAndWaigj) totalDao
							.getObjectByCondition(hql_YuanclAndWaigj, wgProcard
									.getMarkId(), wgProcard.getKgliao());
					Integer avgProductionTakt = 1;// 生产节拍(默认1S)
					Float avgDeliveryTime = 3F;// 配送时长(默认3天)
					if (yuanclAndWaigj != null) {
						if (yuanclAndWaigj.getAvgProductionTakt() != null
								&& yuanclAndWaigj.getAvgProductionTakt() > 0) {
							avgProductionTakt = yuanclAndWaigj
									.getAvgProductionTakt();
						}
						if (yuanclAndWaigj.getAvgDeliveryTime() != null
								&& yuanclAndWaigj.getAvgDeliveryTime() > 0F) {
							avgDeliveryTime = yuanclAndWaigj
									.getAvgDeliveryTime();
						}
					}
					Float allCgTime = wgProcard.getCgNumber()
							* avgProductionTakt + avgDeliveryTime * 24 * 60
							* 60;
					String cgDate = Util.getCalendarModified(nowDateTime, 11,
							allCgTime.intValue());
					wgProcard.setNeedFinalDate(cgDate);
				}
				totalDao.update(wgProcard);
			}

			/************** 根据外购件到货时间生成自制件生产时间 *************************/
			String hql_allZzProcard = "from Procard where rootId=? and procardStyle<>'外购' order by id desc";// 倒序排列，按照从下网上的顺序计算
			List list_zz = totalDao.query(hql_allZzProcard, oldProcard.getId());
			for (int i = 0; i < list_zz.size(); i++) {
				Procard zzProcard = (Procard) list_zz.get(i);
				zzProcard.setNeedFinalDate(nowDateTime);
				// 得到最大外购到货时间
				String hql_maxWgProcard = "select max(needFinalDate) from Procard where fatherId=? and procardStyle='外购'";
				String maxneedFinalDate = (String) totalDao
						.getObjectByCondition(hql_maxWgProcard, zzProcard
								.getId());
				if (maxneedFinalDate != null) {
					zzProcard.setJihuoDate(maxneedFinalDate);// 开始时间
				} else {
					// 根据自制件的最早开工时间计算开始时间
					String hql_minZzProcard = "select min(jihuoDate) from Procard where fatherId=? and procardStyle='自制'";
					String minJihuoDate = (String) totalDao
							.getObjectByCondition(hql_minZzProcard, zzProcard
									.getId());
					zzProcard.setJihuoDate(minJihuoDate);// 开始时间
				}
				// 根据工序节拍计算结束时间
				String hql_allProcessInfor = "from ProcessInfor where procard.id=?";// 倒序排列，按照从下网上的顺序计算
				List list_processInfor = totalDao.query(hql_allProcessInfor,
						zzProcard.getId());
				Float alljiepai = 0F;
				for (int j = 0; j < list_processInfor.size(); j++) {
					ProcessInfor processInfor = (ProcessInfor) list_processInfor
							.get(j);
					// 最优排列算法 ----跳过
					// 累计所有工序节拍
					if (processInfor.getAllJiepai() != null) {
						alljiepai += processInfor.getAllJiepai();
					}
				}
				alljiepai = alljiepai * zzProcard.getFilnalCount();
				String zzFinalDate = Util.getCalendarModified(zzProcard
						.getJihuoDate(), 11, alljiepai.intValue());
				zzProcard.setNeedFinalDate(zzFinalDate);
				totalDao.update(zzProcard);
			}

			/************** 激活所有自制件，按照生产日期控制领料以及领工序 *************************/
			String belonglayerHql = "from Procard where rootId=? and (sbStatus is null or sbStatus!='删除') and (procardstyle in ('总成','自制') or (needProcess ='yes' and procardstyle='外购')) ";
			List<Procard> zizhiList = totalDao.query(belonglayerHql, oldProcard
					.getId());
			boolean bool = false;
			if (zizhiList != null && zizhiList.size() > 0) {
				for (Procard procard2 : zizhiList) {
					// 生成备料计划
					boolean needll = false;
					// 查看下层是否有需要领料的外购件
					if (procard2.getProcardStyle().equals("外购")) {
						if (procard2.getLingliaostatus() == null
								|| !procard2.getLingliaostatus().equals("否")) {
							needll = true;
						}
					} else {
						Float needllCount = (Float) totalDao
								.getObjectByCondition(
										"select count(*) from Procard where procard.id=? and procardstyle ='外购' and (needProcess is null or needProcess !='yes') and (lingliaostatus is null or lingliaostatus !='否')"
												+ " and (sbStatus is null or sbStatus!='删除')",
										procard2.getId());
						if (needllCount != null && needllCount > 0) {
							needll = true;
						}
					}
					if (needll) {
						procard2.getLingliaostatus().equals("是");
						ProcardBl procardbl = (ProcardBl) totalDao
								.getObjectByCondition(
										"from ProcardBl where procardId=?",
										procard2.getId());
						if (procardbl == null) {
							procardbl = new ProcardBl();
							procardbl.setProcardRootId(procard2.getRootId());
							procardbl.setProcardId(procard2.getId());//
							procardbl.setMarkId(procard2.getMarkId());//
							procardbl.setYlingliaoTime(procard2.getJihuoDate());// 预领料时间
							procardbl.setStatus("未领");
							procardbl.setLingliaoStatus("是");
							totalDao.save(procardbl);
						} else {
							// procardbl = new ProcardBl();
							procardbl.setProcardRootId(procard2.getRootId());
							procardbl.setProcardId(procard2.getId());//
							procardbl.setMarkId(procard2.getMarkId());//
							procardbl.setYlingliaoTime(procard2.getJihuoDate());// 预领料时间
							procardbl.setLingliaoStatus("是");
							// procardbl.setStatus("未领");
							totalDao.update(procardbl);
						}
					} else {
						procard2.getLingliaostatus().equals("否");
						ProcardBl procardbl = (ProcardBl) totalDao
								.getObjectByCondition(
										"from ProcardBl where procardId=?",
										procard2.getId());
						if (procardbl == null) {
							procardbl = new ProcardBl();
							procardbl.setProcardRootId(procard2.getRootId());
							procardbl.setProcardId(procard2.getId());//
							procardbl.setMarkId(procard2.getMarkId());//
							procardbl.setYlingliaoTime(procard2.getJihuoDate());// 预领料时间
							procardbl.setStatus("已领完");
							procardbl.setLingliaoStatus("否");
							totalDao.save(procardbl);
						} else {
							// procardbl = new ProcardBl();
							procardbl.setProcardRootId(procard2.getRootId());
							procardbl.setProcardId(procard2.getId());//
							procardbl.setMarkId(procard2.getMarkId());//
							procardbl.setYlingliaoTime(procard2.getJihuoDate());// 预领料时间
							procardbl.setStatus("已领完");
							procardbl.setLingliaoStatus("否");
							// procardbl.setStatus("未领");
							totalDao.update(procardbl);
						}
						procard2.getLingliaostatus().equals("否");
					}
					try {
						bool = bool & jihuoSingleProcard(procard2);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			if (bool)
				return message;
		}
		return "激活失败!";
	}

	/****
	 * 计算bom的生产计划、外购供货计划、外委计划供货计划、包工包料外委供货计划
	 * 
	 * @param procard
	 * @return
	 */
	@Override
	public String jihuoProcardForPlan(Procard procard, boolean isJihuo) {
		/*************** 将整个bom放到map中，用于后续的激活用.避免频繁调用数据库查询，优化速度 ****************************/
		Map<Integer, List<Procard>> procardMap = new HashMap<Integer, List<Procard>>();
		Map<Integer, List<ProcessInfor>> processInforMap = new HashMap<Integer, List<ProcessInfor>>();

		String hql_zizhiP = "from Procard where rootId=?";
		if (isJihuo == false) {
			// hql_zizhiP = "from Procard where rootId=? ";
		}
		List<Procard> list_zihzi = totalDao.query(hql_zizhiP, procard
				.getRootId());
		String wgAllMarkId = "''";
		for (Procard procard2 : list_zihzi) {
			List<Procard> sonProcardList = null;
			if (procard.getId().equals(procard2.getId())) {
				sonProcardList = procardMap.get(procard2.getId());
			} else {
				sonProcardList = procardMap.get(procard2.getFatherId());
			}
			if (sonProcardList == null) {
				sonProcardList = new ArrayList<Procard>();
			}
			// if ("总成".equals(procard2.getProcardStyle())) {
			// procard2.setFatherId(null);
			// }
			sonProcardList.add(procard2);

			// 子项列表
			if (procard.getId().equals(procard2.getId())) {
				procardMap.put(procard2.getId(), sonProcardList);
			} else {
				procardMap.put(procard2.getFatherId(), sonProcardList);
			}
			// 工序列表
			List<ProcessInfor> sonProcessInforList = new ArrayList<ProcessInfor>();
			sonProcessInforList.addAll(procard2.getProcessInforSet());
			processInforMap.put(procard2.getId(), sonProcessInforList);

			// 拼接所有的外购件库件号，后面查询用
			if ("外购".equals(procard2.getProcardStyle())) {
				wgAllMarkId += ",'" + procard2.getMarkId() + "'";
			}
		}

		// 收集所有工序
		// String hql_ProcessInfor =
		// "from ProcessInfor where procard.id in (select id from from Procard where rootId=?) order by processNO desc";
		// List<ProcessInfor> list_ProcessInfor =
		// totalDao.query(hql_ProcessInfor,
		// procard.getRootId());
		// for (ProcessInfor processInfor : list_ProcessInfor) {
		// List<ProcessInfor> sonProcessInforList = processInforMap
		// .get(processInfor.getProcard().getId());
		// if (sonProcessInforList == null) {
		// sonProcessInforList = new ArrayList<ProcessInfor>();
		// }
		// sonProcessInforList.add(processInfor);
		// processInforMap.put(processInfor.getProcard().getId(),
		// sonProcessInforList);
		// }

		Map<String, YuanclAndWaigj> yuanclAndWaigjMap = new HashMap<String, YuanclAndWaigj>();
		String hql_yawP = "from YuanclAndWaigj where markId in (" + wgAllMarkId
				+ ") and (banbenStatus ='默认' or banbenStatus is null)";
		List<YuanclAndWaigj> list_yaw = totalDao.query(hql_yawP);
		for (YuanclAndWaigj yuanclAndWaigj : list_yaw) {
			yuanclAndWaigjMap.put(yuanclAndWaigj.getMarkId()
					+ yuanclAndWaigj.getKgliao(), yuanclAndWaigj);
		}

		// 开始激活生产任务246307
		sendRunCard3(procard, procardMap, processInforMap, yuanclAndWaigjMap,
				procard.getJihuoDate(), isJihuo, procard.getId() + "");
		return "";
	}

	/***
	 * 无卡激活（模式3）
	 * 
	 * 按照总成装配(激活时间) 反推生产计划
	 * 
	 * @return
	 */
	@Override
	public String sendRunCard3(Procard procard,
			Map<Integer, List<Procard>> procardMap,
			Map<Integer, List<ProcessInfor>> processInforMap,
			Map<String, YuanclAndWaigj> yuanclAndWaigjMap,
			String needFinishTime, boolean isJihuo, String op) {
		String message = "";
		// if ("批产".equals(procard.getProductStyle())) {
		List<Procard> sonProcardList = new ArrayList<Procard>();
		// if (procard.getFatherId() == null) {
		// sonProcardList = procardMap.get(0);
		// } else {
		sonProcardList = procardMap.get(procard.getId());
		// }
		if (sonProcardList != null && sonProcardList.size() > 0) {
			for (Procard sonProcard : sonProcardList) {
				if ("自制".equals(sonProcard.getProcardStyle())
						|| "总成".equals(sonProcard.getProcardStyle())
						|| ("yes".equals(sonProcard.getNeedProcess()) && "外购"
								.equals(sonProcard.getProcardStyle()))) {
					if (!isJihuo || "初始".equals(sonProcard.getStatus())) {

						String nowTime = needFinishTime;
						/***************************** 生成加工计划 开始 *******************************/
						// 计算自制件的完成时间（最后一道工序的完成时间）
						List<ProcessInfor> processInforList = processInforMap
								.get(sonProcard.getId());
						if (procard.getId().equals(sonProcard.getId())) {
							// 按照工序号从小到大的顺序 重新排序
							Collections.sort(processInforList,
									new ProcessInfor());
						} else {
							// 按照工序号从大到小的顺序 重新排序
							Collections.reverse(processInforList);
						}

						// 这里是按照工序集合的顺序遍历工序，反推每道工序的要求完成时间, 同时得到外委工序的送货时间
						for (int i = 0, len = processInforList.size(); i < len; i++) {
							ProcessInfor processInfor = processInforList.get(i);
							if ("自制".equals(processInfor.getProductStyle())) {
								// 默认每道工序10秒的加工周期
								if (processInfor.getGzzhunbeijiepai() == null) {
									processInfor.setGzzhunbeijiepai(1F);
								}
								if (processInfor.getOpshebeijiepai() == null) {
									processInfor.setOpshebeijiepai(1F);
								}
								if (processInfor.getOpcaozuojiepai() == null) {
									processInfor.setOpcaozuojiepai(1F);
								}
								if (processInfor.getGzzhunbeicishu() == null) {
									processInfor.setGzzhunbeicishu(1F);
								}
								Float needTime = 10F;
								try {
									needTime = sonProcard.getFilnalCount()
											* (processInfor.getOpshebeijiepai()
													+ processInfor
															.getOpcaozuojiepai() + processInfor
													.getGzzhunbeijiepai()
													* processInfor
															.getGzzhunbeicishu());
								} catch (Exception e) {
									e.printStackTrace();
								}
								if (needTime == null) {
									needTime = 10F;
								}
								// 日期向后扣减(这里应该还要考虑班次、人员安排时间表、设备安排时间表。。。。。。，暂时先直接扣减吧)
								if (procard.getId().equals(sonProcard.getId())) {
									processInfor.setNeedStartTime(nowTime);// 需求开始时间-----然后作为上一道工序的开始件
									nowTime = Util.getCalendarModified(nowTime
											+ " 00:00:00", 11, needTime
											.intValue());// 需求完成时间-加工周期=需求开始时间
									processInfor.setNeedFinishTime(nowTime);// 需求完成时间
								} else {
									processInfor.setNeedFinishTime(nowTime);// 需求完成时间
									nowTime = Util.getCalendarModified(nowTime
											+ " 00:00:00", 11, -needTime
											.intValue());// 需求完成时间-加工周期=需求开始时间
									processInfor.setNeedStartTime(nowTime);// 需求开始时间-----然后作为上一道工序的开始件
								}
								totalDao.update(processInfor);
							} else if ("外委".equals(processInfor
									.getProductStyle())) {
								// 如果下一道工序也是外委,并且是并行状态,直接读取下一工序的时间来填充。
								if (i >= 1) {
									ProcessInfor nextProcessInfor = processInforList
											.get(i - 1);
									if ("外委".equals(nextProcessInfor
											.getProductStyle())
											&& "yes".equals(nextProcessInfor
													.getProcessStatus())) {
										processInfor
												.setNeedFinishTime(nextProcessInfor
														.getNeedFinishTime());// 需求完成时间
										processInfor
												.setNeedStartTime(nextProcessInfor
														.getNeedStartTime());// 需求开始时间-----然后作为上一道工序的开始件
									} else {
										if (processInfor.getAllJiepai() == null) {
											processInfor.setAllJiepai(10F);// 默认10S
										}
										if (processInfor.getDeliveryDuration() == null) {
											processInfor
													.setDeliveryDuration(3F);// 默认3天
										}
										Float needTime = null;
										try {
											needTime = sonProcard
													.getFilnalCount()
													* processInfor
															.getAllJiepai()
													+ processInfor
															.getDeliveryDuration()
													* 24 * 60 * 60;// 生产节拍+配送时长（天数转换为秒数）
										} catch (Exception e) {
											e.printStackTrace();
										}
										if (needTime == null) {
											needTime = 3 * 24 * 60 * 60F;
										}
										processInfor.setNeedFinishTime(nowTime);// 需求完成时间
										// 日期向后扣减(这里应该还要考虑班次、人员安排时间表、设备安排时间表。。。。。。，暂时先直接扣减吧)
										if (procard.getId().equals(
												sonProcard.getId())) {
											processInfor
													.setNeedStartTime(nowTime);// 需求开始时间-----然后作为上一道工序的开始件
											nowTime = Util.getCalendarModified(
													nowTime, 11, needTime
															.intValue());// 需求完成时间-加工周期=需求开始时间
											processInfor
													.setNeedFinishTime(nowTime);// 需求完成时间
										} else {
											processInfor
													.setNeedFinishTime(nowTime);// 需求完成时间
											nowTime = Util.getCalendarModified(
													nowTime, 11, -needTime
															.intValue());// 需求完成时间-加工周期=需求开始时间
											processInfor
													.setNeedStartTime(nowTime);// 需求开始时间-----然后作为上一道工序的开始件
										}

									}
									totalDao.update(processInfor);
								}
							}
						}
						if (procard.getId().equals(sonProcard.getId())) {
							sonProcard.setNeedFinalDate(nowTime);// 正向
							// 更新产品的要求完成时间
						} else {
							sonProcard.setNeedFinalDate(needFinishTime);// 反向
							// 更新产品的要求完成时间
							sonProcard.setJihuoDate(nowTime);// 反向 更新产品的需求激活时间
						}
						/***************************** 生成加工计划 结束 *******************************/
						totalDao.update(sonProcard);
						/***************************** 生成备料计划 开始 *******************************/
						boolean needll = false;

						String hql_ll = "from Procard where fatherId=? and (lingliaostatus is null or lingliaostatus='是') "
								+ " and procardStyle='外购' and (needProcess is null  or needProcess<>'yes')";
						Integer llcount = totalDao.getCount(hql_ll, sonProcard
								.getId());
						if (llcount > 0) {
							needll = true;
						}
						// List<Procard> sonWgProcardList =
						// procardMap.get(procard
						// .getId());
						// 遍历下层，查询是否存在需要领料的数据
						// for (Procard procard3 : sonWgProcardList) {
						// if ("外购".equals(procard3.getProcardStyle())
						// && (procard3.getNeedProcess() == null || !"yes"
						// .equals(procard3.getNeedProcess()))
						// && (procard3.getLingliaostatus() == null || !"否"
						// .equals(procard3.getLingliaostatus()))) {
						// needll = true;
						// break;
						// }
						// }
						if (needll) {
							ProcardBl procardbl = (ProcardBl) totalDao
									.getObjectByCondition(
											"from ProcardBl where procardId=?",
											sonProcard.getId());
							if (procardbl == null) {
								procardbl = new ProcardBl();
								procardbl.setProcardRootId(sonProcard
										.getRootId());
								procardbl.setProcardId(sonProcard.getId());//
								procardbl.setMarkId(sonProcard.getMarkId());//
								procardbl.setYlingliaoTime(sonProcard
										.getJihuoDate());// 预领料时间
								procardbl.setLingliaoStatus("是");
								procardbl.setStatus("未领");
								totalDao.save(procardbl);
							} else {
								// procardbl = new ProcardBl();
								procardbl.setProcardRootId(sonProcard
										.getRootId());
								procardbl.setProcardId(sonProcard.getId());//
								procardbl.setMarkId(sonProcard.getMarkId());//
								procardbl.setYlingliaoTime(sonProcard
										.getJihuoDate());// 预领料时间
								procardbl.setLingliaoStatus("是");
								// procardbl.setStatus("未领");
								totalDao.update(procardbl);
							}
						} else {
							ProcardBl procardbl = (ProcardBl) totalDao
									.getObjectByCondition(
											"from ProcardBl where procardId=?",
											sonProcard.getId());
							if (procardbl == null) {
								procardbl = new ProcardBl();
								procardbl.setProcardRootId(sonProcard
										.getRootId());
								procardbl.setProcardId(sonProcard.getId());//
								procardbl.setMarkId(sonProcard.getMarkId());//
								procardbl.setYlingliaoTime(sonProcard
										.getJihuoDate());// 预领料时间
								procardbl.setLingliaoStatus("否");
								procardbl.setStatus("已领完");
								totalDao.save(procardbl);
							} else {
								// procardbl = new ProcardBl();
								procardbl.setProcardRootId(sonProcard
										.getRootId());
								procardbl.setProcardId(sonProcard.getId());//
								procardbl.setMarkId(sonProcard.getMarkId());//
								procardbl.setYlingliaoTime(sonProcard
										.getJihuoDate());// 预领料时间
								procardbl.setStatus("已领完");
								procardbl.setLingliaoStatus("否");
								// procardbl.setStatus("未领");
								totalDao.update(procardbl);
							}
						}
						/***************************** 生成备料计划 结束 *******************************/

						/***************************** 激活生产任务 开始 *******************************/
						if ("初始".equals(sonProcard.getStatus())) {
							jihuoSingleProcard(sonProcard);
						}
					}
					/***************************** 激活生产任务 结束 *******************************/
					if (!procard.getId().equals(sonProcard.getId())) {
						if ("自制".equals(sonProcard.getProcardStyle())
								|| "总成".equals(sonProcard.getProcardStyle())) {
							sendRunCard3(sonProcard, procardMap,
									processInforMap, yuanclAndWaigjMap,
									sonProcard.getJihuoDate(), isJihuo, op);
						}
					}
				} else if ("外购".equals(sonProcard.getProcardStyle())) {
					String nowshTime = needFinishTime;
					sonProcard.setNeedFinalDate(nowshTime);// 更新产品的要求完成时间
					// 判断是否存在采购量
					if (sonProcard.getCgNumber() != null
							&& sonProcard.getCgNumber() > 0) {
						// 计算外购件到货时间 (cgNumber*生产节拍+送货时间)
						YuanclAndWaigj yuanclAndWaigj = yuanclAndWaigjMap
								.get(sonProcard.getMarkId()
										+ sonProcard.getKgliao());
						Integer avgProductionTakt = 1;// 生产节拍(默认1S)
						Float avgDeliveryTime = 3F;// 配送时长(默认3天)
						if (yuanclAndWaigj != null) {
							if (yuanclAndWaigj.getAvgProductionTakt() != null
									&& yuanclAndWaigj.getAvgProductionTakt() > 0) {
								avgProductionTakt = yuanclAndWaigj
										.getAvgProductionTakt();
							}
							if (yuanclAndWaigj.getAvgDeliveryTime() != null
									&& yuanclAndWaigj.getAvgDeliveryTime() > 0F) {
								avgDeliveryTime = yuanclAndWaigj
										.getAvgDeliveryTime();
							}
						}
						Float allCgTime = sonProcard.getCgNumber()
								* avgProductionTakt + avgDeliveryTime * 24 * 60
								* 60;
						if (nowshTime != null) {
							nowshTime = Util.getCalendarModified(nowshTime, 11,
									-allCgTime.intValue());
						}
					}
					sonProcard.setWgjihuoTime(nowshTime);// 更新产品的需求激活时间
					sonProcard.setJihuoDate(nowshTime);// 更新产品的需求激活时间
					totalDao.update(sonProcard);
				}
			}
		}
		return "排产失败!";
	}

	/***
	 * 无卡激活（模式4）
	 * 
	 * 排产拆分 按照总成装配(激活时间) 反推生产计划
	 * 
	 * @return
	 */
	@Override
	public String sendRunCard4(Procard procard,
			Map<Integer, List<Procard>> procardMap,
			Map<Integer, List<ProcessInfor>> processInforMap,
			Map<String, YuanclAndWaigj> yuanclAndWaigjMap,
			String needFinishTime, boolean isCreat, String op,
			ProcardBl fatherprocardBl) {
		String message = "";
		// if ("批产".equals(procard.getProductStyle())) {
		List<Procard> sonProcardList = new ArrayList<Procard>();
		// if (procard.getFatherId() == null) {
		// sonProcardList = procardMap.get(0);
		// } else {
		sonProcardList = procardMap.get(procard.getId());
		// }
		if (sonProcardList != null && sonProcardList.size() > 0) {
			for (Procard sonProcard : sonProcardList) {
				// if (isCreat) {
				sonProcard.setPlanCount(procard.getPlanCount()
						/ procard.getFilnalCount()
						* sonProcard.getFilnalCount());
				// }
				if ("自制".equals(sonProcard.getProcardStyle())
						|| "总成".equals(sonProcard.getProcardStyle())
						|| ("yes".equals(sonProcard.getNeedProcess()) && "外购"
								.equals(sonProcard.getProcardStyle()))) {
					String nowTime = needFinishTime;
					/***************************** 生成加工计划 开始 *******************************/
					// 计算自制件的完成时间（最后一道工序的完成时间）
					List<ProcessInfor> processInforList = processInforMap
							.get(sonProcard.getId());
					if (procard.getId().equals(sonProcard.getId())) {
						// 按照工序号从小到大的顺序 重新排序
						Collections.sort(processInforList, new ProcessInfor());
					} else {
						// 按照工序号从大到小的顺序 重新排序
						Collections.reverse(processInforList);
					}

					// 这里是按照工序集合的顺序遍历工序，反推每道工序的要求完成时间, 同时得到外委工序的送货时间
					for (int i = 0, len = processInforList.size(); i < len; i++) {
						ProcessInfor processInfor = processInforList.get(i);
						if ("自制".equals(processInfor.getProductStyle())) {
							// 默认每道工序10秒的加工周期
							if (processInfor.getGzzhunbeijiepai() == null) {
								processInfor.setGzzhunbeijiepai(1F);
							}
							if (processInfor.getOpshebeijiepai() == null) {
								processInfor.setOpshebeijiepai(1F);
							}
							if (processInfor.getOpcaozuojiepai() == null) {
								processInfor.setOpcaozuojiepai(1F);
							}
							if (processInfor.getGzzhunbeicishu() == null) {
								processInfor.setGzzhunbeicishu(1F);
							}
							Float needTime = 10F;
							try {
								needTime = sonProcard.getPlanCount()
										* (processInfor.getOpshebeijiepai()
												+ processInfor
														.getOpcaozuojiepai() + processInfor
												.getGzzhunbeijiepai()
												* processInfor
														.getGzzhunbeicishu());
							} catch (Exception e) {
								e.printStackTrace();
							}
							if (needTime == null) {
								needTime = 10F;
							}
							// 日期向后扣减(这里应该还要考虑班次、人员安排时间表、设备安排时间表。。。。。。，暂时先直接扣减吧)
							if (procard.getId().equals(sonProcard.getId())) {
								processInfor.setNeedStartTime(nowTime);// 需求开始时间-----然后作为上一道工序的开始件
								nowTime = Util.getCalendarModified(nowTime
										+ " 00:00:00", 11, needTime.intValue());// 需求完成时间-加工周期=需求开始时间
								processInfor.setNeedFinishTime(nowTime);// 需求完成时间
							} else {
								processInfor.setNeedFinishTime(nowTime);// 需求完成时间
								nowTime = Util
										.getCalendarModified(nowTime
												+ " 00:00:00", 11, -needTime
												.intValue());// 需求完成时间-加工周期=需求开始时间
								processInfor.setNeedStartTime(nowTime);// 需求开始时间-----然后作为上一道工序的开始件
							}
							totalDao.update(processInfor);
						} else if ("外委".equals(processInfor.getProductStyle())) {
							// 如果下一道工序也是外委,并且是并行状态,直接读取下一工序的时间来填充。
							if (i >= 1) {
								ProcessInfor nextProcessInfor = processInforList
										.get(i - 1);
								if ("外委".equals(nextProcessInfor
										.getProductStyle())
										&& "yes".equals(nextProcessInfor
												.getProcessStatus())) {
									processInfor
											.setNeedFinishTime(nextProcessInfor
													.getNeedFinishTime());// 需求完成时间
									processInfor
											.setNeedStartTime(nextProcessInfor
													.getNeedStartTime());// 需求开始时间-----然后作为上一道工序的开始件
								} else {
									if (processInfor.getAllJiepai() == null) {
										processInfor.setAllJiepai(10F);// 默认10S
									}
									if (processInfor.getDeliveryDuration() == null) {
										processInfor.setDeliveryDuration(3F);// 默认3天
									}
									Float needTime = null;
									try {
										needTime = sonProcard.getPlanCount()
												* processInfor.getAllJiepai()
												+ processInfor
														.getDeliveryDuration()
												* 24 * 60 * 60;// 生产节拍+配送时长（天数转换为秒数）
									} catch (Exception e) {
										e.printStackTrace();
									}
									if (needTime == null) {
										needTime = 3 * 24 * 60 * 60F;
									}
									processInfor.setNeedFinishTime(nowTime);// 需求完成时间
									// 日期向后扣减(这里应该还要考虑班次、人员安排时间表、设备安排时间表。。。。。。，暂时先直接扣减吧)
									if (procard.getId().equals(
											sonProcard.getId())) {
										processInfor.setNeedStartTime(nowTime);// 需求开始时间-----然后作为上一道工序的开始件
										nowTime = Util.getCalendarModified(
												nowTime, 11, needTime
														.intValue());// 需求完成时间-加工周期=需求开始时间
										processInfor.setNeedFinishTime(nowTime);// 需求完成时间
									} else {
										processInfor.setNeedFinishTime(nowTime);// 需求完成时间
										nowTime = Util.getCalendarModified(
												nowTime, 11, -needTime
														.intValue());// 需求完成时间-加工周期=需求开始时间
										processInfor.setNeedStartTime(nowTime);// 需求开始时间-----然后作为上一道工序的开始件
									}

								}
								totalDao.update(processInfor);
							}
						}
					}
					if (procard.getId().equals(sonProcard.getId())) {
						sonProcard.setJihuoDate(needFinishTime);// 更新产品的需求激活时间
						sonProcard.setNeedFinalDate(nowTime);// 正向
						// 更新产品的要求完成时间
					} else {
						sonProcard.setNeedFinalDate(needFinishTime);// 反向
						// 更新产品的要求完成时间
						sonProcard.setJihuoDate(nowTime);// 反向 更新产品的需求激活时间
					}
					/***************************** 生成加工计划 结束 *******************************/
					totalDao.update(sonProcard);
					/***************************** 生成备料计划 开始 *******************************/
					boolean needll = false;

					String hql_ll = "from Procard where fatherId=? and (lingliaostatus is null or lingliaostatus='' or lingliaostatus='是') "
							+ " and procardStyle='外购' and (needProcess is null  or needProcess<>'yes')";
					Integer llcount = totalDao.getCount(hql_ll, sonProcard
							.getId());
					if (llcount > 0) {// 需要领料
						needll = true;
						sonProcard.setLingliaostatus("是");
					}
					// List<Procard> sonWgProcardList =
					// procardMap.get(procard
					// .getId());
					// 遍历下层，查询是否存在需要领料的数据
					// for (Procard procard3 : sonWgProcardList) {
					// if ("外购".equals(procard3.getProcardStyle())
					// && (procard3.getNeedProcess() == null || !"yes"
					// .equals(procard3.getNeedProcess()))
					// && (procard3.getLingliaostatus() == null || !"否"
					// .equals(procard3.getLingliaostatus()))) {
					// needll = true;
					// break;
					// }
					// }
					if (needll) {
						ProcardBl procardbl = (ProcardBl) totalDao
								.getObjectByCondition(
										"from ProcardBl where procardId=? and rootId=?",
										sonProcard.getId(),
										(fatherprocardBl != null ? fatherprocardBl
												.getRootId()
												: 0));
						if (isCreat || procardbl == null) {
							fatherprocardBl = addPRocardBl_1(fatherprocardBl,
									sonProcard);
						} else {
							// procardbl = new ProcardBl();
							// procardbl.setProcardRootId(sonProcard
							// .getRootId());
							// procardbl.setProcardId(sonProcard.getId());//
							// procardbl.setMarkId(sonProcard.getMarkId());//
							procardbl.setYlingliaoTime(sonProcard
									.getJihuoDate());// 预领料时间
							procardbl.setLingliaoStatus("是");
							// procardbl.setStatus("未领");
							totalDao.update(procardbl);
						}
					} else {
						ProcardBl procardbl = (ProcardBl) totalDao
								.getObjectByCondition(
										"from ProcardBl where procardId=? and rootId=?",
										sonProcard.getId(),
										(fatherprocardBl != null ? fatherprocardBl
												.getRootId()
												: 0));
						if (isCreat || procardbl == null) {
							fatherprocardBl = addProcardBl(fatherprocardBl,
									sonProcard);
						} else {
							// procardbl = new ProcardBl();
							// procardbl.setProcardRootId(sonProcard
							// .getRootId());
							// procardbl.setProcardId(sonProcard.getId());//
							// procardbl.setMarkId(sonProcard.getMarkId());//
							procardbl.setYlingliaoTime(sonProcard
									.getJihuoDate());// 预领料时间
							procardbl.setStatus("已领完");
							procardbl.setLingliaoStatus("否");
							// procardbl.setStatus("未领");
							totalDao.update(procardbl);
						}
					}
					/***************************** 生成备料计划 结束 *******************************/
					if (sonProcard.getHasPlan() > sonProcard.getFilnalCount()) {
						throw new RuntimeException(sonProcard.getMarkId()
								+ "批次:" + sonProcard.getSelfCard()
								+ "的可排产数量小于0，无法继续排产!");
					}

					/***************************** 激活生产任务 开始 *******************************/
					if ("初始".equals(sonProcard.getStatus())) {
						jihuoSingleProcard(sonProcard);
					}
					/***************************** 激活生产任务 结束 *******************************/
					if (!procard.getId().equals(sonProcard.getId())) {
						if ("自制".equals(sonProcard.getProcardStyle())
								|| "总成".equals(sonProcard.getProcardStyle())) {
							sendRunCard4(sonProcard, procardMap,
									processInforMap, yuanclAndWaigjMap,
									sonProcard.getJihuoDate(), isCreat, op,
									fatherprocardBl);
						}
					}
				} else if ("外购".equals(sonProcard.getProcardStyle())) {
					String nowshTime = needFinishTime;
					sonProcard.setNeedFinalDate(nowshTime);// 更新产品的要求完成时间
					// 判断是否存在采购量
					if (sonProcard.getCgNumber() != null
							&& sonProcard.getCgNumber() > 0) {
						// 计算外购件到货时间 (cgNumber*生产节拍+送货时间)
						YuanclAndWaigj yuanclAndWaigj = yuanclAndWaigjMap
								.get(sonProcard.getMarkId()
										+ sonProcard.getKgliao());
						Integer avgProductionTakt = 1;// 生产节拍(默认1S)
						Float avgDeliveryTime = 3F;// 配送时长(默认3天)
						if (yuanclAndWaigj != null) {
							if (yuanclAndWaigj.getAvgProductionTakt() != null
									&& yuanclAndWaigj.getAvgProductionTakt() > 0) {
								avgProductionTakt = yuanclAndWaigj
										.getAvgProductionTakt();
							}
							if (yuanclAndWaigj.getAvgDeliveryTime() != null
									&& yuanclAndWaigj.getAvgDeliveryTime() > 0F) {
								avgDeliveryTime = yuanclAndWaigj
										.getAvgDeliveryTime();
							}
						}
						Float allCgTime = sonProcard.getCgNumber()
								* avgProductionTakt + avgDeliveryTime * 24 * 60
								* 60;
						if (nowshTime != null) {
							nowshTime = Util.getCalendarModified(nowshTime, 11,
									-allCgTime.intValue());
						}
					}
					sonProcard.setWgjihuoTime(nowshTime);// 更新产品的需求激活时间
					sonProcard.setJihuoDate(nowshTime);// 更新产品的需求激活时间
					totalDao.update(sonProcard);

					ProcardBl procardbl = (ProcardBl) totalDao
							.getObjectByCondition(
									"from ProcardBl where procardId=? and rootId=?",
									sonProcard.getId(),
									(fatherprocardBl != null ? fatherprocardBl
											.getRootId() : 0));
					if (isCreat || procardbl == null) {
						fatherprocardBl = addProcardBl_2(fatherprocardBl,
								sonProcard);
					} else {
						// procardbl = new ProcardBl();
						// procardbl.setProcardRootId(sonProcard
						// .getRootId());
						// procardbl.setProcardId(sonProcard.getId());//
						// procardbl.setMarkId(sonProcard.getMarkId());//
						procardbl.setYlingliaoTime(sonProcard.getJihuoDate());// 预领料时间
						procardbl.setLingliaoStatus(sonProcard
								.getLingliaostatus());
						// procardbl.setStatus("未领");
						totalDao.update(procardbl);
					}

				}
			}
		}
		return "排产失败!";
	}

	/**
	 * 生成排产备料数据 领料状态为sonProcard.getLingliaostatus() 状态为未领
	 * 
	 * @param fatherprocardBl
	 * @param sonProcard
	 * @return
	 */
	private ProcardBl addProcardBl_2(ProcardBl fatherprocardBl,
			Procard sonProcard) {
		ProcardBl procardbl = new ProcardBl();
		procardbl.setProcardRootId(sonProcard.getRootId());
		procardbl.setProcardId(sonProcard.getId());//
		procardbl.setMarkId(sonProcard.getMarkId());//
		procardbl.setYwMarkId(sonProcard.getYwMarkId());//
		procardbl.setProName(sonProcard.getProName());
		procardbl.setProcardStyle(sonProcard.getProcardStyle());
		procardbl.setProductStyle(sonProcard.getProductStyle());
		procardbl.setPcCount(sonProcard.getPlanCount());
		Float qlcount = 0F;
		try {
			qlcount = sonProcard.getTjNumber() - sonProcard.getPlanCount() > 0 ? sonProcard
					.getPlanCount()
					: sonProcard.getTjNumber();
		} catch (Exception e) {
		}
		procardbl.setQlCount(qlcount);
		procardbl.setYlCount(0F);
		procardbl.setYlingliaoTime(sonProcard.getJihuoDate());// 预领料时间
		procardbl.setYjiagongTime(sonProcard.getJihuoDate());// 预加工时间
		procardbl.setLingliaoStatus(sonProcard.getLingliaostatus());
		procardbl.setStatus("未领");
		procardbl.setAddtime(Util.getDateTime());
		procardbl.setUnit(sonProcard.getUnit());
		if (fatherprocardBl != null) {
			Integer rootid = fatherprocardBl.getRootId();
			Integer fatherid = fatherprocardBl.getId();
			procardbl.setRootId(rootid);
			procardbl.setFatherId(fatherid);
		}
		totalDao.save(procardbl);// 减少update
		if (fatherprocardBl == null) {
			procardbl.setRootId(procardbl.getId());
			totalDao.update(procardbl);
			fatherprocardBl = procardbl;
		} else {
			fatherprocardBl = procardbl;
		}
		if (sonProcard.getHasPlan() == null) {
			sonProcard.setHasPlan(0F);
		}
		sonProcard.setHasPlan(sonProcard.getHasPlan() + procardbl.getPcCount());
		return fatherprocardBl;
	}

	/**
	 * 生成排产备料数据 领料状态为是 状态为未领
	 * 
	 * @param fatherprocardBl
	 * @param sonProcard
	 * @return
	 */
	private ProcardBl addPRocardBl_1(ProcardBl fatherprocardBl,
			Procard sonProcard) {
		ProcardBl procardbl = new ProcardBl();
		procardbl.setProcardRootId(sonProcard.getRootId());
		procardbl.setProcardId(sonProcard.getId());//
		procardbl.setMarkId(sonProcard.getMarkId());//
		procardbl.setYwMarkId(sonProcard.getYwMarkId());//
		procardbl.setProName(sonProcard.getProName());
		procardbl.setProcardStyle(sonProcard.getProcardStyle());
		procardbl.setProductStyle(sonProcard.getProductStyle());
		procardbl.setPcCount(sonProcard.getPlanCount());
		Float qlcount = 0F;
		try {
			qlcount = sonProcard.getTjNumber() - sonProcard.getPlanCount() > 0 ? sonProcard
					.getPlanCount()
					: sonProcard.getTjNumber();
		} catch (Exception e) {
		}
		procardbl.setQlCount(qlcount);
		procardbl.setYlCount(0F);
		procardbl.setYlingliaoTime(sonProcard.getJihuoDate());// 预领料时间
		procardbl.setYjiagongTime(sonProcard.getJihuoDate());// 预加工时间
		procardbl.setLingliaoStatus("是");
		procardbl.setStatus("未领");
		procardbl.setAddtime(Util.getDateTime());
		procardbl.setUnit(sonProcard.getUnit());
		if (fatherprocardBl != null) {
			Integer rootid = fatherprocardBl.getRootId();
			Integer fatherid = fatherprocardBl.getId();
			procardbl.setRootId(rootid);
			procardbl.setFatherId(fatherid);
		}
		totalDao.save(procardbl);// 减少update
		if (fatherprocardBl == null) {
			procardbl.setRootId(procardbl.getId());
			totalDao.update(procardbl);
			fatherprocardBl = procardbl;
		} else {
			fatherprocardBl = procardbl;
		}
		if (sonProcard.getHasPlan() == null) {
			sonProcard.setHasPlan(0F);
		}
		sonProcard.setHasPlan(sonProcard.getHasPlan() + procardbl.getPcCount());
		return fatherprocardBl;
	}

	/**
	 * 生成排产备料数据 领料状态为否 状态为已领
	 * 
	 * @param fatherprocardBl
	 * @param sonProcard
	 * @return
	 */
	private ProcardBl addProcardBl(ProcardBl fatherprocardBl, Procard sonProcard) {
		ProcardBl procardbl = new ProcardBl();
		procardbl.setProcardRootId(sonProcard.getRootId());
		procardbl.setProcardId(sonProcard.getId());//
		procardbl.setMarkId(sonProcard.getMarkId());//
		procardbl.setYwMarkId(sonProcard.getYwMarkId());//
		procardbl.setProName(sonProcard.getProName());
		procardbl.setProcardStyle(sonProcard.getProcardStyle());
		procardbl.setProductStyle(sonProcard.getProductStyle());
		procardbl.setPcCount(sonProcard.getPlanCount());
		Float qlcount = 0F;
		try {
			qlcount = sonProcard.getTjNumber() - sonProcard.getPlanCount() > 0 ? sonProcard
					.getPlanCount()
					: sonProcard.getTjNumber();
		} catch (Exception e) {
		}
		procardbl.setQlCount(qlcount);
		procardbl.setYlCount(0F);
		procardbl.setYlingliaoTime(sonProcard.getJihuoDate());// 预领料时间
		procardbl.setYjiagongTime(sonProcard.getJihuoDate());// 预加工时间
		procardbl.setLingliaoStatus("否");
		procardbl.setStatus("已领完");
		procardbl.setAddtime(Util.getDateTime());
		procardbl.setUnit(sonProcard.getUnit());
		if (fatherprocardBl != null) {
			Integer rootid = fatherprocardBl.getRootId();
			Integer fatherid = fatherprocardBl.getId();
			procardbl.setRootId(rootid);
			procardbl.setFatherId(fatherid);
		}
		totalDao.save(procardbl);// 减少update
		if (fatherprocardBl == null) {
			procardbl.setRootId(procardbl.getId());
			totalDao.update(procardbl);
			fatherprocardBl = procardbl;
		} else {
			fatherprocardBl = procardbl;
		}
		if (sonProcard.getHasPlan() == null) {
			sonProcard.setHasPlan(0F);
		}
		sonProcard.setHasPlan(sonProcard.getHasPlan() + procardbl.getPcCount());
		return fatherprocardBl;
	}

	/***
	 * 激活BOM层次接口
	 * 
	 * @param rootId
	 *            bom总id
	 * @param belonglayer
	 *            层次
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	public boolean jihuoProcard(Integer rootId, Integer belonglayer, String op) {
		String belonglayerHql = "from Procard where rootId=? and  belonglayer = ? and (sbStatus is null or sbStatus !='删除') and (procardstyle in ('总成','自制') or (needProcess ='yes' and procardstyle='外购'))";
		List<Procard> procardList = totalDao.query(belonglayerHql, rootId,
				belonglayer);
		// String belonglayerHql =
		// "from Procard where (procardstyle in ('自制') or (needProcess ='yes' and procardstyle='外购'))";
		// List<Procard> procardList = totalDao.query(belonglayerHql, rootId,
		// belonglayer);
		Boolean bool = true;
		/**** 遍历待激活的产品列表 ******/
		for (Procard procard2 : procardList) {
			jihuoSingleProcard(procard2);
		}
		return bool;
	}

	/***************
	 * 激活单个Proard
	 * 
	 * @param procard
	 * @return
	 */
	@Override
	public boolean jihuoSingleProcard(Procard procard) {
		if (procard == null) {
			return false;
		}
		if ("总成".equals(procard.getProcardStyle())
				|| "自制".equals(procard.getProcardStyle())) {
			Float minNumber = 0f;
			procard.setLingliaoType("part");
			if ("part".equals(procard.getLingliaoType())) {
				procard.setYlNumber(0F);
				procard.setKlNumber(procard.getFilnalCount());
				procard.setHascount(procard.getFilnalCount());
				procard.setJihuoStatua("激活");
			} else {
				procard.setYlNumber(0F);
				minNumber = 0f;
				// if ("part".equals(procard.getLingliaoType())) {
				// String minnumbers_sql =
				// "select max(minNumber) from Procard where fatherId=? and (sbStatus is null or sbStatus !='删除')";
				// minNumber = (Float) totalDao.getObjectByCondition(
				// minnumbers_sql, procard.getId());
				// } else {
				String minnumbers_sql = "select min(minNumber) from Procard where fatherId=? and (sbStatus is null or sbStatus !='删除') ";
				minNumber = (Float) totalDao.getObjectByCondition(
						minnumbers_sql, procard.getId());
				// }
				if (minNumber == null) {
					minNumber = 0F;
				}
				//
				if (procard.getWwblCount() != null
						&& procard.getWwblCount() < minNumber) {
					minNumber -= procard.getWwblCount();
				} else if (procard.getWwblCount() != null
						&& procard.getWwblCount() > minNumber) {
					minNumber = procard.getWwblCount();
				}
				// 激活数量>0
				if (minNumber > 0) {
					if (minNumber > procard.getFilnalCount()) {
						minNumber = procard.getFilnalCount();
					}
					procard.setJihuoStatua("激活");
					// 计算剩余未领材料信息
					minNumber = (float) Math.floor(minNumber);
					if (procard.getHascount() == null) {
						procard.setHascount(minNumber);
					}
					if (procard.getKlNumber() == null
							|| procard.getKlNumber() == 0F) {
						procard.setKlNumber(minNumber);// 可领数量
					}
					procard.setHascount(minNumber - procard.getKlNumber()
							+ procard.getHascount());// 更新剩余未领数量
					if (procard.getHascount() < 0) {
						// 发送异常消息bgg
						AlertMessagesServerImpl.addAlertMessages("系统维护异常组",
								"件号:" + procard.getMarkId() + "批次:"
										+ procard.getSelfCard() + "可领数量为："
										+ procard.getHascount()
										+ "小于零，系统自动修复为0，操作是：激活产品,当前系统时间为"
										+ Util.getDateTime(), "2");
						procard.setHascount(0f);
					}
					procard.setKlNumber(minNumber);// 可领数量
				}
			}
			/*** 根据下层的外购件激活数量 获得最小激活数量 结束 ***/

			if ("初始".equals(procard.getStatus())
					|| ("已发卡".equals(procard.getStatus()) && "否".equals(procard
							.getLingliaostatus()))) {
				// 是否需要领料
				// 查询下层是否存在外购件 把这个放到bom提交的地方
				// String hasWaigou_sql =
				// "from Procard where fatherId=? and procardStyle='外购'";
				// Integer wgCount = totalDao.getCount(hasWaigou_sql, procard
				// .getId());
				/*********** 自制件查询是否存在备货库存，如果存在呆滞库存则生成批次的zzbhcount ****************/
				if ("初始".equals(procard.getStatus())
						&& "自制".equals(procard.getProcardStyle())
						&& (procard.getWwblCount() == null || procard
								.getWwblCount() < procard.getFilnalCount())) {
					// 查询自制备货库存
					// String hql =
					// "select sum(goodsCurQuantity) from Goods where goodsClass='备货库' and goodsMarkId=? and goodsCurQuantity>0";
					// String banBenNumber = "";
					// if (procard.getBanBenNumber() != null
					// && procard.getBanBenNumber().length() > 0) {
					// banBenNumber = " and banBenNumber='"
					// + procard.getBanBenNumber() + "'";
					// } else {
					// banBenNumber =
					// " and ( banBenNumber is null or banBenNumber ='')";
					// }
					// Float goodsCurQuantity = (Float) totalDao
					// .getObjectByCondition(hql + banBenNumber, procard
					// .getMarkId());
					// if (goodsCurQuantity != null && goodsCurQuantity > 0) {
					// // 查询备货库存占用量
					// String hql_zzzy =
					// "select sum(zzBhCount) from Procard where markId=? and zzBhCount is not null "
					// + banBenNumber;
					// Float zzBhCount = (Float) totalDao
					// .getObjectByCondition(hql_zzzy, procard
					// .getMarkId());
					// if (zzBhCount == null) {
					// zzBhCount = 0F;
					// }
					// // 总可用备货量
					// Float kyZzBhcount = goodsCurQuantity - zzBhCount;
					// if (kyZzBhcount > 0) {
					// /***** 本批次可以使用的备货量 *************/
					//
					// // 零件本身包工包料数量
					//
					// // 查询上层所有父类是否存在工序外委或者包工包料--不需要
					// // 查询下层所有子类是否存在工序外委或者包工包料
					// // 查询下层所有子类是否存在已经产生备货量
					//
					// }
					// }
				}

				if ("否".equals(procard.getLingliaostatus())) {
					procard.setStatus("已发料");
					procard.setHascount(0F);// 不需要领料的自制件通过下层零件提交工序控制领料数量
					procard.setKlNumber(0F);
					String minnumbers_sql = "select min(minNumber) from Procard where fatherId=? and (sbStatus is null or sbStatus !='删除') ";
					minNumber = (Float) totalDao.getObjectByCondition(
							minnumbers_sql, procard.getId());
					// }
					if (minNumber == null) {
						minNumber = 0F;
					}
					if ((minNumber - Math.floor(minNumber)) > 0.95) {
						minNumber = (float) Math.floor(minNumber) + 1f;
					} else {
						minNumber = (float) Math.floor(minNumber);
					}
					// 生成在制品
					Float tjNumber = 0f;
					if (procard.getTjNumber() != null) {
						tjNumber = procard.getTjNumber();
					}
					String banbenSql = null;
					if (procard.getBanBenNumber() == null
							|| procard.getBanBenNumber().length() == 0) {
						banbenSql = " and (banBenNumber is null or banBenNumber='')";
					} else {
						banbenSql = " and banBenNumber='"
								+ procard.getBanBenNumber() + "'";
					}
					String hqlzaizhi = "from Goods where goodsMarkId=? and goodsLotId=? "
							+ banbenSql
							+ " and goodsClass='在制品' and goodsStyle!='半成品转库' and (fcStatus is null or fcStatus='可用') ";
					List listzizhi = totalDao.query(hqlzaizhi, procard
							.getMarkId(), procard.getSelfCard());
					Integer rgoodsId = null;
					if (listzizhi != null && listzizhi.size() > 0) {
						Goods g1 = (Goods) listzizhi.get(0);
						g1.setGoodsCurQuantity(g1.getGoodsCurQuantity()
								+ procard.getFilnalCount() - tjNumber);
						if (g1.getGoodsCurQuantity() < 0) {
							AlertMessagesServerImpl.addAlertMessages("系统维护异常组",
									"件号:" + g1.getGoodsMarkId() + "批次:"
											+ g1.getGoodsLotId()
											+ "可领数量小于零，系统自动修复为0，操作是：领料,当前系统时间为"
											+ Util.getDateTime(), "2");
							g1.setGoodsCurQuantity(0f);
						}
						totalDao.update(g1);
						rgoodsId = g1.getGoodsId();
					} else {
						Goods gg = new Goods();
						gg.setGoodsMarkId(procard.getMarkId());
						gg.setGoodsLotId(procard.getSelfCard());
						gg.setGoodsFullName(procard.getProName());
						gg.setBanBenNumber(procard.getBanBenNumber());
						gg.setGoodsClass("在制品");
						gg.setGoodsCurQuantity(procard.getFilnalCount()
								- tjNumber);
						gg.setGoodsUnit(procard.getUnit());
						gg.setWgType(procard.getWgType());
						gg.setGoodsFormat(procard.getSpecification());
						gg.setGoodsChangeTime(Util.getDateTime());
						totalDao.save(gg);
						rgoodsId = gg.getGoodsId();
					}

					// 添加零件与在制品关系表
					ProcardProductRelation pprelation = new ProcardProductRelation();
					pprelation.setAddTime(Util.getDateTime());
					pprelation.setProcardId(procard.getId());
					pprelation.setGoodsId(rgoodsId);
					pprelation.setZyCount(procard.getFilnalCount() - tjNumber);
					pprelation.setFlagType("本批在制品");
					totalDao.save(pprelation);
					// 添加在制品入库记录
					GoodsStore gs = new GoodsStore();
					gs.setGoodsStoreMarkId(procard.getMarkId());// 件号
					gs.setGoodsStoreFormat(procard.getSpecification());
					gs.setTuhao(procard.getTuhao());
					gs.setBanBenNumber(procard.getBanBenNumber());
					gs.setGoodsStoreGoodsName(procard.getProName());// 名称
					gs.setGoodsStoreLot(procard.getSelfCard());// 批次
					gs.setGoodsStoreCount(procard.getFilnalCount() - tjNumber);// 数量
					gs.setPrintStatus("YES");
					gs.setGoodsStoreProMarkId(procard.getRootMarkId());// 总成件号
					gs.setGoodsStoreWarehouse("在制品");// 库别
					Users jingban = Util.getLoginUser();
					gs.setGoodsStoreCharger(jingban.getName());// 经办人
					gs.setStyle("正常（成品）");// 入库类型
					gs.setGoodsStorePerson("system");
					gs.setGoodsStoreDate(DateUtil.formatDate(new Date(),
							"yyyy-MM-dd"));
					gs.setGoodsStoreUnit(procard.getUnit());// 单位
					gs.setWgType(procard.getWgType());
					totalDao.save(gs);

					// /*** 同步设置工序的可领总数量 ***/
					String hql_process = "from ProcessInfor where procard.id=?";
					List<ProcessInfor> list_process = totalDao.query(
							hql_process, procard.getId());
					for (ProcessInfor processInfor : list_process) {
						processInfor.setTotalCount(minNumber);
						totalDao.update(processInfor);
					}

				} else {
					procard.setStatus("已发卡");
				}

				// 下层只有外购件的零件，并且首工序是外委的设置激活序列
				String hql_waisoncount = "from Procard where fatherId=? and  (procardStyle='自制' or needProcess='yes')";
				Integer waisoncount = totalDao.getCount(hql_waisoncount,
						procard.getId());
				if (waisoncount == 0) {
					List<String> rlist = new ArrayList<String>();
					List<ProcessInfor> processinforList = totalDao
							.query(
									"from ProcessInfor where"
											+ "(dataStatus is null or dataStatus!='删除') and procard.id=? order by processNO",
									procard.getId());
					if (processinforList != null && processinforList.size() > 0) {
						ProcessInfor up = null;
						for (int i = 0; i < processinforList.size(); i++) {
							ProcessInfor process = processinforList.get(i);
							if (process != null
									&& process.getProductStyle().equals("外委")) {
								Float applyCount = procard.getFilnalCount();
								List<ProcessInforWWProcard> processInforWWProcardList = new ArrayList<ProcessInforWWProcard>();
								Float scwwcount = (Float) totalDao
										.getObjectByCondition(
												"select sum(beginCount) from WaigouWaiweiPlan where procardId=? and (processNo=? or processNo like '"
														+ process
																.getProcessNO()
														+ ";%')", procard
														.getId(), process
														.getProcessNO()
														+ "");
								if (scwwcount < applyCount) {
									Float addCount = applyCount - scwwcount;
									List<ProcessInforWWProcard> pwwpList = null;
									if (up == null) {
										if (pwwpList == null) {
											pwwpList = new ArrayList<ProcessInforWWProcard>();
										}
										// 首工序外委获取关联零件
										List<String> xcmarkIdList = totalDao
												.query(
														"select distinct(wgprocardMardkId) from ProcessAndWgProcardTem where procardMarkId=? and processName=?",
														procard.getMarkId(),
														process
																.getProcessName());
										StringBuffer xcmarkIdsb = new StringBuffer();
										if (xcmarkIdList == null
												|| xcmarkIdList.size() == 0) {
											rlist.add(procard.getMarkId() + ":"
													+ procard.getSelfCard()
													+ "首工序外委无下层关联零件!");
											throw new RuntimeException(procard
													.getMarkId()
													+ ":"
													+ procard.getSelfCard()
													+ "首工序外委下层关联的零件不存在!");
										} else {
											for (String xcmarkId : xcmarkIdList) {

												if (xcmarkIdsb.length() == 0) {
													xcmarkIdsb.append("('"
															+ xcmarkId + "'");
												} else {
													xcmarkIdsb.append(",'"
															+ xcmarkId + "'");
												}
											}
											xcmarkIdsb.append(")");
										}
										List<Procard> sonProcardList = totalDao
												.query(
														"from Procard where procard.id=? and (sbStatus is null or sbStatus!='删除') and markId in "
																+ xcmarkIdsb
																		.toString(),
														procard.getId());
										if (sonProcardList != null
												&& sonProcardList.size() > 0) {
											for (Procard son : sonProcardList) {
												pwwpList = new ArrayList<ProcessInforWWProcard>();
												ProcessInforWWProcard processwwprocard = new ProcessInforWWProcard();
												processwwprocard
														.setProcardId(son
																.getId());// 零件id
												processwwprocard.setMarkId(son
														.getMarkId());// 件号
												processwwprocard
														.setProcName(son
																.getProName());// 名称
												processwwprocard.setBanben(son
														.getBanBenNumber());// 版本号
												processwwprocard.setBanci(son
														.getBanci());// 版次
												processwwprocard
														.setStatus("使用");// 状态
												Float glCount = 0f;
												if (son.getProcardStyle()
														.equals("自制")) {
													glCount = addCount
															* son
																	.getCorrCount();
													glCount = (float) Math
															.ceil(glCount);
													processwwprocard
															.setProcardStyle("生产");// 生产或者外购(生产包括自制和外购半成品)
												} else {
													glCount = addCount
															* son.getQuanzi2()
															/ son.getQuanzi1();
													if (son.getNeedProcess() != null
															&& son
																	.getNeedProcess()
																	.equals(
																			"yes")) {
														processwwprocard
																.setProcardStyle("生产");// 生产或者外购(生产包括自制和外购半成品)
													} else {
														processwwprocard
																.setProcardStyle("外购");// 生产或者外购(生产包括自制和外购半成品)
													}
												}
												processwwprocard
														.setApplyCount(glCount);// 数量
												processwwprocard
														.setAddTime(Util
																.getDateTime());
												processwwprocard
														.setHascount(glCount);// 剩余未领数量（工序外委使用）
												pwwpList.add(processwwprocard);
											}
										} else {
											rlist.add(procard.getMarkId() + ":"
													+ procard.getSelfCard()
													+ "首工序外委下层关联的零件不存在!");
											throw new RuntimeException(procard
													.getMarkId()
													+ ":"
													+ procard.getSelfCard()
													+ "首工序外委下层关联的零件不存在!");
										}
									}
									int n = 0;
									WaigouWaiweiPlan wwp = new WaigouWaiweiPlan();
									for (int j = i; j < processinforList.size(); j++) {
										ProcessInfor nextWwProcessInfor = processinforList
												.get(j);
										if (nextWwProcessInfor != null) {
											if ("外委".equals(nextWwProcessInfor
													.getProductStyle())
													&& (n == 0 || ("yes")
															.equals(nextWwProcessInfor
																	.getProcessStatus()))) {
												if (n == 0) {

													wwp.setRootMarkId(procard
															.getRootMarkId());
													wwp.setRootSelfCard(procard
															.getRootSelfCard());
													wwp.setOrderNum(procard
															.getOrderNumber());
													wwp.setYwMarkId(procard
															.getYwMarkId());
													wwp.setBanben(procard
															.getBanBenNumber());
													wwp.setBanci(procard
															.getBanci());
													wwp.setMarkId(procard
															.getMarkId());
													wwp
															.setProcessNo(nextWwProcessInfor
																	.getProcessNO()
																	+ "");
													wwp.setProName(procard
															.getProName());
													wwp
															.setProcessName(nextWwProcessInfor
																	.getProcessName());
													wwp.setType("外委");
													wwp.setUnit(procard
															.getUnit());
													Float wwCount = 0f;
													wwp.setNumber(addCount);
													wwp.setBeginCount(addCount);
													wwCount = process
															.getSubmmitCount();
													wwp.setAddTime(Util
															.getDateTime());
													wwp.setJihuoTime(Util
															.getDateTime());
													wwp
															.setShArrivalTime(procard
																	.getNeedFinalDate());// 应到货时间在采购确认通知后计算
													wwp
															.setCaigouMonth(Util
																	.getDateTime("yyyy-MM月"));// 采购月份
													String wwNumber = "";
													String before = null;
													Integer bIndex = 10;
													before = "ww"
															+ Util
																	.getDateTime("yyyyMMdd");
													Integer maxNo = 0;
													String maxNumber = (String) totalDao
															.getObjectByCondition("select max(planNumber) from WaigouWaiweiPlan where planNumber like '"
																	+ before
																	+ "%'");
													if (maxNumber != null) {
														String wwnum = maxNumber
																.substring(
																		bIndex,
																		maxNumber
																				.length());
														try {
															Integer maxNum = Integer
																	.parseInt(wwnum);
															if (maxNum > maxNo) {
																maxNo = maxNum;
															}
														} catch (Exception e) {
															// TODO:
															// handle
															// exception
														}
													}
													maxNo++;
													wwNumber = before
															+ String.format(
																	"%03d",
																	maxNo);
													wwp.setPlanNumber(wwNumber);// 采购计划编号
													wwp.setSelfCard(procard
															.getSelfCard());// 批次
													// wwp.setGysId(nextWwProcessInfor
													// .getZhuserId());//
													// 供应商id
													// wwp.setGysName(nextWwProcessInfor
													// .getGys());//
													// 供应商名称
													wwp
															.setAllJiepai(nextWwProcessInfor
																	.getAllJiepai());// 单件总节拍
													wwp
															.setDeliveryDuration(nextWwProcessInfor
																	.getDeliveryDuration());// 耽误时长
													wwp
															.setSingleDuration(procard
																	.getSingleDuration());// 单班时长(工作时长)
													wwp.setProcardId(procard
															.getId());
													wwp.setProcard(procard);
													// if (wwckCount !=
													// null
													// && wwckCount > 0)
													// {
													if (up == null) {
														wwp.setStatus("待激活");
													} else {
														wwp.setStatus("待入库");
														// 在制品待入库
														if (procard
																.getZaizhiApplyZk() == null) {
															procard
																	.setZaizhiApplyZk(0f);
														}
														if (procard
																.getZaizhizkCount() == null) {
															procard
																	.setZaizhizkCount(0f);
														}
														if (procard
																.getKlNumber() == null) {
															procard
																	.setKlNumber(procard
																			.getFilnalCount());
														}
														if (procard
																.getHascount() == null) {
															procard
																	.setHascount(procard
																			.getKlNumber());
														}
														// procard.getKlNumber()-procard.getHascount()=已生产数量
														// 可转库数量=已生产数量-已转库数量-转库申请中数量
														procard
																.setZaizhikzkCount(procard
																		.getFilnalCount()
																		- procard
																				.getZaizhizkCount()
																		- procard
																				.getZaizhiApplyZk());
														// if (procard
														// .getZaizhikzkCount()
														// >=
														// wwCount) {
														procard
																.setZaizhiApplyZk(procard
																		.getZaizhiApplyZk()
																		+ wwCount);
														String orderNum = (String) totalDao
																.getObjectByCondition(
																		"select orderNumber from Procard where id=?",
																		procard
																				.getRootId());
														// 成品待入库
														GoodsStore goodsStore2 = new GoodsStore();
														goodsStore2
																.setNeiorderId(orderNum);
														goodsStore2
																.setGoodsStoreMarkId(procard
																		.getMarkId());
														goodsStore2
																.setBanBenNumber(procard
																		.getBanBenNumber());
														goodsStore2
																.setGoodsStoreLot(procard
																		.getSelfCard());
														goodsStore2
																.setGoodsStoreGoodsName(procard
																		.getProName());
														goodsStore2
																.setApplyTime(Util
																		.getDateTime());
														goodsStore2
																.setGoodsStoreArtsCard((String) totalDao
																		.getObjectByCondition(
																				"select selfCard from Procard where id=?",
																				procard
																						.getRootId()));
														goodsStore2
																.setGoodsStorePerson(Util
																		.getLoginUser()
																		.getName());
														goodsStore2
																.setStatus("待入库");
														goodsStore2
																.setStyle("半成品转库");
														goodsStore2
																.setGoodsStoreWarehouse("委外库");// 库别
														// goodsStore2.setGoodHouseName(goodsStore.getGoodHouseName());//
														// 区名
														// goodsStore2.setGoodsStorePosition(goodsStore.getGoodsStorePosition());//
														// 库位
														goodsStore2
																.setGoodsStoreUnit(procard
																		.getUnit());
														goodsStore2
																.setGoodsStoreCount(wwCount);
														goodsStore2
																.setProcessNo(process
																		.getProcessNO());
														goodsStore2
																.setProcessName(process
																		.getProcessName());
														totalDao
																.update(procard);
														totalDao
																.save(goodsStore2);
														// 判断外委进委外入库是否要做
														String hql1 = "select valueCode from CodeTranslation where type = 'sys' and keyCode='委外库接收半成品' and valueName='委外库接收半成品'";
														String valueCode = (String) totalDao
																.getObjectByCondition(hql1);
														if (valueCode != null
																&& valueCode
																		.equals("否")) {
															// 入库记录直接通过
															goodsStore2
																	.setStatus("入库");
															goodsStore2
																	.setPrintStatus("YES");
															totalDao
																	.update(goodsStore2);
															// 增加库存记录
															String hqlgoods = "from Goods where goodsMarkId='"
																	+ procard
																			.getMarkId()
																	+ "' and goodsLotId='"
																	+ procard
																			.getSelfCard()
																	+ "' and goodsStyle='半成品转库' and processNo="
																	+ process
																			.getProcessNO()
																	+ " and goodsClass='委外库'";
															Goods goods = (Goods) totalDao
																	.getObjectByCondition(hqlgoods);
															if (goods != null) {
																goods
																		.setGoodsCurQuantity(goods
																				.getGoodsCurQuantity()
																				+ goodsStore2
																						.getGoodsStoreCount());
																totalDao
																		.update(goods);
															} else {
																goods = new Goods();
																goods
																		.setGoodsMarkId(goodsStore2
																				.getGoodsStoreMarkId());
																goods
																		.setGoodsFormat(goodsStore2
																				.getGoodsStoreFormat());
																goods
																		.setBanBenNumber(goodsStore2
																				.getBanBenNumber());
																goods
																		.setGoodsFullName(goodsStore2
																				.getGoodsStoreGoodsName());
																goods
																		.setGoodsClass("委外库");
																goods
																		.setGoodsBeginQuantity(goodsStore2
																				.getGoodsStoreCount());
																goods
																		.setGoodsCurQuantity(goodsStore2
																				.getGoodsStoreCount());
																totalDao
																		.save(goods);
															}
															// 添加零件与在制品关系表
															ProcardProductRelation pprelation = new ProcardProductRelation();
															pprelation
																	.setAddTime(Util
																			.getDateTime());
															pprelation
																	.setProcardId(procard
																			.getId());
															pprelation
																	.setGoodsId(goods
																			.getGoodsId());
															pprelation
																	.setZyCount(goodsStore2
																			.getGoodsStoreCount());
															pprelation
																	.setFlagType("本批在制品");
															totalDao
																	.save(pprelation);
															// 将外购外委激活序列状态改为待激活
															wwp
																	.setStatus("待激活");
															// totalDao.save(wwp);
														}
													}
													// } else {
													// return
													// "对不起超过可申请数量("
													// + procard
													// .getZaizhikzkCount()
													// + ")";
													// }
													// } else {
													// wwp.setStatus("待激活");
													// }
													totalDao.save(wwp);
													if (pwwpList != null
															&& pwwpList.size() > 0) {
														for (ProcessInforWWProcard pwwp : pwwpList) {
															pwwp.setWwxlId(wwp
																	.getId());
															totalDao.save(pwwp);
														}
													}
													if (up != null) {
														for (ProcessInforWWProcard processInforWWProcard : processInforWWProcardList) {
															processInforWWProcard
																	.setWwxlId(wwp
																			.getId());// 外委序列ID(WaigouWaiweiPlan的id)(BOM外委)
															totalDao
																	.save(processInforWWProcard);
														}
													}
													n++;
													// wgSet.add(wwp);
												} else {
													wwp
															.setProcessNo(wwp
																	.getProcessNo()
																	+ ";"
																	+ nextWwProcessInfor
																			.getProcessNO());
													wwp
															.setProcessName(wwp
																	.getProcessName()
																	+ ";"
																	+ nextWwProcessInfor
																			.getProcessName());
													totalDao.update(wwp);
												}
												i = j;
											} else {
												i = j;
												break;
											}
										} else {
											i = j;
											break;
										}
									}
									if (wwp.getId() != null) {
										// 匹配供应商
										Price price = (Price) totalDao
												.getObjectByCondition(
														"from Price where wwType='工序外委' and partNumber=? and gongxunum=? and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
																+ Util
																		.getDateTime()
																+ "')  order by hsPrice",
														wwp.getMarkId(), wwp
																.getProcessNo());
										if (price != null) {
											wwp.setPriceId(price.getId());
											wwp.setGysId(price.getGysId());
											ZhUser zhUser = (ZhUser) totalDao
													.getObjectById(
															ZhUser.class, price
																	.getGysId());
											wwp.setGysName(zhUser.getName());
											wwp.setUserCode(zhUser
													.getUsercode());
											wwp.setUserId(zhUser.getUserid());
											totalDao.update(wwp);
										}
									}
									if (wwp.getStatus() != null
											&& wwp.getStatus().equals("待激活")) {// 说明自动跳过了半成品入委外库操作
										// 下一步操作
										zijihuoww(wwp);
									}

								}
							}
							up = process;
							if (process.getSubmmitCount() == 0) {
								break;
							}
						}
					}

				}

				/**** 绑定领取成员 (智能安排:第一次安排所有的人,后续按照领取过该零件的人员列表安排) ***/
				// 查询是否存在已经完成的批次
				String hql_historySelfCard = "from Procard where markId =? and tjNumber>0";
				Integer count = totalDao.getCount(hql_historySelfCard, procard
						.getMarkId());
				String hql = "";
				List userList = new ArrayList();
				if (count == null || count == 0) {
					// 查询上一批激活的
					String hql_befor = "from Procard where markId=? and id<? and jihuoStatua='激活' and status <> '取消' order by id DESC";
					Procard beforProcard = (Procard) totalDao
							.getObjectByCondition(hql_befor, procard
									.getMarkId(), procard.getId());
					if (beforProcard != null) {
						// 沿用上一批次
						String hql_old = "from Users where onWork in ('在职','试用','实习','离职中') and id in (select userId from ProcessinforPeople where procard.id=?)";
						userList = totalDao
								.query(hql_old, beforProcard.getId());
					} else {
						// 綁定所有人员
						hql = "from Users where onWork in ('在职','试用','实习','离职中') and id in (select u.id from Users u join u.processGzstore p where p.processName in "
								+ "(select i.processName from ProcessInfor i join i.procard c where c.id="
								+ procard.getId() + "))";
						userList = totalDao.query(hql);
					}
				} else {
					// 绑定所有生产过该零件的人员
					hql = "from Users where onWork in ('在职','试用','实习','离职中') and id in "
							+ "(select userId from ProcessInforReceiveLog where  fk_processInforId in "
							+ "(select i.id from ProcessInfor  i join i.procard c where c.markId ='"
							+ procard.getMarkId() + "' and c.tjNumber>0 ))";
					userList = totalDao.query(hql);
					// 自动绑定人员时，将上批次领料人员加入绑定人员序列
					// 先查询此件号是否需要领料
					if ("是".equals(procard.getLingliaostatus())) {
						String hql_befor = "from Procard where markId=? and id<? and jihuoStatua='激活' and status <> '取消' order by id DESC";
						Procard beforProcard = (Procard) totalDao
								.getObjectByCondition(hql_befor, procard
										.getMarkId(), procard.getId());
						if (beforProcard != null) {
							String markId = "";// 外购件列表
							if ("总成".equals(procard.getProcardStyle())) {
								List<String> mark = totalDao
										.query(
												"select markId from Procard where rootId = ?",
												procard.getId());
								if (mark != null && mark.size() > 0) {
									markId = Util.selectString(mark.toString());
								}
							} else if ("自制".equals(procard.getProcardStyle())) {
								List<String> mark = totalDao
										.query(
												"select markId from Procard where fatherId = ?",
												procard.getId());
								if (mark != null && mark.size() > 0) {
									markId = Util.selectString(mark.toString());
								}
							} else if ("外购".equals(procard.getProcardStyle())) {
								markId = procard.getMarkId();
							}
							if (!"".equals(markId)) {
								String hql_linliao = "from Users where onWork in ('在职','试用','实习','离职中') and name in "
										+ "(select sellCharger from Sell where sellWarehouse = '外购件库' and rootSelfCard = ? and sellMarkId in ('"
										+ markId
										+ "')) "
										+ "and id in (select u.id from Users u join u.processGzstore p where p.processName in "
										+ "(select i.processName from ProcessInfor i join i.procard c where c.id="
										+ beforProcard.getId() + "))";
								userList.addAll(totalDao.query(hql_linliao,
										beforProcard.getSelfCard()));
							}
						}
					}
				}

				if (userList != null && userList.size() > 0) {
					Set<ProcessinforPeople> processUser = procard
							.getProcessPeopleSet();
					for (int i = 0, len = userList.size(); i < len; i++) {
						Users user = (Users) userList.get(i);
						if (user != null) {
							ProcessinforPeople pp = new ProcessinforPeople();
							pp.setUserId(user.getId());
							pp.setCode(user.getCode());
							pp.setName(user.getName());
							pp.setDept(user.getDept());
							pp.setAddTime(Util.getDateTime());
							pp.setStatus("激活");
							pp.setProcard(procard);
							processUser.add(pp);
						}
					}
					procard.setProcessPeopleSet(processUser);// 领取人员
				}

			}
		} else if ("外购".equals(procard.getProcardStyle())
				&& procard.getNeedProcess() != null
				&& procard.getNeedProcess().equals("yes")) {
			// 半成品
			if (procard.getKlNumber() > 0)
				procard.setJihuoStatua("激活");
			if ("初始".equals(procard.getStatus())) {
				// 是否需要领料
				if (procard.getLingliaostatus() != null
						&& "否".equals(procard.getLingliaostatus())) {
					procard.setStatus("已发料");
					procard.setHascount(0F);
					// /*** 同步设置工序的可领数量 ***/
					// String hql_updateProCount =
					// "update ProcessInfor set totalCount=? where procard.id=?";
					// totalDao.createQueryUpdate(hql_updateProCount, null,
					// procard2.getKlNumber(), procard2.getId());
					String hql_update = "from ProcessInfor where procard.id=?";
					List<ProcessInfor> sonProcessinfor = totalDao.query(
							hql_update, procard.getId());
					for (ProcessInfor processInfor : sonProcessinfor) {
						processInfor.setTotalCount(procard.getKlNumber()
								- procard.getHascount());
						totalDao.update(processInfor);
					}
				} else {
					procard.setStatus("已发卡");
				}
			}
			// else {
			// // 激活外购件
			// procard2 = jihuoWaiProcard(procard2);
			// }
		}

		return totalDao.update(procard);
	}

	/****
	 * 激活外购件统一调用程序
	 * 
	 * @param waiProcard
	 *            外购件Procard
	 * @return
	 */
	@Override
	public Procard jihuoWaiProcard(Procard waiProcard) {
		String hql3 = "select sum(goodsCurQuantity) from Goods where goodsMarkId=? and goodsUnit=? and goodsClass=?";
		Float nowCount = waiProcard.getFilnalCount();// 本批次数量（因为此处只有第一次激活才会进入这里处理）
		// 查询该件号所有已发卡(即尚未领取)的外购件总数
		String sumOld = "select sum(filnalCount) from Procard where productStyle=? and status ='已发卡' and procardStyle='外购' and markId=? and hascount is null and (needProcess <> 'yes' or needProcess is null) and id <>?";
		Object sumobj = null;
		sumobj = totalDao.getObjectByCondition(sumOld, waiProcard
				.getProductStyle(), waiProcard.getMarkId(), waiProcard.getId());
		Float sumoldCount = 0F;
		if (sumobj != null) {
			sumoldCount = Float.parseFloat(sumobj.toString());
		}
		// 尚未全部领取
		String sumOld2 = "select sum(hascount) from Procard where  productStyle=? and status ='已发卡' and procardStyle='外购' and markId=? and hascount is not null and (needProcess <> 'yes' or needProcess is null) and id <>?";
		Object sumobj2 = null;
		sumobj2 = totalDao.getObjectByCondition(sumOld2, waiProcard
				.getProductStyle(), waiProcard.getMarkId(), waiProcard.getId());
		if (sumobj2 != null) {
			sumoldCount += Float.parseFloat(sumobj2.toString());
		}
		Float sumAll = sumoldCount + nowCount;
		/** 查询该件号所有已发卡(即数量不足)的外购件总数结束 **/

		// 查询外购件库库存数量
		String wgstatus = "外购件库";
		// if ("试制".equals(waiProcard.getProductStyle())) {
		// wgstatus = "试制库";
		// }
		Object obj = totalDao.getObjectByCondition(hql3,
				waiProcard.getMarkId(), waiProcard.getUnit(), wgstatus);
		Float sumCount = 0F;
		if (obj != null) {
			sumCount = Float.parseFloat(obj.toString());
		}
		/** 查询库存数量结束 **/

		// 激活外购件并判断数量是否足够
		waiProcard.setJihuoStatua("激活");
		waiProcard.setKlNumber(waiProcard.getFilnalCount());
		waiProcard.setTjNumber(0F);
		waiProcard.setMinNumber(0F);
		if (waiProcard.getHascount() == null) {
			waiProcard.setHascount(waiProcard.getFilnalCount());
		}
		// 库存数量充足
		if (sumCount != null && sumCount > 0) {
			// 如果 库存数量 >= (历史批次需求数量+本批次数量)
			if (sumCount >= sumAll) {
				// 本批次数量全部提交
				waiProcard.setTjNumber(waiProcard.getFilnalCount());
			} else if (sumCount > sumoldCount) {
				// 如果 库存数量 > 历史批次需求数量
				waiProcard.setTjNumber(sumCount - sumoldCount);
			}
			// 换算最小激活数量
			if (waiProcard.getTjNumber() < waiProcard.getFilnalCount()
					&& ((waiProcard.getFilnalCount() - waiProcard.getTjNumber())
							/ waiProcard.getQuanzi2() * waiProcard.getQuanzi1()) < 0.05) {
				// 零界点
				waiProcard.setTjNumber(waiProcard.getFilnalCount());
			}
			Float minNumber = waiProcard.getTjNumber()
					/ waiProcard.getQuanzi2() * waiProcard.getQuanzi1();
			if (waiProcard.getTjNumber().equals(waiProcard.getFilnalCount())) {
				minNumber = (float) Math.ceil(minNumber);
			}
			waiProcard.setMinNumber(minNumber);
		}
		if ("初始".equals(waiProcard.getStatus())) {
			waiProcard.setStatus("已发卡");
		}
		return waiProcard;
	}

	@Override
	public List findPici(String markId) {
		// TODO Auto-generated method stub
		return null;
	}

	@SuppressWarnings("unchecked")
	@Override
	public boolean deleteprocardtree(Integer id) {
		// TODO Auto-generated method stub
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			if (procard.getProcardStyle().equals("总成")) {
				boolean b = true;
				if (procard.getPlanOrderDetailId() != null
						&& procard.getMarkId() != null
						&& "总成".equals(procard.getProcardStyle())) {
					InternalOrderDetail orderDetail = (InternalOrderDetail) totalDao
							.getObjectById(InternalOrderDetail.class, procard
									.getPlanOrderDetailId());
					if (orderDetail != null
							&& orderDetail.getTurnCount() != null
							&& procard.getFilnalCount() != null) {
						if (orderDetail.getTurnCount()
								- procard.getFilnalCount() > 0) {
							orderDetail.setTurnCount(orderDetail.getTurnCount()
									- procard.getFilnalCount());
						} else {
							orderDetail.setTurnCount(0F);
						}
						orderDetail.getInternalOrder().setZhStatus("未转完");
						b = b & totalDao.update(orderDetail);
					}
				}
				if (b && procard.getCardId() != null) {
					RunningWaterCard rd = (RunningWaterCard) totalDao
							.getObjectById(RunningWaterCard.class, procard
									.getCardId());
					if (rd != null) {
						rd.setCardStatus("初始");
						rd.setReceiveStatus("初始");
						rd.setFollowCardId(null);
						rd.setProcardId(null);
						rd.setOwnUsername(null);
						b = b & totalDao.update(rd);
					}
				}
				// String hql =
				// "select markId,tjNumber from Procard where procardStyle='外购' and status<>'初始' and tjNumber>0 and rootId=? ";
				// List wglist = totalDao.query(hql, procard.getRootId());

				if (b) {
					b = b & totalDao.delete(procard);
					List<ProcardBl> blList = totalDao.query(
							"from ProcardBl where procardRootId=?", id);
					if (blList != null && blList.size() > 0) {
						for (ProcardBl bl : blList) {
							totalDao.delete(bl);
						}
					}
				}
				return b;
			}

			if (procard.getStatus().equals("完成")
					|| procard.getStatus().equals("已发料")
					|| procard.getStatus().equals("领工序")) {
				return false;
			} else {
				if (procard.getHascount() != null
						&& procard.getHascount() < procard.getKlNumber()) {
					return false;
				}
			}
			procard.setSbStatus("删除");
			procard.setProcard(null);
			if (procard.getFatherId() != null) {
				procard.setOldFatherId(procard.getFatherId());
				procard.setOldRootId(procard.getRootId());
			}
			procard.setFatherId(null);
			procard.setRootId(null);
			totalDao.update(procard);
			// 遍历下层零件设置设变属性为删除
			Set<Procard> sonSet = procard.getProcardSet();
			if (sonSet != null && sonSet.size() > 0) {
				for (Procard son : sonSet) {
					deleteDownProcard(son, Util.getDateTime());
				}
			}

		}
		return true;
	}

	/***
	 * BOM激活------查可领工序人员列表
	 * 
	 * @return
	 */
	@Override
	public List chagePeople(Integer id) {
		if (id != null) {
			String hql = "from Users where onWork in ('在职','试用','实习','离职中') and id in (select u.id from Users u join u.processGzstore p where p.processName in "
					+ "(select processName from ProcessInfor where procard.id =?))";
			return totalDao.query(hql, id);
		}
		return null;
	}

	public List chagePeople(Integer id, Users user, String pageStatus) {
		if (id != null) {
			String hql1 = "from Users where onWork in ('在职','试用','实习','离职中') and id in (select u.id from Users u join u.processGzstore p where p.processName in "
					+ "(select processName from ProcessInfor where procard.id =?))";
			List list1 = null;
			if ("cx".equals(pageStatus)) {
				list1 = totalDao.query(hql1, id);
			}

			String hql = "from Users where onWork in ('在职','试用','实习','离职中') and id ";
			String hql_ = "";
			if ("listwbUser".equals(pageStatus)) {
				hql_ = " not in (select userId ProcessinforPeople where  procard.id =? )";
			}
			hql_ = " in (select u.id from Users u join u.processGzstore p where p.processName in "
					+ "(select processName from ProcessInfor where procard.id =?))";
			hql += hql_;
			if (user != null) {
				if (user.getDept() != null && user.getDept().length() > 0) {
					hql += " and dept like '%" + user.getDept() + "%'";
				}
				if (user.getCode() != null && user.getCode().length() > 0) {
					hql += " and code like '%" + user.getCode() + "%'";
				}
				if (user.getName() != null && user.getName().length() > 0) {
					hql += " and name like '%" + user.getName() + "%'";
				}
			}
			List list2 = totalDao.query(hql, id);
			if (list1 != null) {
				list1.addAll(list2);
				return list1;
			} else {
				return list2;
			}
		}
		return null;
	}

	/****
	 * 绑定领取人员 * @param id 总成id
	 * 
	 * @param userIds
	 *            用户id
	 * @return
	 */
	public String bangAnd(Integer id, int[] userIds) {
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			List<Procard> procardList = totalDao.query(
					" from Procard where rootId =? and markId =? ", procard
							.getRootId(), procard.getMarkId());
			// List list = this.findManByProcardID(id);
			// userIds = Arrays.copyOf(userIds, userIds.length+list.size());
			// for(int i=0;i<list.size();i++){
			// ProcessinforPeople pfp =(ProcessinforPeople)list.get(i);
			// userIds[userIds.length-list.size()+i]=pfp.getUserId();
			// }
			for (Procard procard2 : procardList) {

				/**** 绑定领取成员 ***/
				Set<ProcessinforPeople> processUser = procard2
						.getProcessPeopleSet();
				processUser.clear();// 清空关系
				if (id != null && userIds != null && userIds.length > 0) {
					for (Integer userId : userIds) {
						Users user = (Users) totalDao.getObjectById(
								Users.class, userId);
						if (user != null) {
							ProcessinforPeople pp = new ProcessinforPeople();
							pp.setUserId(user.getId());
							pp.setCode(user.getCode());
							pp.setName(user.getName());
							pp.setDept(user.getDept());
							pp.setAddTime(Util.getDateTime());
							pp.setStatus("激活");
							pp.setProcard(procard2);
							processUser.add(pp);
						}
					}
				}
				procard2.setProcessPeopleSet(processUser);// 领取人员
				totalDao.update(procard2);
			}
		}
		return null;
	}

	/***
	 * 绑定领取成员、激活本批次 、计算生产周期、生成外购、外委的采购计划
	 * 
	 * @param id
	 *            总成id
	 * @param userIds
	 *            用户id
	 * @return
	 */
	@Override
	public String bangAndJihuo(Integer id, int[] userIds) {
		if (id != null && userIds != null && userIds.length > 0) {
			Procard procard = (Procard) totalDao.getObjectById(Procard.class,
					id);
			if (procard != null) {
				/**** 绑定领取成员 ***/
				Set<ProcessinforPeople> processUser = new HashSet<ProcessinforPeople>();
				for (Integer userId : userIds) {
					Users user = (Users) totalDao.getObjectById(Users.class,
							userId);
					if (user != null) {
						ProcessinforPeople pp = new ProcessinforPeople();
						pp.setUserId(user.getId());
						pp.setCode(user.getCode());
						pp.setName(user.getName());
						pp.setDept(user.getDept());
						pp.setAddTime(Util.getDateTime());
						pp.setStatus("激活");
						pp.setProcard(procard);
						processUser.add(pp);
					}
				}
				procard.setProcessPeopleSet(processUser);// 领取人员
				/*** 绑定领取成员完成 ****/

				if (!"试制".equals(procard.getProductStyle())) {
					/**** 计算激活时间(根据最大外购时间计算) ***/
					// 得到最大外购时间
					String hql_maxWgProcard = "from Procard where rootId=? and procardStyle='外购' order by needFinalDate desc";
					Procard wgProcard = (Procard) totalDao
							.getObjectByCondition(hql_maxWgProcard, procard
									.getId());
					String date2 = "";
					Date maxDate = null;
					// 不存在外购件
					if (wgProcard == null) {
						date2 = Util.getDateTime();
						maxDate = new Date();
						procard.setJihuoDate(date2);// 激活时间
					} else {
						date2 = Util.getDateTime();
						maxDate = new Date();
						procard.setJihuoDate(date2);// 激活时间
					}

					/*** 计算生产周期 ****/
					String shangbanTime = " " + Util.shangbanTime() + ":00";// 上班时间
					String xiabanTime = " " + Util.xiabanTime() + ":00";// 下班时间
					// String nowDateTime = Util.getDateTime();// 当前时间
					Date nowDate = maxDate;
					if (procard.getSingleDuration() == null) {
						procard.setSingleDuration(8F);// 默认工作8H
					}
					Float singleDuration = procard.getSingleDuration();// 单班时长
					String hql_zq = "from  Procard where rootId=? and procardStyle <> '外购'";
					List list = totalDao.query(hql_zq, procard.getId());
					if (list != null && list.size() > 0) {
						for (int i = 0; i < list.size(); i++) {
							Procard zqprocard = (Procard) list.get(i);
							// zqprocard.setJihuoDate(date2);// 激活时间

							if (zqprocard.getAllJiepai() == null) {
								zqprocard.setAllJiepai(3F);// 默认节拍3s
							}
							// 根据产品数量计算生产时长
							Float allProcardTime = zqprocard.getAllJiepai()
									* zqprocard.getFilnalCount() / 3600;// 生产时长(h)
							if (zqprocard.getDeliveryDuration() == null) {
								zqprocard.setDeliveryDuration(0F);// 默认延误0H
							}
							Float deliveryDuration = zqprocard
									.getDeliveryDuration()
									+ allProcardTime;// 延误时长
							// 计算结束时间
							int day = (int) (deliveryDuration / singleDuration);
							Float hour = deliveryDuration % singleDuration;// 总时长
							try {
								Date nextDate = Util.getCalendarDate(nowDate,
										day);// 累加天数
								String nextDay = Util.DateToString(nextDate,
										"yyyy-MM-dd")
										+ xiabanTime;// 累加后下班时间
								Date nextXiaban = Util.StringToDate(nextDay,
										"yyyy-MM-dd HH:mm:ss");// 累加后时间

								// 如果是下班后处理，下一天的上班时间开始累加
								if (nextXiaban.getTime() - nextDate.getTime() < 0) {
									nextDate = Util
											.getCalendarDate(nextDate, 1);// 累加1天
									String nextDay2 = Util.DateToString(
											nextDate, "yyyy-MM-dd")
											+ shangbanTime;// 累加后上班时间
									nextDate = Util.StringToDate(nextDay2,
											"yyyy-MM-dd HH:mm:ss");// 累加后时间
									nextXiaban = Util.StringToDate(nextDay2,
											"yyyy-MM-dd HH:mm:ss");// 累加后下班时间
								}

								// 计算累加后那天的时间与下班时间间隔
								Float shengHour = (nextXiaban.getTime() - nextXiaban
										.getTime()) * 1000 * 3600F;
								// 如果距离下班时间大于剩余时间，直接累加小时
								if (shengHour < hour) {
									nextDate = Util.getCalendarDate(nextXiaban,
											1);// 累加1天
									String nextDay2 = Util.DateToString(
											nextDate, "yyyy-MM-dd")
											+ shangbanTime;// 累加后上班时间
									nextDate = Util.StringToDate(nextDay2,
											"yyyy-MM-dd HH:mm:ss");// 累加后时间
									hour -= shengHour;
								}
								int gethour = Integer.parseInt(Util
										.DateToString(nextDate, "HH"));
								int newHour = (int) (gethour + hour);
								String needFinalDate = Util.DateToString(
										nextDate, "yyyy-MM-dd ")
										+ newHour
										+ Util.DateToString(nextDate, ":mm:ss");
								zqprocard.setNeedFinalDate(needFinalDate);
								totalDao.update(zqprocard);
							} catch (ParseException e) {
								e.printStackTrace();
							}
						}
					}
				}
				/*** 激活本批次 ****/
				// sendRunCard(procard, "激活和绑定流水卡");
				/*** 激活本批次完成 ****/
				// 更新卡片状态
				// String hql5 =
				// "update Procard set status='已发卡' where rootId=?";
				// totalDao.createQueryUpdate(hql5, null, procard.getId());
				// String hql6 =
				// "update Procard set status='已发料',hascount=0 where lingliaostatus='否' and rootId=?";
				// totalDao.createQueryUpdate(hql6, null, procard.getId());

				// /*** 生成外购、外委的采购计划 ****/
				// String hql_wg =
				// "from  Procard where rootId=? and procardStyle='外购'";
				// List list_wg = totalDao.query(hql_wg, procard.getId());
				// Set<WaigouWaiweiPlan> wgSet = new
				// HashSet<WaigouWaiweiPlan>();
				// for (int i = 0; i < list_wg.size(); i++) {
				// Procard procard_wg = (Procard) list_wg.get(i);
				// WaigouWaiweiPlan wwp = new WaigouWaiweiPlan();
				// wwp.setMarkId(procard_wg.getMarkId());
				// wwp.setProName(procard_wg.getProName());
				// wwp.setType(procard_wg.getProcardStyle());
				// wwp.setNumber(procard_wg.getFilnalCount());
				// wwp.setAddTime(Util.getDateTime());
				// wwp.setShArrivalTime(procard_wg.getNeedFinalDate());
				// wwp.setStatus("激活");
				// wwp.setProcard(procard);
				// wgSet.add(wwp);
				// }
				// procard.setWgwwPlanSet(wgSet);
			}
		}
		return null;
	}

	/***
	 * 查找外购外委采购计划根据产品id ======= 查询需要领工序的产品信息
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public List<Procard> findProcardById1(Integer id) {
		String hql = "from Procard where rootId=? and  status='领工序' or  status in ('已发料','领工序')";
		List<Procard> procardList = (List<Procard>) totalDao.query(hql, id);
		return procardList;
	}

	/***
	 * 查找外购外委采购计划
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public List findWgWwPlan(Integer id) {
		if (id != null) {
			String hql = "from WaigouWaiweiPlan where procard.id=?";
			return totalDao.query(hql, id);
		}
		return null;
	}

	/***
	 * 查找外购或外委采购计划
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public List findWgWwPlanList(String pageStatus) {
		if ("wgPlan".equals(pageStatus)) {
			pageStatus = "外购";
		} else {
			pageStatus = "外委";
		}
		String hql = "from WaigouWaiweiPlan where type=? and status='待激活' order by planNumber,caigouMonth,selfCard";
		return totalDao.query(hql, pageStatus);
	}

	/****
	 * 外购外委查询列表
	 * 
	 * @param wwPlan
	 * @param pageNo
	 * @param pageSize
	 * @param pageStatus
	 * @return
	 */
	@Override
	public Object[] findWgWwPlanList(WaigouWaiweiPlan wwPlan, int pageNo,
			int pageSize, String pageStatus, MonthlySummary ms,
			String jhStatus, String noZhuser) {
		if (wwPlan == null) {
			wwPlan = new WaigouWaiweiPlan();
		}
		String jihuos = " and 1=1";
		if ("wgPlan".equals(pageStatus)) {
			pageStatus = "外购";
			jihuos = " and status<>'待激活'";
		} else {
			pageStatus = "外委";
			if ("needjh".equals(jhStatus)) {
				jihuos = " and status in('待激活','待入库')";
			} else if ("hadjh".equals(jhStatus)) {
				jihuos = "and status not in('待激活','待入库')";
			}
		}
		wwPlan.setType(pageStatus);
		// 如果存在月度考核汇总，则根据汇总额月份查询
		if (ms != null && ms.getId() != null) {
			ms = (MonthlySummary) totalDao.getObjectById(MonthlySummary.class,
					ms.getId());
			wwPlan.setCaigouMonth(ms.getMonth());
			jihuos = "";
		}

		String hql = totalDao.criteriaQueries(wwPlan, null) + jihuos;
		if ("否".equals(noZhuser)) {
			hql += " and (gysId is null or gysId = '')";
		}
		if ("hadjh".equals(jhStatus)) {
			hql += " order by jihuoTime desc";
		}
		int count = totalDao.getCount(hql);
		if (wwPlan != null) {
			pageNo = 0;
			pageSize = count;
		}
		List list = totalDao.findAllByPage(hql, pageNo, pageSize);

		Object[] o = { list, count, pageSize };
		return o;
	}

	/***
	 * 查询月度考核汇总数据
	 * 
	 * @param ms
	 * @return
	 */
	@Override
	public MonthlySummary showMsLv(MonthlySummary ms) {
		if (ms != null) {
			updateMonthLv();// 更新状态
			String hql = "from MonthlySummary where month=? and number=?";
			return (MonthlySummary) totalDao.getObjectByCondition(hql, ms
					.getMonth(), ms.getNumber());
		}
		return null;
	}

	/***
	 * 月度考核汇总
	 */
	@Override
	public void updateMonthLv() {
		String nowMonth = Util.getDateTime("yyyy-MM");// 当前月份
		// 到货及时率汇总
		String hql = "select distinct caigouMonth from WaigouWaiweiPlan where type='外购' and caigouMonth not in (select month from MonthlySummary where number ='dh' and month<>?  )";
		List list = totalDao.query(hql, nowMonth);
		for (int i = 0; i < list.size(); i++) {
			String caigouMonth = (String) list.get(i);
			String hql_all = "from WaigouWaiweiPlan  where type='外购' and caigouMonth=? ";
			Integer allCount = totalDao.getCount(hql_all, caigouMonth);// 总数量
			String hql_bad = "from WaigouWaiweiPlan  where type='外购' and caigouMonth=? and (acArrivalTime is not null or acArrivalTime>shArrivalTime)";
			Integer badCount = totalDao.getCount(hql_bad, caigouMonth);// 未完成数量
			Float dhLv = 0F;
			try {
				dhLv = badCount / allCount * 1.0F;
			} catch (Exception e) {
				e.printStackTrace();
			}
			MonthlySummary ms = new MonthlySummary();
			ms.setName("到货及时率");
			ms.setNumber("dh");
			ms.setMonth(caigouMonth);
			ms.setCompletionRate(dhLv);
			ms.setAddTime(Util.getDateTime());
			totalDao.save(ms);
		}
	}

	/***
	 * 激活外购采购计划
	 * 
	 * @param wwPlanId
	 * @throws Exception
	 */
	@Override
	public void jihuoWgPlan(Integer wwPlanId) throws Exception {
		if (wwPlanId != null) {
			WaigouWaiweiPlan wwPlan = (WaigouWaiweiPlan) totalDao
					.getObjectById(WaigouWaiweiPlan.class, wwPlanId);
			if (wwPlan != null) {
				String nowTime = Util.getDateTime();
				wwPlan.setJihuoTime(nowTime);// 激活时间
				wwPlan.setStatus("激活");

				/** 根据激活时间推算出应到货时间 **/
				// 根据产品数量计算生产时长
				long allProcardTime = (long) (wwPlan.getAllJiepai()
						* wwPlan.getNumber() * 1000);// 生产时长(毫秒)
				Float singleDuration = wwPlan.getSingleDuration();// 单班时长
				long deliveryDuration = (long) (wwPlan.getDeliveryDuration() + allProcardTime);// 延误时长
				// String shangbanTime = " " + Util.shangbanTime() + ":00";//
				// 上班时间
				// String xiabanTime = " " + Util.xiabanTime() + ":00";// 下班时间
				// // 计算结束时间
				// int day = (int) (deliveryDuration / singleDuration);
				// Float hour = deliveryDuration % singleDuration;// 总时长
				// Date nowDate = new Date();
				// try {
				// Date nextDate = Util.getCalendarDate(nowDate, day);// 累加天数
				// String nextDay = Util.DateToString(nextDate, "yyyy-MM-dd")
				// + xiabanTime;// 累加后下班时间
				// Date nextXiaban = Util.StringToDate(nextDay,
				// "yyyy-MM-dd HH:mm:ss");// 累加后时间
				//
				// // 如果是下班后处理，下一天的上班时间开始累加
				// if (nextXiaban.getTime() - nextDate.getTime() < 0) {
				// nextDate = Util.getCalendarDate(nextDate, 1);// 累加1天
				// String nextDay2 = Util.DateToString(nextDate,
				// "yyyy-MM-dd")
				// + shangbanTime;// 累加后上班时间
				// nextDate = Util.StringToDate(nextDay2,
				// "yyyy-MM-dd HH:mm:ss");// 累加后时间
				// nextXiaban = Util.StringToDate(nextDay2,
				// "yyyy-MM-dd HH:mm:ss");// 累加后下班时间
				// }
				//
				// // 计算累加后那天的时间与下班时间间隔
				// Float shengHour = (nextXiaban.getTime() - nextXiaban
				// .getTime()) * 1000 * 3600F;
				// // 如果距离下班时间大于剩余时间，直接累加小时
				// if (shengHour < hour) {
				// nextDate = Util.getCalendarDate(nextXiaban, 1);// 累加1天
				// String nextDay2 = Util.DateToString(nextDate,
				// "yyyy-MM-dd")
				// + shangbanTime;// 累加后上班时间
				// nextDate = Util.StringToDate(nextDay2,
				// "yyyy-MM-dd HH:mm:ss");// 累加后时间
				// hour -= shengHour;
				// }
				// int gethour = Integer.parseInt(Util.DateToString(nextDate,
				// "HH"));
				// int newHour = (int) Math.ceil(gethour + hour);
				String shArrivalTime = Util.aftertime(nowTime, allProcardTime
						+ deliveryDuration);
				wwPlan.setShArrivalTime(shArrivalTime);
				// } catch (ParseException e) {
				// e.printStackTrace();
				// }
				// 根据采购计划得到markId，然后去查procardtemplate中同markId的对象获取id，然后根据这个id去获取外购件检验频次的id最后获取外购件检验频次
				String sql = "from Waigoujianpinci where id in( select waigoujianpinciId from ProcardTemplate_Waigouyanshou where procardTemplateId in( select id from ProcardTemplate where markId=(select markId from WaigouWaiweiPlan where id=?)))";
				List<Waigoujianpinci> wlist = totalDao.query(sql, wwPlanId);
				if (wlist.size() > 0) {
					Waigoujianpinci w = wlist.get(0);
					List<WaigoujianpinciZi> wzilist = totalDao
							.query(
									"from WaigoujianpinciZi where caigoushuliang1<=? and  caigoushuliang2>=? and waigoujianpinciId =?",
									wwPlan.getNumber(), wwPlan.getNumber(), w
											.getId());
					if (wzilist.size() > 0) {
						if (wzilist.get(0).getChoujian() != null
								&& w.getJiepai() != null) {
							long jianyanshichang = (long) (wzilist.get(0)
									.getChoujian()
									* w.getJiepai() * 1000);
							try {
								String choujiantime = Util.aftertime(wwPlan
										.getShArrivalTime(), jianyanshichang);
								wwPlan.setJianyanTime(choujiantime);
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					}
				}
				totalDao.update(wwPlan);
				Procard wgProcard = (Procard) totalDao.getObjectById(
						Procard.class, wwPlan.getProcardId());
				if (wgProcard != null) {
					wgProcard.setJihuoDate(nowTime);
					wgProcard.setNeedFinalDate(wwPlan.getJianyanTime());
					// 确认采购之后生成供应商流水卡
					productProcardGys(wgProcard.getMarkId(), wgProcard
							.getNeedCount(), null, null,
							wwPlan.getPlanNumber(), wgProcard.getSelfCard());
				}
			}
		}
	}

	@Override
	public void setJihuoTime(Integer id) throws Exception {
		// TODO Auto-generated method stub
		// 获取该外购件采购计划的整个BOM的外购件id
		List<Procard> procardList = totalDao
				.query(
						"from Procard where procardStyle='外购' and rootId=(select rootId from Procard where id=(select procardId from WaigouWaiweiPlan where type='外购' and id=?))",
						id);
		if (procardList.size() > 0) {
			Procard procard1 = procardList.get(0);
			for (Procard procard : procardList) {
				if (procard.getNeedFinalDate() == null) {
					return;// 还有外购件没有确认采购计划时间
				} else if (Util.compareTime(procard.getNeedFinalDate(),
						"yyyy-MM-dd HH:mm:ss", procard1.getNeedFinalDate(),
						"yyyy-MM-dd HH:mm:ss")) {
					procard1 = procard;
				}
			}
			// 设置当层与上层的激活时间
			setJihuoTimeToUp(procard1, null);

		}

	}

	/**
	 * 设置当层与上层的激活时间
	 * 
	 * @param procard
	 *            卡片
	 * @param basetime
	 *            基准时间当基准时间为空时表示procard为第一次进入是外购流水卡，不为空时表示组合流水卡，basetime代表该组合预计的完成时间
	 */
	public boolean setJihuoTimeToUp(Procard procard, String basetime)
			throws Exception {
		boolean b = true;
		Procard fprocard = procard.getProcard();
		Set<Procard> procardSonSet = fprocard.getProcardSet();
		long fworkTime = 0l;
		if (fprocard.getFilnalCount() != null
				&& fprocard.getAllJiepai() != null) {
			fworkTime = (long) (fprocard.getFilnalCount()
					* fprocard.getAllJiepai() * 1000);
		}
		long lasttime = 0l;
		if (procardSonSet != null) {
			for (Procard sonprocard : procardSonSet) {
				long workTime = 0l;
				if (sonprocard.getProcardStyle() != null
						&& !sonprocard.getProcardStyle().equals("外购")
						&& sonprocard.getFilnalCount() != null
						&& sonprocard.getAllJiepai() != null) {
					workTime = (long) (sonprocard.getFilnalCount()
							* sonprocard.getAllJiepai() * 1000);
					if (workTime > lasttime) {
						lasttime = workTime;
					}
				}
				if (sonprocard.getProcardStyle() != null
						&& sonprocard.getProcardStyle().equals("自制")) {
					String jihuotime = null;
					if (basetime == null) {
						jihuotime = Util.beforetime(procard.getNeedFinalDate(),
								workTime);
					} else {
						jihuotime = Util.beforetime(basetime, workTime);
					}
					sonprocard.setJihuoDate(jihuotime);
					b = b & totalDao.update(sonprocard);
				} else if (sonprocard.getProcardStyle() != null
						&& sonprocard.getProcardStyle().equals("组合")
						&& !sonprocard.getId().equals(procard.getId())) {
					// 设置该组合卡片与下层激活时间
					if (basetime != null) {
						b = b & setJihuoTimeToDown(sonprocard, basetime);
					} else {
						b = b
								& setJihuoTimeToDown(sonprocard, procard
										.getNeedFinalDate());
					}
				}
			}
		}
		if (basetime == null) {
			fprocard.setJihuoDate(procard.getNeedFinalDate());
		} else {
			fprocard.setJihuoDate(basetime);
		}
		b = b & totalDao.update(fprocard);
		if (fprocard.getProcard() == null) {
			return b;
		} else {
			String basetime2 = Util.aftertime(procard.getNeedFinalDate(),
					fworkTime - lasttime);
			b = b & setJihuoTimeToUp(fprocard, basetime2);
			return b;
		}
	}

	/**
	 * 设置该组合卡片与下层激活时间
	 * 
	 * @param fprocard
	 * @param baseTime
	 *            fprocard的完成时间
	 * @throws Exception
	 */
	public boolean setJihuoTimeToDown(Procard fprocard, String baseTime)
			throws Exception {
		boolean b = true;
		Set<Procard> procardSonSet = fprocard.getProcardSet();
		long fworkTime = 0l;
		if (fprocard.getFilnalCount() != null
				&& fprocard.getAllJiepai() != null) {
			fworkTime = (long) (fprocard.getFilnalCount()
					* fprocard.getAllJiepai() * 1000);
		}
		long lasttime = 0l;
		if (procardSonSet != null) {
			// 第一步根据baseTime计算出fprocard的激活时间
			for (Procard sonprocard : procardSonSet) {
				long workTime = 0l;
				if (sonprocard.getProcardStyle() != null
						&& !sonprocard.getProcardStyle().equals("外购")
						&& sonprocard.getFilnalCount() != null
						&& sonprocard.getAllJiepai() != null) {
					workTime = (long) (sonprocard.getFilnalCount()
							* sonprocard.getAllJiepai() * 1000);
					if (workTime > lasttime) {
						lasttime = workTime;
					}
				}
			}
			String fjihuotime = Util.beforetime(baseTime, fworkTime - lasttime);
			// 第二步将激活时间和外购件检验时间做比较取比较迟的的时间作为该组合件的激活时间
			for (Procard sonprocard2 : procardSonSet) {
				if (sonprocard2.getProcardStyle() != null
						&& sonprocard2.getProcardStyle().equals("外购")
						&& sonprocard2.getNeedFinalDate() != null
						&& Util.compareTime(sonprocard2.getNeedFinalDate(),
								"yyyy-MM-dd HH:mm:ss", fjihuotime,
								"yyyy-MM-dd HH:mm:ss")) {
					fjihuotime = sonprocard2.getNeedFinalDate();
				}
			}
			fprocard.setJihuoDate(fjihuotime);
			b = b & totalDao.update(fprocard);
			// 第三步设置下层自制件的激活时间，组合件继续往下递归
			for (Procard sonprocard3 : procardSonSet) {
				if (sonprocard3.getProcardStyle() != null
						&& sonprocard3.getProcardStyle().equals("自制")) {
					long workTime = 0l;
					if (sonprocard3.getFilnalCount() != null
							&& sonprocard3.getAllJiepai() != null) {
						workTime = (long) (sonprocard3.getFilnalCount()
								* sonprocard3.getAllJiepai() * 1000);
					}
					String jihuotime = Util.beforetime(fjihuotime, workTime);
					sonprocard3.setJihuoDate(jihuotime);
					b = b & totalDao.update(sonprocard3);
				} else if (sonprocard3.getProcardStyle() != null
						&& sonprocard3.getProcardStyle().equals("组合")) {
					// 设置该组合卡片与下层激活时间
					b = b & setJihuoTimeToDown(sonprocard3, fjihuotime);
				}
			}
		}
		return b;
	}

	/***
	 * 前往激活前验证最小批次、外购件采购计划
	 * 
	 * @param id
	 *            产品id
	 * @return
	 */
	@Override
	public String toChagePeoBefor(int id) {
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			// 判断批次
			String hql2 = "select min(selfCard) from Procard where markId=? and status='初始'";
			Object obj = totalDao.getObjectByCondition(hql2, procard
					.getMarkId());
			if (obj != null) {
				if (!obj.toString().equals(procard.getSelfCard())) {
					return "请先选择" + procard.getMarkId() + "的第" + obj.toString()
							+ "批次!";
				}
			}
			// // 判断外购件是否已确认采购
			// String hql_wgPlan =
			// "from WaigouWaiweiPlan where procard.id=? and jihuoTime is null";
			// int count = totalDao.getCount(hql_wgPlan, id);
			// if (count > 0) {
			// return "您要激活的产品批次存在尚未采购的外购件信息,请等待采购确认后再激活本批次!";
			// }
			return "true";
		} else {
			return "错误数据!";
		}

	}

	/***
	 * 所有待干产品列表(当前屏幕)
	 * 
	 * @return
	 */
	@Override
	public Object[] findViewList(Integer serrnId, int page, int rows) {
		String date = Util.getDateTime("yyyy-MM-dd");
		String date2;
		try {
			date2 = Util.DateToString(Util.getCalendarDate(new Date(), -7),
					"yyyy-MM-dd");
		} catch (ParseException e) {
			e.printStackTrace();
			date2 = Util.getDateTime("yyyy-MM-dd");
		}
		String dateTime = Util.getDateTime();
		String hql = " from Procard where (procardstyle in ('总成','自制') or (needProcess ='yes' and procardstyle='外购')) "
				+ " and status not in ('入库','完成') and jihuoStatua='激活' and id in "
				+ "(select procard.id from ProcessInfor where procard.id is not null and gongwei in "
				+ "(select gongweihao from TaSopGongwei where id in "
				+ "(select g.id from Screen s join s.gongweis g  where s.id =? ))) and (jihuoDate<='"
				+ dateTime
				+ "' and jihuoDate>='"
				+ date2
				+ "') and jihuoDate!='' and needFinalDate!='' "
				+ " order by jihuoDate DESC";

		// List<Procard> list = totalDao.findAllByPage(hql, 1, 10, serrnId);
		int count = totalDao.getCount(hql, serrnId);
		List<Procard> list = totalDao.findAllByPage(hql, page, rows, serrnId);
		//
		List newList = new ArrayList();
		for (Procard procard : list) {
			String hql2 = "from ProcessinforPeople where procard.id=?";
			List list_name = totalDao.query(hql2, procard.getId());
			procard.setProcessPeopleList(list_name);
			// 总工序数
			String hql_process_all = "select sum(totalCount),sum(submmitCount) from ProcessInfor where  procard.id in(select id from Procard where id=?)";
			Object[] sums = (Object[]) totalDao.getObjectByCondition(
					hql_process_all, procard.getId());

			if (sums[0] == null) {
				sums[0] = 0;
			}
			if (sums[1] == null) {
				sums[1] = 0;
			}

			Float allprocessNum = Float.valueOf(sums[0].toString());
			// 提交工序数
			Float finalprocessNum = Float.valueOf(sums[1].toString());
			Float jindu = finalprocessNum / allprocessNum * 100;
			if (allprocessNum == 0) {
				jindu = 0F;
			}
			if (jindu > 100) {
				jindu = 100F;
			}
			procard.setLingliaoren(jindu + "");
			newList.add(procard);
			//

		}
		// return newList;
		return new Object[] { newList, count };

	}

	/*
	 * 根据件号查找批次(non-Javadoc)
	 * 
	 * @see
	 * com.task.Server.sop.ProcardServer#Android_findSelfCardBymarkId(java.lang
	 * .String)
	 */
	@Override
	public List Android_findSelfCardBymarkId(String markId) {
		String hql = "from WaigouWaiweiPlan where markId=? and type='外购' and status='激活'";
		List list = this.totalDao.query(hql, markId);
		return list;
	}

	/*
	 * 根据件号和批次查找数量(non-Javadoc)
	 * 
	 * @see
	 * com.task.Server.sop.ProcardServer#Android_findnumBymarkIdAndCard(java
	 * .lang.String, java.lang.String)
	 */
	@Override
	public WaigouWaiweiPlan Android_findnumBymarkIdAndCard(String markId,
			String selfCard) {
		String hql = "from WaigouWaiweiPlan where markId=? and selfCard=? and type='外购' and status='激活'";
		WaigouWaiweiPlan waiweiPlan = (WaigouWaiweiPlan) this.totalDao
				.getObjectByCondition(hql, markId, selfCard);
		return waiweiPlan;
	}

	public WaigouWaiweiPlan ByIdWaigouWaiweiPlan(Integer id) {
		return (WaigouWaiweiPlan) totalDao.getObjectById(
				WaigouWaiweiPlan.class, id);
	}

	public void updateWaigouWaiweiPlan(WaigouWaiweiPlan w) {
		totalDao.update(w);
	}

	public void addOutSourcingWorkList(OutSourcingWorkList o) {
		totalDao.save(o);
	}

	/***
	 * 更新所有的工作时长
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void updateGzDateTime() {
		String hql = "from Procard where procardStyle != '外购' and status in ('完成','入库') order by id";
		List<Procard> list = totalDao.query(hql);
		for (Procard procard : list) {
			String hql2 = "from ProcessInfor where procard.id=? and productStyle='自制'";
			List<ProcessInfor> ptList = totalDao.query(hql2, procard.getId());
			String minstartDate = "";
			int num = 0;
			try {
				for (int j = 0; j < ptList.size(); j++) {
					ProcessInfor pt = ptList.get(j);
					if (pt.getUsercodes() != null
							&& pt.getUsercodes().length() > 0
							&& pt.getStatus().equals("完成")) {
						if ("自制".equals(pt.getProductStyle())) {
							// 如果最后一道工序
							if (ptList.size() - 1 == j) {
								String startDate = pt.getFirstApplyDate();
								String submitDate = pt.getSubmitDate()
										.substring(
												pt.getSubmitDate().lastIndexOf(
														",") + 1,
												pt.getSubmitDate().length());
								long datetime = Util.getWorkTime(startDate,
										submitDate);
								Float gzDateTime = (float) (datetime / 1000.0 / 3600.0);// 转换为小时
								pt.setGzDateTime(gzDateTime);
								totalDao.update(pt);
							}
							// 多于一道工序
							if (j > 0) {
								ProcessInfor topPt = ptList.get(j - 1);// 获得上一道工序
								String startDate = topPt.getFirstApplyDate();
								String submitDate = topPt.getSubmitDate()
										.substring(
												topPt.getSubmitDate()
														.lastIndexOf(",") + 1,
												topPt.getSubmitDate().length());
								if ("yes".equals(pt.getProcessStatus())) {
									// 连续的并行工序
									if ("yes".equals(topPt.getProcessStatus())) {
										if (pt.getUsercodes().equals(
												topPt.getUsercodes())) {
											num++;
											if (num == 1) {
												minstartDate = topPt
														.getFirstApplyDate();
											}
											submitDate = pt
													.getSubmitDate()
													.substring(
															pt
																	.getSubmitDate()
																	.lastIndexOf(
																			",") + 1,
															pt.getSubmitDate()
																	.length());
										} else {
											// 员工名称不同，计算上一道工序的工作时长
											if (num < 1) {
												minstartDate = startDate;
											}
											long datetime = Util.getWorkTime(
													minstartDate, submitDate);
											Float gzDateTime = (float) (datetime / 1000.0 / 3600.0);// 转换为小时
											topPt.setGzDateTime(gzDateTime);
											totalDao.update(topPt);
											num = 0;
										}
									} else {
										// 不是并行工序，计算上一道工序的工作时长
										long datetime = Util.getWorkTime(
												startDate, submitDate);
										Float gzDateTime = (float) (datetime / 1000.0 / 3600.0);// 转换为小时
										topPt.setGzDateTime(gzDateTime);
										totalDao.update(topPt);
									}
								} else {
									// 不是并行工序，计算上一道工序的工作时长
									long datetime = Util.getWorkTime(startDate,
											submitDate);
									Float gzDateTime = (float) (datetime / 1000.0 / 3600.0);// 转换为小时
									topPt.setGzDateTime(gzDateTime);
									totalDao.update(topPt);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/****
	 * 查询出存在三检记录、巡检记录的已提交产品,用户入库
	 * 
	 * @return
	 */
	@Override
	public List findNeedRukuPro(Procard procard) {
		if (procard == null) {
			procard = new Procard();
		}
		String hql_p = totalDao.criteriaQueries(procard, null);
		hql_p += " and status in ('领工序','完成','待入库') and procardStyle='总成' and tjNumber>0 and(rukuCount is null or (tjNumber-rukuCount)>0 ) order by selfCard desc";
		return totalDao.query(hql_p);
	}

	/***
	 * 打开或关闭PMI
	 * 
	 * @param pmiId
	 * @param openOrClose
	 *            1/0
	 * @return
	 */
	@Override
	public String openOrClosePmi(Integer pmiId, int openOrClose) {
		PmiManagement pmi = (PmiManagement) totalDao.getObjectById(
				PmiManagement.class, pmiId);
		if (pmi != null) {
			return openJdqQ(pmi.getPmi_serverIp(), Integer.parseInt(pmi
					.getPmi_port()), pmi.getMin_num(), openOrClose, 0F, pmi
					.getRated_Current());
		}
		return null;
	}

	/***
	 * 打开或关闭继电器
	 * 
	 * @param ip
	 *            ip地址或域名
	 * @param port
	 *            端口
	 * @param openOrClose
	 *            开(00)或关(01 )
	 */
	@Override
	public String openJdq(String ip, int port, int openOrClose) {
		Socket s;
		try {
			s = new Socket(ip, port);
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s
					.getOutputStream()));
			bw.write(openOrClose);
			// bw.newLine();
			bw.flush();
			bw.close();
			s.close();
			return "操作成功!";
		} catch (Exception e) {
			e.printStackTrace();
			return "操作失败!";
		}
	}

	/***
	 * 打开或关闭继电器(强控)
	 * 
	 * @param ip
	 *            ip地址或域名
	 * @param port
	 *            端口
	 * @param num
	 *            序号
	 * @param openOrClose
	 *            开(00)或关(01 )或重置(02)
	 * @param number
	 *            领取数量
	 */
	@Override
	public String openJdqQ(String ip, int port, Integer num, int openOrClose,
			float number, float eddl) {
		Socket s;
		try {
			s = new Socket(ip, port);
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s
					.getOutputStream()));
			if (num != null && num > 0) {
				bw.write(16);
				bw.write(num);
			}
			if (openOrClose == 1) {
				// bw.write(new char[] { 0xac });// 每次打开前,先重置下
				// bw.flush();
				// 01 00 00 00 00 01 00 弱控
				// 01 00 00 01 00 01 00 强控（10件）
				int numInt = (int) number;
				int numeddl = (int) eddl;
				String dl = "";
				if (numeddl < 10) {
					dl = "0";
				}
				String num_str = (openOrClose * 10000 + numInt) + dl + numeddl;
				String[] strs = num_str.split("");
				int len = strs.length;
				char[] strChar = new char[7];
				if (len == 8) {
					for (int i = 1; i < strs.length; i++) {
						int ic = Integer.parseInt(strs[i]);
						char ch = (char) (ic);
						strChar[i - 1] = ch;
					}
				} else if (len == 7) {
					for (int i = 0; i < strs.length; i++) {
						int ic = Integer.parseInt(strs[i]);
						char ch = (char) (ic);
						strChar[i] = ch;
					}
				}
				bw.write(strChar);
			} else if (openOrClose == 0) {
				bw.write(new char[] { 00, 0x7F, 00, 00, 00, 00, 00 });
			} else if (openOrClose == 2) {
				bw.write(new char[] { 0x7e });// 重置PMI
			} else if (openOrClose == 3 || openOrClose == 4) {// 3、获取当前的电压值6c
				// 4、获取当前的电流值6d
				if (openOrClose == 3)
					bw.write(new char[] { 0x6C });
				else
					bw.write(new char[] { 0x6D });
				InputStream in = s.getInputStream();
				BufferedInputStream bis = new BufferedInputStream(in);
				byte[] nenghao_data = new byte[8];// 先接收第一个字符
				bis.read(nenghao_data);// 读取数据
				String mes = Util.byteArrayToHexString(nenghao_data)
						.replaceAll(" ", "");
				System.out.println("[Client " + mes + "]: " + mes);
				String zhi = mes.substring(8, 14);
				Integer zhiNumber = Integer.parseInt(zhi, 16);
				if (openOrClose == 3) {
					System.out.println("电压值:" + zhiNumber + "V");
				} else {
					System.out.println("电流值:" + zhiNumber + "A");
				}
			}
			bw.flush();
			bw.close();
			s.close();
			return "操作成功!";
		} catch (Exception e) {
			e.printStackTrace();
			AlertMessagesServerImpl.addAlertMessages("系统维护异常组",
					"PMI操作失败  --IP:" + ip + "、端口:" + port + "、操作方式:"
							+ openOrClose, "PMI操作失败", "2");
			return "操作失败!";
		}
	}

	public List findManByProcardID(int procardID, Users user) {
		Procard procard = (Procard) totalDao.getObjectById(Procard.class,
				procardID);
		String str = "select id ";
		if (user == null) {
			user = new Users();
		}
		String hql_user = totalDao.criteriaQueries(user,
				" onWork in('在职','实习','试用') ");
		hql_user = str + hql_user;
		String hql = "from ProcessinforPeople where procard.id=? and userId not in "
				+ "(" + hql_user + ")";
		List list = this.totalDao.query(hql, procard.getId());
		return list;
	}

	public List findManByProcardID(int procardID) {
		Procard procard = (Procard) totalDao.getObjectById(Procard.class,
				procardID);
		// 剔除离职、离职中、内退、病休
		String hql = "from ProcessinforPeople where procard.id=? and userId not  in "
				+ "(select id from Users where onWork in('离职','离职中','内退','病休')  )";
		List list = this.totalDao.query(hql, procard.getId());
		return list;
	}

	/*
	 * 根据编号查询外购外委采购(non-Javadoc)
	 * 
	 * @see
	 * com.task.Server.sop.ProcardServer#findWaigouWaiweiPlanByid(java.lang.
	 * Integer)
	 */
	@Override
	public WaigouWaiweiPlan findWaigouWaiweiPlanByid(Integer id) {
		// TODO Auto-generated method stub
		String hql = "from WaigouWaiweiPlan where id=? and type='外购'";
		WaigouWaiweiPlan waigouWaiweiPlan = (WaigouWaiweiPlan) this.totalDao
				.getObjectByCondition(hql, id);
		// WaigouWaiweiPlan waigouWaiweiPlan = (WaigouWaiweiPlan)
		// this.totalDao.getObjectById(WaigouWaiweiPlan.class, id);
		return waigouWaiweiPlan;
	}

	/*
	 * 根据件号查询价格(non-Javadoc)
	 * 
	 * @see com.task.Server.sop.ProcardServer#findPrice(java.lang.String)
	 */
	@Override
	public List findPrice(String markId) {
		// TODO Auto-generated method stub
		String date1 = Util.getDateTime("yyyy-MM-dd");
		// String hql = "from Price where partNumber=? and pricePeriodEnd>?";
		// List list = this.totalDao.query(hql, markId,date1);
		String hql = "from Price where partNumber=?";
		List list = this.totalDao.query(hql, markId);
		return list;
	}

	/*
	 * 查询所有被选中的付款明细(non-Javadoc)
	 * 
	 * @see
	 * com.task.Server.sop.ProcardServer#salWaigouWaiweiPlanByid(java.lang.Integer
	 * [])
	 */
	@Override
	public List salWaigouWaiweiPlanByid(Integer[] detailSelect) {
		// TODO Auto-generated method stub
		List<WaigouWaiweiPlan> WaigouWaiweiPlanList = new ArrayList<WaigouWaiweiPlan>();
		if (detailSelect != null && detailSelect.length > 0) {
			for (int i = 0; i < detailSelect.length; i++) {// 遍历处理状态
				String hql = "from WaigouWaiweiPlan where id=? and type='外购'";
				WaigouWaiweiPlan waigouWaiweiPlan = (WaigouWaiweiPlan) this.totalDao
						.getObjectByCondition(hql, detailSelect[i]);
				// WaigouWaiweiPlan waigouWaiweiPlan = (WaigouWaiweiPlan)
				// this.totalDao.getObjectById(WaigouWaiweiPlan.class,
				// detailSelect[i]);
				WaigouWaiweiPlanList.add(waigouWaiweiPlan);
			}
		}
		return WaigouWaiweiPlanList;
	}

	/*
	 * 根据编号查询(外委) (non-Javadoc)
	 * 
	 * @see
	 * com.task.Server.sop.ProcardServer#findWaigouWaiweiPlanByid1(java.lang
	 * .Integer)
	 */
	@Override
	public WaigouWaiweiPlan findWaigouWaiweiPlanByid1(Integer id) {
		// TODO Auto-generated method stub
		String hql = "from WaigouWaiweiPlan where id=? and type='外委'";
		WaigouWaiweiPlan waigouWaiweiPlan = (WaigouWaiweiPlan) this.totalDao
				.getObjectByCondition(hql, id);
		return waigouWaiweiPlan;
	}

	/*
	 * 查询所有被选中的付款明细(外委)(non-Javadoc)
	 * 
	 * @see
	 * com.task.Server.sop.ProcardServer#salWaigouWaiweiPlanByid1(java.lang.
	 * Integer[])
	 */
	@Override
	public List salWaigouWaiweiPlanByid1(Integer[] detailSelect) {
		List<WaigouWaiweiPlan> WaigouWaiweiPlanList = new ArrayList<WaigouWaiweiPlan>();
		if (detailSelect != null && detailSelect.length > 0) {
			for (int i = 0; i < detailSelect.length; i++) {// 遍历处理状态
				String hql = "from WaigouWaiweiPlan where id=? and type='外委'";
				WaigouWaiweiPlan waigouWaiweiPlan = (WaigouWaiweiPlan) this.totalDao
						.getObjectByCondition(hql, detailSelect[i]);
				WaigouWaiweiPlanList.add(waigouWaiweiPlan);
			}
		}
		return WaigouWaiweiPlanList;
	}

	@Override
	public String checkProcard(Integer[] inorderId, Float[] number, String tag) {
		// TODO Auto-generated method stub
		if (inorderId != null && inorderId.length > 0 && number != null
				&& number.length > 0) {
			for (int i = 0; i < inorderId.length; i++) {
				if (number[i] > 0) {
					Integer id = inorderId[i];
					String productStyle = "批产";
					if ("sz".equals(tag)) {
						productStyle = "试制";
					}
					String totalMarkId = (String) totalDao
							.getObjectByCondition(
									"select markId from ProcardTemplate where rootId=id and productStyle=? and markId=(select pieceNumber from InternalOrderDetail where id=?)",
									productStyle, id);
					if (totalMarkId == null) {
						return "第" + (i + 1) + "条内部计划没有找到对应的" + productStyle
								+ "BOM";
					}
					// 判断各种比例是否存在
					String sql = " from ProcardTemplate where rootId=(select id from ProcardTemplate where rootId=id and productStyle='批产' and markId=(select pieceNumber from InternalOrderDetail where id=?)) and"
							+ "( (procardStyle in ('组合','自制') and corrCount is  null) or "
							+ "((procardStyle='外购' or ((procardStyle='自制' or danjiaojian='单交件') and (lingliaostatus is null or lingliaostatus='是')) )and (quanzi1 is null or quanzi2 is null)))";
					List<ProcardTemplate> unPassList = totalDao.query(sql, id);
					if (unPassList.size() > 0) {
						for (ProcardTemplate pt1 : unPassList) {
							if (pt1.getProductStyle() != null
									&& pt1.getProductStyle().equals("组合")) {
								return "组合件" + pt1.getMarkId()
										+ "与上层的数量关系没有!,生成卡片失败!";
							}
							if (pt1.getProductStyle() != null
									&& pt1.getProductStyle().equals("自制")) {
								if (pt1.getCorrCount() == null) {
									return "自制件" + pt1.getMarkId()
											+ "与上层的数量关系没有!,生成卡片失败!";
								} else {
									return "自制件" + pt1.getMarkId()
											+ "的原材料权值比例没有!,生成卡片失败!";
								}
							}
							if (pt1.getProductStyle() != null
									&& pt1.getProductStyle().equals("外购")) {
								return "外购件" + pt1.getMarkId()
										+ "的权值比例没有!,生成卡片失败!";
							}
							if (pt1.getDanjiaojian() != null
									&& pt1.getDanjiaojian().equals("单交件")) {
								return "单交件" + pt1.getMarkId()
										+ "的原材料权值比例没有!,生成卡片失败!";
							}
							// if (pt1.getMaxCount() == null) {
							// return "总成件号为：" + pt1.getRootMarkId()
							// + "的BOM最大批次数有异常，请重新计算最大批次量!";
							// }
						}
					}
					String sql2 = "select markId from ProcardTemplate where rootId=(select id from ProcardTemplate where rootId=id and productStyle='批产' and markId=(select pieceNumber from InternalOrderDetail where id=?)) "
							+ "and (procardStyle in('总成','组合','自制') or (procardStyle ='外购' and needProcess='yes')) "
							+ "and id not in (select procardTemplate.id from ProcessTemplate where procardTemplate.id in(select id from ProcardTemplate where rootId =(select id from ProcardTemplate where rootId=id and productStyle='批产' and markId=(select pieceNumber from InternalOrderDetail where id=?))))";
					List<String> markIdList = totalDao.query(sql2, id, id);
					if (markIdList.size() > 0) {
						StringBuffer sb = new StringBuffer();
						sb.append("件号：(");
						int n = 0;
						for (String markId : markIdList) {
							if (n == 0) {
								sb.append(markId);
							} else {
								sb.append("," + markId);
							}
							n++;
						}
						sb.append(")没有工序,生成卡片失败!");
						return sb.toString();
					}
					return "true";
				}
			}
		} else {
			return "参数有误";
		}
		return null;

	}

	public LEDServer getLedServer() {
		return ledServer;
	}

	public void setLedServer(LEDServer ledServer) {
		this.ledServer = ledServer;
	}

	public static void main(String[] args) {

		// new LedSendServer(1).start();

		// int num = 1020010;
		//
		// // 打开电源
		// Socket s;
		// try {
		// s = new Socket("192.168.0.114", 8999);
		// BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s
		// .getOutputStream()));
		// // String[] strs = (num + "").split("");
		// // char[] strChar = new char[7];
		// // for (int i = 1; i < strs.length; i++) {
		// // int ic = Integer.parseInt(strs[i]);
		// // char ch = (char) (ic);
		// // strChar[i - 1] = ch;
		// // }
		// // bw.write(strChar);
		// bw.write(new char[] { 0, 0x7f, 00, 00, 00, 00, 00 });
		// // bw.newLine();
		// bw.flush();
		// bw.close();
		// s.close();
		//
		// // OutputStream out = s.getOutputStream();
		// // out.write(0x100);
		// // out.close();
		// // s.close();
		//
		// // Socket socket = new Socket("192.168.0.49", 8899);
		// // BufferedInputStream bis = new BufferedInputStream(socket
		// // .getInputStream());
		// // String oneString = readBis(bis);// 先接收第一个字符
		// // System.out.println(oneString);
		// } catch (Exception e) {
		// e.printStackTrace();
		// }
		//
		// String ip = "192.168.0.41";
		// String port = "8899";
		// Socket socket;
		// try {
		// socket = new Socket(ip, Integer.parseInt(port));
		// // 读取数据
		// BufferedInputStream bis = new BufferedInputStream(socket
		// .getInputStream());
		// Float nowreceiveNumber = 5F;
		// for (int i = 0; i < nowreceiveNumber; i++) {
		// // 每次接收的数据
		// String oneString = readBis(bis);// 先接收第一个字符
		// System.out.print(oneString);
		//
		// // 如果第一个字符是 "AA",说明是正在生产中，并且是持续的传递单件产品的生产节拍
		// if ("AA".equals(oneString)) {
		// // AA 00 00 00 07 00 00 00 04 02 01 FF
		//
		// // 截取生产节拍 "00 00 00 07"==生产节拍
		// Integer nowJiepai = 0;
		// String nowJiepai_str = "";
		// for (int j = 0; j < 4; j++) {
		// String jiepai_data2 = readBis(bis);
		// nowJiepai_str += Integer.parseInt(jiepai_data2);// 累计节拍字符
		// System.out.print(jiepai_data2);
		// }
		// nowJiepai = Integer.parseInt(nowJiepai_str);// 生产节拍
		//
		// // 截取生产能耗 "00 00. 00 04 02 01"==能耗
		// Float nowNenghao = 0F;
		// String nowNenghao_str = "";
		// // 先截取前两位
		// for (float j = 0; j < 2; j++) {
		// String nenghao_data2 = readBis(bis);
		// nowNenghao_str += Integer.parseInt(nenghao_data2);// 累计节拍字符
		// System.out.print(nenghao_data2);
		// }
		// nowNenghao_str += ".";// 添加小数点
		// // 再截取后四位
		// for (float j = 0; j < 4; j++) {
		// String nenghao_data2 = readBis(bis);
		// nowNenghao_str += Integer.parseInt(nenghao_data2);// 累计节拍字符
		// System.out.print(nenghao_data2);
		// }
		// nowNenghao = Float.parseFloat(nowNenghao_str);
		//
		// // 读取最后的FF
		// String lastString = readBis(bis);
		// System.out.println(lastString);
		//
		// // 输出计算结果
		// System.out.print("节拍:" + nowJiepai_str + "转换后数值:"
		// + nowJiepai);
		// System.out.println("能耗" + nowNenghao_str + "转换后数值:"
		// + nowNenghao);
		//
		// if (lastString.equals("FF")) {
		// // 当领取数量全部完成的时候，关闭电源
		// if ((i + 1) == nowreceiveNumber) {
		// // 打开电源
		// Socket s2;
		// try {
		// s2 = new Socket("192.168.0.41", 8899);
		// BufferedWriter bw2 = new BufferedWriter(
		// new OutputStreamWriter(s2
		// .getOutputStream()));
		// bw2.write(0);
		// bw2.newLine();
		// bw2.flush();
		// bw2.close();
		// s2.close();
		// } catch (Exception e) {
		// e.printStackTrace();
		// }
		// // 增加循环次数，用于读取待机能耗
		// i--;
		// }
		// }
		//
		// } else if ("CC".equals(oneString)) {
		// // CC 表示已经断电，显示获取待机能耗
		// // 数据 CC 00 00. 00 00 00 00 DD
		// Float nowNenghao = 0F;
		// String nowNenghao_str = "";
		// // 先截取前两位
		// for (float j = 0; j < 2; j++) {
		// String nenghao_data2 = readBis(bis);
		// nowNenghao_str += Integer.parseInt(nenghao_data2);// 累计节拍字符
		// System.out.print(nenghao_data2);
		// }
		// nowNenghao_str += ".";// 添加小数点
		// // 再截取后四位
		// for (float j = 0; j < 4; j++) {
		// String nenghao_data2 = readBis(bis);
		// nowNenghao_str += Integer.parseInt(nenghao_data2);// 累计节拍字符
		// System.out.print(nenghao_data2);
		// }
		// nowNenghao = Float.parseFloat(nowNenghao_str);
		// System.out.println("电源关闭了,待机能耗:" + nowNenghao);
		// break;
		// }
		// }
		// bis.close();
		// socket.close();
		//
		// } catch (Exception e) {
		// e.printStackTrace();
		// }

		// try {
		// Socket s;
		// s = new Socket("192.168.0.49", 8899);
		// BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s
		// .getOutputStream()));
		// bw.write(new char[] { 0x7e });// 每次打开前,先重置下
		// bw.flush();
		//
		// // for (int i = 0; i < 100000; i++) {
		// // System.out.println("延时:" + i);
		// // }
		// //
		// // String num_str = (1 * 10000 + 0) + "0" + 5;
		// // String[] strs = num_str.split("");
		// // char[] strChar = new char[7];
		// // for (int i = 1; i < strs.length; i++) {
		// // int ic = Integer.parseInt(strs[i]);
		// // char ch = (char) (ic);
		// // strChar[i - 1] = ch;
		// // }
		// // bw.write(strChar);
		// // bw.flush();
		// bw.close();
		// s.close();
		// } catch (UnknownHostException e) {
		// e.printStackTrace();
		// } catch (IOException e) {
		// e.printStackTrace();
		// }
		// try {
		// Class cache = Integer.class.getDeclaredClasses()[0]; // 1
		// Field myCache = cache.getDeclaredField("cache"); // 2
		// myCache.setAccessible(true);// 3
		//
		// Integer[] newCache = (Integer[]) myCache.get(cache); // 4
		// newCache[132] = newCache[133]; // 5
		//
		// int a = 2;
		// int b = a + a;
		// System.out.printf("%d + %d = %d", a, a, b); //
		// } catch (SecurityException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (NoSuchFieldException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (IllegalArgumentException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (IllegalAccessException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
		// LedSendUtilTest.OnAddtext(2, "test", 1);

		// char[] sz = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',
		// 'B', 'C', 'D', 'E', 'F' };
		// Integer num = 100;
		// char[] buf = new char[32];
		// int charPos = 32;
		// int radix = 1 << 4;
		// int mask = radix - 1;
		// do {
		// buf[--charPos] = sz[num & mask];
		// num >>>= 4;
		// } while (num != 0);
		// System.out.println(buf);
		//
		// num = 100;
		// List list = new ArrayList();
		//
		// System.out.println(list.get(100));
		System.out.println("20180600001-5".substring(0, 11));

	}

	public static String toHexString(String s) {
		String str = "";
		for (int i = 0; i < s.length(); i++) {
			int ch = (int) s.charAt(i);
			String s4 = Integer.toHexString(ch);
			str = str + s4;
		}
		return str;
	}

	/***
	 * 读取数据
	 * 
	 * @param bis
	 * @return
	 * @throws Exception
	 */
	private static String readBis(InputStream bis) throws Exception {
		// 再截取后四位
		byte[] nenghao_data = new byte[1];// 先接收第一个字符
		bis.read(nenghao_data);// 读取数据
		return Util.byteArrayToHexString(nenghao_data);
	}

	/****
	 * 批产产品节拍矫正
	 * 
	 * @return
	 */
	@Override
	@SuppressWarnings("unchecked")
	public String jisunLpPeoPleJiepai(String setDate, String endDate,
			String markid, String month) {
		Long time1 = new Date().getTime();
		// String hql =
		// "select sellMarkId,sellCount,sellLot from Sell where sellTime between '"
		// + setDate + "' and  '" + endDate + "' and sellWarehouse='成品库' ";
		String hql = "select sellMarkId,sellCount,sellLot from Sell WHERE sellWarehouse='成品库' and sellTime between '"
				+ setDate + "' and  '" + endDate + "'";
		if (markid != null && markid.length() > 0) {
			hql += " and sellMarkId ='" + markid + "'";
		}
		hql += " order by sellMarkId,sellLot desc";
		// and sellLot='20150900001' and sellMarkId='1KD253059AS'
		List<Object[]> goodList = totalDao.query(hql);
		Map<String, Object[]> map = new HashMap<String, Object[]>();
		for (int i = 0, len = goodList.size(); i < len; i++) {
			Object[] obj = goodList.get(i);
			String sellMarkId = (String) obj[0];// 产品件号
			Float sellCount = Float.valueOf(obj[1].toString());// 产品数量
			String sellLot = (String) obj[2];// 产品批次
			if (sellCount == null) {
				sellCount = 0F;
			}
			// 查询历史已入库的数量
			String hql_gs = "select sum(goodsStoreCount) from GoodsStore where  goodsStoreTime < ? and goodsStoreMarkId=? and goodsStoreLot=? and goodsStoreWarehouse='成品库'";
			Float goodsStoreCount = (Float) totalDao.getObjectByCondition(
					hql_gs, "2015-07-26 09:00:00", sellMarkId, sellLot);
			if (goodsStoreCount != null && goodsStoreCount > 0) {
				sellCount -= goodsStoreCount;
			}
			if (sellCount < 0) {
				sellCount = 0F;
			}

			Float count = 0F;
			Object[] getobj = map.get(sellMarkId + sellLot);
			if (getobj != null) {
				count = (Float) getobj[2];
			}
			count += sellCount;
			Object[] obj_sell = { sellMarkId, sellLot, count };
			if (count > 0) {
				map.put(sellMarkId + sellLot, obj_sell);
			} else {
				map.remove(sellMarkId + sellLot);
			}
		}

		// 查询出 "大众059系列 " 累计计价
		Map<String, Float> map_price = new HashMap<String, Float>();
		String hqltyStyle = "select distinct(pricestyle) from Tijiangprice where priceTjStyle='累计计价' and pricedefault='正常使用'";
		List list = totalDao.query(hqltyStyle);
		if (null != list) {
			for (int i = 0; i < list.size(); i++) {
				String priceStyle = (String) list.get(i);
				String hql2 = "select sum(sellCount) as count from Sell where sellDate between '"
						+ setDate
						+ "' and  '"
						+ endDate
						+ "' and  sellWarehouse='成品库' and sellMarkId in"
						+ "(select distinct(pricemarkId) from Tijiangprice where priceTjStyle='累计计价' and pricestyle='"
						+ priceStyle + "')";
				List otherList = totalDao.query(hql2);
				// 实际算法
				if (otherList != null && otherList.size() > 0) {
					// 计算出总数量
					Float count = Float.valueOf(otherList.get(0).toString());// 实际入库数量（总数量）
					/*
					 * 遍历件号，查询单价，计算单个件号的总额 查询累计的件号
					 */
					String hqlMarkId = "select distinct(pricemarkId) from Tijiangprice where priceTjStyle='累计计价' and pricestyle='"
							+ priceStyle + "' ";
					List tijLiset = totalDao.query(hqlMarkId);
					if (null != tijLiset) {
						for (int t = 0; t < tijLiset.size(); t++) {
							// 查询各个件号
							String markId = (String) tijLiset.get(t);
							// 单个件号的数量
							String hqlmarkIdCount = "select sum(sellCount) as count from Sell where sellDate between '"
									+ setDate
									+ "' and  '"
									+ endDate
									+ "' and sellWarehouse='成品库' and sellMarkId ='"
									+ markId + "')";
							// 判断该件号入库情况
							Float rukuCount = (Float) totalDao
									.getObjectByCondition(hqlmarkIdCount);
							if (rukuCount != null) {
								String hql3 = "from Tijiangprice where priceTjStyle='累计计价' and pricesenacount<? and priceendcount>? and pricedefault='正常使用' and pricemarkId='"
										+ markId + "'";
								List tijiangList = totalDao.query(hql3, count,
										count);
								if (tijiangList != null
										&& tijiangList.size() > 0) {
									Tijiangprice tijiangprice = (Tijiangprice) tijiangList
											.get(0);
									map_price.put(markId, tijiangprice
											.getNewPrice());
								}
							}
						}
					}
				}
			}
		}
		// Float count = 0f;
		// for (String key : map.keySet()) {
		// Object[] getobj = map.get(key);
		// if (getobj[2] != null) {
		// count = count + Float.valueOf(getobj[2].toString());
		// }
		// }
		// System.out.println(count);
		// return null;
		String mes = "";
		Object[] markMoney = new Object[2];
		for (String key2 : map.keySet()) {
			Object[] getobj2 = map.get(key2);
			String markId = getobj2[0].toString();
			String selfCard = getobj2[1].toString();
			Procard procard_root = (Procard) totalDao.getObjectByCondition(
					"from Procard where markId=? and selfCard=?", markId,
					selfCard);
			if (procard_root != null) {
				List<Procard> procardSet = totalDao
						.query(
								"from Procard where rootId=?  and (procardStyle in('总成','组合','自制') or "
										+ "(procardStyle ='外购' and needProcess='yes'))",
								procard_root.getId());
				for (Procard procard : procardSet) {
					Set<ProcessInfor> processSet = procard.getProcessInforSet();
					if (processSet != null && processSet.size() > 0) {
						Float processAlljipai = 0f;
						for (ProcessInfor process : processSet) {
							if (!"自制".equals(process.getProductStyle())
									|| "false".equals(process.getIsPrice())) {
								continue;
							}
							Float logAlljipai = 0f;
							List<ProcessInforReceiveLog> processLogList = totalDao
									.query(
											"from ProcessInforReceiveLog where fk_processInforId=?  and fk_pirLId is null and status='提交' and submitNumber>0",
											process.getId());
							if (processLogList.size() > 0) {
								for (ProcessInforReceiveLog processLog : processLogList) {
									if (processLog.getFirstApplyDate() != null
											&& processLog.getFirstApplyDate()
													.length() > 0
											&& processLog.getSumitApplyDate() != null
											&& processLog.getSumitApplyDate()
													.length() > 0) {
										// 如果是特殊工序,则该工序的节拍直接默认为标准工序
										if ("特殊".equals(process.getIsSpecial())) {
											Float yxTime = processLog
													.getSubmitNumber()
													* (process
															.getOpcaozuojiepai()
															+ process
																	.getOpshebeijiepai() + process
															.getGzzhunbeijiepai()
															* process
																	.getGzzhunbeicishu());
											processLog.setAllJiepai(yxTime);
											processLog.setNowCsJiepai(0F);
											totalDao.update(processLog);
											// 累加明细节拍
											logAlljipai = logAlljipai + yxTime;
										} else {
											try {
												Long youxiaoTime = Util
														.getYouXiaoTime(
																processLog
																		.getFirstApplyDate(),
																processLog
																		.getSumitApplyDate());
												Float yxTime = youxiaoTime
														.floatValue() / 1000;
												if (process.getOpcaozuojiepai() == null) {
													process
															.setOpcaozuojiepai(10F);
												}
												if (process.getOpshebeijiepai() == null) {
													process
															.setOpshebeijiepai(5F);
												}
												if (process
														.getGzzhunbeijiepai() == null) {
													process
															.setGzzhunbeijiepai(1F);
												}
												if (process.getGzzhunbeicishu() == null) {
													process
															.setGzzhunbeicishu(1F);
												}
												// 标准节拍
												Float bzTime = processLog
														.getSubmitNumber()
														* (process
																.getOpcaozuojiepai()
																+ process
																		.getOpshebeijiepai() + process
																.getGzzhunbeijiepai()
																* process
																		.getGzzhunbeicishu());
												processLog
														.setNowCsJiepai(yxTime
																- bzTime);
												if (processLog.getNowCsJiepai() > 0) {
													processLog
															.setAllJiepai(bzTime);
													// 累加明细节拍
													logAlljipai = logAlljipai
															+ bzTime;
												} else {
													processLog
															.setAllJiepai(yxTime);
													// 累加明细节拍
													logAlljipai = logAlljipai
															+ yxTime;
												}
												totalDao.update(processLog);
											} catch (Exception e) {
												e.printStackTrace();
												mes += procard.getMarkId()
														+ "--"
														+ procard.getSelfCard()
														+ "--"
														+ process
																.getProcessNO()
														+ "--"
														+ processLog
																.getFirstApplyDate()
														+ "存在异常";
											}
										}
									}
								}
							}
							process.setNowAllJiepai(logAlljipai);
							totalDao.update(process);
							processAlljipai += logAlljipai;
						}
						procard.setNowAllJiepai(processAlljipai);
						totalDao.update(procard);
					}
				}
			}

		}
		return mes;
	}

	/****
	 * 批产产品奖金分配
	 * 
	 * @return
	 */
	@Override
	@SuppressWarnings("unchecked")
	public Object[] jisunLpPeoPleMoney(String setDate, String endDate,
			String markid, String month) {
		Long time1 = new Date().getTime();
		// String hql =
		// "select sellMarkId,sellCount,sellLot from Sell where sellTime between '"
		// + setDate + "' and  '" + endDate + "' and sellWarehouse='成品库' ";
		String hql = "select sellMarkId,sellCount,sellLot from Sell WHERE sellWarehouse='成品库' and sellTime between '"
				+ setDate + "' and  '" + endDate + "'";
		if (markid != null && markid.length() > 0) {
			hql += " and sellMarkId like '%" + markid + "%'";
		}
		// hql += "and sellLot='20160800006' and sellMarkId='M002398'";
		hql += " order by sellMarkId,sellLot desc";
		List<Object[]> goodList = totalDao.query(hql);
		Map<String, Object[]> map = new HashMap<String, Object[]>();
		for (int i = 0, len = goodList.size(); i < len; i++) {
			Object[] obj = goodList.get(i);
			String sellMarkId = (String) obj[0];// 产品件号
			Float sellCount = Float.valueOf(obj[1].toString());// 产品数量
			String sellLot = (String) obj[2];// 产品批次
			if (sellCount == null) {
				sellCount = 0F;
			}
			// 查询历史已入库的数量
			String hql_gs = "select sum(goodsStoreCount) from GoodsStore where  goodsStoreTime < ? and goodsStoreMarkId=? and goodsStoreLot=? and goodsStoreWarehouse='成品库'";
			Float goodsStoreCount = (Float) totalDao.getObjectByCondition(
					hql_gs, "2015-07-26 09:00:00", sellMarkId, sellLot);
			if (goodsStoreCount != null && goodsStoreCount > 0) {
				sellCount -= goodsStoreCount;
			}
			if (sellCount < 0) {
				sellCount = 0F;
			}

			Float count = 0F;
			Object[] getobj = map.get(sellMarkId + sellLot);
			if (getobj != null) {
				count = (Float) getobj[2];
			}
			count += sellCount;
			Object[] obj_sell = { sellMarkId, sellLot, count };
			if (count > 0) {
				map.put(sellMarkId + sellLot, obj_sell);
			} else {
				map.remove(sellMarkId + sellLot);
			}
		}

		// 查询出 "大众059系列 " 累计计价
		Map<String, Float> map_price = new HashMap<String, Float>();
		String hqltyStyle = "select distinct(pricestyle) from Tijiangprice where priceTjStyle='累计计价' and pricedefault='正常使用'";
		List list = totalDao.query(hqltyStyle);
		if (null != list) {
			for (int i = 0; i < list.size(); i++) {
				String priceStyle = (String) list.get(i);
				String hql2 = "select sum(sellCount) as count from Sell where sellDate between '"
						+ setDate
						+ "' and  '"
						+ endDate
						+ "' and  sellWarehouse='成品库' and sellMarkId in"
						+ "(select distinct(pricemarkId) from Tijiangprice where priceTjStyle='累计计价' and pricestyle='"
						+ priceStyle + "')";
				List otherList = totalDao.query(hql2);
				// 实际算法
				if (otherList != null && otherList.size() > 0) {
					// 计算出总数量
					Float count = Float.valueOf(otherList.get(0).toString());// 实际入库数量（总数量）
					/*
					 * 遍历件号，查询单价，计算单个件号的总额 查询累计的件号
					 */
					String hqlMarkId = "select distinct(pricemarkId) from Tijiangprice where priceTjStyle='累计计价' and pricestyle='"
							+ priceStyle + "' ";
					List tijLiset = totalDao.query(hqlMarkId);
					if (null != tijLiset) {
						for (int t = 0; t < tijLiset.size(); t++) {
							// 查询各个件号
							String markId = (String) tijLiset.get(t);
							// 单个件号的数量
							String hqlmarkIdCount = "select sum(sellCount) as count from Sell where sellDate between '"
									+ setDate
									+ "' and  '"
									+ endDate
									+ "' and sellWarehouse='成品库' and sellMarkId ='"
									+ markId + "')";
							// 判断该件号入库情况
							Float rukuCount = (Float) totalDao
									.getObjectByCondition(hqlmarkIdCount);
							if (rukuCount != null) {
								String hql3 = "from Tijiangprice where priceTjStyle='累计计价' and pricesenacount<? and priceendcount>? and pricedefault='正常使用' and pricemarkId='"
										+ markId + "'";
								List tijiangList = totalDao.query(hql3, count,
										count);
								if (tijiangList != null
										&& tijiangList.size() > 0) {
									Tijiangprice tijiangprice = (Tijiangprice) tijiangList
											.get(0);
									map_price.put(markId, tijiangprice
											.getNewPrice());
								}
							}
						}
					}
				}
			}
		}
		Object[] markMoney = new Object[2];
		for (String key : map.keySet()) {
			Object[] getobj = map.get(key);
			try {
				markMoney = jisuanPiCiMoney(getobj[0].toString(), getobj[1]
						.toString(), Float.parseFloat(getobj[2].toString()),
						map_price.get(getobj[0].toString()), markMoney, month);
			} catch (NumberFormatException e) {
				e.printStackTrace();
			}
		}

		// 临时存储到session
		ActionContext.getContext().getSession().put("lpMonthMoneyMap",
				markMoney[0]);
		Map<String, Object[]> moneyMap = new HashMap<String, Object[]>();
		for (String key : ((Map<String, Object[]>) markMoney[0]).keySet()) {
			String hql_user = "from Users where code=?";
			Users user = (Users) totalDao.getObjectByCondition(hql_user, key);
			if ("是".equals(user.getInternal())) {
				Object[] userobj = { user.getId(), user.getCode(),
						user.getName(), user.getDept(),
						((Map<String, Object[]>) markMoney[0]).get(key) };
				moneyMap.put(key, userobj);
			}
		}
		markMoney[0] = moneyMap;
		Long time2 = new Date().getTime();
		System.out.println((time2 - time1) / 1000);
		return markMoney;
	}

	/****
	 * 计算每批的金额
	 * 
	 * @param markId
	 *            件号
	 * @param selfCard
	 *            批次
	 * @param sellcount
	 *            出库数量
	 * @param price
	 *            价格（存在价格则不在计算单价）
	 */
	@SuppressWarnings("unchecked")
	private Object[] jisuanPiCiMoney(String markId, String selfCard,
			Float sellcount, Float price, Object[] markMoney, String month) {
		Map<String, Float> moneyMap = (Map<String, Float>) markMoney[0];
		Map<String, Object[]> markidMap = (Map<String, Object[]>) markMoney[1];
		if (moneyMap == null) {
			moneyMap = new HashMap<String, Float>();
		}
		if (markidMap == null) {
			markidMap = new HashMap<String, Object[]>();
		}

		// 根据件号&批次查询procard
		String hql_mp = "from Procard where markId=? and selfCard=?";
		Procard procardt = (Procard) totalDao.getObjectByCondition(hql_mp,
				markId, selfCard);
		// 只计算批产产品
		if (procardt == null || !"批产".equals(procardt.getProductStyle())) {
			return markMoney;
		}

		String hql_wagest = "from ProcardTemplate where markId=? and procardStyle='总成' and productStyle='批产'";
		ProcardTemplate pt = (ProcardTemplate) totalDao.getObjectByCondition(
				hql_wagest, procardt.getMarkId());
		if (pt == null) {
			return markMoney;
		}

		procardt.setSellCount(sellcount);
		Float chukubi = sellcount / procardt.getFilnalCount();// 出库比值=出库量/总数量

		List<Procard> procardSet = totalDao.query(
				"from Procard where rootId=? and (procardStyle in('总成','组合','自制') or "
						+ "(procardStyle ='外购' and needProcess='yes'))",
				procardt.getId());

		Double allProcessWages = 0.0; // 此组件工序工资
		Double allOPSynthesizeStrength = 0.0; // 操作过程综合强度
		Double allPRSynthesizeStrength = 0.0; // 准备过程综合强度

		Double allOPSynthesizeCoefficient = 0.0; // 操作过程综合系数(add)
		Double allPRSynthesizeCoefficient = 0.0; // 操作过程综合系数(add)

		/**
		 * 操作过程
		 */
		Double OPSkillIndex = 0.0; // 操作技能指数
		Double OPNotReplaceCoefficient = 0.0; // 不可替换系数
		Double OPLoadIndex = 0.0; // 负荷指数
		Double OPLabourBeat = 0.0; // 人工节拍
		/**
		 * 准备过程
		 */
		Double PRSkillIndex = 0.0;// 技能指数
		Double PRNotReplaceCoefficient = 0.0; // 不可替换系数
		Double PRLoadIndex = 0.0; // 负荷指数
		Double PRLabourBeat = 0.0; // 人工节拍
		/**
		 * 遍历算 所有工序工资 求出技能指数 、可替换人数、负荷指数、人工节拍各总和
		 */
		for (Procard procardTemplate : procardSet) {
			Set<ProcessInfor> processset = procardTemplate.getProcessInforSet(); // 此组件需要的工序

			/******** !!!!!!!!!!!存在单价，不再计算人工费用 *********/
			/**
			 * 遍历一个组件所需要的工序
			 */
			for (ProcessInfor processT : processset) {
				// 外委或者不参与奖金分配的工序排除
				if (!"自制".equals(processT.getProductStyle())
						|| "false".equals(processT.getIsPrice())) {
					continue;
				}
				if (processT.getNowAllJiepai() == null
						|| processT.getNowAllJiepai() == 0) {
					continue;
				}
				if (price == null) {
					// 遍历所有的工序领取记录,统计所有的领取人员
					String hql_prolog = "from ProcessInforReceiveLog where fk_processInforId=? and fk_pirLId is null and status='提交' and submitNumber>0";
					List<ProcessInforReceiveLog> list = totalDao.query(
							hql_prolog, processT.getId());
					Map<String, String> nameMap = new HashMap<String, String>();
					Float lingquAllJiepai = 0F;
					for (ProcessInforReceiveLog pirl : list) {
						String userCodes = pirl.getUsercodes();
						String[] codes = userCodes.split(",");
						for (String code : codes) {
							String userCode = nameMap.get(code);
							if (userCode == null) {
								nameMap.put(code, code);
							}
						}
						/**************** 统计工序领取节拍 *********/
						if (pirl.getAllJiepai() != null) {
							if (pirl.getNowCsJiepai() != null
									&& pirl.getNowCsJiepai() > 0) {
								lingquAllJiepai += pirl.getAllJiepai();
								// - pirl.getNowCsJiepai();
							} else
								lingquAllJiepai += pirl.getAllJiepai();
						}
						if (pirl.getAllDjJiepai() != null) {
							lingquAllJiepai += pirl.getAllDjJiepai();
						}
						/**************** 统计工序领取节拍 *********/
					}
					processT.setNowAllJiepai(lingquAllJiepai);
					Double workingHoursWages = 0.0; // 工序工时工资
					for (String jobNum : nameMap.keySet()) { // 统计工序中基本工时工资
						WageStandard wageStandard = wss.findWSByUser(jobNum); // 根据工号查询工资模板
						if (wageStandard == null) {
							continue;
						}
						InsuranceGold insuranceGold = igs
								.findInsuranceGoldBylc(wageStandard
										.getLocalOrField(), wageStandard
										.getCityOrCountryside(), wageStandard
										.getPersonClass()); // 福利系数（计算公司缴纳的保险成本）
						// 单工序总成本（当月个人人力成本）
						workingHoursWages += (wageStandard.getGangweigongzi()
								+ wageStandard.getSsBase()
								* (insuranceGold.getQYoldageInsurance()
										+ insuranceGold.getQYmedicalInsurance()
										+ insuranceGold
												.getQYunemploymentInsurance()
										+ insuranceGold.getQYinjuryInsurance() + insuranceGold
										.getQYmaternityInsurance()) / 100 + wageStandard
								.getGjjBase()
								* insuranceGold.getQYhousingFund() / 100);
					}

					Double basicWorkingHoursWages = workingHoursWages
							/ nameMap.size() / SECONDS; // 工序中基本工时工资(秒工资=单工序总成本/21.5天)
					Double processWages = basicWorkingHoursWages
							* processT.getNowAllJiepai();

					allProcessWages = allProcessWages + processWages; // 所有工序人工成本
				}
				/**
				 * 操作过程统计
				 */
				if (processT.getOptechnologyRate() != null)
					OPSkillIndex += processT.getOptechnologyRate() == null ? 0
							: processT.getOptechnologyRate(); // 统计技能指数
				if (processT.getOpnoReplaceRate() != null)
					OPNotReplaceCoefficient += processT.getOpnoReplaceRate() == null ? 0
							: processT.getOpnoReplaceRate(); // 统计不可替换系数
				if (processT.getOpfuheRate() != null)
					OPLoadIndex += processT.getOpfuheRate() == null ? 0
							: processT.getOpfuheRate(); // 统计负荷指数
				// 统计人工节拍
				if (processT.getNowAllJiepai() != null) {
					OPLabourBeat += processT.getNowAllJiepai();// ！！！！！！！！！将工序的总节拍作为操作过程的总节拍
				}
				/**
				 * 准备过程统计
				 */
				PRSkillIndex += processT.getGztechnologyRate() == null ? 0
						: processT.getGztechnologyRate(); // 统计技能指数
				PRNotReplaceCoefficient += processT.getGznoReplaceRate() == null ? 0
						: processT.getGznoReplaceRate(); // 统计不可替换系数
				PRLoadIndex += processT.getGzfuheRate() == null ? 0 : processT
						.getGzfuheRate(); // 统计负荷指数
				// if (processT.getGzzhunbeijiepai() != null)
				PRLabourBeat += 0F; // 统计人工节拍！！！！！！！！！！！！！！！（当前无法得到准备过程的节拍信息，暂时设置为0）
			}
		}

		for (Procard procardTemplate : procardSet) {
			Set<ProcessInfor> processset = procardTemplate.getProcessInforSet(); // 此组件需要的工序
			/*** 先计算出所有工序的总系数 ***/
			for (ProcessInfor processT : processset) {
				// 外委或者不参与奖金分配的工序排除
				if (!"自制".equals(processT.getProductStyle())
						|| "false".equals(processT.getIsPrice())) {
					continue;
				}
				if (processT.getNowAllJiepai() == null
						|| processT.getNowAllJiepai() == 0) {
					continue;
				}

				Double dtoOPla = 0.0;// 操作人工节拍！！！ ！！！！！！！！！将工序的总节拍作为操作过程的总节拍
				Double dtoPRla = 0.0;// 准备过程人工节拍！！！！！！！！！！！！！！！（当前无法得到准备过程的节拍信息，暂时设置为0）
				if (processT.getNowAllJiepai() != null)
					dtoOPla = processT.getNowAllJiepai().doubleValue();
				// if (processT.getGzzhunbeijiepai() != null)
				// dtoPRla = processT.getGzzhunbeijiepai().doubleValue();
				Double OPcannot = 0.0;// 操作不可替换系数
				Double PRcannot = 0.0;// 准备过程不可替换系数
				if (processT.getOpnoReplaceRate() != null)
					OPcannot = processT.getOpnoReplaceRate().doubleValue();
				if (processT.getGznoReplaceRate() != null)
					PRcannot = processT.getGznoReplaceRate().doubleValue();
				// 操作过程 综合系数(非空验证)
				if (processT.getOptechnologyRate() == null) {
					processT.setOptechnologyRate(0F);
				}
				if (processT.getOpfuheRate() == null) {
					processT.setOpfuheRate(0F);
				}

				Double OPSynthesizeCoefficient = ConvertNumber.isNum(processT
						.getOptechnologyRate().doubleValue(), OPSkillIndex)
						+ ConvertNumber
								.isNum(OPcannot, OPNotReplaceCoefficient)
						+ ConvertNumber.isNum(processT.getOpfuheRate()
								.doubleValue(), OPLoadIndex)
						+ ConvertNumber.isNum(dtoOPla, OPLabourBeat);
				// 统计操作综合系数
				allOPSynthesizeCoefficient = allOPSynthesizeCoefficient
						+ OPSynthesizeCoefficient;

				// 准备过程 综合系数
				if (processT.getGztechnologyRate() == null) {
					processT.setGztechnologyRate(0F);
				}
				if (processT.getGzfuheRate() == null) {
					processT.setGzfuheRate(0F);
				}
				Double PRSynthesizeCoefficient = ConvertNumber.isNum(processT
						.getGztechnologyRate().doubleValue(), PRSkillIndex)
						+ ConvertNumber
								.isNum(PRcannot, PRNotReplaceCoefficient)
						+ ConvertNumber.isNum(processT.getGzfuheRate()
								.doubleValue(), PRLoadIndex)
						+ ConvertNumber.isNum(dtoPRla, PRLabourBeat);

				// 统计准备综合系数
				allPRSynthesizeCoefficient += PRSynthesizeCoefficient;

				// 操作过程 综合强度 = 综合系数 * 交付数量
				Double OPsynthesizeStrength = OPSynthesizeCoefficient
						* processT.getTotalCount();

				allOPSynthesizeStrength += OPsynthesizeStrength; // 统计单个零件操作过程所有工序强度
				// 准备过程 综合强度 = 综合系数 * 准备次数

				if (processT.getGzzhunbeicishu() == null) {
					processT.setGzzhunbeicishu(1F);
				}
				Double PRSynthesizeStrength = 0.0;
				PRSynthesizeStrength = PRSynthesizeCoefficient
						* processT.getGzzhunbeicishu();
				allPRSynthesizeStrength += PRSynthesizeStrength; // 统计单个零件准备过程所有工序强度
			}
		}

		// 销售单价
		Float sellPrice = pt.getLaborcost() == null ? 0F : pt.getLaborcost();
		// 调整比例
		Float fenpeiRate = pt.getFenpeiRate() == null ? 0F : pt.getFenpeiRate();
		// 部留比例
		Float buliubi = 0.05F;// (5%的部留)

		Double mentioningAwardPrice = 0D;
		if (price != null) {
			mentioningAwardPrice = price.doubleValue();
		} else {
			/******* (( 入库量 * 报价费用 * 可调系数) -所有工序人工成本工资) / 入库量*出库比=单件价格 *****/
			mentioningAwardPrice = (procardt.getFilnalCount() * sellPrice
					* fenpeiRate - allProcessWages)
					/ procardt.getFilnalCount();
		}

		/*********** 单件价格 ************/
		procardt.setOnePeice(mentioningAwardPrice.floatValue());

		/*********** ！！！！ 可分配奖金=单件价格*入库量*（1-部留）*出库比！！！！ ************/
		Double distributeBonus = mentioningAwardPrice
				* procardt.getFilnalCount() * (1 - buliubi);

		// 总额
		procardt.setAllMonty(distributeBonus.floatValue() * chukubi);
		// //////记录数据
		Object[] markidobj = { procardt.getId(), procardt.getMarkId(),
				procardt.getSelfCard(), procardt.getSellCount(),
				OPLabourBeat + PRLabourBeat, procardt.getOnePeice(),
				procardt.getAllMonty() };
		markidMap.put(procardt.getMarkId() + procardt.getSelfCard(), markidobj);
		// //////记录数据

		/*********** 操作过程分配比例=sum(综合强度)/[sum(操作综合强度)+sum(准备综合强度)] ************/
		Double OPdistributeProportion = allOPSynthesizeStrength
				/ (allOPSynthesizeStrength + allPRSynthesizeStrength);
		/*********** 操作过程分配总额 =可分配奖金(元/月)*分配比例 **********/
		Double OPdistributeTotal = distributeBonus * OPdistributeProportion;
		/**
		 *********** 准备过程分配比例 =sum(综合强度)/[sum(操作综合强度)+sum(准备综合强度)]
		 */
		Double PRdistributeProportion = allPRSynthesizeStrength
				/ (allOPSynthesizeStrength + allPRSynthesizeStrength);
		/****
		 *********** 准备过程分配总额=可分配奖金(元/月)*分配比例
		 */
		Double PRdistributeTotal = distributeBonus * PRdistributeProportion;

		/**
		 * 遍历算出综合强度
		 */
		for (Procard procardTemplate : procardSet) {
			Set<ProcessInfor> processset = procardTemplate.getProcessInforSet(); // 此组件需要的工序
			/**
			 * 遍历一个组件所需要的工序
			 */
			for (ProcessInfor processT : processset) {
				// 外委或者不参与奖金分配的工序排除
				if (!"自制".equals(processT.getProductStyle())
						|| "false".equals(processT.getIsPrice())) {
					continue;
				}
				Double dtoOPla = 0.0;
				Double dtoPRla = 0.0;
				String hql_prolog_sum = "select sum(allJiepai) from ProcessInforReceiveLog where fk_processInforId=? and fk_pirLId is null and status='提交' and submitNumber>0";
				Float sumDAlljiepai = (Float) totalDao.getObjectByCondition(
						hql_prolog_sum, processT.getId());
				if (sumDAlljiepai != null) {
					processT.setNowAllJiepai(sumDAlljiepai);
				}
				if (processT.getNowAllJiepai() == null
						|| processT.getNowAllJiepai() == 0) {
					continue;
				}
				dtoOPla = processT.getNowAllJiepai().doubleValue();

				// if (processT.getGzzhunbeijiepai() != null)
				// dtoPRla = processT.getGzzhunbeijiepai().doubleValue();

				Double OPcannot = 0.0; // 不可替换系数
				Double PRcannot = 0.0;
				if (processT.getOpnoReplaceRate() != null)
					OPcannot = processT.getOpnoReplaceRate().doubleValue();
				if (processT.getGznoReplaceRate() != null)
					PRcannot = processT.getGznoReplaceRate().doubleValue();
				if (processT.getOptechnologyRate() == null)
					processT.setOptechnologyRate(0F);
				if (processT.getOpfuheRate() == null)
					processT.setOpfuheRate(0F);
				if (processT.getGztechnologyRate() == null)
					processT.setGztechnologyRate(0F);
				if (processT.getGzfuheRate() == null)
					processT.setGzfuheRate(0F);

				// 操作过程 综合系数
				Double OPSynthesizeCoefficient = ConvertNumber.isNum(processT
						.getOptechnologyRate().doubleValue(), OPSkillIndex)
						+ ConvertNumber
								.isNum(OPcannot, OPNotReplaceCoefficient)
						+ ConvertNumber.isNum(processT.getOpfuheRate()
								.doubleValue(), OPLoadIndex)
						+ ConvertNumber.isNum(dtoOPla, OPLabourBeat);
				// 准备过程 综合系数
				Double PRSynthesizeCoefficient = ConvertNumber.isNum(processT
						.getGztechnologyRate().doubleValue(), PRSkillIndex)
						+ ConvertNumber
								.isNum(PRcannot, PRNotReplaceCoefficient)
						+ ConvertNumber.isNum(processT.getGzfuheRate()
								.doubleValue(), PRLoadIndex)
						+ ConvertNumber.isNum(dtoPRla, PRLabourBeat);
				// Double OPMoney = OPdistributeTotal *
				// OPSynthesizeCoefficient
				// / OPdistributeProportion; //操作过程 工序该分配金额
				// Double PRMoney = PRdistributeTotal *
				// PRSynthesizeCoefficient
				// / PRdistributeProportion; //准备过程 工序该分配金额

				Double OPMoney = OPdistributeTotal * OPSynthesizeCoefficient
						/ allOPSynthesizeCoefficient; // 操作过程 工序该分配金额 =
				// 操作分配总额 *
				// 综合系数 / sum(综合系数)

				Double PRMoney = 0D;
				if (allPRSynthesizeCoefficient != null
						&& allPRSynthesizeCoefficient > 0) {
					PRMoney = PRdistributeTotal * PRSynthesizeCoefficient
							/ allPRSynthesizeCoefficient; // 准备过程 工序该分配金额 =

					// 准备分配总额 *
					// 综合指数 / sum(综合指数)
				} else {
					PRMoney = 0D;
				}
				Double sumMoney = (OPMoney + PRMoney) * chukubi; // 单工序分配总额*出库比
				/****** !!!!!!!!!!!!!!!!工序总额终于算出来了！！！！！！烟花！！！！！！ ******/
				processT.setProcessAllMoney(sumMoney.floatValue());
				Double unitPrice = sumMoney
						/ (processT.getSubmmitCount() * chukubi); // 单个工序分配金额=分配总额/提交数量
				processT.setProcessMoney(unitPrice.doubleValue());

				// 遍历所有的工序领取记录,为所有的领取人员分配奖金
				String hql_prolog = "from ProcessInforReceiveLog where fk_processInforId=?  and fk_pirLId is null and status='提交' and submitNumber>0";
				List<ProcessInforReceiveLog> list = totalDao.query(hql_prolog,
						processT.getId());
				for (ProcessInforReceiveLog pirl : list) {
					if (pirl.getSubmitNumber() <= 0) {
						continue;
					}
					String userCodes = pirl.getUsercodes();
					String[] codes = userCodes.split(",");
					// int len = codes.length;
					// 查询本次参与工作的人员总等级
					String hql_users = "select sum(dutyLevel) from Users where code in ('"
							+ userCodes.replaceAll(",", "','") + "')";
					Float dutyLevel = (Float) totalDao
							.getObjectByCondition(hql_users);
					if (dutyLevel == 0) {
						dutyLevel = 10F;
					}

					// 计算本次领取的奖金=(本次生产节拍+待机节拍)/工序总节拍*工序总奖金/本次领取的总人数
					Float nowAlljiepai = ((pirl.getAllJiepai() == null ? 0F
							: pirl.getAllJiepai()) + (pirl.getAllDjJiepai() == null ? 0F
							: pirl.getAllDjJiepai()));

					// if (nowMoney > 0) {
					for (String code : codes) {
						String hql_user = "from Users where code =?";
						Users user = (Users) totalDao.getObjectByCondition(
								hql_user, code);
						if (user != null && "是".equals(user.getInternal())) {
							if (user.getDutyLevel() == null
									|| user.getDutyLevel() == 0) {
								user.setDutyLevel(1);
							}
							Float nowMoney = nowAlljiepai
									/ processT.getNowAllJiepai()
									* processT.getProcessAllMoney()
									* user.getDutyLevel() / dutyLevel;// 按照职能等级分配(个人等级/总等级)
							Double nowCsHoursWages = 0D;
							// 超时节拍，扣除个人基本超时对应秒工资
							if (pirl.getNowCsJiepai() > 0) {
								WageStandard wageStandard = wss
										.findWSByUser(code); // 根据工号查询工资模板
								if (wageStandard == null) {
									continue;
								}
								InsuranceGold insuranceGold = igs
										.findInsuranceGoldBylc(
												wageStandard.getLocalOrField(),
												wageStandard
														.getCityOrCountryside(),
												wageStandard.getPersonClass()); // 福利系数（计算公司缴纳的保险成本）
								// 单工序总成本（当月个人人力成本）
								Float workingHoursWages = (wageStandard
										.getGangweigongzi()
										+ wageStandard.getSsBase()
										* (insuranceGold.getQYoldageInsurance()
												+ insuranceGold
														.getQYmedicalInsurance()
												+ insuranceGold
														.getQYunemploymentInsurance()
												+ insuranceGold
														.getQYinjuryInsurance() + insuranceGold
												.getQYmaternityInsurance())
										/ 100 + wageStandard.getGjjBase()
										* insuranceGold.getQYhousingFund()
										/ 100);
								nowCsHoursWages = workingHoursWages / SECONDS
										* pirl.getNowCsJiepai() * chukubi
										* user.getDutyLevel() / dutyLevel;
								nowMoney -= nowCsHoursWages.floatValue();
							}
							Float userMoney = moneyMap.get(code);
							if (userMoney == null) {
								userMoney = nowMoney;
							} else {
								userMoney += nowMoney;
							}
							moneyMap.put(code, userMoney);
							/****** 开始记录个人奖金分配明细 *********/
							String money_hql = "from UserMonthMoney where userId=? and month=?";
							UserMonthMoney userMonthMoney = (UserMonthMoney) totalDao
									.getObjectByCondition(money_hql, user
											.getId(), month);
							if (userMonthMoney == null) {
								userMonthMoney = new UserMonthMoney();
								userMonthMoney.setCode(user.getCode());
								userMonthMoney.setDept(user.getDept());
								userMonthMoney.setUsername(user.getName());
								userMonthMoney.setUserId(user.getId());
								userMonthMoney.setMonth(month);
								userMonthMoney.setMoney(nowMoney);
								userMonthMoney.setAddTime(Util.getDateTime());
							} else {
								if (userMonthMoney.getMoney() == null) {
									userMonthMoney.setMoney(0F);
								}
								userMonthMoney.setMoney(userMonthMoney
										.getMoney()
										+ nowMoney);
							}

							// 计算个人本月总的人工成本
							// 统计工序中基本工时工资
							WageStandard wageStandard = wss.findWSByUser(user
									.getCode()); // 根据工号查询工资模板
							if (wageStandard == null) {
								continue;
							}
							InsuranceGold insuranceGold = igs
									.findInsuranceGoldBylc(wageStandard
											.getLocalOrField(), wageStandard
											.getCityOrCountryside(),
											wageStandard.getPersonClass()); // 福利系数（计算公司缴纳的保险成本）
							// 单工序总成本（当月个人人力成本）
							Float workingHoursWages_1 = (wageStandard
									.getGangweigongzi()
									+ wageStandard.getSsBase()
									* (insuranceGold.getQYoldageInsurance()
											+ insuranceGold
													.getQYmedicalInsurance()
											+ insuranceGold
													.getQYunemploymentInsurance()
											+ insuranceGold
													.getQYinjuryInsurance() + insuranceGold
											.getQYmaternityInsurance()) / 100 + wageStandard
									.getGjjBase()
									* insuranceGold.getQYhousingFund() / 100);

							if (userMonthMoney.getMoney() < 0
									&& -userMonthMoney.getMoney() > workingHoursWages_1) {
								userMonthMoney.setMoney(-workingHoursWages_1);
							}

							Set<UserMoneyDetail> umDetailSet = userMonthMoney
									.getUserdetailSet();
							if (umDetailSet == null) {
								umDetailSet = new HashSet<UserMoneyDetail>();
							}
							// 金额明细
							UserMoneyDetail umDetail = new UserMoneyDetail();
							umDetail.setProcardId(procardt.getId());
							umDetail.setMarkIdRoot(procardt.getMarkId());// 总成件号
							umDetail.setSelfCard(procardt.getSelfCard());// 总成批次
							umDetail.setProcardRootId(procardTemplate
									.getRootId());// 零件id
							umDetail.setMarkId(procardTemplate.getMarkId());// 零件件号
							umDetail.setProName(procardTemplate.getProName());// 零件名称
							umDetail
									.setProductStyle(procardt.getProductStyle());
							umDetail.setProcessInforId(processT.getId());
							umDetail.setProcessNO(processT.getProcessNO());
							umDetail.setProcessName(processT.getProcessName());
							umDetail.setGongwei(processT.getGongwei());
							umDetail.setReceiveLogId(pirl.getId());
							umDetail
									.setFirstApplyDate(pirl.getFirstApplyDate());
							umDetail.setSubmitDate(pirl.getSumitApplyDate());
							umDetail.setSubmmitCount(pirl.getSubmitNumber()
									* chukubi);
							umDetail.setSubmmitJiepai(nowAlljiepai * chukubi);
							umDetail
									.setNowCsJiepai(pirl.getNowCsJiepai()
											* user.getDutyLevel() / dutyLevel
											* chukubi);
							umDetail.setNowMoney(nowMoney);
							umDetail
									.setNowKcMoney(nowCsHoursWages.floatValue());
							umDetail.setAddTime(Util.getDateTime());
							umDetail.setUserMonthMoney(userMonthMoney);
							umDetailSet.add(umDetail);
							userMonthMoney.setUserdetailSet(umDetailSet);
							if (userMonthMoney.getId() != null) {
								totalDao.update(userMonthMoney);
							} else {
								totalDao.save(userMonthMoney);
							}
						} else {

						}
					}
					// }
				}

			}
		}
		totalDao.update(procardt);
		// 返回值
		markMoney[0] = moneyMap;
		markMoney[1] = markidMap;
		return markMoney;
	}

	/***
	 * 根据id查询月度奖金分配
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public UserMonthMoney findUserMonthMoneyById(Integer id) {
		return (UserMonthMoney) totalDao
				.getObjectById(UserMonthMoney.class, id);
	}

	@Override
	public List findByUserCodeMonthMoney(String code) {
		String shangMonth = Util.getDateTime("yyyy") + "-01月";
		String lastMonth = Util.getDateTime("yyyy") + "-12月";
		String hql = " month between '" + shangMonth + "' and '" + lastMonth
				+ "'";
		return totalDao.query(
				"from UserMonthMoney where code = ? and sqstatus = '已发放' and"
						+ hql, code);
	}

	// Android-根据id查询奖金
	public Object[] androidfindbonus(String code, int pageNo1, int pageSize1) {
		if (code != null && code.length() > 0) {
			String hql = "from UserMonthMoney where code=? order by month desc";
			List list = totalDao.findAllByPage(hql, pageNo1, pageSize1, code);
			int count = totalDao.getCount(hql, code);
			if (list != null && list.size() > 0) {
				Object[] o = { list, count };
				return o;
			}
		}
		return null;
	}

	// 根据id查询奖金详情
	public Object[] androidfindById(Integer idd, int pageNo1, int pageSize1) {
		if (idd != null) {
			String hql = "from UserMoneyDetail where userMonthMoney.id=? order by nowMoney desc";
			List list = totalDao.findAllByPage(hql, pageNo1, pageSize1, idd);
			int count = totalDao.getCount(hql, idd);
			if (list != null && list.size() > 0) {
				Object[] o = { list, count };
				return o;
			}

		}
		return null;
	}

	/****
	 * 生产奖金分配月度查询
	 * 
	 * @param userMonthMoney
	 * @param pageNo
	 * @param pageSize
	 * @return
	 */
	@Override
	public Object[] findUMMoneyByCondition(UserMonthMoney userMonthMoney,
			int pageNo, int pageSize, String pageStatus) {
		if (userMonthMoney == null) {
			userMonthMoney = new UserMonthMoney();
		}
		if (pageStatus != null && "user".equals(pageStatus)) {
			Users loginUser = Util.getLoginUser();
			userMonthMoney.setUserId(loginUser.getId());
		}
		String str = "";
		if (userMonthMoney.getDept() != null
				&& userMonthMoney.getDept().length() > 0) {
			String[] strarray = userMonthMoney.getDept().split(",");
			if (strarray != null && strarray.length > 0) {
				String str1 = "";
				for (int i = 0; i < strarray.length; i++) {
					str1 += "," + "'" + strarray[i] + "'";
				}
				if (str1 != null && str1.length() > 1) {
					str1 = str1.substring(1);
					str += " and dept in (" + str1 + ")";
				}
			}
		}

		String hql = totalDao.criteriaQueries(userMonthMoney, null, "dept")
				+ " and userId not in (select id from Users where onWork='离职') ";
		if (userMonthMoney.getId() != null) {
			hql += " and id=" + userMonthMoney.getId();
		}
		hql += str + " order by month desc,money desc";
		List list = totalDao.findAllByPage(hql, pageNo, pageSize);
		List newlist = new ArrayList();
		Float sum1 = 0f;
		Float sum2 = 0f;
		Float sum3 = 0f;
		for (int i = 0; i < list.size(); i++) {
			UserMonthMoney userMonthMoney2 = (UserMonthMoney) list.get(i);
			// Users user = (Users) totalDao.getObjectById(Users.class,
			// userMonthMoney2.getUserId());
			// userMonthMoney2.setSqstatus(user.getOnWork());
			String hql_cs = "select sum(nowCsJiepai) from UserMoneyDetail where userMonthMoney.id=? and nowcsjiepai>0";
			String hql_sub = "select sum(submmitJiepai) from UserMoneyDetail where userMonthMoney.id=?";
			Float csJiepai = (Float) totalDao.getObjectByCondition(hql_cs,
					userMonthMoney2.getId());
			Float subJiepai = (Float) totalDao.getObjectByCondition(hql_sub,
					userMonthMoney2.getId());
			Float czb = csJiepai / (csJiepai + subJiepai) * 100;
			userMonthMoney2.setCaozhanbi(czb);
			sum1 += userMonthMoney2.getMoney() == null ? 0 : userMonthMoney2
					.getMoney();
			sum2 += userMonthMoney2.getExcitation() == null ? 0
					: userMonthMoney2.getExcitation();
			sum3 += userMonthMoney2.getDebit() == null ? 0 : userMonthMoney2
					.getDebit();
			// newlist.add(userMonthMoney2);
		}

		int count = totalDao.getCount(hql);
		Object[] o = { list, count, sum1, sum2, sum3 };
		return o;
	}

	/***
	 * 按照月份查询汇总奖金分配
	 * 
	 * @param month
	 *            查询月份
	 * @return
	 */
	@Override
	public List findUMMAll(String month) {
		String hql = "select markId,selfCard,procardRootId from UserMoneyDetail where  "
				+ "userMonthMoney.id in (select id from UserMonthMoney where month=? ) and markId in "
				+ "(select markIdRoot from UserMoneyDetail where userMonthMoney.id in (select id from UserMonthMoney where month=? ) ) "
				+ "GROUP BY markId,selfCard,procardRootId order by markId,selfCard";
		List<Object[]> list_2 = totalDao.query(hql, month, month);
		StringBuffer sb = new StringBuffer();
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		for (Object[] strings : list_2) {
			Map<String, Object> map = new HashMap<String, Object>();
			String markid = (String) strings[0];
			String selfCard = (String) strings[1];
			Integer procardRootId = (Integer) strings[2];
			if ("M002398".equals(markid) || "M091182".equals(markid)
					|| "P913347".equals(markid)) {
				System.out.println(111);
			}

			Float bzje = 0F;// 单件单价
			Float sumJie = 0F;// 单件节拍
			Float bzsumje = 0F;// 标准单价
			Float bzsumJie = 0F;// 标准节拍

			Float scje = 0F;// 生产金额
			Float scJie = 0F;// 生产节拍
			Float scNumber = 0F;// 生产数量

			Float cyNumber = 0F;// 差异节拍

			// 查询生产总金额
			String hql_scJe = "select sum(nowMoney) from UserMoneyDetail where procardRootId=?";
			scje = (Float) totalDao.getObjectByCondition(hql_scJe,
					procardRootId);
			// 查询生产总节拍
			String hql_scJie = "select sum(submmitJiepai) from UserMoneyDetail where procardRootId=?";
			scJie = (Float) totalDao.getObjectByCondition(hql_scJie,
					procardRootId);
			// 生产数量
			String hql_scNumber = "select filnalCount from Procard where id=?";
			scNumber = (Float) totalDao.getObjectByCondition(hql_scNumber,
					procardRootId);

			// 查询标准金额
			String pro = "from ProcardTemplate where markid=? and procardStyle='总成'";
			ProcardTemplate prot = (ProcardTemplate) totalDao
					.getObjectByCondition(pro, markid);
			if (prot != null) {
				if (prot.getOnePrice() == null) {
					prot.setOnePrice(0D);
				}
				bzje = prot.getOnePrice().floatValue();
				bzsumje = bzje * scNumber;// 累计金额
				// 查询标准节拍
				String hql_bzjp = "select sum(opcaozuojiepai+opshebeijiepai+gzzhunbeicishu*gzzhunbeijiepai) "
						+ "from ProcessTemplate ps where ps.procardTemplate.rootId=?";
				sumJie = (Float) totalDao.getObjectByCondition(hql_bzjp, prot
						.getId());
				if (sumJie == null) {
					sumJie = 0F;
				}
				bzsumJie = sumJie * scNumber;// 累计节拍
			}

			cyNumber = bzsumJie - scJie;

			map.put("markid", markid);// 件号
			map.put("selfCard", selfCard);// 批次
			map.put("scNumber", scNumber);// 数量
			map.put("scJie", scJie);// 生产节拍
			map.put("scje", scje);// 生产金额
			map.put("scdjJie", scJie / scNumber);// 生产单件节拍
			map.put("scdjje", scje / scNumber);// 生产单件金额
			map.put("bzsumJie", bzsumJie);// 标准节拍
			map.put("bzsumje", bzsumje);// 标准金额
			map.put("sumJie", sumJie);// 总金额
			map.put("bzje", bzje);
			map.put("cyNumber", cyNumber);// 差异节拍
			list.add(map);
			// sb.append(markid + " " + selfCard + " " + scNumber + " " + scJie
			// + " " + scje + " " + scJie / scNumber + " "
			// + scje / scNumber + " " + bzsumJie + " " + bzsumje + " "
			// + sumJie + " " + bzje + " " + cyNumber + "\n");
		}
		return list;
	}

	/***
	 * 生产奖金分配月度查询明细
	 * 
	 * @param ummId
	 * @param pageNo
	 * @param pageSize
	 * @return
	 */
	@Override
	public Object[] findUserMoneyDetailByFkId(Integer ummId, int pageNo,
			int pageSize, String pageStatus, UserMoneyDetail umd,
			String firstTime, String endTime, String tag) {
		// userMonthMoney.id=?
		if (umd == null) {
			umd = new UserMoneyDetail();
		}
		if ("noPage".equals(tag)) {
			pageNo = 0;
			pageSize = 0;
		}
		String str = "";
		if (umd.getGongwei() != null && umd.getGongwei().length() > 0) {
			String[] strarray = umd.getGongwei().split(",");
			if (strarray != null && strarray.length > 0) {
				String str1 = "";
				for (int i = 0; i < strarray.length; i++) {
					str1 += "," + "'" + strarray[i] + "'";
				}
				if (str1 != null && str1.length() > 1) {
					str1 = str1.substring(1);
					str += " and (gongwei in (" + str1 + ") or gongwei like '%"
							+ umd.getGongwei() + "%')";
				}
			}
			umd.setGongwei(null);
		}
		String hql = totalDao.criteriaQueries(umd, "addTime", new String[] {
				firstTime, endTime }, null);
		if (ummId != null) {
			hql += " and userMonthMoney.id= " + ummId;
		}
		hql += str + " order by submitDate desc";
		List list = totalDao.findAllByPage(hql, pageNo, pageSize);
		UserMoneyDetail oldumd = new UserMoneyDetail();
		if (list != null && list.size() > 0) {
			Float submmitCount = 0f;// 个人提交数量
			Float submmitJiepai = 0f;// 个人提交总节拍
			Float nowCsJiepai = 0f;// 个人提交超时总节拍
			Float subnmitBZJiepai = 0f;// 个人提总标准节拍
			Float nowMoney = 0f;// 本次提交所得金额
			Float nowKcMoney = 0f;// 本次超时扣除金额
			Double processjjAllMoneygc = 0d;// 工厂工序金额（不要给工人看到哦）
			for (Object obj : list) {
				UserMoneyDetail umd1 = (UserMoneyDetail) obj;
				submmitCount += umd1.getSubmmitCount();
				try {
					Float nowCsJiepai0 = umd1.getNowCsJiepai();
					if (umd1.getNowCsJiepai() == null) {
						nowCsJiepai0 = 0f;
					}
					Float submmitJiepai0 = umd1.getSubmmitJiepai() == null ? 0
							: umd1.getSubmmitJiepai();
					if (nowCsJiepai0 > 0) {
						submmitJiepai += submmitJiepai0;
						subnmitBZJiepai += (submmitJiepai0 + nowCsJiepai0);
					} else {
						submmitJiepai += (submmitJiepai0 - nowCsJiepai0);
						subnmitBZJiepai += submmitJiepai0;
					}
					nowCsJiepai += nowCsJiepai0;
					nowMoney += umd1.getNowMoney() == null ? 0 : umd1
							.getNowMoney();
					nowKcMoney += umd1.getNowKcMoney() == null ? 0 : umd1
							.getNowKcMoney();
					if (umd1.getProcessjjAllMoneygc() != null) {
						processjjAllMoneygc += umd1.getProcessjjAllMoneygc();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			oldumd.setSubmmitCount(submmitCount);
			oldumd.setSubmmitJiepai(submmitJiepai);
			oldumd.setNowCsJiepai(nowCsJiepai);
			oldumd.setSubmmitJiepai(submmitJiepai);
			oldumd.setSubnmitBZJiepai(subnmitBZJiepai);
			oldumd.setNowMoney(nowMoney);
			oldumd.setNowKcMoney(nowKcMoney);
			oldumd.setProcessjjAllMoneygc(processjjAllMoneygc);
		}

		int count = totalDao.getCount(hql);
		Object[] o = { list, count, oldumd };
		return o;
	}

	public WageStandardServer getWss() {
		return wss;
	}

	public void setWss(WageStandardServer wss) {
		this.wss = wss;
	}

	public InsuranceGoldServer getIgs() {
		return igs;
	}

	public void setIgs(InsuranceGoldServer igs) {
		this.igs = igs;
	}

	@Override
	public List<ProcessinforFuLiao> getProcessInForFuLiao(Integer id,
			String cardNumber) {
		// TODO Auto-generated method stub
		Users user = (Users) totalDao.getObjectByCondition(
				"from Users where cardId=?", cardNumber);
		if (user == null) {
			return null;
		}
		List<ProcessinforFuLiao> list = totalDao
				.query(
						"from ProcessinforFuLiao where processInfor.id in(select id from ProcessInfor where procard.id "
								+ "in (select id from Procard where rootId = ?))",
						id);
		if (list.size() > 0) {
			Map<String, ProcessinforFuLiao> map = new HashMap<String, ProcessinforFuLiao>();
			for (ProcessinforFuLiao fl : list) {
				if (fl.getName() != null) {
					if (fl.getSpecification() != null
							&& !fl.getSpecification().equals("")) {// 规格不为空,比较规格和名字
						if (map.containsKey(fl.getName()
								+ fl.getSpecification())) {
							ProcessinforFuLiao fl2 = map.get(fl.getName());
							if (fl2.getTotalCount() == null) {
								fl2.setTotalCount(0f);
							}
							if (fl.getTotalCount() != null) {
								fl2.setTotalCount(fl2.getTotalCount()
										+ fl.getTotalCount());
							}
							if (fl2.getOutCount() == null) {
								fl2.setOutCount(0f);
							}
							if (fl.getOutCount() != null) {
								fl2.setOutCount(fl2.getOutCount()
										+ fl.getOutCount());
							}
							String sql = "select sum(curAmount) from Store where matetag='"
									+ fl.getName()
									+ "' and format ='"
									+ fl.getSpecification() + "'";
							Float ckCount = (Float) totalDao
									.getObjectByCondition(sql);
							if (ckCount == null) {
								ckCount = 0f;
							}
							fl.setCkCount(ckCount);
							map.put(fl.getName() + fl.getSpecification(), fl2);
						} else {
							String sql = "select sum(curAmount) from Store where matetag='"
									+ fl.getName()
									+ "' and format ='"
									+ fl.getSpecification() + "'";
							Float ckCount = (Float) totalDao
									.getObjectByCondition(sql);
							if (ckCount == null) {
								ckCount = 0f;
							}
							fl.setCkCount(ckCount);
							map.put(fl.getName() + fl.getSpecification(), fl);
						}
					} else {// 规格为空,比较名字和单位
						if (map.containsKey(fl.getName() + fl.getUnit())) {
							ProcessinforFuLiao fl2 = map.get(fl.getName());
							if (fl2.getTotalCount() == null) {
								fl2.setTotalCount(0f);
							}
							if (fl.getTotalCount() != null) {
								fl2.setTotalCount(fl2.getTotalCount()
										+ fl.getTotalCount());
							}
							if (fl2.getOutCount() == null) {
								fl2.setOutCount(0f);
							}
							if (fl.getOutCount() != null) {
								fl2.setOutCount(fl2.getOutCount()
										+ fl.getOutCount());
							}
							String sql = "select sum(curAmount) from Store where matetag='"
									+ fl.getName() + "' ";
							if (fl.getUnit() == null) {
								sql += "and unit is null group by matetag,format";
							} else {
								sql += "and unit ='" + fl.getUnit() + "'";
							}
							Float ckCount = (Float) totalDao
									.getObjectByCondition(sql);
							if (ckCount == null) {
								ckCount = 0f;
							}
							fl.setCkCount(ckCount);
							map.put(fl.getName() + fl.getSpecification(), fl2);
						} else {
							String sql = "select sum(curAmount) from Store where matetag='"
									+ fl.getName() + "' ";
							if (fl.getUnit() == null) {
								sql += "and unit is null group by matetag,format";
							} else {
								sql += "and unit ='" + fl.getUnit() + "'";
							}
							Float ckCount = (Float) totalDao
									.getObjectByCondition(sql);
							if (ckCount == null) {
								ckCount = 0f;
							}
							fl.setCkCount(ckCount);
							map.put(fl.getName() + fl.getUnit(), fl);
						}
					}

				}
			}
			List<ProcessinforFuLiao> list2 = new ArrayList<ProcessinforFuLiao>();
			if (map.size() > 0) {
				for (String name : map.keySet()) {
					list2.add(map.get(name));
				}
				return list2;
			}

		}
		return null;
	}

	@Override
	public String submitLingFL(Procard procard,
			List<ProcessinforFuLiao> processinforFuLiaoList, String cardNumber) {
		// TODO Auto-generated method stub
		if (procard != null && procard.getId() != null) {
			Users user = (Users) totalDao.getObjectByCondition(
					"from Users where cardId=?", cardNumber);
			if (user == null) {
				return "员工卡号错误领取失败";
			}
			if (processinforFuLiaoList != null
					&& processinforFuLiaoList.size() > 0) {
				List<ProcessinforFuLiao> flList = totalDao
						.query(
								"from ProcessinforFuLiao where processInfor.id in(select id from ProcessInfor where procard.rootId=? and isNeedFuliao='yes') order by totalCount",
								procard.getId());
				if (flList != null && flList.size() > 0) {
					for (ProcessinforFuLiao fl1 : processinforFuLiaoList) {
						List<ProcessinforFuLiao> tempflList = new ArrayList<ProcessinforFuLiao>();
						Float count = fl1.getCkCount();
						if (count == null || count == 0) {
							break;
						}
						String sql = "select sum(curAmount) from Store where matetag='"
								+ fl1.getName() + "' ";
						if (fl1.getSpecification() == null
								|| fl1.getSpecification().equals("")) {
							sql += "and (format is null or format ='') and unit ='"
									+ fl1.getUnit() + "' group by curAmount";
						} else {
							sql += "and format ='" + fl1.getSpecification()
									+ "' group by curAmount";
						}
						Float ckCount = (Float) totalDao
								.getObjectByCondition(sql);
						if (ckCount == null || ckCount < count) {
							throw new RuntimeException("辅料" + fl1.getName()
									+ "数量不足!领取失败!");
						}
						for (ProcessinforFuLiao fl2 : flList) {
							if (fl1.getName() != null && fl2.getName() != null
									&& fl1.getName().equals(fl2.getName())) {// 名字相同
								if (((fl1.getSpecification() == null || fl1
										.getSpecification().equals(""))
										&& (fl2.getSpecification() == null || fl2
												.getSpecification().equals("")) && ((fl1
										.getUnit() == null && fl2.getUnit() == null) || (fl1
										.getUnit() != null
										&& fl2.getUnit() != null && fl1
										.getUnit().equals(fl2.getUnit()))))
										|| (fl1.getSpecification() != null
												&& fl2.getSpecification() != null && fl1
												.getSpecification().equals(
														fl2.getSpecification()))) {// 规格为空时比较单位,不为空则比规格
									if (fl2.getTotalCount() == null) {
										fl2.setTotalCount(0f);
									}
									if (fl2.getOutCount() == null) {
										fl2.setOutCount(0f);
									}
									if (fl2.getTotalCount() > fl2.getOutCount()) {
										if (count > (fl2.getTotalCount() - fl2
												.getOutCount())) {
											count = (fl2.getTotalCount() - fl2
													.getOutCount());
											fl2
													.setOutCount(fl2
															.getTotalCount());
											totalDao.update(fl2);
											tempflList.add(fl2);
										} else {
											fl2.setOutCount(fl2.getOutCount()
													+ count);
											count = 0f;
											totalDao.update(fl2);
										}
									}
								}
							}
						}
						if (count > 0 && tempflList.size() > 0) {
							ProcessinforFuLiao fltemp = tempflList
									.get(tempflList.size() - 1);
							fltemp.setOutCount(fltemp.getOutCount() + count);
							count = 0f;
						}
						if (count > 0f) {
							throw new RuntimeException("没有找到辅料" + fl1.getName()
									+ "的信息!领取失败!");
						}
						String sql2 = " from Store where matetag='"
								+ fl1.getName() + "' and curAmount>0 ";
						if (fl1.getSpecification() == null
								|| fl1.getSpecification().equals("")) {
							sql2 += "and (format is null or format='')and unit ='"
									+ fl1.getUnit() + "' order by curAmount";
						} else {
							sql2 += "and format ='" + fl1.getSpecification()
									+ "' order by curAmount asc";
						}
						List<Store> storeList = totalDao.query(sql2);
						if (storeList.size() > 0) {
							Integer count2 = (int) (float) fl1.getCkCount();
							for (Store store : storeList) {
								if (store.getCurAmount() >= count2) {
									Consuming c = new Consuming();
									c.setPeopleName(user.getName());// 借主
									c.setMatetag(store.getMatetag());// 名称
									c.setDate(new Date());// 日期
									c.setFormat(store.getFormat());// 规格
									c.setNum(count2.floatValue());// 数量
									c.setStorehouse(store.getStorehouse()); // 仓库
									c.setRemark("辅料领取"); // 备注
									c.setCardNum(cardNumber);// 卡号
									c.setDept(user.getDept());// 部门
									c.setNumber(store.getNumber());// 编号
									c.setUnit(store.getUnit());// 单位
									c.setState("领用"); // 状态
									c.setCarType(store.getCarModel()); // 车型
									c.setStore(store); // 入库
									Set<Consuming> consumings = store
											.getConsumings();
									if (consumings == null) {
										consumings = new HashSet<Consuming>();
									}
									consumings.add(c);
									store.setConsumings(consumings);
									OutLib out = new OutLib();
									out.setDate(new Date());// 日期
									out.setCardNum(cardNumber); // 卡号
									out.setDept(user.getDept()); // 部门
									out.setPeopleName(user.getName());// 姓名
									out.setMatetag(store.getMatetag());
									out.setFormat(store.getFormat());// 规格
									out.setUnit(store.getUnit());// 单位
									out.setStorehouse(store.getStorehouse());// 仓库
									out.setParClass(store.getParClass());// 分类
									out.setPlace(store.getPlace());// 位置
									out.setNum(count2.floatValue());// 数量
									out.setPrice(store.getPrice());// 价格
									if (store.getPrice() == null) {
										store.setPrice(0f);
									}
									out.setMoney(store.getPrice()
											* count2.floatValue());// 金额
									out.setAdminId(Util.getLoginUser().getId());// 管理员iD
									out.setAdmin(Util.getLoginUser().getName());// 管理员

									out.setStore(store);
									out.setCon(c);
									c.setOut(out);
									totalDao.save(out);
									// totalDao.save(c);
									store.setCurAmount(store.getCurAmount()
											- count2);
									count2 = 0;
									// totalDao.update(store);
									break;
								} else {
									Consuming c = new Consuming();
									c.setPeopleName(user.getName());// 借主
									c.setMatetag(store.getMatetag());// 名称
									c.setDate(new Date());// 日期
									c.setFormat(store.getFormat());// 规格
									c.setNum(store.getCurAmount().floatValue());// 数量
									c.setStorehouse(store.getStorehouse()); // 仓库?
									c.setRemark("辅料领取"); // 备注
									c.setCardNum(cardNumber);// 卡号
									c.setDept(user.getDept());// 部门
									c.setNumber(store.getNumber());// 编号
									c.setUnit(store.getUnit());// 单位
									c.setState("领用"); // 状态
									c.setCarType(store.getCarModel()); // 车型
									c.setStore(store); // 入库
									Set<Consuming> consumings = store
											.getConsumings();
									if (consumings == null) {
										consumings = new HashSet<Consuming>();
									}
									consumings.add(c);
									store.setConsumings(consumings);
									OutLib out = new OutLib();
									out.setDate(new Date());// 日期
									out.setCardNum(cardNumber); // 卡号
									out.setDept(user.getDept()); // 部门
									out.setPeopleName(user.getName());// 姓名
									out.setMatetag(store.getMatetag());
									out.setFormat(store.getFormat());// 规格
									out.setUnit(store.getUnit());// 单位
									out.setStorehouse(store.getStorehouse());// 仓库
									out.setParClass(store.getParClass());// 分类
									out.setPlace(store.getPlace());// 位置
									out.setNum(count2.floatValue());// 数量
									out.setPrice(store.getPrice());// 价格
									if (store.getPrice() == null) {
										store.setPrice(0f);
									}
									out.setMoney(store.getPrice()
											* store.getCurAmount());// 金额
									out.setAdminId(Util.getLoginUser().getId());// 管理员iD
									out.setAdmin(Util.getLoginUser().getName());// 管理员

									out.setStore(store);
									out.setCon(c);
									c.setOut(out);
									totalDao.save(out);
									// totalDao.save(c);
									count2 = (int) (count2 - store
											.getCurAmount());
									store.setCurAmount(0f);
									// totalDao.update(store);
								}
							}
							if (count2 > 0) {
								throw new RuntimeException("辅料" + fl1.getName()
										+ "数量不足!领取失败!");
							}
						} else {
							throw new RuntimeException("辅料" + fl1.getName()
									+ "数量不足!领取失败!");
						}

					}
					return "true";
				}
			}
			return "没有找到对应的辅料信息!领取失败!";
		}
		return "没有找到对应的bom!领取失败!";
	}

	// 分页查询生产中产品
	@Override
	public Object[] findAllProcard1(Procard procard, int parseInt,
			int pageSize, String startDate, String endDate) {
		if (procard == null) {
			procard = new Procard();
			// procard.setBelongLayer(1); 只查询第一层的总成模板
		}
		String hql = totalDao.criteriaQueries(procard, null);
		if (startDate != null && endDate != null && !startDate.equals("")
				&& !endDate.equals("")) {
			hql += " and procardTime between '" + startDate + "' and '"
					+ endDate + "'";
		} else if (startDate != null && !startDate.equals("")
				&& (endDate == null || endDate.equals(""))) {
			hql += " and procardTime >= '" + startDate + "'";
		} else if ((startDate == null || startDate.equals(""))
				&& endDate != null && !endDate.equals("")) {
			hql += " and procardTime <= '" + endDate + "'";
		}
		// 排序
		hql += " order by id";
		if (parseInt > 0) {
			hql += " desc";
		}

		List list = totalDao.findAllByPage(hql, parseInt, pageSize);
		int count = totalDao.getCount(hql);
		Object[] o = { list, count };
		return o;
	}

	public String gongweihao() {
		// TODO Auto-generated method stub
		String hql = "select t.gongweihao from TaSopGongwei t join t.machines m where m.ipAddress =?)";
		List<String> list = totalDao.query(hql, Util.hqIp());
		if (list != null && list.size() > 0) {
			return "'"
					+ list.toString().replaceAll("\\[", "").replaceAll("\\]",
							"").replaceAll(",", "','").replaceAll(" ", "")
					+ "'";
		} else
			return "";
	}

	@Override
	public List getPrcocessMachine(Integer id) {
		// TODO Auto-generated method stub
		List list = null;
		try {
			ProcessInfor processinfor = (ProcessInfor) totalDao.getObjectById(
					ProcessInfor.class, id);
			if (processinfor != null && processinfor.getReProductId() != null) {// 返修工序获取此零件下所有绑定的设备
				String sql = "from Machine where id in(select m.id from ProcessGzstore pg join pg.processgzstores1 m where pg.processName in (select processName from ProcessInfor where procard.id =(select procardId from ProcardReProduct where id=?))) order by workPosition";
				list = totalDao.query(sql, processinfor.getReProductId());
			} else {
				String sql = "from Machine where id in(select m.id from ProcessGzstore pg join pg.processgzstores1 m where pg.processName = (select processName from ProcessInfor where id =?)) order by workPosition";
				list = totalDao.query(sql, id);
			}

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public String updateProcessMachine(Integer processId, Integer machineId) {
		// TODO Auto-generated method stub
		ProcessInfor process = (ProcessInfor) totalDao.getObjectById(
				ProcessInfor.class, processId);
		if (process == null) {
			return "工序有误，请选择正确的工序";
		}
		Machine machine = (Machine) totalDao.getObjectById(Machine.class,
				machineId);
		if (machine == null) {
			return "设备有误，请选择正确的设备";
		}
		Procard procard = process.getProcard();
		LogoStickers ls = (LogoStickers) totalDao
				.getObjectByCondition(
						" from LogoStickers where markId =? and lotId =? and processNO=? and isPrint = ?",
						procard.getMarkId(), procard.getSelfCard(), process
								.getProcessNO()
								+ "", "NO");
		if (ls != null) {
			return "工序:[" + process.getProcessName() + "]还未首检，不能更改工位!~";
		}
		process.setShebeiNo(machine.getNo());
		process.setShebeiName(machine.getName());
		process.setGongwei(machine.getWorkPosition());
		// totalDao.update(process);
		try {
			totalDao.update(process);

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		Object[] rootMsg = (Object[]) totalDao.getObjectByCondition(
				"select markId,productStyle from Procard where id=?", process
						.getProcard().getRootId());
		if (rootMsg != null && rootMsg.length == 2) {
			String rootMarkId = rootMsg[0].toString();
			String productStyle = rootMsg[1].toString();
			List<ProcessTemplate> processTList = (List<ProcessTemplate>) totalDao
					.query(
							"from ProcessTemplate where processNO=? "
									+ "and procardTemplate.id in(select id from ProcardTemplate where markId=? and rootId in (select id from ProcardTemplate where markId=? and procardStyle='总成' and productStyle=? and banci = ?)) ",
							process.getProcessNO(), process.getProcard()
									.getMarkId(), rootMarkId, productStyle,
							process.getProcard().getBanci());
			if (processTList != null && processTList.size() > 0) {
				for (ProcessTemplate processt : processTList) {
					processt.setShebeiNo(machine.getNo());
					processt.setShebeiName(machine.getName());
					processt.setGongwei(machine.getWorkPosition());
					totalDao.update(processt);
				}
			}
		}
		return "true";
	}

	@Override
	public int mibushoujian() {
		// TODO Auto-generated method stub
		String processSql = "select pc.markId,pc.selfCard,pc.proName,pif.processNO,pif.operatorName,pif.operatorCode,pif.submmitCount,pif.firstApplyDate,pif.submitDate from ProcessInfor pif join pif.procard  pc where  pif.submitDate>'2016-03-15' and pc.procardStyle='总成'"
				+ "and pc.markId in ('M090999','M091182','P913341') and pif.status='完成' and pif.processName not in ('配齐零件','毛料图表') and pif.zjStatus='no'"
				+ " order by pc.markId,pc.selfCard ,pif.processNO";
		List<Object[]> list = totalDao.query(processSql);
		int n = 0;
		if (list != null && list.size() > 0) {
			for (Object[] objs : list) {
				if (objs.length >= 9) {
					// 查询最近首检数据
					String hqlLs = "from LogoStickers where markId=? and processNO=?  and isPrint='YES' and billDate = "
							+ "(select max(billDate) from LogoStickers where markId=? and processNO =?  and isPrint='YES')";
					LogoStickers ls = (LogoStickers) totalDao
							.getObjectByCondition(hqlLs, objs[0].toString(),
									objs[3].toString(), objs[0].toString(),
									objs[3].toString());
					// 添加首检数据
					LogoStickers newLs = new LogoStickers();
					if (ls != null) {
						BeanUtils.copyProperties(ls, newLs);
					} else {
						newLs.setStickStyle("首检样品");
						newLs.setMarkId(objs[0].toString());
						newLs.setPartsName(objs[2].toString());

					}
					newLs.setCount(1F);
					newLs.setLotId(objs[1].toString());// 批次
					newLs.setProcessNO(objs[3].toString());// 工序号
					newLs.setOperator(objs[4].toString());// 操作者
					newLs.setCode(objs[5].toString());// 操作者工号
					newLs.setExaminerCode("075");// 检验者工号
					newLs.setExaminerName("马彦红");// 检验者姓名
					newLs.setBillDate(objs[7].toString());// 时间
					newLs.setIsPrint("YES");// 是够打印
					// 计算编号
					String newNumber = "QD-RP-201603" + (200 + n);
					newLs.setNumber(newNumber);
					totalDao.save(newLs);
					n++;
				}
			}
		}
		// int n=0;
		// List<LogoStickers> list =
		// totalDao.query("from LogoStickers where id >=12043");
		// for(LogoStickers l:list){
		// if(l.getDemandExamContent()==null||l.getRealExamContent()==null
		// ||l.getDemandExamContent().length()==0||l.getRealExamContent().length()==0){
		// l.setIsPrint("NO");
		// totalDao.update(l);
		// n++;
		// }
		// }
		return n;
	}

	public void unCreateWaiWei() {
		/**
		 * 查看漏掉生成外委计划的的工序
		 */
		String nextWwhql = "from ProcessInfor where  procard.id in (select id from Procard where status in ('已发料','领工序')) and productStyle='外委' and status !='完成'"
				+ " and id not in (select p.id from ProcessInfor p,WaigouWaiweiPlan w where w.processNo is not null and p.procard.markId=w.markId and p.processNO=w.processNo and p.procard.selfCard=w.selfCard )"
				+ " order by processNO";
		List<ProcessInfor> nextWwProcessInforList = (List<ProcessInfor>) totalDao
				.query(nextWwhql);
		List<Integer> needCreateIdList = new ArrayList<Integer>();
		List<ProcessInfor> needCreateProcessList = new ArrayList<ProcessInfor>();
		if (nextWwProcessInforList.size() > 0) {
			int i = 0;
			for (ProcessInfor nextWwProcessInfor : nextWwProcessInforList) {
				if (nextWwProcessInfor != null) {
					if ("外委".equals(nextWwProcessInfor.getProductStyle())) {
						// 查询上道工序是完成的工序或者是不存在或者是需要生成计划的外委工序
						ProcessInfor upProcess = (ProcessInfor) totalDao
								.getObjectByCondition(
										"from ProcessInfor where  procard.id=? and processNO<? order by processNO desc",
										nextWwProcessInfor.getProcard().getId(),
										nextWwProcessInfor.getProcessNO());
						boolean b = false;
						if (upProcess == null) {// 判断这道工序是否应该生成外委采购计划
							b = true;
						} else if (upProcess.getStatus().equals("完成")) {
							b = true;
						} else if (needCreateIdList.contains(upProcess.getId())) {
							b = true;
						}
						if (b) {
							needCreateIdList.add(nextWwProcessInfor.getId());
							needCreateProcessList.add(nextWwProcessInfor);
							WaigouWaiweiPlan wwp = new WaigouWaiweiPlan();
							wwp.setRootMarkId(nextWwProcessInfor.getProcard()
									.getRootMarkId());
							wwp.setRootSelfCard(nextWwProcessInfor.getProcard()
									.getRootSelfCard());
							wwp.setOrderNum(nextWwProcessInfor.getProcard()
									.getOrderNumber());
							wwp.setYwMarkId(nextWwProcessInfor.getProcard()
									.getYwMarkId());
							wwp.setYwMarkId(nextWwProcessInfor.getProcard()
									.getYwMarkId());
							wwp.setBanben(nextWwProcessInfor.getProcard()
									.getBanBenNumber());
							wwp.setBanci(nextWwProcessInfor.getProcard()
									.getBanci());
							wwp.setMarkId(nextWwProcessInfor.getProcard()
									.getMarkId());
							wwp.setProcessNo(nextWwProcessInfor.getProcessNO()
									+ "");
							wwp.setProName(nextWwProcessInfor.getProcard()
									.getProName());
							wwp.setProcessName(nextWwProcessInfor
									.getProcessName());
							wwp.setType("外委");
							wwp.setUnit(nextWwProcessInfor.getProcard()
									.getUnit());
							wwp.setNumber(nextWwProcessInfor.getProcard()
									.getKlNumber()
									- nextWwProcessInfor.getProcard()
											.getHascount());
							wwp.setBeginCount(nextWwProcessInfor.getProcard()
									.getKlNumber()
									- nextWwProcessInfor.getProcard()
											.getHascount());
							wwp.setAddTime(Util.getDateTime());
							wwp.setJihuoTime(Util.getDateTime());
							wwp.setShArrivalTime(nextWwProcessInfor
									.getProcard().getNeedFinalDate());// 应到货时间在采购确认通知后计算
							wwp.setStatus("待激活");
							wwp.setCaigouMonth(Util.getDateTime("yyyy-MM月"));// 采购月份
							String wwNumber = "";
							String before = null;
							Integer bIndex = 10;
							before = "ww" + Util.getDateTime("yyyyMMdd");

							Integer maxNo = 0;
							String maxNumber = (String) totalDao
									.getObjectByCondition("select max(planNumber) from WaigouOrder where planNumber like '"
											+ before + "%'");
							if (maxNumber != null) {
								String wwnum = maxNumber.substring(bIndex,
										maxNumber.length());
								try {
									Integer maxNum = Integer.parseInt(wwnum);
									if (maxNum > maxNo) {
										maxNo = maxNum;
									}
								} catch (Exception e) {
									// TODO: handle exception
								}
							}
							maxNo++;
							wwNumber = before + String.format("%03d", maxNo);
							wwp.setPlanNumber(wwNumber);// 采购计划编号
							wwp.setSelfCard(nextWwProcessInfor.getProcard()
									.getSelfCard());// 批次
							wwp.setGysId(nextWwProcessInfor.getZhuserId());// 供应商id
							wwp.setGysName(nextWwProcessInfor.getGys());// 供应商名称
							wwp.setAllJiepai(nextWwProcessInfor.getAllJiepai());// 单件总节拍
							wwp.setDeliveryDuration(nextWwProcessInfor
									.getDeliveryDuration());// 耽误时长
							wwp.setSingleDuration(nextWwProcessInfor
									.getProcard().getSingleDuration());// 单班时长(工作时长)
							wwp.setProcardId(nextWwProcessInfor.getProcard()
									.getId());
							wwp.setProcard(nextWwProcessInfor.getProcard());
							totalDao.save(wwp);
						}
					} else {
						// i++;
						// int k = 0;
						// if (i > k) {// 之前k道自制工序不考虑
						// break;
						// }
					}
				} else {
					break;
				}
			}
		}
		System.out.println(needCreateIdList.size());
		// List<Procard> procardList = totalDao
		// .query("from Procard where id=41893");
		// .query("from Procard where status='已发料' and procardStyle='自制'");
		// List<Procard> procardList2 = new ArrayList<Procard>();
		// if (procardList.size() > 0) {
		// for (Procard p : procardList) {
		// String nextWwhql =
		// "from ProcessInfor where  procard.id=? order by processNO";
		// ProcessInfor process=(ProcessInfor)
		// totalDao.getObjectByCondition(nextWwhql, p.getId());
		// if(process!=null&&"外委".equals(process.getProductStyle())){
		// procardList2.add(p);
		// }
		/********************************** 生成外委采购计划 *****************************************/

		// /**** 生成外委工序计划 ***/
		// String nextWwhql =
		// "from ProcessInfor where  procard.id=? and processNO>=40 order by processNO";
		// List<ProcessInfor> nextWwProcessInforList = (List<ProcessInfor>)
		// totalDao
		// .query(nextWwhql, p.getId());
		// if (nextWwProcessInforList.size() > 0) {
		// int i = 0;
		// for (ProcessInfor nextWwProcessInfor : nextWwProcessInforList) {
		// if (nextWwProcessInfor != null) {
		// if ("外委".equals(nextWwProcessInfor
		// .getProductStyle())) {
		// WaigouWaiweiPlan wwp = new WaigouWaiweiPlan();
		// wwp.setMarkId(p.getMarkId());
		// wwp.setProcessNo(nextWwProcessInfor
		// .getProcessNO()
		// + "");
		// wwp.setProName(p.getProName());
		// wwp.setProcessName(nextWwProcessInfor
		// .getProcessName());
		// wwp.setType("外委");
		// wwp
		// .setNumber(p.getKlNumber()
		// - p.getHascount());
		// wwp.setAddTime(Util.getDateTime());
		// wwp.setJihuoTime(Util.getDateTime());
		// wwp.setShArrivalTime(p.getNeedFinalDate());// 应到货时间在采购确认通知后计算
		// wwp.setStatus("待激活");
		// wwp
		// .setCaigouMonth(Util
		// .getDateTime("yyyy-MM月"));// 采购月份
		// wwp.setPlanNumber("ww201412001");// 采购计划编号
		// wwp.setSelfCard(p.getSelfCard());// 批次
		// wwp.setGysId(nextWwProcessInfor.getZhuserId());// 供应商id
		// wwp.setGysName(nextWwProcessInfor.getGys());// 供应商名称
		// wwp.setAllJiepai(nextWwProcessInfor
		// .getAllJiepai());// 单件总节拍
		// wwp.setDeliveryDuration(nextWwProcessInfor
		// .getDeliveryDuration());// 耽误时长
		// wwp.setSingleDuration(p.getSingleDuration());// 单班时长(工作时长)
		// wwp.setProcardId(p.getId());
		// wwp.setProcard(p);
		// totalDao.save(wwp);
		// } else {
		// i++;
		// int k = 0;
		// if (i > k) {// 之前k道自制工序不考虑
		// break;
		// }
		// }
		// } else {
		// break;
		// }
		// }
		// }
		// }
		// }
		// System.out.println(procardList2.size());

	}

	@Override
	public List hjtj(String satrTime, String endTime, Integer allDay) {
		// TODO Auto-generated method stub
		String month = endTime.substring(0, 7);
		List had = totalDao
				.query("from HotFree where type='高温费统计' and  month ='" + month
						+ "' order by code,month,type");
		if (had != null && had.size() > 0) {
			return had;
		}
		// 手工焊
		List<HotFree> list1 = hjtj2("手工焊", satrTime, endTime, allDay);
		// 半自动焊
		List<HotFree> list2 = hjtj2("半自动焊", satrTime, endTime, allDay);
		// 自动焊
		List<HotFree> list3 = hjtj2("自动焊", satrTime, endTime, allDay);
		// 非焊接
		List<HotFree> list4 = hjtj2("非焊接", satrTime, endTime, allDay);
		// 手工焊
		List<Object[]> listhas = totalDao
				.query(
						"select code,month,sum(time),sum(money) from HotFree where month =? group by code,month",
						month);
		if (listhas != null && listhas.size() > 0) {
			for (Object[] objs : listhas) {
				HotFree hf = new HotFree();
				HotFree hf2 = new HotFree();
				Users user = (Users) totalDao.getObjectByCondition(
						"from Users where code=?", objs[0].toString());
				hf.setUserId(user.getId());
				hf.setName(user.getName());
				hf.setCode(user.getCode());
				hf.setDept(user.getDept());
				hf.setType("非工作时间");
				hf.setMonth(objs[1].toString());
				hf2.setUserId(user.getId());
				hf2.setName(user.getName());
				hf2.setCode(user.getCode());
				hf2.setDept(user.getDept());
				hf2.setType("高温补贴");
				hf2.setMonth(objs[1].toString());
				Float money = 0f;
				float unworkTime = 0f;
				float workTime = Float.parseFloat(objs[2].toString());
				unworkTime = allDay * 8 - workTime;
				money = 200 * unworkTime / (allDay * 8);
				hf.setTime(unworkTime);
				hf.setMoney(money);
				hf2.setTime(workTime + unworkTime);
				hf2.setMoney(money + Float.parseFloat(objs[3].toString()));
				totalDao.save(hf);
				totalDao.save(hf2);
			}
			// 计算实际高温费
			List<Object[]> atList = totalDao
					.query("select userId,count(*) from Attendance where attendanceStatus not in('缺勤','离职') and  ((workDateTime is not null and workDateTime!='') or (closingDateTime is not null and closingDateTime!='')) and dateTime like '"
							+ month + "%' group by userId");
			if (atList.size() > 0) {
				for (Object[] at : atList) {
					try {
						Integer id = Integer.parseInt(at[0].toString());
						Float count = Float.parseFloat(at[1].toString());
						Users user = (Users) totalDao.getObjectById(
								Users.class, id);
						if (user != null) {
							HotFree truehf = new HotFree();
							truehf.setUserId(user.getId());
							truehf.setName(user.getName());
							truehf.setCode(user.getCode());
							truehf.setDept(user.getDept());
							truehf.setType("高温费统计");
							truehf.setMonth(month);
							truehf.setCqCount(count);// 出勤天数
							truehf.setQqCount(allDay - count);// 缺勤天数
							if (allDay < count) {
								truehf.setQqMoney(0f);
							} else {
								truehf.setQqMoney(200 * (allDay - count)
										/ allDay);
							}
							truehf.setMoney(200f);
							Float jjMoney = (Float) totalDao
									.getObjectByCondition(
											"select money from HotFree where userId=? and month=? and type='高温补贴'",
											id, month); // 高温奖金
							if (jjMoney != null && jjMoney > truehf.getMoney()) {
								truehf.setMoney(jjMoney);
							}
							truehf.setSfMoney(truehf.getMoney()
									- truehf.getQqMoney());// 实发高温费
							totalDao.save(truehf);
						}
					} catch (Exception e) {
						// TODO: handle exception
					}

				}
			}

		}
		// return
		// totalDao.query("from HotFree where type='高温补贴' order by code,month,type");
		return totalDao.query("from HotFree where type='高温费统计' and month ='"
				+ month + "' order by code,month,type");
	}

	public List<HotFree> hjtj2(String type, String satrTime, String endTime,
			Integer allDay) {
		List<HotFree> typelist = new ArrayList<HotFree>();
		List<String> typeCodeList = new ArrayList<String>();
		String month = endTime.substring(0, 7);
		String addhql = "";

		if (type.equals("手工焊")) {
			addhql = "processName  in('补焊','点焊','定位焊、焊接（手工焊）')";
		} else if (type.equals("半自动焊")) {
			addhql = "processName  in('焊接（半自动焊）')";
		} else if (type.equals("自动焊")) {
			addhql = "processName  in('筒体卷点焊（含自动）','定位焊、焊接(自动焊)')";
		} else {
			addhql = "processName not in('补焊','点焊','定位焊、焊接（手工焊）','焊接（半自动焊）','筒体卷点焊（含自动）','定位焊、焊接(自动焊)')";
		}

		Date startTimeData = Util.StringToDate(satrTime, "yyyy-MM-dd");
		Calendar cal = Calendar.getInstance();
		boolean b = true;
		cal.setTime(startTimeData);
		while (b) {
			cal.set(Calendar.DATE, cal.get(Calendar.DATE) + 1);
			Date date = cal.getTime();
			String dateString = Util.DateToString(date, "yyyy-MM-dd");
			if (dateString.equals(endTime)) {
				b = false;
			}
			List<ProcessInforReceiveLog> logList = totalDao
					.query("from ProcessInforReceiveLog where "
							+ "(firstApplyDate like '"
							+ dateString
							+ "%' or sumitApplyDate like '"
							+ dateString
							+ "%' or"
							+ "(firstApplyDate<='"
							+ dateString
							+ "' and sumitApplyDate >='"
							+ dateString
							+ "'))"
							+ "and fk_processInforId in(select id from ProcessInfor where 1=1 and "
							+ addhql + ")");
			if (logList != null && logList.size() > 0) {
				List<HotFree> todaylist = new ArrayList<HotFree>();
				List<String> usersCodeList = new ArrayList<String>();
				for (ProcessInforReceiveLog sg : logList) {
					try {
						Long allJiepai = Util.getYouXiaoTime(sg
								.getFirstApplyDate(), sg.getSumitApplyDate());
						sg.setAllJiepai((float) allJiepai / 1000);
						totalDao.update(sg);
						String[] codes = null;
						if (sg.getUsercodes().contains(",")) {
							codes = sg.getUsercodes().split(",");
						} else {
							codes = new String[] { sg.getUsercodes() };
						}
						for (int i = 0; i < codes.length; i++) {
							float todayAllJiePai = 0f;
							String xiabanTime = Util.xiabanTime();
							String shangbanTime = Util.shangbanTime();
							if (sg.getSumitApplyDate().contains("2017-08-01")
									|| sg.getSumitApplyDate().contains(
											"2017-08-02")
									|| sg.getSumitApplyDate().contains(
											"2017-08-03")
									|| sg.getSumitApplyDate().contains(
											"2017-08-04")
									|| sg.getSumitApplyDate().contains(
											"2017-08-05")
									|| sg.getSumitApplyDate().contains(
											"2017-08-06")
									|| sg.getSumitApplyDate().contains(
											"2017-08-07")
									|| sg.getSumitApplyDate().contains(
											"2017-08-08")
									|| sg.getSumitApplyDate().contains(
											"2017-08-09")
									|| sg.getSumitApplyDate().contains(
											"2017-08-10")
									|| sg.getSumitApplyDate().contains(
											"2017-08-11")) {
								xiabanTime = "12:00:00";
								shangbanTime = "07:00:00";
							}
							// if (sg.getSumitApplyDate().contains("2016-07-25")
							// || sg.getSumitApplyDate().contains(
							// "2016-07-26")
							// || sg.getSumitApplyDate().contains(
							// "2016-07-27")
							// || sg.getSumitApplyDate().contains(
							// "2016-07-28")
							// || sg.getSumitApplyDate().contains(
							// "2016-07-29")
							// || sg.getSumitApplyDate().contains(
							// "2016-07-30")) {
							// xiabanTime = "12:30:00";
							// shangbanTime = "06:30:00";
							// }
							if (sg.getFirstApplyDate().contains(dateString)
									&& sg.getSumitApplyDate().contains(
											dateString)) {
								// 领取和提交都在当天
								todayAllJiePai = sg.getAllJiepai();
							} else if (sg.getFirstApplyDate().contains(
									dateString)
									&& !sg.getSumitApplyDate().contains(
											dateString)) {
								// 当天领取,之后提交
								if (Util.StringToDate(sg.getFirstApplyDate(),
										null).getTime() <= Util.StringToDate(
										dateString + " " + xiabanTime, null)
										.getTime()) {
									// 下班之前领取
									todayAllJiePai = Util.getYouXiaoTime(sg
											.getFirstApplyDate(), dateString
											+ " " + xiabanTime);
									todayAllJiePai = todayAllJiePai / 1000;
								}
							} else if (!sg.getFirstApplyDate().contains(
									dateString)
									&& sg.getSumitApplyDate().contains(
											dateString)) {
								// 之前领取，当天提交
								if (Util.StringToDate(sg.getSumitApplyDate(),
										null).getTime() >= Util.StringToDate(
										dateString + " " + shangbanTime, null)
										.getTime()) {
									// 上班之后提交
									todayAllJiePai = Util.getYouXiaoTime(
											dateString + " " + xiabanTime, sg
													.getSumitApplyDate());
									todayAllJiePai = todayAllJiePai / 1000;
								}
							} else {
								int week = cal.get(Calendar.DAY_OF_WEEK);
								if (week > 1 && week < 7) {// 双休不算
									todayAllJiePai = 8 * 3600;// 跨天提交
								}
							}
							if (usersCodeList.contains(codes[i])) {
								for (HotFree hf : todaylist) {
									if (hf.getCode().equals(codes[i])) {
										float alljiepai = hf.getTime();
										alljiepai += todayAllJiePai;
										if (alljiepai > 8 * 3600) {
											alljiepai = 8 * 3600;
										}
										hf.setTime(alljiepai);
										break;
									}
								}
							} else {
								HotFree hf = new HotFree();
								Users user = (Users) totalDao
										.getObjectByCondition(
												"from Users where code=?",
												codes[i]);
								hf.setUserId(user.getId());
								hf.setName(user.getName());
								hf.setCode(user.getCode());
								hf.setDept(user.getDept());
								hf.setTime(todayAllJiePai);
								hf.setType(type);
								hf.setMonth(month);
								// objs[5]="非焊接";
								todaylist.add(hf);
								usersCodeList.add(codes[i]);
							}
						}

					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}
				if (typelist.size() == 0) {
					typelist.addAll(todaylist);
					typeCodeList.addAll(usersCodeList);
				} else {
					for (HotFree todayhf : todaylist) {
						if (typeCodeList.contains(todayhf.getCode())) {
							for (HotFree typehf : typelist) {
								if (typehf.getUserId().equals(
										todayhf.getUserId())) {
									typehf.setTime(typehf.getTime()
											+ todayhf.getTime());
								}
							}
						} else {
							typeCodeList.add(todayhf.getCode());
							typelist.add(todayhf);
						}
					}
				}

			}

			cal.setTime(date);
		}
		// 计算奖金并保存
		if (typelist != null && typelist.size() > 0) {
			for (HotFree savehf : typelist) {
				savehf.setTime(savehf.getTime() / 3600);
				Float money = 0f;
				// if (month.equals("2016-08")) {
				// if (type.equals("手工焊")) {
				// money = 500 * savehf.getTime() / (16 * 8 + 5 * 6);
				// } else if (type.equals("半自动焊")) {
				// money = 400 * savehf.getTime() / (16 * 8 + 5 * 6);
				// } else if (type.equals("自动焊")) {
				// money = 400 * savehf.getTime() / (16 * 8 + 5 * 6);
				// } else {
				// money = 300 * savehf.getTime() / (16 * 8 + 5 * 6);
				// }
				// } else if (month.equals("2015-07")) {
				// if (type.equals("手工焊")) {
				// money = 500 * savehf.getTime() / (9 * 8);
				// } else if (type.equals("半自动焊")) {
				// money = 400 * savehf.getTime() / (9 * 8);
				// } else if (type.equals("自动焊")) {
				// money = 400 * savehf.getTime() / (9 * 8);
				// } else {
				// money = 300 * savehf.getTime() / (9 * 8);
				// }
				// } else if (month.equals("2015-08")) {
				// if (type.equals("手工焊")) {
				// money = 500 * savehf.getTime() / (21 * 5.5f);
				// } else if (type.equals("半自动焊")) {
				// money = 400 * savehf.getTime() / (21 * 5.5f);
				// } else if (type.equals("自动焊")) {
				// money = 400 * savehf.getTime() / (21 * 5.5f);
				// } else {
				// money = 300 * savehf.getTime() / (21 * 5.5f);
				// }
				if (month.equals("2017-08")) {
					if (type.equals("手工焊")) {
						money = 500 * savehf.getTime() / (allDay * 8);
					} else if (type.equals("半自动焊")) {
						money = 400 * savehf.getTime() / (allDay * 8);
					} else if (type.equals("自动焊")) {
						money = 400 * savehf.getTime() / (allDay * 8);
					} else {
						money = 300 * savehf.getTime() / (allDay * 8);
					}
				}
				savehf.setMoney(money);
				totalDao.save(savehf);
			}
		}
		// return typelist;
		return null;
	}

	@Override
	public List findAllMarkId() {
		// TODO Auto-generated method stub
		return totalDao
				.query("select distinct(markId) from Procard where markId in (select markId from ProcardTemplate where procardStyle <> '外购' and standardSize <> '' and errorRange <> '' )");
	}

	@Override
	public List findAllPiCi(String markId) {
		// TODO Auto-generated method stub
		if (markId != null)
			return totalDao.query("from Procard where markId = ?", markId);// 得到批次号：selfCard
		return null;
	}

	@Override
	public ProcardSpecification addProcardSpeci(
			ProcardSpecification procardSpecification) {
		// TODO Auto-generated method stub
		if (procardSpecification != null) {
			ProcardTemplate procardTemplate1 = procardTemplates(procardSpecification
					.getMarkId());
			if (procardTemplate1 != null
					&& !"".equals(procardTemplate1.getStandardSize())
					&& !"".equals(procardTemplate1.getErrorRange())) {
				float f = 0;
				try {
					f = Float.valueOf(procardSpecification
							.getMarkIdActualSize())
							+ Float.valueOf(procardTemplate1.getStandardSize());
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					return null;
				}
				// BigDecimal b = new BigDecimal(f);
				// float f1 = b.setScale(3,
				// BigDecimal.ROUND_HALF_UP).floatValue();
				// b.setScale(2,BigDecimal.ROUND_HALF_UP)
				procardSpecification.setMarkIdSize(procardTemplate1
						.getStandardSize());
				procardSpecification.setMarkIdActualSize(f + "");
				procardSpecification.setAddTime(Util.getDateTime());
				if (totalDao.save(procardSpecification)) {
					return procardSpecification;
				}
			}
		}
		return null;
	}

	@Override
	public ProcardTemplate procardTemplates(String markId) {
		// TODO Auto-generated method stub
		return (ProcardTemplate) totalDao.getObjectByCondition(
				"from ProcardTemplate where markId = ?", markId);
	}

	@Override
	public Map<Integer, Object> getSonMaterial(String markId, String selfCard,
			Integer num) {
		// TODO Auto-generated method stub
		Map<Integer, Object> map = new HashMap<Integer, Object>();
		List<Procard> procardList = totalDao
				.query(
						"from Procard where rootId =(select id from Procard where markId=? and selfCard=?) "
								+ "and jihuoStatua='激活' and status in('已发卡','已发料','领工序') and (procardStyle in('总成','组合','自制') or (procardStyle = '外购' and needProcess is not null and needProcess='yes')) "
								+ "and (hascount is null or hasCount>0) and ((hasAlertCount is null and klNumber>0) or hasAlertCount<klNumber)",
						markId, selfCard);
		Float totalCount = (Float) totalDao
				.getObjectByCondition(
						"select filnalCount from  Procard where markId=? and selfCard=?",
						markId, selfCard);
		float thisMaxCount = 0f;
		if (procardList != null && procardList.size() > 0) {
			for (Procard p : procardList) {
				Float selfCount = p.getFilnalCount() * num / totalCount;
				if (p.getHasAlertCount() == null) {
					p.setHasAlertCount(0f);
				}
				if (selfCount > (p.getKlNumber() - p.getHasAlertCount())) {
					selfCount = p.getKlNumber() - p.getHasAlertCount();
				}
				Float toTotalCount = selfCount * totalCount
						/ p.getFilnalCount();
				if (toTotalCount > thisMaxCount) {
					thisMaxCount = toTotalCount;
				}
				p.setThisAlertCount(selfCount);
				List<ProcardMaterial> pmList = new ArrayList<ProcardMaterial>();
				if (p.getProcardStyle() == null) {
					continue;
				}
				Set<Procard> sonProcardList = p.getProcardSet();
				// 可用在制品数量
				Float zaizhiCount0 = getZaiZhiCount(p.getId());
				Float yzaizhiCount0 = getYclZaiZhiCount(p.getId());
				// 计算叫料占用的在制品
				Float zaizhiCount1 = getJlZaiZhiCount(p.getId());
				Float yzaizhiCount1 = geJltYclZaiZhiCount(p.getId());
				zaizhiCount0 = zaizhiCount0 - zaizhiCount1;
				yzaizhiCount0 = yzaizhiCount0 - yzaizhiCount1;
				ProcardMaterial fpm = new ProcardMaterial();
				fpm.setMarkId(p.getMarkId());
				fpm.setName(p.getProName());// 名称
				fpm.setThecount(selfCount);// 数量
				fpm.setUnit(p.getUnit());// 单位
				fpm.setProcardId(p.getId());// 流水卡Id
				fpm.setProcardCount(selfCount);// 流水数量
				fpm.setZaiCount(zaizhiCount0);// 当前可用在制品数
				fpm.setYzaiCount(yzaizhiCount0);// 当前可用原材料在制品数
				fpm.setSpecification("在制品");
				fpm.setType("在制品");
				Float needSelfCount = selfCount;
				Float needySelfCount = selfCount;
				if (selfCount > zaizhiCount0) {// 需要材料
					needSelfCount = selfCount - zaizhiCount0;
					needySelfCount = selfCount - zaizhiCount0;
					fpm.setWlZaiCount(zaizhiCount0);
					fpm.setWlYzaiCount(yzaizhiCount0);
				} else {
					needSelfCount = 0f;
					needySelfCount = 0f;
					fpm.setWlZaiCount(selfCount);
					fpm.setWlYzaiCount(selfCount);
				}
				if (p.isZhHasYcl()) {// 组合需要原材料
					ProcardMaterial yfpm = new ProcardMaterial();
					yfpm.setMarkId(p.getMarkId());
					yfpm.setName(p.getProName());// 名称
					yfpm.setThecount(selfCount);// 数量
					yfpm.setUnit(p.getUnit());// 单位
					yfpm.setProcardId(p.getId());// 流水卡Id
					yfpm.setProcardCount(selfCount);// 流水数量
					yfpm.setZaiCount(zaizhiCount0);// 当前可用在制品数
					yfpm.setYzaiCount(yzaizhiCount0);// 当前可用原材料在制品数
					yfpm.setSpecification("原材料在制品");
					yfpm.setType("原材料在制品");
					if (needySelfCount > yzaizhiCount0) {
						needySelfCount = needySelfCount - zaizhiCount0;
						yfpm.setWlYzaiCount(yzaizhiCount0);
					} else {
						yfpm.setWlYzaiCount(needySelfCount);
					}
					if (yfpm.getWlYzaiCount() > 0) {
						pmList.add(yfpm);
					}
				}
				fpm.setType("在制品");// 类型
				fpm.setLingliaoStatus("未领");
				if (fpm.getWlZaiCount() > 0) {
					pmList.add(fpm);
				}
				if (sonProcardList != null && sonProcardList.size() > 0) {
					for (Procard son : sonProcardList) {
						if (son.getProcardStyle().equals("外购")) {
							ProcardMaterial pm = new ProcardMaterial();
							pm.setMarkId(son.getMarkId());
							// pm.setTrademark(p.getTrademark());// 牌号
							pm.setSpecification(son.getSpecification());// 规格
							pm.setName(son.getProName());// 名称
							pm.setBili(son.getQuanzi2() / son.getQuanzi1());// 比例
							pm.setThecount(needSelfCount * son.getQuanzi2()
									/ son.getQuanzi1());// 数量
							pm.setUnit(son.getUnit());// 单位
							pm.setProcardId(son.getId());// 流水卡Id
							pm.setProcardCount(selfCount);// 流水数量
							pm.setType("外购件");// 类型
							pm.setLingliaoStatus("未领");
							pmList.add(pm);
						}
					}
				}
				if (!p.getProcardStyle().equals("外购")
						&& p.getTrademark() != null
						&& p.getTrademark().length() > 0
						&& p.getQuanzi1() != null && p.getQuanzi2() != null
						&& p.getQuanzi1() > 0 && p.getQuanzi2() > 0) {
					// 有原材料
					ProcardMaterial pm = new ProcardMaterial();
					// pm.setMarkId(son.getMarkId());
					pm.setTrademark(p.getTrademark());// 牌号
					pm.setSpecification(p.getSpecification());// 规格
					pm.setName(p.getYuanName());// 名称
					pm.setBili(p.getQuanzi2() / p.getQuanzi1());// 比例
					pm.setThecount(needySelfCount * p.getQuanzi2()
							/ p.getQuanzi1());// 数量
					pm.setUnit(p.getYuanUnit());// 单位
					pm.setProcardId(p.getId());// 流水卡Id
					pm.setProcardCount(selfCount);// 流水数量
					pm.setType("原材料");// 类型
					pm.setLingliaoStatus("未领");
					pmList.add(pm);
				}
				p.setProcardMateriallist(pmList);
			}
			num = (int) thisMaxCount;
			map.put(1, procardList);
			map.put(2, num);
			return map;
		}
		return null;
	}

	@Override
	public String sxPeopleSkill() {
		// TODO Auto-generated method stub
		List<Object[]> idsAndProcessNameList = totalDao
				.query("select log.userId ,process.processName from ProcessInforReceiveLog log , ProcessInfor process where process.id=log.fk_processInforId and log.firstApplyDate>'2015-12-31 24:00:00'");
		if (idsAndProcessNameList.size() > 0) {
			Map<Integer, StringBuffer> idAndProcessNamemap = new HashMap<Integer, StringBuffer>();
			// 以userId为key存放工作过的工序名称
			for (Object[] idsAndProcessName : idsAndProcessNameList) {
				String ids = idsAndProcessName[0].toString();
				String processName = idsAndProcessName[1].toString();
				if (ids.indexOf(",") > 0) {// 多人领一工序
					String[] idStrs = ids.split(",");
					if (idStrs.length > 0) {
						for (String idstr : idStrs) {// 分离多人领一工序
							Users user = (Users) totalDao
									.getObjectByCondition(
											"from Users where id=? and onWork in('在职','实习','试用')",
											Integer.parseInt(idstr));
							if (user != null) {// 以userId为key存放工作过的工序名称
								StringBuffer processSb = idAndProcessNamemap
										.get(user.getId());
								if (processSb == null) {
									processSb = new StringBuffer();
								}
								if (processSb.length() == 0) {
									processSb.append("'" + processName + "'");
								} else if (processSb.indexOf("'" + processName
										+ "'") < 0) {
									processSb.append(",'" + processName + "'");
								}
								idAndProcessNamemap
										.put(user.getId(), processSb);
							}
						}
					}
				} else {// 单人领工序
					Users user = (Users) totalDao
							.getObjectByCondition(
									"from Users where id=? and onWork in('在职','实习','试用')",
									Integer.parseInt(ids));
					if (user != null) {// 以userId为key存放工作过的工序名称
						StringBuffer processSb = idAndProcessNamemap.get(user
								.getId());
						if (processSb == null) {
							processSb = new StringBuffer();
						}
						if (processSb.length() == 0) {
							processSb.append("'" + processName + "'");
						} else if (processSb.indexOf("'" + processName + "'") < 0) {
							processSb.append(",'" + processName + "'");
						}
						idAndProcessNamemap.put(user.getId(), processSb);
					}
				}
			}
			// 查出user没有用领过的工序取消绑定
			Set<Integer> userIdSet = idAndProcessNamemap.keySet();
			if (userIdSet != null && userIdSet.size() > 0) {
				for (Integer userid : userIdSet) {
					StringBuffer processSqlSb = idAndProcessNamemap.get(userid);
					if (processSqlSb != null && processSqlSb.length() > 0) {
						String processSql = processSqlSb.toString();
						List<ProcessGzstore> deleteProcessList = totalDao
								.query("from ProcessGzstore where processName not in("
										+ processSql + ")");
						if (deleteProcessList != null
								&& deleteProcessList.size() > 0) {
							Users user = (Users) totalDao.getObjectById(
									Users.class, userid);
							for (ProcessGzstore delete : deleteProcessList) {
								Set<Users> userSet = delete.getUsers();
								userSet.remove(user);
								delete.setUsers(userSet);
								totalDao.update(delete);
							}
						}
					}
				}
			}
		}
		return null;
	}

	/***
	 * 查询件号的订单和批次状态数据
	 * 
	 * @param markId
	 * @return
	 */
	@Override
	public Object[] showOrderAndProcard(String markId, int page, int rows) {
		if (markId == null || markId.length() <= 0) {
			String hql_procard = "select ywMarkId from Procard where procardStyle='总成' and status not in ('完成','入库','取消') and ywmarkid is not null AND ywmarkid<>'' order by id";
			markId = (String) totalDao.getObjectByCondition(hql_procard);
			if (markId == null || markId == "") {
				String hql_procard_markid = "select markId from Procard where  procardstyle = '总成'  and status not in ('完成','入库','取消') and ywMarkId not in "
						+ "(select ywMarkId from Procard where procardStyle='总成' and status not in ('完成','入库','取消') and ywmarkid is not null AND ywmarkid<>'' )";
				markId = (String) totalDao
						.getObjectByCondition(hql_procard_markid);
			}
		}
		if (markId != null && markId.length() > 0) {
			// 查询该屏幕对应的所有编码
			// String date = Util.getDateTime("yyyy-MM-dd");
			String hql = "select distinct ywMarkId from Procard where procardstyle = '总成'  and status not in ('完成','入库','取消') and ywmarkid is not null AND ywmarkid<>'' order by ywMarkId";
			List<Procard> list_allMarkid = totalDao.query(hql);

			String hql_markId = "select distinct markId from Procard where procardstyle = '总成'  and status not in ('完成','入库','取消') and ywMarkId not in "
					+ "(select ywMarkId from Procard where procardstyle = '总成'  and status not in ('完成','入库','取消') and ywmarkid is not null AND ywmarkid<>'')";
			list_allMarkid.addAll(totalDao.query(hql_markId));

			String hql_procard_markId = "select markId from ProcardTemplate where markId = '"
					+ markId + "'";
			String markIds = (String) totalDao
					.getObjectByCondition(hql_procard_markId);
			String hql_procard_ywMarkId = "select ywMarkId from ProcardTemplate where ywMarkId = '"
					+ markId + "'";
			String ywmarkIds = (String) totalDao
					.getObjectByCondition(hql_procard_ywMarkId);
			if (markIds != null && markIds != "") {
				markId = markIds;
			} else if (ywmarkIds != null && ywmarkIds != "") {
				markId = ywmarkIds;
			}

			/************* 查询件号对应的订单完成数量 **********************/
			String oneMonth = Util.getDateTime("yyyy-MM") + "-01";
			String lastMonth = Util.getDateTime("yyyy-MM") + "-31";
			// 拖欠数量
			String arrears_hql = "select sum(num) from ProductManager where (pieceNumber=? or ywMarkId=?) and orderManager.paymentDate<?  and allocationsNum is not null and allocationsNum<num";
			Float tuoqianNum = (Float) totalDao.getObjectByCondition(
					arrears_hql, markId, markId, oneMonth);
			// 本月数量
			String nowMonth_hql = "select sum(num) from ProductManager where (pieceNumber=? or ywMarkId=?) and orderManager.paymentDate>? and orderManager.paymentDate<?  and allocationsNum is not null and allocationsNum<num";
			Float nowMonthNum = (Float) totalDao.getObjectByCondition(
					nowMonth_hql, markId, markId, oneMonth, lastMonth);
			// 以后数量
			String after_hql = "select sum(num) from ProductManager where (pieceNumber=? or ywMarkId=?) and orderManager.paymentDate>?  and allocationsNum is not null and allocationsNum<num";
			Float afterNum = (Float) totalDao.getObjectByCondition(after_hql,
					markId, markId, lastMonth);
			List list = new ArrayList();
			list.add(Util.getLastMonth(Util.getDateTime("yyyy-MM")));
			list.add(tuoqianNum);
			list.add(Util.getDateTime("yyyy-MM"));
			list.add(nowMonthNum);
			list.add("");
			list.add(afterNum);
			/**************** 查询批次明细 ****************/
			String hql_procard = "from Procard where status not in ('入库','取消') and (markId=? or ywMarkId=?) and procardStyle='总成' order by selfCard";
			// List list_procard = totalDao.query(hql_procard, markId, markId);

			List list_procard = totalDao.findAllByPage(hql_procard, page, rows,
					markId, markId);// findByPage(hql_procard, rows, page,
			// markId, markId);//find(hql_procard,
			// params, page, rows);
			int count = totalDao.getCount(hql_procard, markId, markId);

			for (int i = 0; i < list_procard.size(); i++) {
				Procard rootProcard = (Procard) list_procard.get(i);
				/**** 生产状态 ************/
				// 已领工序数
				String hql_procrad_status = "from Procard where id in (select procard.id from ProcessInfor where procard.id in"
						+ "(select id from Procard where rootId=?) and status='已领' and (dataStatus is null or dataStatus !='删除')) and (sbStatus is null or sbStatus !='删除')";
				List listprocrad_status = totalDao.query(hql_procrad_status,
						rootProcard.getId());
				if (listprocrad_status != null && listprocrad_status.size() > 0) {
					String procardStatus = "";
					for (int j = 0; j < listprocrad_status.size(); j++) {
						if (j == 3) {
							break;
						}
						Procard procard = (Procard) listprocrad_status.get(j);
						String hql_process_status = "from ProcessInfor where productStyle='外委' and procard.id =? and status='已领' and (dataStatus is null or dataStatus !='删除')";
						Integer wwcount = totalDao.getCount(hql_process_status,
								procard.getId());
						if (wwcount > 0) {
							procardStatus += procard.getMarkId() + " 外委中<br/>";
						} else {
							procardStatus += procard.getMarkId() + " 加工中<br/>";
						}
					}
					rootProcard.setRootSelfCard(procardStatus);
				} else {
					rootProcard.setRootSelfCard(rootProcard.getStatus());
				}

				/**** 生产进度 ************/
				// 总工序数
				String hql_all = "select sum(a.filnalCount*(select count(*) from ProcessInfor b where b.procard.id= a.id "
						+ " and (b.dataStatus is null or b.dataStatus !='删除'))) from Procard a "
						+ "	where a.rootId=?"
						+ "	and (a.sbStatus is null or a.sbStatus !='删除') "
						+ " and (a.procardStyle in ('自制','总成') or (a.procardStyle ='外购' and a.needProcess ='yes') )";
				Float allprocessNum = (Float) totalDao.getObjectByCondition(
						hql_all, rootProcard.getId());
				// 提交工序数
				String hql_process_sum = "select sum(submmitCount) from ProcessInfor "
						+ "where  procard.id in(select id from Procard where rootId=?  and (sbStatus is null or sbStatus !='删除')) "
						+ "and (dataStatus is null or dataStatus !='删除')";
				Float finalprocessNum = (Float) totalDao.getObjectByCondition(
						hql_process_sum, rootProcard.getId());

				Float jindu = (finalprocessNum / allprocessNum) * 100;

				if (jindu > 100) {
					jindu = 100F;
				}
				rootProcard.setLingliaoren(jindu + "");
				/**** wxf 缺件状态 ************/
				String hql_wg = "from Procard where rootId=? and procardStyle='外购' and jihuoStatua='激活'"
						+ " and status<>'完成' and  ABS(filnalCount- tjNumber) > 1e-2 and (sbStatus is null or sbStatus !='删除')";
				List list_wg = totalDao.query(hql_wg, rootProcard.getId());
				if (list_wg != null && list_wg.size() > 0) {
					rootProcard.setRootMarkId("缺件");
					rootProcard.setProcardList(list_wg);
				} else {
					rootProcard.setRootMarkId("否");
				}
			}

			return new Object[] { markId, list, list_procard, list_allMarkid,
					count };
		}
		return null;
	}

	@Override
	public String sendMaterialsNotify(ProcardMaterialHead pmHead,
			List<Procard> procardList) {
		// TODO Auto-generated method stub
		Users user = Util.getLoginUser();
		if (user == null) {
			return "对不起,请先登录!";
		}
		if (procardList != null && procardList.size() > 0) {
			pmHead.setUserCode(user.getCode());
			pmHead.setUserDept(user.getDept());
			pmHead.setUserId(user.getId());
			pmHead.setUserName(user.getName());
			pmHead.setHastrue("否");
			pmHead.setLingliaoStatus("未领");
			if (pmHead.getReceiverId() != null) {
				Users receive = (Users) totalDao.getObjectById(Users.class,
						pmHead.getReceiverId());
				if (receive != null) {
					pmHead.setReceiverName(receive.getName());
				}
			}
			Float thisCount = pmHead.getThisCount();
			totalDao.save(pmHead);
			if (pmHead.getId() != null) {
				for (Procard p : procardList) {
					Procard old = (Procard) totalDao.getObjectById(
							Procard.class, p.getId());
					// 可用在制品数量
					Float zaizhiCount0 = getZaiZhiCount(old.getId());
					Float yzaizhiCount0 = getYclZaiZhiCount(old.getId());
					// 计算叫料占用的在制品
					Float zaizhiCount1 = getJlZaiZhiCount(old.getId());
					Float yzaizhiCount1 = geJltYclZaiZhiCount(old.getId());
					zaizhiCount0 = zaizhiCount0 - zaizhiCount1;
					yzaizhiCount0 = yzaizhiCount0 - yzaizhiCount1;

					Float needSelfCount = thisCount;
					Float needySelfCount = thisCount;
					if (thisCount > zaizhiCount0) {// 需要材料
						needSelfCount = thisCount - zaizhiCount0;
						needySelfCount = thisCount - zaizhiCount0;
					} else {
						needSelfCount = 0f;
						needySelfCount = 0f;
					}
					Float maxCount = null;
					if (old.getHasAlertCount() == null) {
						old.setHasAlertCount(0f);
					}
					maxCount = old.getKlNumber() - old.getHasAlertCount();
					if (maxCount < p.getThisAlertCount()) {
						throw new RuntimeException(p.getMarkId() + "第"
								+ p.getSelfCard() + "批次的可领数量为:"
								+ p.getKlNumber() + p.getUnit() + ",已发提醒数量为:"
								+ p.getHasAlertCount() + p.getUnit()
								+ ",此次欲发提醒数量超额!");
					}
					Float selfCount = p.getThisAlertCount();
					old.setHasAlertCount(old.getHasAlertCount()
							+ p.getThisAlertCount());
					totalDao.update(old);
					if (old.getProcardStyle() == null) {
						continue;
					}
					Set<Procard> sonProcardList = old.getProcardSet();
					if (sonProcardList != null && sonProcardList.size() > 0) {
						for (Procard son : sonProcardList) {
							if (son.getProcardStyle().equals("外购")) {
								ProcardMaterial pm = new ProcardMaterial();
								pm.setMarkId(son.getMarkId());
								pm.setSelfCard(son.getSelfCard());
								// pm.setTrademark(p.getTrademark());// 牌号
								pm.setSpecification(son.getSpecification());// 规格
								pm.setName(son.getProName());// 名称
								pm.setBili(son.getQuanzi2() / son.getQuanzi1());// 比例
								pm.setThecount(selfCount * son.getQuanzi2()
										/ son.getQuanzi1());// 数量
								pm.setUnit(son.getUnit());// 单位
								pm.setProcardId(son.getId());// 流水卡Id
								pm.setProcardCount(selfCount);// 流水数量
								pm.setType("外购件");// 类型
								pm.setHeadId(pmHead.getId());
								pm.setLingliaoStatus("未领");
								totalDao.save(pm);
							}
						}
					}
					if (!old.getProcardStyle().equals("外购")
							&& old.getTrademark() != null
							&& old.getTrademark().length() > 0
							&& old.getQuanzi1() != null
							&& old.getQuanzi2() != null && old.getQuanzi1() > 0
							&& old.getQuanzi2() > 0) {
						// 有原材料
						ProcardMaterial pm = new ProcardMaterial();
						pm.setMarkId(old.getMarkId());
						pm.setSelfCard(old.getSelfCard());
						pm.setTrademark(old.getTrademark());// 牌号
						pm.setSpecification(old.getSpecification());// 规格
						pm.setName(old.getYuanName());// 名称
						pm.setBili(old.getQuanzi2() / old.getQuanzi1());// 比例
						pm.setThecount(selfCount * old.getQuanzi2()
								/ old.getQuanzi1());// 数量
						pm.setUnit(old.getYuanUnit());// 单位
						pm.setProcardId(old.getId());// 流水卡Id
						pm.setProcardCount(selfCount);// 流水数量
						pm.setType("原材料");// 类型
						pm.setHeadId(pmHead.getId());
						pm.setLingliaoStatus("未领");
						totalDao.save(pm);
					}

				}
			}
		}
		AlertMessagesServerImpl.addAlertMessages("配料查询管理", "您有待配料的信息,总成件号:"
				+ pmHead.getMarkId() + ",批次:" + pmHead.getSelfCard() + ",数量:"
				+ pmHead.getThisCount() + "请前往查看:" + Util.serverUrl
				+ "/ProcardAction!getProcardMatrialDetail.action?id="
				+ pmHead.getId(), "1");
		return "true";
	}

	@Override
	public Object[] findPmHeadByCondition(ProcardMaterialHead pmHead,
			int pageNo, int pageSize, String pageStatus) {
		// TODO Auto-generated method stub
		if (pmHead == null) {
			pmHead = new ProcardMaterialHead();
		}
		String hql = totalDao.criteriaQueries(pmHead, null)
				+ " order by hastrue";
		List list = totalDao.findAllByPage(hql, pageNo, pageSize);
		int count = totalDao.getCount(hql);
		Object[] o = { list, count };
		return o;
	}

	@Override
	public List getProcardMatrialDetail(Integer id) {
		// TODO Auto-generated method stub
		return totalDao.query("from ProcardMaterial where headId=?", id);
	}

	@Override
	public ProcardMaterialHead getProcardMatrialHead(Integer id) {
		// TODO Auto-generated method stub
		return (ProcardMaterialHead) totalDao.getObjectById(
				ProcardMaterialHead.class, id);
	}

	@Override
	public String sureMatrial(Integer id) {
		// TODO Auto-generated method stub
		ProcardMaterialHead pmHead = getProcardMatrialHead(id);
		if (pmHead != null) {
			pmHead.setHastrue("是");
			totalDao.update(pmHead);
			Users user = (Users) totalDao.getObjectById(Users.class, pmHead
					.getUserId());
			if (user != null) {
				List<String> codes = new ArrayList<String>();
				codes.add(user.getCode());
				RtxUtil.sendNoLoginNotify(codes, "您要求的备的" + pmHead.getMarkId()
						+ "第" + pmHead.getSelfCard() + "批的"
						+ pmHead.getThisCount() + "套材料已备好", "物料备齐通知", "0", "0");
				return "true";
			}
		}
		return "没有找到对应的备料需求！";
	}

	@Override
	public Object[] findGysWgPlanList(WaigouWaiweiPlan wwPlan, int pageNo,
			int pageSize, String pageStatus, Integer userId) {
		// TODO Auto-generated method stub
		if (userId == null) {
			return null;
		}
		if (wwPlan == null) {
			wwPlan = new WaigouWaiweiPlan();
		}
		wwPlan.setType("外购");
		wwPlan.setUserId(userId);
		String jihuos = " and status<>'待激活'";
		String hql = totalDao.criteriaQueries(wwPlan, null) + jihuos;
		List list = totalDao.findAllByPage(hql, pageNo, pageSize);
		int count = totalDao.getCount(hql);
		Object[] o = { list, count };
		return o;
	}

	@Override
	public List findCardTemplateTz(Integer id) {
		// TODO Auto-generated method stub
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			String addSql2 = null;
			if (procard.getProductStyle().equals("批产")) {
				addSql2 = " and (productStyle is null or productStyle !='试制') and glId is null ";
			} else {
				addSql2 = " and glId= " + id;
			}
			return totalDao
					.query(
							"from ProcessTemplateFile where (processNO is null or processNO='') and status='默认' and banci=?  and markId=? "
									+ addSql2 + " order by processNO", procard
									.getBanci(), procard.getMarkId());
		} else {
			return null;
		}
	}

	@Override
	public ProcardTemplate getProcardTemplateBywgplanId(Integer id) {
		// TODO Auto-generated method stub
		WaigouWaiweiPlan paln = (WaigouWaiweiPlan) totalDao.getObjectById(
				WaigouWaiweiPlan.class, id);
		String sql = "from ProcardTemplate where markId=? ";
		if (paln.getBanci() == null) {
			sql += " and (banci is null or banci=0)";
		} else {
			sql += " and banci is not null and banci=" + paln.getBanci();
		}
		return (ProcardTemplate) totalDao.getObjectByCondition(sql, paln
				.getMarkId());
	}

	@Override
	public List<ProcessInfor> findProcessListByCardId(Integer id) {
		// TODO Auto-generated method stub
		return totalDao.query("from ProcessInfor where procard.id=?", id);
	}

	public Map<Integer,Object> findtowwyxDataByrootId(Integer id){
		List<Procard> procardList = null;
		String hql = "from Procard where rootId=? and (procardStyle !='外购' or (procardStyle = '外购' and needProcess ='yes') and (sbStatus is null or sbStatus !='删除'))";
		procardList = totalDao.query(hql, id);
		hql = "select id "+hql;
		List<ProcessInforWWApplyDetail> wwApplyDetailList = totalDao
		.query(
				"from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除')) " +
				"and procardId in("+hql+") order by procardId, processInforWWApply.id",
				id);
		List<ProcessInfor> processList = totalDao
		.query(
				"from ProcessInfor where procard.id in("+hql+") and (dataStatus is null or dataStatus !='删除') order by procard.id, processNO",
				id);
		if (processList != null && processList.size() > 0) {
			for (ProcessInfor process : processList) {
				if (process.getSelectWwCount() == null) {
					process.setSelectWwCount(0f);
				}
				if (process.getApplyWwCount() == null) {
					process.setApplyWwCount(0f);
				}
				if (process.getAgreeWwCount() == null) {
					process.setAgreeWwCount(0f);
				}
				// 获取生产提交数量
				Float sctjCount = (Float) totalDao
						.getObjectByCondition(
								"select sum(submitNumber) from ProcessInforReceiveLog"
										+ " where status='提交' and fk_processInforId=?",
								process.getId());
				Float scwtjCount = (Float) totalDao
						.getObjectByCondition(
								"select sum(receiveNumber) from ProcessInforReceiveLog"
										+ " where status='领取' and fk_processInforId=?",
								process.getId());
				if (sctjCount == null) {
					sctjCount = 0f;
				}
				if (scwtjCount == null) {
					scwtjCount = 0f;
				}
				process.setScyzCount(sctjCount+scwtjCount);
				process.setProcardId(process.getProcard().getId());
				if (process.getGzstoreId() != null) {
					Gzstore gzstore = (Gzstore) totalDao.get(
							Gzstore.class, process.getGzstoreId());
					if (gzstore != null) {
						process.setPlace(gzstore.getPlace());
					}
				}

			}
		}
		Map<Integer,Object> map = new HashMap<Integer, Object>();
		map.put(1, procardList);
		map.put(2, wwApplyDetailList);
		map.put(3, processList);
		return map;
	}
	@Override
	public List<Procard> findProcardTemByRootId(Integer rootId, int type) {
		// TODO Auto-generated method stub
		if (rootId != null && rootId > 0) {
			List<Procard> procardList = null;
			if (type == 1) {
				String hql = "from Procard where rootId=? and (procardStyle !='外购' or (procardStyle = '外购' and needProcess ='yes') and (sbStatus is null or sbStatus !='删除'))";
				procardList = totalDao.query(hql, rootId);
			} else {
				String hql = "from Procard where rootId=?";
				procardList = totalDao.query(hql, rootId);
			}
			
			if (procardList != null && procardList.size() > 0) {
				for (Procard procard : procardList) {
					List<ProcessInforWWApplyDetail> wwApplyDetailList = totalDao
							.query(
									"from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除')) and procardId=? order by processInforWWApply.id",
									procard.getId());
					if (wwApplyDetailList != null
							&& wwApplyDetailList.size() > 0) {
						for (ProcessInforWWApplyDetail wwApplyDetail : wwApplyDetailList) {
							wwApplyDetail.setApplyStatus(wwApplyDetail
									.getProcessInforWWApply().getStatus());
						}
					}
					procard.setWwApplyDetailList(wwApplyDetailList);
					List<ProcessInfor> processList = totalDao
							.query(
									"from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus !='删除') order by processNO",
									procard.getId());
					if (processList != null && processList.size() > 0) {
						for (ProcessInfor process : processList) {
							if (process.getSelectWwCount() == null) {
								process.setSelectWwCount(0f);
							}
							if (process.getApplyWwCount() == null) {
								process.setApplyWwCount(0f);
							}
							if (process.getAgreeWwCount() == null) {
								process.setAgreeWwCount(0f);
							}
							Float wwblCount = 0f;
							if (procard.getWwblCount() != null) {
								wwblCount = procard.getWwblCount();
							}
							// 获取生产提交数量
							Float sctjCount = (Float) totalDao
									.getObjectByCondition(
											"select sum(submitNumber) from ProcessInforReceiveLog"
													+ " where status='提交' and fk_processInforId=?",
											process.getId());
							Float scwtjCount = (Float) totalDao
									.getObjectByCondition(
											"select sum(receiveNumber) from ProcessInforReceiveLog"
													+ " where status='领取' and fk_processInforId=?",
											process.getId());
							if (sctjCount == null) {
								sctjCount = 0f;
							}
							if (scwtjCount == null) {
								scwtjCount = 0f;
							}
							Float syCount = procard.getFilnalCount()
									- wwblCount - scwtjCount - sctjCount
									- process.getSelectWwCount()
									- process.getApplyWwCount()
									- process.getAgreeWwCount();
							process.setApplyWwCount(syCount);
							if (process.getGzstoreId() != null) {
								Gzstore gzstore = (Gzstore) totalDao.get(
										Gzstore.class, process.getGzstoreId());
								if (gzstore != null) {
									process.setPlace(gzstore.getPlace());
								}
							}

						}
					}
					procard.setProcessList(processList);
				}
			}
			return procardList;
		}
		return null;
	}

	@Override
	public List<ProcessInfor> findProcessListForWWByCardId(Integer id) {
		// TODO Auto-generated method stub
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			List<ProcessInfor> processList = totalDao.query(
					"from ProcessInfor where procard.id=?", id);
			if (processList != null && processList.size() > 0) {
				for (ProcessInfor process : processList) {
					if (process.getSelectWwCount() == null) {
						process.setSelectWwCount(0f);
					}
					if (process.getApplyWwCount() == null) {
						process.setApplyWwCount(0f);
					}
					if (process.getAgreeWwCount() == null) {
						process.setAgreeWwCount(0f);
					}
					// //获取外委合同
					// List<Price> priceList =
					// totalDao.query("from Price where partNumber=? and gongxunum=?",
					// procard.getMarkId(),process.getProcessNO()+"");
					// if(priceList==null||priceList.size()==0){
					// process.setHtStatus("没有");
					// }else{
					// Long nowLong = new Date().getTime();
					// for(Price price :priceList){
					// if(price.getPricePeriodEnd()==null||price.getPricePeriodEnd().length()==0){
					// //价格截止日期为空代表永久有效
					// process.setHtStatus("可用");
					// break;
					// }else{
					// Long
					// timeLong=Util.StringToDate(price.getPricePeriodEnd(),
					// null).getTime();
					// if(nowLong<=nowLong){//在有效期内
					// process.setHtStatus("可用");
					// break;
					// }else{
					// process.setHtStatus("过期");
					// }
					// }
					// }
					// }
				}
				return processList;
			}
		}
		return null;
	}

	@Override
	public Map<Integer, Object> wwyx(List<ProcessInforWWApplyDetail> pwwApplyDetailList,
			Integer procardId) {
		// TODO Auto-generated method stub
		Map<Integer, Object> map = new HashMap<Integer, Object>();
		Users user = Util.getLoginUser();
		if (user == null) {
			String msg= "请先登录!";
			map.put(1, msg);
			return map;
		}
		Procard procard = (Procard) totalDao.getObjectById(Procard.class,
				procardId);
		if (procard == null) {
			String msg= "没有找到对应的零件!";
			map.put(1, msg);
			return map;
		}
		Procard totalCard = (Procard) totalDao.getObjectById(Procard.class,
				procard.getRootId());
		glIdList = new ArrayList<Integer>();
		String msg = "";
		if (pwwApplyDetailList != null && pwwApplyDetailList.size() > 0) {
			// 创建主表对象
			List<ProcessInforWWApply> wwApplyList = (List<ProcessInforWWApply>) totalDao
					.query(
							"from ProcessInforWWApply where status='未申请' and procardId=?",
							totalCard.getId());
			ProcessInforWWApply wwApply = null;
			if (wwApplyList != null && wwApplyList.size() > 0) {
				for (ProcessInforWWApply pa : wwApplyList) {
					if (pa.getStatus() != null) {
						if (pa.getStatus().equals("未审批")
								|| pa.getStatus().equals("审批中")) {
							map.put(1, "您已提交过此生产批次的外委申请请不要重复申请!");
							return map;
						} else if (pa.getStatus().equals("未申请")) {
							wwApply = pa;
							break;// break的作用是未申请优先于打回
						} else if (pa.getStatus().equals("打回")) {
							wwApply = pa;
						}
					}
				}
			}
			Set<ProcessInforWWApplyDetail> detailSet = null;
			if (wwApply == null) {
				wwApply = new ProcessInforWWApply();
				wwApply.setWwApplyNumber(wwNumber());// 外委申请单编号
				wwApply.setFinalCount(totalCard.getFilnalCount());
				wwApply.setProcardId(totalCard.getId());
				wwApply.setYwMarkId(totalCard.getYwMarkId());// 业务件号
				wwApply.setMarkId(totalCard.getMarkId());// 总成件号
				wwApply.setProName(totalCard.getProName());// 总成名称
				wwApply.setSelfCard(totalCard.getSelfCard());// 总成批次
				wwApply.setOrderNumber(totalCard.getOrderNumber());// 内部订单号
				wwApply.setProcardTime(totalCard.getProcardTime());// 批次转换时间
				wwApply.setUserId(user.getId());
				wwApply.setUserCode(user.getCode());
				wwApply.setUserName(user.getName());
				wwApply.setAddTime(Util.getDateTime());
				wwApply.setProcessStatus("预选未审批");
				wwApply.setStatus("未申请");
				detailSet = new HashSet<ProcessInforWWApplyDetail>();
			} else {
				detailSet = wwApply.getProcessInforWWApplyDetails();
			}
			List<Integer> processNoList = new ArrayList<Integer>();
			for (ProcessInforWWApplyDetail detail : pwwApplyDetailList) {
				if (detail == null || detail.getApplyCount() == null
						|| detail.getApplyCount() == 0) {
					continue;
				}
				if (!totalCard.getWlstatus().equals("待定")
						&& detail.getWwType().equals("包工包料")) {
					throw new RuntimeException("当前生产件物料状态不是待定，不能进行包工包料外委!");
				}
				// if(detail.getWwType()!=null&&detail.getWwType().equals("包工包料")
				// &&(detail.getWwMarkId()==null||detail.getWwMarkId().length()==0)){
				// msg+= "包工包料委外需要绑定对应外购件!";
				// }
				String processNOs = detail.getProcessNOs();
				String[] strs = processNOs.split(";");
				if (strs != null && strs.length > 0) {
					detail.setProcessStatus("预选未审批");
					detail.setProcardId(procard.getId());// 零件ID
					detail.setMarkId(procard.getMarkId());// 件号
					detail.setProName(procard.getProName());// 零件名
					detail.setSelfCard(procard.getSelfCard());// 批次
					detail.setUserId(user.getId());// 选择人id
					detail.setUserName(user.getName());// 选择人名字
					detail.setUserCode(user.getCode());// 选择人工号
					detail.setAddTime(Util.getDateTime());// 选择时间
					detail.setBanbenNumber(procard.getBanBenNumber());
					detail.setBanci(procard.getBanci());
					detail.setUnit(procard.getUnit());
					List<ProcessInfor> oldList = totalDao
							.query(
									"from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除') order by processNO",
									procard.getId());
					Integer minProcessNo = null;
					Integer maxProcessNo = null;
					for (String processNOStr : strs) {
						Integer processNo = Integer.parseInt(processNOStr);
						if (processNoList.contains(processNo)) {
							throw new RuntimeException("请不要重复选择工序，工序号为:"
									+ processNo);
						}
						for (ProcessInfor old : oldList) {
							if (old.getProcessNO().equals(processNo)) {
								if (minProcessNo == null
										|| processNo < minProcessNo) {
									minProcessNo = processNo;
								}
								if (maxProcessNo == null
										|| processNo > maxProcessNo) {
									maxProcessNo = processNo;
								}
								processNoList.add(processNo);
								if (old.getSelectWwCount() == null) {
									old.setSelectWwCount(0f);
								}
								if (old.getApplyWwCount() == null) {
									old.setApplyWwCount(0f);
								}
								if (old.getAgreeWwCount() == null) {
									old.setAgreeWwCount(0f);
								}
								Float wwblCount = 0f;
								if (procard.getWwblCount() != null) {
									wwblCount = procard.getWwblCount();
								}
								// 获取生产提交数量
								Float sctjCount = (Float) totalDao
										.getObjectByCondition(
												"select sum(submitNumber) from ProcessInforReceiveLog"
														+ " where status='提交' and fk_processInforId=?",
												old.getId());
								Float scwtjCount = (Float) totalDao
										.getObjectByCondition(
												"select sum(receiveNumber) from ProcessInforReceiveLog"
														+ " where status='领取' and fk_processInforId=?",
												old.getId());
								if (sctjCount == null) {
									sctjCount = 0f;
								}
								if (scwtjCount == null) {
									scwtjCount = 0f;
								}
								Float syCount = procard.getFilnalCount()
										- sctjCount - scwtjCount - wwblCount
										- old.getSelectWwCount()
										- old.getApplyWwCount()
										- old.getAgreeWwCount();
								if (syCount < detail.getApplyCount()) {
									// 临时屏蔽
									msg += "第" + old.getProcessNO() + "工序:"
											+ old.getProcessName() + "最多可预选"
											+ syCount + procard.getUnit()
											+ "!\n";
									// 临时打开
									old.setSelectWwCount(old.getSelectWwCount()
											+ detail.getApplyCount());
									totalDao.update(old);
								} else {
									old.setSelectWwCount(old.getSelectWwCount()
											+ detail.getApplyCount());
									totalDao.update(old);
								}
							}
						}
					}
					if (minProcessNo == null || maxProcessNo == null) {
						throw new RuntimeException("请选择有效的工序!");
					}
					// 不要跳选工序的代码
					StringBuffer sb = new StringBuffer();
					for (ProcessInfor old : oldList) {
						if (old.getProcessNO() >= minProcessNo
								&& old.getProcessNO() <= maxProcessNo
								&& !processNoList.contains(old.getProcessNO())) {
							if (sb.length() == 0) {
								sb.append(old.getProcessNO());
							} else {
								sb.append("," + old.getProcessNO());
							}
						}
					}
					if (sb.length() > 0) {
						throw new RuntimeException("请不要跳选工序(第" + sb.toString()
								+ "工序)!");
					}
					// 不要跳选工序的代码结束
					Price price = (Price) totalDao
							.getObjectByCondition(
									"from Price where wwType=? and partNumber=? and gongxunum=? and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
											+ Util.getDateTime()
											+ "')  order by id desc", detail
											.getWwType(), detail.getMarkId(),
									detail.getProcessNOs());
					if (price != null) {
						detail.setPriceId(price.getId());
						detail.setGysId(price.getGysId());
						String gysName = (String) totalDao
								.getObjectByCondition(
										"select name from ZhUser where id=?",
										price.getGysId());
						detail.setGysName(gysName);
						// 比对供应商设变数据
						WaigouPlan historywgp = (WaigouPlan) totalDao
								.getObjectByCondition(
										" from WaigouPlan where markId=? and processNOs=? and gysId=? order by banci desc",
										detail.getMarkId(), detail
												.getProcessNOs(), price
												.getGysId());
						if (historywgp == null) {
							detail.setHadChange("第一次");
						} else {
							Procard historyp = (Procard) totalDao
									.getObjectByCondition(
											"from Procard where id in(select procardId from"
													+ " ProcardWGCenter where wgOrderId =?)",
											historywgp.getId());
							if (historyp == null) {
								detail.setHadChange("是");
							} else {
								if (Util.isEquals(historyp.getBanci(), procard
										.getBanci())) {
									detail.setHadChange("否");
								} else {
									detail.setHadChange("是");
								}
								// int changeCount
								// =compareProcardww(procard,historyp,detail,0);
								// if(changeCount>0){
								// detail.setHadChange("是");
								// }
							}
						}

					} else {
						String hql = "from NoPriceprocess where markId = ? and processNO=? and rootMarkId= ?";
						NoPriceprocess noPriceprocess = new NoPriceprocess();
						if (procard.getRootMarkId() != null) {
							noPriceprocess = (NoPriceprocess) totalDao
									.getObjectByCondition(hql, procard
											.getMarkId(), processNOs, procard
											.getRootMarkId());
						} else {
							Procard pd = (Procard) totalDao.get(Procard.class,
									procard.getRootId());
							noPriceprocess = (NoPriceprocess) totalDao
									.getObjectByCondition(hql, procard
											.getMarkId(), processNOs, pd
											.getMarkId());
						}
						if (noPriceprocess == null) {
							NoPriceprocess noPriceprocess_new = new NoPriceprocess();
							noPriceprocess_new.setRootMarkId(procard
									.getRootMarkId());
							noPriceprocess_new.setYwmarkId(procard
									.getYwMarkId());
							noPriceprocess_new.setMarkId(procard.getMarkId());
							noPriceprocess_new.setName(procard.getProName());
							noPriceprocess_new.setBanben(procard
									.getBanBenNumber());
							noPriceprocess_new.setProcessNO(processNOs);
							noPriceprocess_new.setProcessName(detail
									.getProcessNames());
							noPriceprocess_new.setProcardId(procard.getId());
							ProcessInforWWApplyDetail processInforWWApplyDetail = (ProcessInforWWApplyDetail) totalDao
									.getObjectByCondition(
											"from ProcessInforWWApplyDetail where procardId=?",
											procard.getId());
							if (processInforWWApplyDetail != null) {
								noPriceprocess_new
										.setWaiweiShenqiCount(processInforWWApplyDetail
												.getApplyCount());// 获得申请数量
							}
							Procard procard_zong = (Procard) totalDao
									.getObjectByCondition(
											"from Procard where id =?", procard
													.getRootId());
							if (procard_zong != null) {
								noPriceprocess_new.setPiciCount(procard_zong
										.getFilnalCount());
							}
							totalDao.save(noPriceprocess_new);
						}
					}
					detail.setProcessInforWWApply(wwApply);
					totalDao.save(detail);
					map.put(2, detail);
					// 关联外购件
					String wwMarkId = detail.getWwMarkId();
					if (wwMarkId != null && wwMarkId.length() > 0) {
						// 包含外购件
						// 拆分外购件回馈采购
						String[] markIds = wwMarkId.split(";");
						if (markIds != null && markIds.length > 0) {
							for (String wgMarkId : markIds) {
								Procard wgProcard = null;
								if (procard.getProcardStyle().equals("外购")
										&& wgMarkId.equals(procard.getMarkId())) {
									wgProcard = procard;
								} else {
									wgProcard = (Procard) totalDao
											.getObjectByCondition(
													"from Procard where markId=? and procard.id=?",
													wgMarkId, procard.getId());
								}
								if (wgProcard != null) {
									ProcessInforWWProcard processwwprocard = new ProcessInforWWProcard();
									processwwprocard.setProcardId(wgProcard
											.getId());// 零件id
									processwwprocard.setMarkId(wgProcard
											.getMarkId());// 件号
									processwwprocard.setProcName(wgProcard
											.getProName());// 名称
									processwwprocard.setBanben(wgProcard
											.getBanBenNumber());// 版本号
									processwwprocard.setBanci(wgProcard
											.getBanci());// 版次
									processwwprocard.setApplyCount(detail
											.getApplyCount()
											* wgProcard.getQuanzi2()
											/ wgProcard.getQuanzi1());// 数量
									processwwprocard
											.setHascount(processwwprocard
													.getApplyCount());
									processwwprocard.setStatus("使用");// 状态
									processwwprocard.setApplyDtailId(detail
											.getId());
									totalDao.save(processwwprocard);
									if (detail.getWwType() != null
											&& detail.getWwType()
													.equals("包工包料")) {// 包工包料回传采购
										if (wgProcard.getWwblCount() == null) {// 外委包料数量
											wgProcard.setWwblCount(detail
													.getApplyCount()
													* wgProcard.getQuanzi2()
													/ wgProcard.getQuanzi1());
										} else {
											wgProcard.setWwblCount(wgProcard
													.getWwblCount()
													+ detail.getApplyCount()
													* wgProcard.getQuanzi2()
													/ wgProcard.getQuanzi1());
										}
										if (detail.getApplyCount().equals(
												procard.getFilnalCount())) {
											wgProcard.setCgNumber(null);
											wgProcard.setHascount(null);
											wgProcard.setKlNumber(null);
											wgProcard.setTjNumber(null);
											wgProcard.setStatus("初始");
											wgProcard.setJihuoStatua(null);
										}
										totalDao.update(wgProcard);
									}
								} else {
									throw new RuntimeException(
											"对不起该零件下没有找到件号为:" + wgMarkId
													+ "的外购件");
								}
							}
						}

					}
					detailSet.add(detail);
					if (detail.getWwType() != null
							&& detail.getWwType().equals("包工包料")) {
						// 关联下层半成品,自制件和组合（下层组合将整体被包公包料）
						updateProcardWwblCount(procard, detail.getApplyCount(),
								0);
					}
					if (detail.getWwType().equals("工序外委")
							&& detail.getRelatDown().equals("是")) {
						// 外委下层
						msg += updateDownWwProcess(procard, detail
								.getApplyCount(), detail.getId(), 0);

					}
				}
			}
			wwApply.setProcessInforWWApplyDetails(detailSet);
			if (wwApply.getId() != null) {
				totalDao.update(wwApply);
			} else {
				totalDao.save(wwApply);
			}
		} else {
			map.put(1, "请选择要预选的工序!");
			return map;
		}
		if (msg.length() > 0) {
			throw new RuntimeException(msg);
		} else {
			map.put(1, "true");
			map.put(3, glIdList);
			return map;
		}
	}

	/**
	 * 
	 * @param procard
	 *            新
	 * @param historyp
	 *            旧
	 * @param detail
	 *            手动外委申请明细
	 * @param type
	 *            0表示本层进来，1表示子层进来
	 * @return
	 */
	private int compareProcardww(Procard procard, Procard historyp,
			ProcessInforWWApplyDetail detail, int type) {
		// TODO Auto-generated method stub
		int changecount = 0;
		if (Util
				.isEquals(procard.getBanBenNumber(), historyp.getBanBenNumber())) {
			WaigouWaiweisbCompare wwc = new WaigouWaiweisbCompare();
			wwc.setTableName("ProcessInforWWApplyDetail");// 相关表（WaigouPlan,WaigouwaiweiPlan,ProcessinforWwApplyDetail）
			wwc.setRelateId(detail.getId());// 相关表id
			wwc.setChangeMarkId(procard.getMarkId());// 修改件号
			wwc.setDataType("本身");// 数据类型（本身,工序，图纸，子件）
			wwc.setMarkId(procard.getMarkId());// 变更件号
			wwc.setShuxin("版本");// 改变属性
			wwc.setOpType("修改");// 操作类型（修改,新增,删除）
			wwc.setOldData(historyp.getBanBenNumber());// 原值
			wwc.setNewData(procard.getBanBenNumber());// 新值
			totalDao.save(wwc);
			changecount++;
		}
		// 图纸比对
		List<ProcessTemplateFile> oldFileList = null;
		List<ProcessTemplateFile> newFileList = null;
		Integer banci = historyp.getBanci();// 版次
		String processnamesql = "'"
				+ detail.getProcessNames().replace(";", ",") + "'";
		String addSql = null;
		if (banci == null || banci == 0) {
			addSql = " and (banci is null  or banci =0)";
		} else {
			addSql = " and banci is not null and banci =" + banci;
		}
		// if(type==0){//只查工序图纸
		//			
		// ProcardTemplate oldPt = null;
		// if(historyp.getProcardTemplateId()!=null&&){
		//				
		// }
		//			
		// if(historyp.getProcardI){
		//				
		// }
		// if () {
		// oldFileList
		// =totalDao.query("from ProcessTemplateFile where markId=? " +
		// "and " +addSql, agr)
		// }else{
		//				
		// }
		// }

		String addSql2 = null;

		return changecount;
	}

	/**
	 * 获得外委申请单编号
	 * 
	 * @return
	 */
	public String wwNumber() {
		String datetime = Util.getDateTime("yyyyMMdd");
		String hql = "select max(wwApplyNumber) from ProcessInforWWApply";
		String contractNumber = (String) totalDao.getObjectByCondition(hql);
		String sc = "WWSQ";
		if (contractNumber != null && contractNumber.length() > 0) {
			int num = Integer.parseInt(contractNumber.substring(12,
					contractNumber.length())) + 1;
			if (num >= 1000)
				contractNumber = sc + datetime + num;
			else if ((num >= 100))
				contractNumber = sc + datetime + "0" + num;
			else if ((num >= 10))
				contractNumber = sc + datetime + "00" + num;
			else
				contractNumber = sc + datetime + "000" + num;
		} else {
			contractNumber = sc + datetime + "0001";
		}
		return contractNumber;
	}

	/**
	 * 工序外委级联外委下层工序
	 * 
	 * @param procard
	 * @param applyCount
	 * @param detailId
	 * @param type
	 */
	@Override
	public String updateDownWwProcess(Procard procard, Float applyCount,
			Integer detailId, int type) {
		// TODO Auto-generated method stub
		String msg = "";
		Set<Procard> sonset = procard.getProcardSet();
		if (sonset != null && sonset.size() > 0) {
			for (Procard son : sonset) {
				if (!son.getProcardStyle().equals("外购")) {
					Set<ProcessInfor> processSet = son.getProcessInforSet();
					if (processSet == null) {
						msg += "零件" + son.getMarkId() + "下层没有工序，数据有误!";
					}
					Float count = applyCount * son.getCorrCount();
					count = (float) Math.ceil(count);
					Float wwblcount = (Float) totalDao
							.getObjectByCondition(
									"select sum(applyCount) from ProcessInforWWApplyDetail where procardId=? and wwType='包工包料' "
											+ "and (dataStatus is null or dataStatus not in('删除','取消')) and processInforWWApply.processStatus !='打回' ",
									son.getId());
					if (wwblcount != null && wwblcount > 0) {
						if ((count + wwblcount) > son.getFilnalCount()) {// 有外委包料不处理
							return msg;
						}
					}
					for (ProcessInfor process : processSet) {
						if (process.getSelectWwCount() == null) {
							process.setSelectWwCount(0f);
						}
						if (process.getApplyWwCount() == null) {
							process.setApplyWwCount(0f);
						}
						if (process.getAgreeWwCount() == null) {
							process.setAgreeWwCount(0f);
						}
						Float wwblCount = 0f;
						if (procard.getWwblCount() != null) {
							wwblCount = procard.getWwblCount();
						}
						Float syCount = procard.getFilnalCount() - wwblCount
								- process.getApplyCount()
								- process.getSelectWwCount()
								- process.getApplyWwCount()
								- process.getAgreeWwCount();
						if (syCount < count) {
							// 临时屏蔽
							// msg += "第" + process.getProcessNO() + "工序:"
							// + process.getProcessName() + "最多可预选"
							// + syCount + procard.getUnit() + "!\n";
							// 临时屏蔽
							process.setSelectWwCount(process.getSelectWwCount()
									+ syCount);
							if (process.getSelectWwCount() > procard
									.getFilnalCount()) {
								process.setSelectWwCount(procard
										.getFilnalCount());
							}
							totalDao.update(process);
						} else {
							process.setSelectWwCount(process.getSelectWwCount()
									+ count);
							totalDao.update(process);
						}

					}
					if(glIdList!=null){
						glIdList.add(son.getId());
					}
					// 递归下层
					msg += updateDownWwProcess(son, count, detailId, 1);
				} else {
					Float count = applyCount * son.getQuanzi2()
							/ son.getQuanzi1();
					if (son.getNeedProcess() != null
							&& son.getNeedProcess().equals("yes")) {// 外购件半成品
						Set<ProcessInfor> processSet = son.getProcessInforSet();
						if (processSet == null) {
							msg += "零件" + son.getMarkId() + "下层没有工序，数据有误!";
						}
						for (ProcessInfor process : processSet) {
							if (process.getSelectWwCount() == null) {
								process.setSelectWwCount(0f);
							}
							if (process.getApplyWwCount() == null) {
								process.setApplyWwCount(0f);
							}
							if (process.getAgreeWwCount() == null) {
								process.setAgreeWwCount(0f);
							}
							Float wwblCount = 0f;
							if (procard.getWwblCount() != null) {
								wwblCount = procard.getWwblCount();
							}
							Float syCount = procard.getFilnalCount()
									- wwblCount - process.getApplyCount()
									- process.getSelectWwCount()
									- process.getApplyWwCount()
									- process.getAgreeWwCount();
							if (syCount < count) {
								// 临时屏蔽
								// msg += "第" + process.getProcessNO() + "工序:"
								// + process.getProcessName() + "最多可预选"
								// + syCount + procard.getUnit() + "!\n";
								// 临时屏蔽
								process.setSelectWwCount(process
										.getSelectWwCount()
										+ count);
								totalDao.update(process);
							} else {
								process.setSelectWwCount(process
										.getSelectWwCount()
										+ count);
								totalDao.update(process);
							}
						}
						ProcessInforWWProcard processwwprocard = new ProcessInforWWProcard();
						processwwprocard.setProcardId(son.getId());// 零件id
						processwwprocard.setMarkId(son.getMarkId());// 件号
						processwwprocard.setProcName(son.getProName());// 名称
						processwwprocard.setBanben(son.getBanBenNumber());// 版本号
						processwwprocard.setBanci(son.getBanci());// 版次
						processwwprocard.setApplyCount(count);// 数量
						processwwprocard.setHascount(processwwprocard
								.getApplyCount());
						processwwprocard.setStatus("使用");// 状态
						processwwprocard.setApplyDtailId(detailId);
						totalDao.save(processwwprocard);
					} else if (type == 1) {
						ProcessInforWWProcard processwwprocard = new ProcessInforWWProcard();
						processwwprocard.setProcardId(son.getId());// 零件id
						processwwprocard.setMarkId(son.getMarkId());// 件号
						processwwprocard.setProcName(son.getProName());// 名称
						processwwprocard.setBanben(son.getBanBenNumber());// 版本号
						processwwprocard.setBanci(son.getBanci());// 版次
						processwwprocard.setApplyCount(count);// 数量
						processwwprocard.setHascount(processwwprocard
								.getApplyCount());
						processwwprocard.setStatus("使用");// 状态
						processwwprocard.setApplyDtailId(detailId);
						totalDao.save(processwwprocard);
					}
					if(glIdList!=null){
						glIdList.add(son.getId());
					}
				}
			}
		}
		return msg;
	}

	/**
	 * 修改下层外委包料数量
	 * 
	 * @param procard
	 * @param wwblCount
	 * @param type
	 * @return
	 */
	@Override
	public String updateProcardWwblCount(Procard procard, Float wwblCount,
			int type) {
		// TODO Auto-generated method stub
		Set<Procard> sonset = procard.getProcardSet();
		if (sonset != null && sonset.size() > 0) {
			for (Procard son : sonset) {
				if (!son.getProcardStyle().equals("外购")) {
					Float count = wwblCount * son.getCorrCount();
					count = (float) Math.ceil(count);
					if (son.getWwblCount() == null) {
						son.setWwblCount(count);
					} else {
						son.setWwblCount(son.getWwblCount() + count);
					}
					if(glIdList!=null){
						glIdList.add(son.getId());
					}
					totalDao.update(son);
					updateProcardWwblCount(son, count, 1);
				} else {
					if (type != 0
							|| (son.getNeedProcess() != null && son
									.getNeedProcess().equals("yes"))) {
						if (son.getWwblCount() == null) {
							son.setWwblCount(wwblCount * son.getQuanzi2()
									/ son.getQuanzi1());
						} else {
							son.setWwblCount(son.getWwblCount() + wwblCount
									* son.getQuanzi2() / son.getQuanzi1());
						}
						if (son.getWwblCount() / son.getFilnalCount() > 0.95) {
							son.setCgNumber(null);
							son.setHascount(null);
							son.setKlNumber(null);
							son.setTjNumber(null);
							son.setStatus("初始");
							son.setJihuoStatua(null);
						}
						if(glIdList!=null){
							glIdList.add(son.getId());
						}
						totalDao.update(son);
					}
				}
			}
		}
		return "";
	}

	/**
	 * 归还下层外委包料数量
	 * 
	 * @param procard
	 * @param wwblCount
	 * @param type
	 * @return
	 */
	private String backProcardWwblCount(Procard procard, Float wwblCount,
			int type) {
		// TODO Auto-generated method stub
		Set<Procard> sonset = procard.getProcardSet();
		if (sonset != null && sonset.size() > 0) {
			for (Procard son : sonset) {
				if (!son.getProcardStyle().equals("外购")) {
					Float count = wwblCount * son.getCorrCount();
					count = (float) Math.ceil(count);
					son.setWwblCount(son.getWwblCount() - count);
					if (son.getWwblCount() < 0) {
						son.setWwblCount(0f);
					}
					totalDao.update(son);
					backProcardWwblCount(son, count, 1);
				} else {
					if (type != 0
							|| (son.getNeedProcess() != null && son
									.getNeedProcess().equals("yes"))) {
						son.setWwblCount(son.getWwblCount() - wwblCount
								* son.getQuanzi2() / son.getQuanzi1());
						if (son.getWwblCount() < 0) {
							son.setWwblCount(0f);
						}
						totalDao.update(son);
					}
				}
			}
		}
		return "";
	}

	@Override
	public List<Procard> findWwsqDetailList(Integer rootId) {
		// TODO Auto-generated method stub
		List<Procard> procardList = totalDao
				.query(
						"from Procard where rootId=? and id in"
								+ "(select procard.id from ProcessInfor where procard.id is not null and procard.rootId=? and (dataStatus is null or dataStatus!='删除') and status!='完成'  "
								+ "and selectWwCount is not null and selectWwCount>0 )",
						rootId, rootId);
		if (procardList != null && procardList.size() > 0) {
			for (Procard procard : procardList) {
				List<ProcessInfor> processList = totalDao
						.query(
								"from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除') and status!='完成'  "
										+ "and selectWwCount is not null and selectWwCount>0 ",
								procard.getId());
				// for(ProcessInfor process:processList){
				// //获取外委合同
				// List<Price> priceList =
				// totalDao.query("from Price where partNumber=? and gongxunum=?",
				// procard.getMarkId(),process.getProcessNO());
				// if(priceList==null||priceList.size()==0){
				// process.setHtStatus("没有");
				// }else{
				// Long nowLong = new Date().getTime();
				// for(Price price :priceList){
				// if(price.getPricePeriodEnd()==null||price.getPricePeriodEnd().length()==0){
				// //价格截止日期为空代表永久有效
				// process.setHtStatus("可用");
				// break;
				// }else{
				// Long timeLong=Util.StringToDate(price.getPricePeriodEnd(),
				// null).getTime();
				// if(nowLong<=nowLong){//在有效期内
				// process.setHtStatus("可用");
				// break;
				// }else{
				// process.setHtStatus("过期");
				// }
				// }
				// }
				// }
				// }
				procard.setProcessList(processList);
			}
			return procardList;
		}
		return null;
	}

	@Override
	public Map<Integer, String> wwsq(ProcessInforWWApply pwwApply) {
		Integer id = pwwApply.getId();
		ProcessInforWWApply apply = (ProcessInforWWApply) totalDao
				.getObjectById(ProcessInforWWApply.class, id);
		Users user = Util.getLoginUser();
		Map<Integer, String> map = new HashMap<Integer, String>();
		Integer rootId = (Integer) totalDao.getObjectByCondition(
				"select rootId from Procard where markId=? and selfCard=?",
				apply.getMarkId(), apply.getSelfCard());
		if (rootId == null) {
			rootId = 0;
		}
		map.put(0, rootId + "");
		if (user == null) {
			map.put(0, "请先登录");
		} else {
			// apply.setUserId(user.getId());
			// apply.setUserCode(user.getCode());
			// apply.setUserName(user.getName());
			// apply.setAddTime(Util.getDateTime());
		}
		Set<ProcessInforWWApplyDetail> detailSet = apply
				.getProcessInforWWApplyDetails();
		if (detailSet != null && detailSet.size() > 0) {// 核对外委合同
			for (ProcessInforWWApplyDetail detail : detailSet) {
				if (detail.getDataStatus() != null
						&& (detail.getDataStatus().equals("删除") || detail
								.getDataStatus().equals("取消"))) {
					continue;
				}
				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, detail.getProcardId());
				if (detail.getGysId() == null) {
					Price price = (Price) totalDao
							.getObjectByCondition(
									"from Price where wwType=? and partNumber=? and gongxunum=? and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
											+ Util.getDateTime()
											+ "')  order by id desc", detail
											.getWwType(), detail.getMarkId(),
									detail.getProcessNOs());
					if (price != null) {
						detail.setPriceId(price.getId());
						detail.setGysId(price.getGysId());
						String gysName = (String) totalDao
								.getObjectByCondition(
										"select name from ZhUser where id=?",
										price.getGysId());
						detail.setGysName(gysName);
					}
				}
				// 将预选数量转化为申请数量
				if (detail.getProcessNOs() != null
						&& detail.getProcessNOs().length() > 0) {
					String[] processNOS = detail.getProcessNOs().split(";");
					if (processNOS != null && processNOS.length > 0) {
						for (String processNOStr : processNOS) {
							try {
								Integer processNO = Integer
										.parseInt(processNOStr);
								ProcessInfor process = (ProcessInfor) totalDao
										.getObjectByCondition(
												"from ProcessInfor where processNO=? and (dataStatus is null or dataStatus!='删除') and procard.id=?",
												processNO, detail
														.getProcardId());
								if (process != null) {
									if (process.getApplyWwCount() == null) {
										process.setApplyWwCount(detail
												.getApplyCount());
									} else {
										process.setApplyWwCount(process
												.getApplyWwCount()
												+ detail.getApplyCount());
									}
									if (!apply.getStatus().equals("打回")) {
										process.setSelectWwCount(process
												.getSelectWwCount()
												- detail.getApplyCount());
									} else {
										if ((process.getApplyCount() + process
												.getApplyWwCount()) > procard
												.getFilnalCount()) {
											throw new RuntimeException(procard
													.getMarkId()
													+ "第"
													+ procard.getSelfCard()
													+ "批次第"
													+ process.getProcessNO()
													+ "工序,外委数量异常,当前外委选择数量为:"
													+ detail.getApplyCount()
													+ "不满足申请数量!");
										}
									}
									if (process.getSelectWwCount() < 0) {
										throw new RuntimeException("第"
												+ process.getProcessNO()
												+ "工序,外委数量异常,当前外委选择数量为:"
												+ detail.getApplyCount()
												+ "不满足申请数量!");
									}
									totalDao.update(process);
								}
							} catch (Exception e) {
								// TODO: handle exception
							}
						}
					}
				}
				// 工序外委连同下层工序外委
				if (detail.getWwType().equals("工序外委")
						&& detail.getRelatDown() != null
						&& detail.getRelatDown().equals("是")) {
					updateDownProcessww(procard, detail.getApplyCount());
				}
				if (apply.getStatus().equals("打回")) {
					if (detail.getWwType() != null
							&& detail.getWwType().equals("包工包料")) {// 还原包工包料数量
						List<ProcessInforWWProcard> processwwprocardList = totalDao
								.query(
										"from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
										detail.getId());
						if (processwwprocardList != null
								&& processwwprocardList.size() > 0) {
							for (ProcessInforWWProcard processInforWWProcard : processwwprocardList) {
								Procard wgProcard = (Procard) totalDao
										.getObjectById(Procard.class,
												processInforWWProcard
														.getProcardId());
								if (wgProcard != null) {
									if (wgProcard.getWwblCount() == null) {// 外委包料数量
										wgProcard.setWwblCount(detail
												.getApplyCount()
												* wgProcard.getQuanzi2()
												/ wgProcard.getQuanzi1());
									} else {
										wgProcard.setWwblCount(wgProcard
												.getWwblCount()
												+ detail.getApplyCount()
												* wgProcard.getQuanzi2()
												/ wgProcard.getQuanzi1());
									}
									totalDao.update(wgProcard);
								}

							}
						}
						// 关联下层半成品,自制件和组合（下层组合将整体被包公包料）
						updateProcardWwblCount(procard, detail.getApplyCount(),
								0);
					}

				}

			}
		}
		Integer epId = null;
		try {
			epId = CircuitRunServerImpl.createProcess("委外预选申请",
					ProcessInforWWApply.class, id, "status", "id",
					"ProcardAction!processApplyDetail.action?id=" + id, apply
							.getYwMarkId()
							+ "的委外预选申请,请您审批!", true);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			map.put(1, "审批流程有误,请联系管理员!");
		}
		apply.setEpId(epId);
		apply.setStatus("审批中");
		apply.setRemarks(pwwApply.getRemarks());
		map.put(1, totalDao.update(apply) + "");
		return map;
	}

	private void updateDownProcessww(Procard procard, Float applyCount) {
		// TODO Auto-generated method stub
		Set<Procard> sonset = procard.getProcardSet();
		if (sonset != null && sonset.size() > 0) {
			for (Procard son : sonset) {
				if (!son.getProcardStyle().equals("外购")
						|| (son.getNeedProcess() != null && son
								.getNeedProcess().equals("yes"))) {
					float count = 0;
					if (son.getProcardStyle().equals("外购")) {
						count = applyCount * son.getQuanzi2()
								/ son.getQuanzi1();
					} else {
						count = applyCount * son.getCorrCount();
						count = (float) Math.ceil(count);
					}
					Set<ProcessInfor> processSet = son.getProcessInforSet();
					for (ProcessInfor process : processSet) {
						if (process.getApplyWwCount() == null) {
							process.setApplyWwCount(count);
						} else {
							process.setApplyWwCount(process.getApplyWwCount()
									+ count);
						}
						process.setSelectWwCount(process.getSelectWwCount()
								- count);
						totalDao.update(process);
					}
					updateDownProcessww(son, count);
				}
			}
		}
	}

	@Override
	public List<Price> getwwPriceByMarkId(String markId) {
		// TODO Auto-generated method stub
		List<Price> priceList = totalDao
				.query(
						"from Price where partNumber=? and produceType='外委' and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
								+ Util.getDateTime() + "')", markId);
		if (priceList != null && priceList.size() > 0) {
			for (Price price : priceList) {
				String gys = (String) totalDao.getObjectByCondition(
						"select name from ZhUser where id=?", price.getGysId());
				price.setGys(gys);
			}
		}
		return priceList;
	}

	@Override
	public List<ProcessInforWWApply> findProcesswwApplyList(Integer id) {
		// TODO Auto-generated method stub
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			List<ProcessInforWWApply> applyList = (List<ProcessInforWWApply>) totalDao
					.query(
							"from ProcessInforWWApply where  procardId=? order by status",
							procard.getId());// 最初设计没有procardId所有这里用了or
			if (applyList != null && applyList.size() > 0) {
				for (ProcessInforWWApply apply : applyList) {
					List<ProcessInforWWApplyDetail> detailList = new ArrayList<ProcessInforWWApplyDetail>();
					Set<ProcessInforWWApplyDetail> set = apply
							.getProcessInforWWApplyDetails();
					if (set != null && set.size() > 0) {
						for (ProcessInforWWApplyDetail detail : set) {
							if (detail.getGysId() == null) {
								Price price = (Price) totalDao
										.getObjectByCondition(
												"from Price where partNumber=? and gongxunum=? and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
														+ Util
																.getDateTime("yyyy-MM-dd")
														+ "') order by id desc",
												detail.getMarkId(), detail
														.getProcessNOs());
								if (price != null) {
									detail.setGysId(price.getGysId());
									String gysName = (String) totalDao
											.getObjectByCondition(
													"select name from ZhUser where id=?",
													price.getGysId());
									detail.setGysName(gysName);
								}
							}
							detailList.add(detail);
						}
					}
					apply.setDetailList(detailList);
				}
			}
			return applyList;
		}
		return null;
	}

	@Override
	public Integer getFisrtProcessNo(Integer id) {
		// TODO Auto-generated method stub
		return (Integer) totalDao
				.getObjectByCondition(
						"select min(processNO) from ProcessInfor where procard.id =? and (dataStatus is null or dataStatus!='删除')",
						id);
	}

	@Override
	public List<String[]> findSonMarkId(Integer id, String processNos,
			String processNames) {
		// TODO Auto-generated method stub
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			List<String[]> sonMarkIdList = null;
			// List<String[]> sonMarkIdList_zizhi = null;
			String checked = null;
			if (procard.getProcardStyle().equals("外购")
					&& procard.getNeedProcess() != null
					&& procard.getNeedProcess().equals("yes")) {// 半成品返回自身数据
				sonMarkIdList = new ArrayList<String[]>();
				String hql = "from ProcessAndWgProcardTem where procardMarkId =? and processName in ('"
						+ processNames + "')";
				ProcessAndWgProcardTem pt = (ProcessAndWgProcardTem) totalDao
						.getObjectByCondition(hql, procard.getMarkId());
				if (pt != null) {
					checked = "checked";
				} else {
					checked = "null";
				}
				String[] strs = new String[] {
						procard.getMarkId(),
						procard.getProName(),
						procard.getSpecification(),
						procard.getTjNumber() == null ? "0" : procard
								.getTjNumber()
								+ "", checked };
				sonMarkIdList.add(strs);
			} else {
				sonMarkIdList = totalDao
						.query(
								"select markId,proName,specification,tjNumber,tuhao from Procard where procard.id=? and procardStyle='外购'",
								id);
				List<String> markIdList = totalDao
						.query(
								"select DISTINCT wgprocardMardkId from ProcessAndWgProcardTem where  processName in ('"
										+ processNames
										+ "') and procardMarkId = ? ", procard
										.getMarkId());
				if (markIdList != null && markIdList.size() > 0) {
					for (Object[] ms : sonMarkIdList) {
						for (String s : markIdList) {
							try {
								if (s.equals(ms[0].toString())) {
									ms[4] = "checked";
									break;
								}
								ms[4] = "";
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					}
				}
			}
			return sonMarkIdList;
		}
		return null;
	}

	@Override
	public Object[] findUnhasPriceList(
			ProcessInforWWApplyDetail pwwApplyDetail, int pageNo, int pageSize) {
		// TODO Auto-generated method stubpageNo
		if (pwwApplyDetail == null) {
			pwwApplyDetail = new ProcessInforWWApplyDetail();
		}
		String hql = totalDao.criteriaQueries(pwwApplyDetail, null,
				"processInforWWApply");
		hql += " and processInforWWApply.status='同意' and priceId is null";
		if (pwwApplyDetail.getRootMarkId() != null) {// 总成件号
			hql += " and (processInforWWApply.markId like'%"
					+ pwwApplyDetail.getRootMarkId()
					+ "%' or processInforWWApply.ywMarkId like'%"
					+ pwwApplyDetail.getRootMarkId() + "%')";
		}
		if (pwwApplyDetail.getRootSelfCard() != null) {// 总成批次
			hql += " and processInforWWApply.selfCard like'%"
					+ pwwApplyDetail.getRootMarkId() + "%'";
		}
		int count = totalDao.getCount(hql);
		List<ProcessInforWWApplyDetail> objs = totalDao.findAllByPage(hql,
				pageNo, pageSize);
		if (objs != null && objs.size() > 0) {
			for (ProcessInforWWApplyDetail detail : objs) {
				if (detail.getProcessInforWWApply() != null) {
					detail.setYwMarkId(detail.getProcessInforWWApply()
							.getYwMarkId());
					detail.setRootMarkId(detail.getProcessInforWWApply()
							.getMarkId());
					detail.setRootSelfCard(detail.getProcessInforWWApply()
							.getSelfCard());
				}
			}
		}
		Object[] o = { objs, count };
		return o;
	}

	@Override
	public List<Price> findPriceByWWApplyDetail(Integer id) {
		// TODO Auto-generated method stub
		ProcessInforWWApplyDetail detail = (ProcessInforWWApplyDetail) totalDao
				.getObjectById(ProcessInforWWApplyDetail.class, id);
		if (detail != null) {
			String nowtime = Util.getDateTime("yyyy-MM-dd");
			List<Price> priceList = totalDao
					.query(
							"from Price where produceType='外委' and wwType=? and partNumber=? and "
									+ " (gongxunum ='待填充' or gongxunum is null or gongxunum='' or gongxunum=? ) and pricePeriodStart <= ? and"
									+ " (pricePeriodEnd>=? or pricePeriodEnd is null or pricePeriodEnd = '' )",
							detail.getWwType(), detail.getMarkId(), detail
									.getProcessNOs(), nowtime, nowtime);
			// List<Price> priceList = totalDao
			// .query(
			// "from Price where produceType='外委' and wwType=? and partNumber=? and (gongxunum ='待填充' or gongxunum=?)",
			// detail.getWwType(), detail.getMarkId(), detail
			// .getProcessNOs());
			if (priceList != null && priceList.size() > 0) {
				for (Price price : priceList) {
					if (price != null) {
						String gysName = (String) totalDao
								.getObjectByCondition(
										"select name from ZhUser where id=?",
										price.getGysId());
						price.setGys(gysName);
						if (detail.getPriceId() != null
								&& detail.getPriceId().equals(price.getId())) {
							price.setFlag("had");
						} else {
							price.setFlag("nothad");
						}
					}
				}
			}
			return priceList;
		}
		return null;
	}

	@Override
	public ProcessInforWWApplyDetail getPwwApplyDetailById(Integer id) {
		// TODO Auto-generated method stub
		return (ProcessInforWWApplyDetail) totalDao.getObjectById(
				ProcessInforWWApplyDetail.class, id);
	}

	@Override
	public Map<Integer, String> updatePrice(Integer id, Integer id2) {
		// TODO Auto-generated method stub
		Map<Integer, String> map = new HashMap<Integer, String>();
		Price price = (Price) totalDao.getObjectById(Price.class, id);
		if (price == null) {
			map.put(1, "没有找到价格!");
			return map;
		}
		ProcessInforWWApplyDetail detail = (ProcessInforWWApplyDetail) totalDao
				.getObjectById(ProcessInforWWApplyDetail.class, id2);
		if (detail == null) {
			map.put(1, "没有找到对应的外委申请!");
			return map;
		}
		map.put(2, detail.getProcessInforWWApply().getId() + "");
		if (!detail.getMarkId().equals(price.getPartNumber())) {
			map.put(1, "对不起您选择的这道工序有误!");
			return map;
		}
		map.put(1, "true");
		// 覆盖价格信息
		price.setGongxunum(detail.getProcessNOs());
		price.setProcessNames(detail.getProcessNames());
		totalDao.update(price);
		// 查询其他有效期内同供应商同工序价格
		String time = Util.getDateTime("yyyy-MM-dd");
		List<Price> historyList = totalDao
				.query(
						"from Price where id!=? and produceType='外委' and wwType='工序外委' and partNumber=? and gysId is not null and pricePeriodStart <= '"
								+ time
								+ "' and (pricePeriodEnd >= '"
								+ time
								+ "' or pricePeriodEnd is null or pricePeriodEnd = '') and (gongxunum ='待填充' or gongxunum is null or gongxunum='' or gongxunum=?)",
						price.getId(), price.getPartNumber(), price
								.getGongxunum());
		if (historyList != null && historyList.size() > 0) {
			Calendar c = Calendar.getInstance();
			c.add(Calendar.DATE, -1);
			Date zt = c.getTime();
			String ztStr = Util.DateToString(zt, "yyyy-MM-dd");
			for (Price history : historyList) {
				history.setPricePeriodEnd(ztStr);
				totalDao.update(history);
			}
		}

		// 外委申请与合同绑定
		detail.setPriceId(price.getId());
		detail.setGysId(price.getGysId());
		String gysName = (String) totalDao.getObjectByCondition(
				"select name from ZhUser where id=?", price.getGysId());
		detail.setGysName(gysName);
		// 比对供应商设变数据
		WaigouPlan historywgp = (WaigouPlan) totalDao
				.getObjectByCondition(
						" from WaigouPlan where markId=? and processNOs=? and gysId=? order by banci desc",
						detail.getMarkId(), detail.getProcessNOs(), price
								.getGysId());
		if (historywgp == null) {
			detail.setHadChange("第一次");
		} else {
			Procard historyp = (Procard) totalDao.getObjectByCondition(
					"from Procard where id in(select procardId from"
							+ " ProcardWGCenter where wgOrderId =?)",
					historywgp.getId());
			Procard procard = (Procard) totalDao.getObjectById(Procard.class,
					detail.getProcardId());
			if (historyp == null) {
				detail.setHadChange("是");
			} else {
				if (Util.isEquals(historyp.getBanci(), procard.getBanci())) {
					detail.setHadChange("否");
				} else {
					detail.setHadChange("是");
				}
				// int changeCount =compareProcardww(procard,historyp,detail,0);
				// if(changeCount>0){
				// detail.setHadChange("是");
				// }
			}
		}
		totalDao.update(detail);
		// Float unpriceCount = (Float) totalDao
		// .getObjectByCondition(
		// "select count(*) from ProcessInforWWApplyDetail where processInforWWApply.id=? and priceId is null",
		// detail.getProcessInforWWApply().getId());
		// if (unpriceCount == null) {
		// unpriceCount = 0f;
		// }
		// if (unpriceCount == 0f) {
		// // 此申请所有明细都有价格合同支持可以转换外委合同
		// List<Integer> gysIdList = new ArrayList<Integer>();
		// List<WaigouOrder> waigouorderList = new ArrayList<WaigouOrder>();
		// ProcessInforWWApply apply = detail.getProcessInforWWApply();
		// apply.setProcessStatus("订单待确认");
		// totalDao.update(apply);
		// // 申请人作为采购员
		// Users user = (Users) totalDao.getObjectById(Users.class, apply
		// .getUserId());
		// // 当含有未匹配到合同的明细时不生成采购订单
		// Set<ProcessInforWWApplyDetail> detailSet = apply
		// .getProcessInforWWApplyDetails();
		// if (detailSet != null) {
		// for (ProcessInforWWApplyDetail detail2 : detailSet) {
		// Procard procard = (Procard) totalDao.getObjectById(
		// Procard.class, detail2.getProcardId());
		//
		// // 生成供应商采购外委订单
		// WaigouOrder waigouORder = null;
		// // 订单明细
		// Set<WaigouPlan> wwpSet = null;
		// if (gysIdList.contains(detail2.getGysId())) {//
		// for (WaigouOrder order : waigouorderList) {
		// if (order.getGysId().equals(detail2.getGysId())
		// && order.getWwType().equals(
		// detail2.getWwType())) {
		// waigouORder = order;
		// wwpSet = waigouORder.getWwpSet();
		// }
		// }
		// }
		// ZhUser gys = (ZhUser) totalDao.getObjectById(ZhUser.class,
		// detail2.getGysId());
		// Users gysUser = null;
		// if (gys != null) {
		// gysUser = (Users) totalDao.getObjectById(Users.class,
		// gys.getUserid());
		// }
		// if (waigouORder == null) {
		// waigouORder = new WaigouOrder();
		// if (gys != null) {
		// waigouORder.setUserId(gys.getUserid());
		// waigouORder.setUserCode(gysUser.getCode());
		// waigouORder.setGysId(gys.getId());//
		// waigouORder.setGysName(gys.getCmp());// 供应商名称
		// waigouORder.setLxPeople(gys.getCperson());// 联系人
		// waigouORder.setGysPhone(gys.getCtel());// 电话
		// waigouORder.setFax(gys.getCfax());// 传真
		// // gysWWApply.settype;//票据类型
		// // private String condition;//付款条件
		// String wwNumber = "";
		// String before = null;
		// Integer bIndex = 10;
		// if (detail2.getWwType() != null
		// && detail2.getWwType().equals("包工包料")) {
		// before = "ww" + Util.getDateTime("yyyyMMdd");
		// } else {
		// before = "wwzc" + Util.getDateTime("yyyyMMdd");
		// bIndex = 12;
		// }
		//
		// Integer maxNo = 0;
		// String maxNumber = (String) totalDao
		// .getObjectByCondition("select max(planNumber) from WaigouOrder where planNumber like '"
		// + before + "%'");
		// if (maxNumber != null) {
		// String num = maxNumber.substring(bIndex,
		// maxNumber.length());
		// try {
		// Integer maxNum = Integer.parseInt(num);
		// if (maxNum > maxNo) {
		// maxNo = maxNum;
		// }
		// } catch (Exception e) {
		// // TODO: handle exception
		// }
		// }
		// maxNo++;
		// wwNumber = before + String.format("%03d", maxNo);
		// waigouORder.setPlanNumber(wwNumber);// 外委订单号码
		// waigouORder.setAddUserCode(user.getCode());// 采购员工号
		// waigouORder.setAddUserName(user.getName());// 采购员姓名
		// waigouORder.setAddUserPhone(user.getPassword()
		// .getPhoneNumber());// 采购员电话
		// waigouORder.setAddTime(Util.getDateTime());// 添加时间
		// waigouORder.setRootId(procard.getRootId());// 生产总成id
		// waigouORder.setGhAddress(gys.getCompanydz());// 送货地址
		// // gysWWApply.setshAddress;//送货地址
		// waigouORder.setProcessApplyId(apply.getId());// 工序外委表Id
		// waigouORder.setStatus("待通知");// 状态
		// waigouORder.setApplystatus("待核对");//
		// }
		// waigouorderList.add(waigouORder);
		// }
		// if (wwpSet == null) {
		// wwpSet = new HashSet<WaigouPlan>();
		// }
		// // 供应商外委订单明细
		// WaigouPlan wgPlan = new WaigouPlan();
		// wgPlan.setMarkId(detail2.getMarkId());// 件号
		// wgPlan.setBanben(detail2.getBanbenNumber());
		// wgPlan.setProName(detail2.getProName());// 零件名称
		// wgPlan.setBanbenNumber(detail2.getBanbenNumber());// 版本号
		// wgPlan.setBanci(detail2.getBanci());
		// wgPlan.setProcessNOs(detail2.getProcessNOs());// 工序号
		// wgPlan.setProcessNames(detail2.getProcessNames());// 工序名称
		// wgPlan.setWwType(detail2.getWwType());// 外委类型（工序外委,包工包料）
		// wgPlan.setUnit(detail2.getUnit());// 单位
		// wgPlan.setPriceId(detail2.getPriceId());// 合同Id
		// wgPlan.setUserId(gys.getUserid());// 供应商信息
		// wgPlan.setUserCode(gysUser.getCode());
		// wgPlan.setGysId(gys.getId());//
		// wgPlan.setGysName(gys.getCmp());// 供应商名称
		// Price price2 = (Price) totalDao.getObjectById(Price.class,
		// detail2.getPriceId());
		// if (price.getHsPrice() != null) {
		// wgPlan.setHsPrice(Float.parseFloat(price.getHsPrice()
		// + ""));// 含税单价
		// wgPlan.setMoney(Float.parseFloat(price.getHsPrice()
		// * detail2.getApplyCount() + ""));// 总金额
		// wgPlan.setPrice(Float.parseFloat(price.getBhsPrice()
		// + ""));// 不含税单价
		// wgPlan.setTaxprice(price.getTaxprice()); // 税率
		// } else {
		// wgPlan.setHsPrice(0f);// 含税单价
		// wgPlan.setMoney(0f);// 总金额
		// wgPlan.setPrice(0f);// 不含税单价
		// wgPlan.setTaxprice(0d); // 税率
		// }
		// // gyswwDetail.setpayDate;//交付日期
		// wgPlan.setRemark(apply.getYwMarkId());// 备注
		// wgPlan.setWaigouOrder(waigouORder);
		// totalDao.save(wgPlan);
		// // 中间表
		// ProcardWGCenter zjb = new ProcardWGCenter();
		// zjb.setWgOrderId(wgPlan.getId());
		// zjb.setProcardId(detail2.getProcardId());
		// zjb.setProcardCount(detail2.getApplyCount());
		// zjb.setConnectionType("mTom");
		// totalDao.save(zjb);
		// wwpSet.add(wgPlan);
		// waigouORder.setWwpSet(wwpSet);
		// waigouORder.setWwType(detail.getWwType());
		// if (waigouORder.getId() == null) {
		// totalDao.save(waigouORder);
		// gysIdList.add(waigouORder.getGysId());
		// } else {
		// totalDao.update(waigouORder);
		// if (!gysIdList.contains(waigouORder.getGysId())) {
		// gysIdList.add(waigouORder.getGysId());
		// }
		// }
		// }
		//
		// }
		// }

		return map;
	}

	@Override
	public ProcessInforWWApply getProcesswwApplyById(Integer id) {
		// TODO Auto-generated method stub
		ProcessInforWWApply pwwApply = (ProcessInforWWApply) totalDao
				.getObjectById(ProcessInforWWApply.class, id);
		if (pwwApply != null) {
			List<ProcessInforWWApplyDetail> detailList = new ArrayList<ProcessInforWWApplyDetail>();
			Set<ProcessInforWWApplyDetail> set = pwwApply
					.getProcessInforWWApplyDetails();
			if (set != null && set.size() > 0) {
				for (ProcessInforWWApplyDetail detail : set) {
					List<String> wgjMarkIdList = totalDao
							.query(
									"select markId from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
									detail.getId());
					if (wgjMarkIdList != null && wgjMarkIdList.size() > 0) {
						StringBuffer wgjsb = new StringBuffer();
						for (String wgjMarkId : wgjMarkIdList) {
							if (wgjsb.length() == 0) {
								wgjsb.append(wgjMarkId);
							} else {
								wgjsb.append(", " + wgjMarkId);
							}
						}
						detail.setGuanlianMarkId(wgjsb.toString());
					}
					if (detail.getGysId() == null) {
						Price price = (Price) totalDao
								.getObjectByCondition(
										"from Price where partNumber=? and gongxunum=? and gysId is not null and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
												+ Util
														.getDateTime("yyyy-MM-dd")
												+ "') order by id desc", detail
												.getMarkId(), detail
												.getProcessNOs());
						if (price != null) {
							detail.setPriceId(price.getId());
							detail.setGysId(price.getGysId());
							String gysName = (String) totalDao
									.getObjectByCondition(
											"select name from ZhUser where id=?",
											price.getGysId());
							detail.setGysName(gysName);
						}
					}
					detailList.add(detail);
				}
			}
			pwwApply.setDetailList(detailList);
			return pwwApply;
		}
		return null;
	}

	@Override
	public String deleteWwApply(Integer id) {
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录";
		}
		ProcessInforWWApply pwwa = (ProcessInforWWApply) totalDao
				.getObjectById(ProcessInforWWApply.class, id);
		if (pwwa == null) {
			return "没有找到目标数据!";
		}
		if (pwwa.getProcessStatus().equals("取消")
				|| pwwa.getProcessStatus().equals("删除")) {
			return "已经删除或取消，请不要重复操作!";
		}
		if (!user.getId().equals(pwwa.getUserId())) {
			return "您非此单申请人没有删除权限!";
		}
		Set<ProcessInforWWApplyDetail> processInfroWwApplyDetails = pwwa
				.getProcessInforWWApplyDetails();
		if (processInfroWwApplyDetails != null
				&& processInfroWwApplyDetails.size() > 0) {
			for (ProcessInforWWApplyDetail pwwaDeatil : processInfroWwApplyDetails) {
				if (pwwaDeatil.getDataStatus() == null
						|| (!pwwaDeatil.getDataStatus().equals("取消") && !pwwaDeatil
								.getDataStatus().equals("删除"))) {
					deleteWwApplyDetail(pwwaDeatil.getId());
				}
			}
		}
		pwwa.setProcessStatus("删除");
		pwwa.setStatus("删除");
		totalDao.update(pwwa);
		return "删除成功!";
	}

	@Override
	public Map<Integer, String> deleteWwApplyDetail(Integer id) {
		// TODO Auto-generated method stub
		Map<Integer, String> map = new HashMap<Integer, String>();
		ProcessInforWWApplyDetail detail = (ProcessInforWWApplyDetail) totalDao
				.getObjectById(ProcessInforWWApplyDetail.class, id);
		if (detail == null) {
			map.put(1, "没有找到目标!");
		} else {
			ProcessInforWWApply apply = detail.getProcessInforWWApply();
			map.put(2, apply.getProcardId() + "");
			String applyStatus = apply.getStatus();
			if (applyStatus.equals("同意")) {// 已同意的需要审批
				Integer epId = null;
				try {
					epId = CircuitRunServerImpl.createProcess("手工外委明细删除申请",
							ProcessInforWWApplyDetail.class, detail.getId(),
							"deleteStatus", "id",
							"ProcardAction!towwsqDetai.action?id=" + id, "零件"
									+ detail.getMarkId() + detail.getProName()
									+ "的工序" + detail.getProcessNames()
									+ "的外委明细申请删除,请您审批!", true);
					if (epId != null && epId > 0) {
						detail.setDeleteEpId(epId);
						CircuitRun circuitRun = (CircuitRun) totalDao.get(
								CircuitRun.class, epId);
						if ("同意".equals(circuitRun.getAllStatus())
								&& "审批完成".equals(circuitRun.getAuditStatus())) {
							detail.setDeleteStatus("同意");
						} else {
							detail.setDeleteStatus("未审批");
						}
					}
					map.put(1, "删除申请成功!");
					return map;
				} catch (Exception e) {
					e.printStackTrace();
					map.put(1, "审批流程有误申请失败!");
					return map;
				}

			} else {
				// if (applyStatus != null
				// && (applyStatus.equals("未审批") || applyStatus.equals("审批中") ||
				// applyStatus
				// .equals("同意"))) {
				// map.put(1, "当前审批状态为:" + applyStatus + ",不允许删除明细!");
				// }
				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, detail.getProcardId());
				if (procard != null && detail.getProcessNOs() != null
						&& detail.getProcessNOs().length() > 0) {
					String[] processNOS = detail.getProcessNOs().split(";");
					if (processNOS != null && processNOS.length > 0) {
						for (String processNOStr : processNOS) {
							try {
								Integer processNO = Integer
										.parseInt(processNOStr);
								ProcessInfor process = (ProcessInfor) totalDao
										.getObjectByCondition(
												"from ProcessInfor where processNO=? and (dataStatus is null or dataStatus!='删除') and procard.id=?",
												processNO, procard.getId());
								if (process != null) {// 将外委打回数量回传到工序上
									if (detail.getDataStatus() == null
											|| (!detail.getDataStatus().equals(
													"取消") && !detail
													.getDataStatus().equals(
															"删除"))) {
										if (applyStatus.equals("未申请")
												|| applyStatus.equals("打回")) {
											process.setSelectWwCount(process
													.getSelectWwCount()
													- detail.getApplyCount());
											if (process.getSelectWwCount() < 0) {
												process.setSelectWwCount(0f);
											}
										} else if (applyStatus.equals("未审批")
												|| applyStatus.equals("审批中")) {
											process.setApplyWwCount(process
													.getApplyWwCount()
													- detail.getApplyCount());
											if (process.getApplyWwCount() < 0) {
												process.setApplyWwCount(0f);
											}

										} else {
											process.setAgreeWwCount(process
													.getAgreeWwCount()
													- detail.getApplyCount());
											if (process.getAgreeWwCount() < 0) {
												process.setAgreeWwCount(0f);
											}
										}
										totalDao.update(process);
									}
								}

							} catch (Exception e) {
								// TODO: handle exception
							}
						}
						// 还原下层被占数量
						if ((detail.getDataStatus() == null || (!detail
								.getDataStatus().equals("取消") && !detail
								.getDataStatus().equals("删除")))
								&& !applyStatus.equals("打回")
								&& detail.getWwType() != null
								&& detail.getWwType().equals("包工包料")) {// 包工包料回传采购
							List<ProcessInforWWProcard> processwwprocardList = totalDao
									.query(
											"from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
											detail.getId());
							if (processwwprocardList != null
									&& processwwprocardList.size() > 0) {
								for (ProcessInforWWProcard processInforWWProcard : processwwprocardList) {
									Procard wgProcard = (Procard) totalDao
											.getObjectById(Procard.class,
													processInforWWProcard
															.getProcardId());
									if (wgProcard != null) {
										wgProcard.setWwblCount(wgProcard
												.getWwblCount()
												- detail.getApplyCount()
												* wgProcard.getQuanzi2()
												/ wgProcard.getQuanzi1());
										if (wgProcard.getWwblCount() < 0) {
											wgProcard.setWwblCount(0f);
										}
										totalDao.update(wgProcard);
									}
								}
							}
							// 归还下层半成品,自制件和组合（下层组合将整体被包公包料）
							backProcardWwblCount(procard, detail
									.getApplyCount(), 0);
							int rootid = procard.getRootId() == null ? procard
									.getOldRootId() : procard.getRootId();
							Procard rootp = (Procard) totalDao
									.getObjectByCondition(
											"from Procard where id=? ", rootid);
							rootp.setWlstatus("待定");
							totalDao.update(rootp);
						}
					}
				}
				List<ProcessInforWWProcard> processWWprocardList = totalDao
						.query(
								"from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
								detail.getId());
				if (processWWprocardList != null
						&& processWWprocardList.size() > 0) {
					for (int i = (processWWprocardList.size() - 1); i >= 0; i--) {
						ProcessInforWWProcard processWWprocard = processWWprocardList
								.get(i);
						totalDao.delete(processWWprocard);
					}
				}
				detail.setDataStatus("删除");
				detail.setProcessStatus("删除");
				totalDao.update(detail);
				if (!detail.getProcessInforWWApply().getStatus().equals("未申请")) {
					Float yyCount = (Float) totalDao
							.getObjectByCondition(
									"select count(*) from ProcessInforWWApplyDetail where processInforWWApply.id=? "
											+ "and (dataStatus is null or dataStatus !='删除')",
									detail.getProcessInforWWApply().getId());
					if (yyCount == 0) {
						apply.setProcessStatus("删除");
						apply.setStatus("删除");
						totalDao.update(apply);
					}
				}
				map.put(1, "true");
			}

		}
		return map;
	}

	@Override
	public List<ProcessInforWWApply> finddclPwwApplyList(
			ProcessInforWWApply pwwApply) {
		// TODO Auto-generated method stub
		if (pwwApply == null) {
			pwwApply = new ProcessInforWWApply();
		}
		Users user = Util.getLoginUser();
		if (user == null) {
			return null;
		}
		String hql = totalDao.criteriaQueries(pwwApply, null);
		hql += " and status in('未申请','未审批','审批中') order by id desc";
		List<ProcessInforWWApply> list = totalDao.query(hql);
		for (ProcessInforWWApply p : list) {
			String hql0 = "from ExecutionNode where circuitRun.id=?  and auditStatus = '同意' order by auditLevel,auditDateTime";
			List<ExecutionNode> nodeList = totalDao.query(hql0, p.getEpId());
			if (nodeList != null && nodeList.size() > 0) {
				for (ExecutionNode executionNode : nodeList) {
					if (user.getId().equals(executionNode.getAuditUserId())) {
						p.setIsagree("YES");
					}
				}
			}
			if (p.getProcardId() != null) {
				Procard procard = (Procard) totalDao.get(Procard.class, p
						.getProcardId());
				if (procard != null) {
					p.setNumber(procard.getFilnalCount());

				}
			}
		}
		return list;
	}

	@Override
	public Object[] findAllPwwApplyList(ProcessInforWWApply pwwApply,
			int pageNo, int pageSize, String pageStatus) {
		// TODO Auto-generated method stub
		if (pwwApply == null) {
			pwwApply = new ProcessInforWWApply();
		}
		String hql = totalDao.criteriaQueries(pwwApply, null);
		if ("forwaiweiCheck".equals(pageStatus)) {
			hql += "  and id in(select processInforWWApply.id from ProcessInforWWApplyDetail where processStatus in('合同待确认','外委待下单') and (dataStatus is null or dataStatus not in('删除','取消')))";
		}
		hql += "and status in('同意','打回','取消')";
		int count = totalDao.getCount(hql);
		List<ProcessInforWWApply> objs = totalDao.findAllByPage(hql
				+ " order by shenpiTime  desc", pageNo, pageSize);
		if (objs != null && objs.size() > 0) {
			for (ProcessInforWWApply pw : objs) {
				if (pw.getProcardId() != null) {
					Procard procard = (Procard) totalDao.get(Procard.class, pw
							.getProcardId());
					if (procard != null) {
						pw.setNumber(procard.getFilnalCount());
					}
				}
			}
		}
		Object[] o = { objs, count };
		return o;
	}

	@Override
	public List<ProcessInforWWApplyDetail> checkDetailByPwwApplyId(Integer id) {
		// TODO Auto-generated method stub
		List<ProcessInforWWApplyDetail> detailList = totalDao
				.query(
						"from ProcessInforWWApplyDetail where  (dataStatus is null or dataStatus not in ('取消','删除'))"
								+ " and (processStatus is null or processStatus not in ('取消','删除')) and processInforWWApply.id=? order by gysId",
						id);
		if (detailList != null && detailList.size() > 0) {
			for (ProcessInforWWApplyDetail detail : detailList) {
				if (detail.getPriceId() == null) {
					Price price = (Price) totalDao
							.getObjectByCondition(
									"from Price where partNumber=? and  gongxunum=?   and wwType=? and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
											+ Util.getDateTime("yyyy-MM-dd")
											+ "') order by id desc", detail
											.getMarkId(), detail
											.getProcessNOs(), detail
											.getWwType());
					if (price != null) {
						detail.setPriceId(price.getId());
						detail.setGysId(price.getGysId());
						detail.setPrice(price.getBhsPrice().floatValue());
						detail.setHsprice(price.getHsPrice().floatValue());
						String gysName = (String) totalDao
								.getObjectByCondition(
										"select name from ZhUser where id=?",
										price.getGysId());
						detail.setGysName(gysName);
						totalDao.update(detail);
						if (detail.getHadChange() == null) {
							// 比较之前订单，图纸是否有更新
							WaigouPlan waigouplan = (WaigouPlan) totalDao
									.getObjectByCondition(
											" from WaigouPlan where markId=? and processNOs=? and gysId=? order by banci desc",
											detail.getMarkId(), detail
													.getProcessNOs(), price
													.getGysId());
							if (waigouplan == null) {
								detail.setTzupdate("否");
							} else {
								if (waigouplan.getBanci() == null) {
									waigouplan.setBanci(0);
								}
								if (detail.getBanci() == null) {
									detail.setBanci(0);
								}
								if (detail.getBanci().equals(
										waigouplan.getBanci())) {
									detail.setTzupdate("否");
								} else {
									detail.setTzupdate("是");
								}
							}
						} else {
							detail.setTzupdate(detail.getHadChange());
						}
					} else {
						detail.setPriceId(null);
						detail.setGysId(null);
						detail.setGysName(null);
						totalDao.update(detail);
					}
				} else {
					// 比较之前订单，图纸是否有更新
					WaigouPlan waigouplan = (WaigouPlan) totalDao
							.getObjectByCondition(
									" from WaigouPlan where markId=? and processNOs=? and gysId=? order by banci desc",
									detail.getMarkId(), detail.getProcessNOs(),
									detail.getGysId());
					Price price = (Price) totalDao.get(Price.class, detail
							.getPriceId());
					if (price != null) {
						detail.setPrice(price.getBhsPrice().floatValue());
						detail.setHsprice(price.getHsPrice().floatValue());
					}
					if (waigouplan == null) {
						detail.setTzupdate("否");
					} else {
						if (waigouplan.getBanci() == null) {
							waigouplan.setBanci(0);
						}
						if (detail.getBanci() == null) {
							detail.setBanci(0);
						}
						if (detail.getBanci().equals(waigouplan.getBanci())) {
							detail.setTzupdate("否");
						} else {
							detail.setTzupdate("是");
						}
					}
				}
				// 关联件号添加
				String sql = "from ProcessInforWWProcard where applyDtailId =? and (status is null or status not in ('删除','取消'))";
				List<ProcessInforWWProcard> piwpList = totalDao.query(sql,
						detail.getId());
				String markids = "";// 关联件号
				// 拼接
				for (ProcessInforWWProcard piwp : piwpList) {
					if ("".equals(markids)) {
						markids += piwp.getMarkId();
					} else {
						markids += ";" + piwp.getMarkId();
					}

				}
				detail.setGuanlianMarkId(markids);
			}
		}
		return detailList;
	}

	public Map<Integer, Object> findAllWei(ProcessInforWWApplyDetail pwwApply,
			int pageNo, int pageSize, String pageStatus) {
		// TODO Auto-generated method stub
		if (pwwApply == null) {
			pwwApply = new ProcessInforWWApplyDetail();
		}
		String hql = "from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除')) and gysName is null";
		int count = totalDao.getCount(hql);
		List objs = totalDao.findAllByPage(hql, pageNo, pageSize);
		Map<Integer, Object> map = new HashMap<Integer, Object>();
		map.put(1, objs);
		map.put(2, count);
		return map;
	}

	public String OutDetailByPwwApply() {
		String hql = "from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除')) and gysName is null";
		List list = totalDao.query(hql);
		try {
			HttpServletResponse response = (HttpServletResponse) ActionContext
					.getContext().get(ServletActionContext.HTTP_RESPONSE);
			OutputStream os = response.getOutputStream();
			response.reset();
			response.setHeader("Content-disposition", "attachment; filename="
					+ new String("待录入外委价格".getBytes("GB2312"), "8859_1")
					+ ".xls");
			response.setContentType("application/msexcel");
			WritableWorkbook wwb = Workbook.createWorkbook(os);
			WritableSheet ws = wwb.createSheet("待录入外委价格", 0);
			WritableFont wf_title = new WritableFont(WritableFont.ARIAL, 11,
					WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE,
					jxl.format.Colour.BLACK); // 定义格式 字体 下划线 斜体 粗体 颜色
			WritableCellFormat wcf_title = new WritableCellFormat(wf_title); // 单元格定义
			wcf_title.setBackground(jxl.format.Colour.WHITE); // 设置单元格的背景颜色
			wcf_title.setAlignment(jxl.format.Alignment.CENTRE); // 设置对齐方式
			wcf_title.setBorder(jxl.format.Border.ALL,
					jxl.format.BorderLineStyle.THIN, jxl.format.Colour.BLACK);

			ws.addCell(new Label(0, 0, "外委未录入价格表", wcf_title));
			ws.mergeCells(0, 0, 17, 0);
			ws.addCell(new Label(0, 1, "序号"));
			ws.addCell(new Label(1, 1, "件号"));
			ws.addCell(new Label(2, 1, "名称"));
			ws.addCell(new Label(3, 1, "规格"));
			ws.addCell(new Label(4, 1, "税率"));
			ws.addCell(new Label(5, 1, "含税价"));
			ws.addCell(new Label(6, 1, "不含税价"));
			ws.addCell(new Label(7, 1, "型别"));
			ws.addCell(new Label(8, 1, "合同编号"));
			ws.addCell(new Label(9, 1, "供应商编号"));
			ws.addCell(new Label(10, 1, "开始时间"));
			ws.addCell(new Label(11, 1, "失效时间"));
			ws.addCell(new Label(12, 1, "订货量(从)"));
			ws.addCell(new Label(13, 1, "订货量(到)"));
			ws.addCell(new Label(14, 1, "采购比例"));
			ws.addCell(new Label(15, 1, "工序名称"));
			ws.addCell(new Label(16, 1, "备注"));
			ws.addCell(new Label(17, 1, "委外类型"));
			for (int i = 0; i < list.size(); i++) {
				ProcessInforWWApplyDetail d = (ProcessInforWWApplyDetail) list
						.get(i);
				ws.addCell(new Label(0, i + 2, i + 1 + ""));
				ws.addCell(new Label(1, i + 2, d.getMarkId()));
				ws.addCell(new Label(2, i + 2, d.getProName()));
				ws.addCell(new Label(3, i + 2, ""));
				ws.addCell(new Label(4, i + 2, "0.17"));
				ws.addCell(new Label(5, i + 2, ""));
				ws.addCell(new Label(6, i + 2, ""));
				ws.addCell(new Label(7, i + 2, ""));
				ws.addCell(new Label(8, i + 2, ""));
				ws.addCell(new Label(9, i + 2, ""));
				ws
						.addCell(new Label(10, i + 2, Util
								.getDateTime("yyyy-MM-dd")));
				ws.addCell(new Label(11, i + 2, ""));
				ws.addCell(new Label(12, i + 2, "0"));
				ws.addCell(new Label(13, i + 2, "0"));
				ws.addCell(new Label(14, i + 2, "100"));
				ws.addCell(new Label(15, i + 2, d.getProcessNames()));
				ws.addCell(new Label(16, i + 2, ""));
				ws.addCell(new Label(17, i + 2, d.getWwType()));
			}
			wwb.write();
			wwb.close();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (WriteException e) {
			e.printStackTrace();
		}

		return "导出成功";
	}

	@Override
	public ProcessInforWWApply getPwwApplyById(Integer id) {
		// TODO Auto-generated method stub
		return (ProcessInforWWApply) totalDao.getObjectById(
				ProcessInforWWApply.class, id);
	}

	@Override
	public String surewwapplyht(Integer id) {
		// TODO Auto-generated method stub
		Users login = Util.getLoginUser();
		if (login == null) {
			return "请先登录";
		}
		List<Integer> xiadanIdList = new ArrayList<Integer>();
		ProcessInforWWApply apply = (ProcessInforWWApply) totalDao
				.getObjectById(ProcessInforWWApply.class, id);
		if (apply != null) {
			String hql1 = "select valueCode from CodeTranslation where type = 'sys' and keyCode='外委合同确认时下单' ";
			String valueCode = (String) totalDao.getObjectByCondition(hql1);
			Float unpriceCount = null;
			Float dwwcount = (Float) totalDao
					.getObjectByCondition(
							"select count(*) from ProcessInforWWApplyDetail where processInforWWApply.id=? and processStatus in('合同待确认','外委待下单')",
							apply.getId());
			if (valueCode == null || valueCode.equals("否")) {
				if ((dwwcount == null || dwwcount == 0)
						&& (apply.getProcessStatus() == null || !apply
								.getProcessStatus().equals("合同待确认"))) {
					return "对不起该外委列表状态为:" + apply.getProcessStatus()
							+ "，只有合同待确认状态才能确定";
				} else {
					unpriceCount = (Float) totalDao
							.getObjectByCondition(
									"select count(*) from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除')) and processInforWWApply.id=? and priceId is null",
									id);
					if (unpriceCount == null) {
						unpriceCount = 0f;
					} else if (unpriceCount > 0) {
						return "对不起，还有未核对合同的外委工序!";
					}
					List<ProcessInforWWApplyDetail> detailList = totalDao
							.query(
									"from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除')) and processStatus!='订单外委采购' and processInforWWApply.id=?",
									id);
					if (detailList != null && detailList.size() > 0) {
						for (ProcessInforWWApplyDetail detail : detailList) {
							xiadanIdList.add(detail.getId());
							detail.setProcessStatus("订单外委采购");
							totalDao.update(detail);
						}
					}
					apply.setProcessStatus("订单外委采购");
					totalDao.update(apply);
				}
			} else {
				if ("合同待确认".equals(apply.getProcessStatus())) {
					// 当含有未匹配到合同的明细时不生成采购订单（不在这一步做，换成手动触发和合同确认之后做）
					unpriceCount = (Float) totalDao
							.getObjectByCondition(
									"select count(*) from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除')) and processInforWWApply.id=? and priceId is null",
									id);
					if (unpriceCount == null) {
						unpriceCount = 0f;
					} else if (unpriceCount > 0) {
						return "对不起，还有未核对合同的外委工序!";
					}
					List<ProcessInforWWApplyDetail> detailList = totalDao
							.query(
									"from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除')) and processStatus!='订单外委采购'  and processInforWWApply.id=?",
									id);
					if (detailList != null && detailList.size() > 0) {
						for (ProcessInforWWApplyDetail detail : detailList) {
							detail.setProcessStatus("外委待下单");
							totalDao.update(detail);
						}
					}
					apply.setProcessStatus("外委待下单");
					totalDao.update(apply);
					return "true";
				} else if ((dwwcount == null || dwwcount == 0)
						&& !"外委待下单".equals(apply.getProcessStatus())) {
					return "对不起该外委列表状态为:" + apply.getProcessStatus()
							+ "，不能进行此操作";
				} else {
					// 当含有未匹配到合同的明细时不生成采购订单（不在这一步做，换成手动触发和合同确认之后做）
					unpriceCount = (Float) totalDao
							.getObjectByCondition(
									"select count(*) from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除'))  and processInforWWApply.id=? and priceId is null",
									id);
					if (unpriceCount == null) {
						unpriceCount = 0f;
					} else if (unpriceCount > 0) {
						return "对不起，还有未核对合同的外委工序!";
					}
					List<ProcessInforWWApplyDetail> detailList = totalDao
							.query(
									"from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除')) and processStatus!='订单外委采购'  and processInforWWApply.id=?",
									id);
					if (detailList != null && detailList.size() > 0) {
						for (ProcessInforWWApplyDetail detail : detailList) {
							xiadanIdList.add(detail.getId());
							detail.setProcessStatus("订单外委采购");
							totalDao.update(detail);
						}
					}
					apply.setProcessStatus("订单外委采购");
					totalDao.update(apply);

				}
			}
			if (unpriceCount == null || unpriceCount == 0) {
				// 查询之前是否有未下单的批产
				// String markId=
				//				
				//				
				// Float count =

				// 查询同业务件号小批次的是否有未下单的。
				// String before_hql =
				// " from WaigouOrder where  processApplyId in (select id from ProcessInforWWApply "
				// +
				// " where ywMarkId = ? and selfCard <? )";
				// String before_hql =
				// " from ProcessInforWWApply where processStatus not in('删除','取消') and (status is null or status!='打回') "
				// +
				// " and  ywMarkId = ? and  selfCard <? and id not in (select processInforWWApply.id from ProcessInforWWApplyDetail where"
				// +
				// " id in(select wwxlId from ProcardWGCenter where wgOrderId in(select id from WaigouPlan where wwSource='手动外委'))  ) ";
				String before_hql = " from ProcessInforWWApply where processStatus not in('删除','取消','订单外委采购','生产中')" +
						" and id in(select processInforWWApply from ProcessInforWWApplyDetail where processStatus not in('删除','取消','订单外委采购','生产中')) and (status is null or status!='打回') "
						+ " and markId = ? and selfCard < ?";
				List<ProcessInforWWApply> applyList = totalDao.query(
						before_hql, apply.getMarkId(), apply.getSelfCard());
				if (applyList != null && applyList.size() > 0) {
					String msg = "";
					for (ProcessInforWWApply apply0 : applyList) {
						msg += "编码:<b>" + apply0.getYwMarkId() + "</b>件号:<b>"
								+ apply0.getMarkId() + "</b> 批次:<b>"
								+ apply0.getSelfCard()
								+ "</b>为前批次，还未下单，请按照订单批次下单<br/>";
					}
					if (msg.length() > 0) {
						throw new RuntimeException(msg);
					}
				}

				// 生成供应商采购外委订单
				List<Integer> gysIdList = new ArrayList<Integer>();
				List<WaigouOrder> waigouorderList = new ArrayList<WaigouOrder>();
				Set<ProcessInforWWApplyDetail> detailSet = apply
						.getProcessInforWWApplyDetails();
				if (detailSet != null && detailSet.size() > 0) {
					for (ProcessInforWWApplyDetail detail : detailSet) {
						if (detail.getDataStatus() != null
								&& (detail.getDataStatus().equals("取消") || detail
										.getDataStatus().equals("删除"))) {
							continue;
						}
						if (!xiadanIdList.contains(detail.getId())) {
							continue;
						}
						Procard procard = (Procard) totalDao.getObjectById(
								Procard.class, detail.getProcardId());
						if (procard == null) {
							continue;
						}
						if (procard.getSbStatus() != null
								&& procard.getSbStatus().equals("删除")) {
							continue;
						}
						Float applyCount = detail.getApplyCount();
						List<ProcessInforWWProcard> processWWprocardList = totalDao
								.query(
										"from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
										detail.getId());
						if (processWWprocardList != null
								&& processWWprocardList.size() > 0) {
							// 包含外购件
							// 拆分外购件回馈采购
							// if (detail.getWwType() != null
							// && detail.getWwType().equals("包工包料")) {
							// // 包工包料回传采购
							// for (ProcessInforWWProcard processWWProcard :
							// processWWprocardList) {
							// Procard wgProcard = (Procard) totalDao
							// .getObjectById(Procard.class,
							// processWWProcard
							// .getProcardId());
							// // 修改外购件cgNUmber和TjNumber
							// updateWgCgCount(wgProcard, processWWProcard
							// .getApplyCount());
							// }
							// }
							String sql1 = "from ProcardTemForProcess where fatherMarkId=? and markIds=? and processNos=?";
							if (procard.getBanci() == null
									|| procard.getBanci() == 0) {
								sql1 += " and (fbanci is null or fbanci =0)";
							} else {
								sql1 += " and fbanci is not null and  fbanci ="
										+ procard.getBanci();
							}
							ProcardTemForProcess ptp = (ProcardTemForProcess) totalDao
									.getObjectByCondition(sql1, procard
											.getMarkId(), detail.getWwMarkId(),
											detail.getProcessNOs());

							// 回传件号与工序的关系到模版上
							if (ptp == null) {
								ptp = new ProcardTemForProcess();
								ptp.setFatherMarkId(procard.getMarkId());// 父零件
								ptp.setFbanbenNumber(procard.getBanBenNumber());// 父版本号
								ptp.setFbanci(procard.getBanci());// 父版次
								ptp.setMarkIds(detail.getWwMarkId());// 零件号
								ptp.setProcessNos(detail.getProcessNOs());// 工序号
								ptp.setProcessNames(detail.getProcessNames());// 工序名称
								totalDao.save(ptp);
							}
							String sql2 = "from ProcardForProcess where fatherId=? and markIds=? and processNos=?";
							ProcardForProcess pp = (ProcardForProcess) totalDao
									.getObjectByCondition(sql2,
											procard.getId(), detail
													.getWwMarkId(), detail
													.getProcessNOs());
							// 记录此批次的零件和外委工序的关系
							if (pp == null) {
								pp = new ProcardForProcess();
								pp.setFatherId(procard.getId());// 父零件ID
								pp.setFatherMarkId(procard.getMarkId());// 父零件号
								pp.setFbanci(procard.getBanci());// 父零件号
								pp.setMarkIds(detail.getWwMarkId());// 零件号
								pp.setProcessNos(detail.getProcessNOs());// 工序号
								pp.setProcessNames(detail.getProcessNames());// 工序名称
								pp.setProcessCount(detail.getApplyCount());// 外委数量（对工序）
								totalDao.save(pp);
							} else {
								if (pp.getProcessCount() == null) {
									pp.setProcessCount(0f);
								}
								pp.setProcessCount(pp.getProcessCount()
										+ detail.getApplyCount());
								totalDao.update(pp);
							}
						}
						// if (detail.getWwType() != null
						// && detail.getWwType().equals("包工包料")) {
						// // 原材料回传采购
						// if (procard.getQuanzi2() != null
						// && procard.getQuanzi1() != null
						// && procard.getQuanzi2() > 0
						// && procard.getQuanzi1() > 0) {
						// updateYclCgCount(procard, applyCount);
						// }
						// // 包工包料必须减去对应数量的klNUmber
						// // if(procard.getProcardStyle().equals("自制")){
						// if (procard.getKlNumber() == null) {
						// procard.setKlNumber(procard.getFilnalCount()
						// - applyCount);
						// procard.setHascount(procard.getFilnalCount()
						// - applyCount);
						// } else {
						// if (procard.getHascount() == null) {
						// procard.setHascount(procard
						// .getFilnalCount());
						// }
						// procard.setKlNumber(procard.getKlNumber()
						// - applyCount);
						// procard.setHascount(procard.getHascount()
						// - applyCount);
						// }
						// // }
						// totalDao.update(procard);
						// // 递归设置下层的非外购件和下下层之后的所有零件的cg数量
						// updateDownSonSetWgww(procard, applyCount, 0);
						// }

						WaigouOrder waigouORder = null;
						// 订单明细
						Set<WaigouPlan> wwpSet = null;
						ZhUser gys = null;
						Users gysUser = null;
						if (gysIdList.contains(detail.getGysId())) {//
							for (WaigouOrder order : waigouorderList) {
								if (order.getGysId().equals(detail.getGysId())
										&& order.getWwType().equals(
												detail.getWwType())) {
									waigouORder = order;
									wwpSet = waigouORder.getWwpSet();
									gys = waigouORder.getZhUser();
									gysUser = waigouORder.getUser();
								}
							}
						}
						if (waigouORder == null) {
							gys = (ZhUser) totalDao.getObjectById(ZhUser.class,
									detail.getGysId());

							if (gys != null) {
								gysUser = (Users) totalDao.getObjectById(
										Users.class, gys.getUserid());
							}
							waigouORder = new WaigouOrder();
							if (gys != null) {
								waigouORder.setZhUser(gys);
								waigouORder.setUser(gysUser);
								waigouORder.setWwSource("手动外委");
								waigouORder.setRootMarkId(apply.getMarkId());
								waigouORder.setYwMarkId(apply.getYwMarkId());
								waigouORder.setUserId(gys.getUserid());
								waigouORder.setUserCode(gysUser.getCode());
								waigouORder.setGysId(gys.getId());//
								waigouORder.setGysName(gys.getCmp());// 供应商名称
								waigouORder.setLxPeople(gys.getCperson());// 联系人
								waigouORder.setGysPhone(gys.getCtel());// 电话
								waigouORder.setFax(gys.getCfax());// 传真
								waigouORder.setType("外委");
								waigouORder.setPayType(gys.getFkfs());
								waigouORder.setPiaojuType(gys.getZzsl());
								// gysWWApply.settype;//票据类型
								// private String condition;//付款条件
								String wwNumber = "";
								String before = null;
								Integer bIndex = 10;
								// before = "ww" + Util.getDateTime("yyyyMMdd");
								if (detail.getWwType() != null
										&& detail.getWwType().equals("包工包料")) {
									before = "ww"
											+ Util.getDateTime("yyyyMMdd");
								} else {
									before = "wwzc"
											+ Util.getDateTime("yyyyMMdd");
									bIndex = 12;
								}

								Integer maxNo = 0;
								String maxNumber = (String) totalDao
										.getObjectByCondition("select max(planNumber) from WaigouOrder where planNumber like '"
												+ before + "%'");
								if (maxNumber != null) {
									String num = maxNumber.substring(bIndex,
											maxNumber.length());
									try {
										Integer maxNum = Integer.parseInt(num);
										if (maxNum > maxNo) {
											maxNo = maxNum;
										}
									} catch (Exception e) {
										// TODO: handle exception
									}
								}
								maxNo++;
								wwNumber = before
										+ String.format("%03d", maxNo);
								waigouORder.setPlanNumber(wwNumber);// 外委订单号码
								waigouORder.setAddUserCode(login.getCode());// 采购员工号
								waigouORder.setAddUserName(login.getName());// 采购员姓名
								waigouORder.setAddUserPhone(login.getPassword()
										.getPhoneNumber());// 采购员电话
								waigouORder.setAddTime(Util.getDateTime());// 添加时间
								waigouORder.setRootId(apply.getProcardId());// 生产总成id
								waigouORder.setGhAddress(gys.getCompanydz());// 送货地址
								waigouORder.setCaigouMonth(Util
										.getDateTime("yyyy-MM月"));// 采购月份
								// gysWWApply.setshAddress;//送货地址
								waigouORder.setProcessApplyId(id);// 工序外委表Id
								waigouORder.setStatus("待核对");// 状态
								waigouORder.setApplystatus("未申请");//
							}
							waigouorderList.add(waigouORder);
						}
						if (wwpSet == null) {
							wwpSet = new HashSet<WaigouPlan>();
						}
						// 供应商外委订单明细
						WaigouPlan wgPlan = new WaigouPlan();
						wgPlan.setMarkId(detail.getMarkId());// 件号
						wgPlan.setBanben(detail.getBanbenNumber()); // 版本号
						wgPlan.setProName(detail.getProName());// 零件名称
						wgPlan.setBanci(detail.getBanci());
						wgPlan.setProcessNOs(detail.getProcessNOs());// 工序号
						wgPlan.setProcessNames(detail.getProcessNames());// 工序名称
						wgPlan.setWwType(detail.getWwType());// 外委类型（工序外委,包工包料）
						wgPlan.setType("外委");// 外委类型（工序外委,包工包料）
						wgPlan.setUnit(detail.getUnit());// 单位
						wgPlan.setPriceId(detail.getPriceId());// 合同Id
						wgPlan.setUserId(gys.getUserid());// 供应商信息
						wgPlan.setUserCode(gysUser.getCode());
						wgPlan.setGysId(gys.getId());//
						wgPlan.setGysName(gys.getCmp());// 供应商名称
						wgPlan.setNumber(detail.getApplyCount());// 数量
						wgPlan.setSyNumber(detail.getApplyCount());// 采购数量*供应商采购比例
						wgPlan.setStatus("待核对");
						wgPlan.setAddTime(Util.getDateTime());
						wgPlan.setWwDetailId(detail.getId());
						wgPlan.setAddTime(Util.getDateTime());
						Price price = (Price) totalDao.getObjectById(
								Price.class, detail.getPriceId());

						if (price == null) {
							System.out.println(detail.getId() + " =="
									+ detail.getPriceId());
						}
						WaigouPlan historywgp = null;
						if (price != null) {
							wgPlan.setHsPrice(Float.parseFloat(price
									.getHsPrice()
									+ ""));// 含税单价
							wgPlan.setMoney(Float.parseFloat(price.getHsPrice()
									* detail.getApplyCount() + ""));// 总金额
							wgPlan.setPrice(Float.parseFloat(price
									.getBhsPrice()
									+ ""));// 不含税单价
							wgPlan.setTaxprice(price.getTaxprice()); // 税率
							historywgp= (WaigouPlan) totalDao
							.getObjectByCondition(
									" from WaigouPlan where markId=? and processNOs=? and gysId=? order by banci desc",
									wgPlan.getMarkId(), wgPlan
											.getProcessNOs(), price
											.getGysId());
						} else {
							wgPlan.setHsPrice(0f);// 含税单价
							wgPlan.setMoney(0f);// 总金额
							wgPlan.setPrice(0f);// 不含税单价
							wgPlan.setTaxprice(0d); // 税率
						}
						if (historywgp == null) {
							wgPlan.setHadChange("第一次");
						} else {
							if (Util.isEquals(historywgp.getBanci(), wgPlan
									.getBanci())) {
								wgPlan.setHadChange("否");
							} else {
								wgPlan.setHadChange("是");
							}
						}

						// gyswwDetail.setpayDate;//交付日期
						wgPlan.setRemark(apply.getYwMarkId());// 备注
						wgPlan.setWaigouOrder(waigouORder);
						wgPlan.setWwSource("手动外委");
						totalDao.save(wgPlan);
						// 中间表
						ProcardWGCenter zjb = new ProcardWGCenter();
						zjb.setWgOrderId(wgPlan.getId());
						zjb.setProcardId(detail.getProcardId());
						zjb.setProcardCount(detail.getApplyCount());
						zjb.setConnectionType("mTom");
						zjb.setWwxlId(detail.getId());
						totalDao.save(zjb);
						wwpSet.add(wgPlan);
						waigouORder.setWwpSet(wwpSet);
						waigouORder.setType("外委");
						waigouORder.setWwType(detail.getWwType());
						if (waigouORder.getId() == null) {
							totalDao.save(waigouORder);
							gysIdList.add(waigouORder.getGysId());
						} else {
							totalDao.update(waigouORder);
							if (!gysIdList.contains(waigouORder.getGysId())) {
								gysIdList.add(waigouORder.getGysId());
							}
						}

					}
				}
				// 判断有没有同总成的申请没有过的如果没有就将总成设定为待采购
				// 计算物料需求计划
				// 生产批次激活
				// nowwyx(apply.getId());

				return "true";
			}
		}
		return null;
	}

	/***
	 * 工序外委申请同意后，执行采购物料以及生产激活信息
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public String wwAuditToJihuo(Integer id) {
		// TODO Auto-generated method stub
		ProcessInforWWApply apply = (ProcessInforWWApply) totalDao
				.getObjectById(ProcessInforWWApply.class, id);
		if (apply != null) {
			Float totalCount = (Float) totalDao
					.getObjectByCondition(
							"select count(*) from ProcessInforWWApply where procardId=? and status not in('同意','打回') and id!=?",
							apply.getProcardId(), apply.getId());
			// Float totalCount2 = (Float) totalDao
			// .getObjectByCondition(
			// "select count(*) from ProcessInforWWApply where markId=? and selfCard=? and status  in('同意') and id!=?",
			// apply.getMarkId(), apply.getSelfCard(), apply
			// .getId());
			if ((totalCount == null || totalCount == 0)) {// 同总成没有未审批的外委列表
				String wlStatus = (String) totalDao.getObjectByCondition(
						"select wlstatus from Procard where id=?", apply
								.getProcardId());
				if (wlStatus == null || wlStatus.equals("待定")) {
					return nowwyx(apply.getProcardId(), null);
				}
			}
		}
		return "未查询到你要审批的外委申请记录!请核对";
	}

	/**
	 * 包工包料外委关联下层
	 * 
	 * @param procard
	 * @param applyCount
	 * @param i
	 */
	private String updateDownSonSetWgww(Procard procard, Float applyCount, int i) {
		// TODO Auto-generated method stub
		Set<Procard> sonSet = procard.getProcardSet();
		if (sonSet != null && sonSet.size() > 0) {
			for (Procard son : sonSet) {
				if (!son.getProcardStyle().equals("外购")) {// 处理下层非外购件
					float count = (float) Math.ceil(applyCount
							* son.getCorrCount());
					if (son.getQuanzi2() != null && son.getQuanzi1() != null
							&& son.getQuanzi2() > 0 && son.getQuanzi1() > 0) {
						// 修改原材料采购量
						updateYclCgCount(son, count);
					}
					if (son.getKlNumber() == null) {
						son.setKlNumber(son.getFilnalCount());
					}
					if (son.getHascount() == null) {
						son.setHascount(son.getKlNumber());
					}
					son.setKlNumber(son.getKlNumber() - count);
					son.setHascount(son.getHascount() - count);
					if (son.isZhHasYcl()) {
						if (son.getYhascount() == null) {
							son.setYhascount(son.getKlNumber());
						}
						son.setYhascount(son.getYhascount() - count);
					}
					totalDao.update(son);
					updateDownSonSetWgww(son, count, 1);
				} else {
					if (son.getNeedProcess() != null
							&& son.getNeedProcess().equals("yes")) {
						// 半成品
						if (son.getCgNumber() != null) {
							if (son.getCgNumber() > applyCount
									* son.getQuanzi2() / son.getQuanzi1()) {
								// 需采购数量大于此次包料数量
								son.setCgNumber(son.getCgNumber() - applyCount
										* son.getQuanzi2() / son.getQuanzi1());
							} else {
								son.setCgNumber(0f);
							}
						}
						if (son.getKlNumber() == null) {
							son.setKlNumber(son.getFilnalCount());
						}
						if (son.getHascount() == null) {
							son.setHascount(son.getKlNumber());
						}
						son.setKlNumber(son.getKlNumber() - applyCount
								* son.getQuanzi2() / son.getQuanzi1());
						son.setHascount(son.getHascount() - applyCount
								* son.getQuanzi2() / son.getQuanzi1());
						totalDao.update(son);
					} else if (i != 0) {
						updateWgCgCount(son, applyCount * son.getQuanzi2()
								/ son.getQuanzi1());
					}
				}
			}
		}
		return null;
	}

	/**
	 * 确认外委之后修改原材料采购数量
	 * 
	 * @param procard
	 * @param applyCount
	 */
	private void updateYclCgCount(Procard procard, Float applyCount) {
		// TODO Auto-generated method stub
		Float noclNumber = null;
		if ("KG".equals(procard.getYuanUnit())
				|| "G".equals(procard.getYuanUnit())
				|| "kg".equals(procard.getYuanUnit())
				|| "g".equals(procard.getYuanUnit())
				|| "千克".equals(procard.getYuanUnit())
				|| "克".equals(procard.getYuanUnit())
				|| "公斤".equals(procard.getYuanUnit())
				|| "斤".equals(procard.getYuanUnit())) {
			// 如果是重量单位
			noclNumber = applyCount * procard.getQuanzi2()
					/ procard.getQuanzi1();
		} else {
			Float bizhong = (Float) totalDao
					.getObjectByCondition(
							"select bili from YuanclAndWaigj where clClass='原材料' and trademark=? and specification=?",
							procard.getTrademark(), procard.getSpecification());
			if (bizhong == null || bizhong == 0) {
				bizhong = 1f;
			}
			noclNumber = bizhong * applyCount * procard.getQuanzi2()
					/ procard.getQuanzi1();
		}
		if (procard.getCgNumber() != null) {
			if (procard.getCgNumber() > noclNumber) {
				procard.setCgNumber(procard.getCgNumber() - noclNumber);
			} else {
				procard.setCgNumber(0f);
			}
			totalDao.update(procard);
		}
	}

	/**
	 * 外委回传外购件采购和tjNumber
	 * 
	 * @param wgProcard
	 * @param outCount
	 * @return
	 */
	public String updateWgCgCount(Procard wgProcard, float outCount) {
		if (wgProcard != null) {
			if (wgProcard.getCgNumber() != null) {
				if (wgProcard.getCgNumber() > outCount) {// 需采购数量大于此次包料数量
					wgProcard.setCgNumber(wgProcard.getCgNumber() - outCount);
				} else {
					wgProcard.setTjNumber(wgProcard.getTjNumber()
							- (outCount - wgProcard.getCgNumber()));
					wgProcard.setCgNumber(0f);
					if (wgProcard.getTjNumber() < 0) {
						wgProcard.setTjNumber(0f);
					}
				}
			}
			if (wgProcard.getTjNumber() == null) {
				wgProcard.setTjNumber(0f);
			}
			Float minNumber = wgProcard.getTjNumber() * wgProcard.getQuanzi1()
					/ wgProcard.getQuanzi2();
			wgProcard.setMinNumber(minNumber);
			// Float minNumber2 = 0f;
			// if (wgProcard.getTjNumber().equals(
			// wgProcard.getFilnalCount())) {
			// minNumber2 = procard
			// .getFilnalCount();
			// } else {
			// minNumber2 = (float) Math
			// .floor(minNumber);
			// }
			totalDao.update(wgProcard);
		}
		return null;

	}

	@Override
	public String nowwyx(Integer id, String noPlan) {
		// if (id == null) {
		// String hql_lsJihuo =
		// "from Procard where procardStyle='自制' and status='已发卡' and (jihuoStatua<>'激活' or jihuoStatua is null)";
		// List<Procard> list_wjh = totalDao.query(hql_lsJihuo);
		// for (Procard procard : list_wjh) {
		// jihuoSingleProcard(procard);
		// }
		// return list_wjh.size() + "条异常数据已处理";
		// }

		Procard totalProcard = (Procard) totalDao.getObjectById(Procard.class,
				id);
		if (totalProcard == null) {
			return "没有找到目标流水卡!";
		} else {
			String selfCard = (String) totalDao
					.getObjectByCondition(
							"select selfCard from Procard where markId=? and wlstatus='待定' and selfCard<? "
									+ "and procardStyle='总成' and status not in('取消','删除') order by selfCard asc",
							totalProcard.getMarkId(), totalProcard
									.getSelfCard());
			if (selfCard != null) {
				return "请先激活第" + selfCard + "批次!";
			}
			OrderManager order = (OrderManager) totalDao.get(
					OrderManager.class, Integer.parseInt(totalProcard
							.getOrderId()));
			OrderManager ycorder = null;
			if (order != null && order.getOrderId() != null) {
				ycorder = (OrderManager) totalDao.get(OrderManager.class, order
						.getOrderId());
			}
			String nowTimne = Util.getDateTime();
			// String hql_old =
			// "from Users where onWork in ('在职','试用') and id in"
			// +
			// "(select userId from ProcessinforPeople where procard.markId ='DKBA8.045.2435' and  and procard.id<49567 order by selfCard desc)";
			// List userList = totalDao.query(hql_old);

			if (totalProcard != null) {
				Float unOverCount = (Float) totalDao
						.getObjectByCondition(
								"select count(*) from ProcessInforWWApply where status in('未申请','未审批','审批中') and processStatus not in('删除','取消') and procardId=?"
										+ " and id in(select processInforWWApply.id  from ProcessInforWWApplyDetail where processInforWWApply.id is not null and processStatus in('删除','取消'))",
								totalProcard.getRootId());
				if (unOverCount != null && unOverCount > 0) {
					return "有外委预选未处理完,请处理完再点击!";
				}
				/************* 查看是否需要开启 无限物料 模式 **************/
				// String hql1 =
				// "select valueCode from CodeTranslation where type = 'sys' and keyCode='无限物料' and valueName='MRP'";
				// String valueCode = (String)
				// totalDao.getObjectByCondition(hql1);
				String valueCode = "";
				// 这里根据系统设置是否需要确认不需要的话状态设置为“待采购”
				totalProcard.setWlstatus("待确认");
				// 这里根据系统设置是否需要确认
				totalProcard.setMrpjihuoDate(nowTimne);
				totalDao.update(totalProcard);

				/******************* 开始计算整个bom的采购数量 ***********************/
				String hql_caigouN = "from Procard where rootId=? and procardStyle='外购' and (sbStatus is null or sbStatus!='删除')  and status='初始'";

				List list_caigou = totalDao.query(hql_caigouN, totalProcard
						.getId());
				for (int i = 0, len = list_caigou.size(); i < len; i++) {
					Procard procard = (Procard) list_caigou.get(i);
					Float needNumber = procard.getFilnalCount();// 原材料/外购件的需求总量
					// 判断外委数量
					if (procard.getWwblCount() != null
							&& procard.getWwblCount() > 0) {
						needNumber -= procard.getWwblCount();
						if ((needNumber * procard.getQuanzi1() / procard
								.getQuanzi2()) < 0.05) {// 过滤小数点问题
							needNumber = 0f;
						}
						if (needNumber <= 0) {
							continue;
						}
					}
					procard.setWgjihuoTime(nowTimne);
					if (!"TK".equals(procard.getKgliao())
							&& !"TK AVL".equals(procard.getKgliao())
							&& !"TK Price".equals(procard.getKgliao())
							&& !"CS".equals(procard.getKgliao())) {
						procard.setKgliao("TK");
					}
					// Float number = procard.getNeedCount();
					if (procard.getProductStyle() != null
							&& procard.getProductStyle().equals("试制")) {// 试制外购件参与计算的数据全设置
						procard.setSingleDuration(1f);
						procard.setCapacity(1f);
						procard.setCapacitySurplus(1f);
						procard.setCapacityRatio(1f);
						procard.setDeliveryDuration(1f);
						procard.setDeliveryRatio(1f);
						procard.setDeliveryPeriod(1);
						procard.setDeliveryAmount(1f);
						procard.setProSingleDuration(1f);
						procard.setAllJiepai(1f);
					}
					/***************** MRP计算(库存量&&&&&占用量) *****************/

					String kgsql = "";
					if (procard.getKgliao() != null
							&& procard.getKgliao().length() > 0) {
						kgsql += " and kgliao ='" + procard.getKgliao() + "'";
					}
					// goodsClassSql =
					// " and ((goodsClass in ('外购件库','中间库') "
					// + kgsql + " ) or goodsClass = '备货库')";
					String goodsClassSql = " and goodsClass in ('外购件库') "
							+ kgsql;
					String banben_hql = "";
					String banben_hql2 = "";
					if (procard.getBanBenNumber() != null
							&& procard.getBanBenNumber().length() > 0) {
						banben_hql = " and banBenNumber='"
								+ procard.getBanBenNumber() + "'";
						banben_hql2 = " and banben='"
								+ procard.getBanBenNumber() + "'";
					}
					String specification_sql = "";
					// if (procard.getSpecification() != null
					// && procard.getSpecification().length() > 0) {
					// specification_sql = " and specification = '"
					// + procard.getSpecification() + "'";
					// }

					// 库存量(件号+版本+供料属性+库别)
					String hqlGoods = "";
					hqlGoods = "select sum(goodsCurQuantity) from Goods where goodsMarkId=? "
							+ goodsClassSql
							+ " and goodsCurQuantity>0 "
							+ banben_hql
							+ " and (fcStatus is null or fcStatus='可用')";
					Float kcCount = (Float) totalDao.getObjectByCondition(
							hqlGoods, procard.getMarkId());
					if (kcCount == null || kcCount < 0) {
						kcCount = 0f;
					}

					/****************** 占用量=生产占用量+导入占用量 ******************************/
					// 系统占用量(含损耗)(已计算过采购量(1、有库存 2、采购中)，未领料) sum(hascount)*(1+ifnull(sunhao,0)/100)
					String zyCountSql = "select sum(hascount) from Procard where markId=? and kgliao=? "
							+ banben_hql
							+ " and jihuoStatua='激活' and (status='已发卡' or (oldStatus='已发卡' and status='设变锁定')) and procardStyle='外购' and (lingliaostatus='是' or lingliaostatus is null ) "
							+ " and (sbStatus<>'删除' or sbStatus is null ) ";
					Double zyCountD = (Double) totalDao.getObjectByConditionforDouble(
							zyCountSql, procard.getMarkId(), procard
									.getKgliao());
					if (zyCountD == null || zyCountD < 0) {
						zyCountD = 0d;
					}
					Float zyCount = zyCountD.floatValue();

					// // 导入占用量(系统切换时导入占用量)
					// String hqlGoods_zy =
					// "select sum(goodsCurQuantity) from Goods where goodsMarkId=?"
					// + banben_hql
					// +
					// " and goodsClass in ('占用库') and kgliao=? and goodsCurQuantity>0 and (fcStatus is null or fcStatus='可用')";
					// Float kcCount_zy = (Float) totalDao.getObjectByCondition(
					// hqlGoods_zy, procard.getMarkId(), procard
					// .getKgliao());
					// if (kcCount_zy == null || kcCount_zy < 0) {
					// kcCount_zy = 0f;
					// }
					// zyCount += kcCount_zy;
					// if (zyCount < 0) {
					// zyCount = 0F;
					// }
					/****************** 结束 占用量=生产占用量+导入占用量 结束 ******************************/
					/****************** 在途量=采购在途量+导入在途量 ******************************/
					// 系统在途量(已生成采购计划，未到货)
					// String hql_zc =
					// "select sum(cgNumber-dhNumber) from  Procard where markId=? and productStyle=? "
					// + banben_hql
					// +
					// " and kgliao=? and jihuoStatua='激活' and status='已发卡' and procardStyle='外购'"
					// +
					// " and cgNumber >0 and dhNumber is not null and (sbStatus is null or sbStatus!='删除')";
					// Float ztCount = (Float) totalDao.getObjectByCondition(
					// hql_zc, procard.getMarkId(), procard
					// .getProductStyle(), procard.getKgliao());

					// 系统在途量(已生成物料需求信息，未到货)
					String hql_zc0 = "select sum(number-ifnull(rukuNum,0)) from ManualOrderPlan where markId = ?  "
							+ banben_hql2
							+ " and kgliao=? and (number>rukuNum or rukuNum is null) and (status<>'取消' or status is null) "
							+ specification_sql;
					Double ztCountd = (Double) totalDao.getObjectByCondition(
							hql_zc0, procard.getMarkId(), procard.getKgliao());
					if (ztCountd == null) {
						ztCountd = 0D;
					}
					Float ztCount = ztCountd.floatValue();

					// // 导入在途量(系统切换时导入在途量)
					// String hqlGoods_zt =
					// "select sum(goodsCurQuantity) from Goods where goodsMarkId=?"
					// + banben_hql
					// +
					// " and kgliao=? and goodsClass in ('在途库') and goodsCurQuantity>0 and (fcStatus is null or fcStatus='可用')";
					// Float kcCount_zt = (Float) totalDao.getObjectByCondition(
					// hqlGoods_zt, procard.getMarkId(), procard
					// .getKgliao());
					// if (kcCount_zt == null || kcCount_zt < 0) {
					// kcCount_zt = 0f;
					// }
					// ztCount += kcCount_zt;
					// if (ztCount < 0) {
					// ztCount = 0F;
					// }
					/****************** 结束 在途量=采购在途量+导入在途量 结束 ******************************/
					// (库存量+在途量(已生成采购，未到货))-占用量=剩余可用库存量
					Float daizhiCount = (kcCount + ztCount) - zyCount;
					if (daizhiCount < 0) {
						daizhiCount = 0F;
					}
					// 无限物料模式 库存根据需求数量自动增加
					if (needNumber > daizhiCount && "是".equals(valueCode)) {
						String hqlgoods = "from Goods where goodsMarkId=? "
								+ goodsClassSql + " and goodsCurQuantity>0 "
								+ banben_hql
								+ " and (fcStatus is null or fcStatus='可用')";
						Goods goods = (Goods) totalDao.getObjectByCondition(
								hqlgoods, procard.getMarkId());
						if (goods != null) {
							goods.setGoodsCurQuantity(goods
									.getGoodsCurQuantity()
									+ procard.getFilnalCount());
							totalDao.update(goods);
						} else {
							goods = new Goods();
							goods.setGoodsMarkId(procard.getMarkId());
							if (procard.getBanBenNumber() != null
									&& procard.getBanBenNumber().length() > 0) {
								goods
										.setBanBenNumber(procard
												.getBanBenNumber());
							}
							goods.setGoodsFullName(procard.getProName());
							goods.setGoodsClass("外购件库");
							if (procard.getKgliao() != null
									&& procard.getKgliao().length() > 0) {
								goods.setKgliao(procard.getKgliao());
							}
							goods.setGoodsCurQuantity(procard.getFilnalCount());
							totalDao.save(goods);
						}
						daizhiCount += needNumber;
					}
					// Float caigouCount = 0F;// 临时屏蔽
					// 激活外购件并判断数量是否足够(外购件保持
					// finalCount=klnumber=hasCount，变动是tjNumber,minNumber
					// )
					procard.setJihuoStatua("激活");
					procard.setStatus("已发卡");
					procard.setKlNumber(procard.getFilnalCount());
					procard.setHascount(needNumber);
					procard.setTjNumber(0F);
					procard.setMinNumber(0F);
					procard.setDhNumber(0F);

					procard.setZzNumber(zyCount);// 占用
					procard.setZtNumber(ztCount);// 在途

					procard.setKcNumber(kcCount);// 库存

					// 剩余可用库存量多余
					if (daizhiCount > 0) {
						/****
						 * 有可用量（库存+在途）
						 */
						// 待采购量(需求数量-呆滞数量)
						Float dcgNumber = needNumber - daizhiCount;

						// 计算可激活数量(// 库存减去占用 大于 0的为可激活量)
						Float tjnumber = kcCount - zyCount;
						if (tjnumber > 0) {
							if (tjnumber > needNumber) {
								// 剩余可用库存大于需求数量（说明实际库存充足，全部激活，无需采购）
								procard.setTjNumber(needNumber);
							} else {
								// 按照多余的库存激活（部分采购）
								procard.setTjNumber(tjnumber);
							}
						}

						// 可用量小于待采购量（部分采购）
						if (dcgNumber > 0) {
							procard.setCgNumber(dcgNumber);
							procard.setWlstatus("待采购");
							// (部分库存)
							if (tjnumber > 0) {
								procard.setZtzyNumber(daizhiCount - tjnumber);
							} else {// 无多余库存,在途补充
								procard.setZtzyNumber(daizhiCount);
							}
						} else {
							// 可用量大于待采购量，不再进行采购
							procard.setCgNumber(0F);
							// 存在多余库存量
							if (tjnumber > 0) {
								if (tjnumber >= needNumber) {
									// 多余库存量可以满足本次需求
									procard.setWlstatus("入库");
								} else {
									// 只有部分库存，不满足本次需求的使用在途
									procard
											.setZtzyNumber(needNumber
													- tjnumber);
								}
							} else {
								// 全部是在途数量
								procard.setZtzyNumber(needNumber);
								procard.setGongwei("在途");
							}
						}
						// 换算最小激活数量
						// Float minNumber = procard.getTjNumber()
						// / procard.getQuanzi2() * procard.getQuanzi1();
						// if (procard.getTjNumber().equals(needNumber)) {
						// minNumber = (float) Math.ceil(minNumber);
						// }
						// procard.setMinNumber(0F);

					} else {
						// 无库存，完全采购
						procard.setCgNumber(needNumber);
						procard.setWlstatus("待采购");
						procard.setGongwei("待采购");
					}
					// 计算损耗率，提高采购量
					if (procard.getSunhaoType() == null
							|| 0 == procard.getSunhaoType()) {// 为百分比
						if (procard.getSunhao() != null
								&& procard.getSunhao() > 0) {
							Float cgNumber = procard.getCgNumber()
									* (100 + procard.getSunhao()) / 100;
							if ("个".equals(procard.getUnit())
									|| "pcs".equals(procard.getUnit())
									|| "PCS".equals(procard.getUnit())) {
								Double newnum = Math.ceil(cgNumber);
								cgNumber = newnum.floatValue();
							}
							procard.setCgNumber(cgNumber);
						}
					} else if (1 == procard.getSunhaoType()) {// 为固定值
						if (procard.getSunhao() != null
								&& procard.getSunhao() > 0) {
							Float cgNumber = procard.getCgNumber()
									+ procard.getSunhao();
							if ("个".equals(procard.getUnit())
									|| "pcs".equals(procard.getUnit())
									|| "PCS".equals(procard.getUnit())) {
								Double newnum = Math.ceil(cgNumber);
								cgNumber = newnum.floatValue();
							}
							procard.setCgNumber(cgNumber);
						}
					}

					// 客供料，无需采购
					if ("CS".equals(procard.getKgliao())) {
						procard.setCgNumber(null);
						procard.setWlstatus("入库");
						procard.setGongwei("CS");
					}
					// 单独设置不采购
					if ("否".equals(procard.getCgStatus())) {
						procard.setCgNumber(null);
						procard.setWlstatus("待入库");
						procard.setGongwei("待入库");
					}
					if ("否".equals(procard.getLingliaostatus())) {
						procard.setCgNumber(null);
						procard.setWlstatus("入库");
						procard.setGongwei("虚拟");
						procard.setJihuoStatua("激活");
						procard.setStatus("完成");
						procard.setKlNumber(needNumber);
						procard.setHascount(0F);
						procard.setTjNumber(needNumber);
						procard.setMinNumber(procard.getFilnalCount()
								* procard.getQuanzi1() / procard.getQuanzi2());
						procard.setDhNumber(0F);
					}

					// 半成品不能直接设置激活数量
					if (procard.getNeedProcess() != null
							&& procard.getNeedProcess().equals("yes")) {
						procard.setHascount(procard.getKlNumber());
						procard.setKlNumber(procard.getFilnalCount());// 将外购件的激活数量作为半成品的可领数量
						// procard.setMinNumber(procard.getTjNumber());
						procard.setTjNumber(0F);
						// procard.setMinNumber(0F);
						procard.setJihuoStatua(null);
						procard.setStatus("初始");
					}
					if (procard.getCgNumber() != null) {
						procard.setOutcgNumber(0F);
					}
					procard.setMrpjihuoDate(Util.getDateTime());
					if (procard.getCgNumber() != null
							&& ("个".equals(procard.getUnit())
									|| "pcs".equals(procard.getUnit()) || "PCS"
									.equals(procard.getUnit()))) {
						Double newnum = Math.ceil(procard.getCgNumber());
						procard.setCgNumber(newnum.floatValue());
					}
					totalDao.update(procard);
				}

				// totalDao.clear();// 提交缓存

				/******************* 计算整个bom的采购数量结束 ***********************/
				if (noPlan == null || !"yes".equals(noPlan)) {
					// 开始激活生产任务
					// jihuoProcardForPlan(totalProcard, true);
					if ("初始".equals(totalProcard.getStatus())
							&& "总成".equals(totalProcard.getProcardStyle())) {
						if (ProcardBlServerImpl.SystemShezhi("自动排产")) {
							Procard newprocard1 = new Procard();
							newprocard1.setId(id);
							newprocard1.setFilnalCount(totalProcard
									.getFilnalCount());
							newprocard1.setJihuoDate(totalProcard
									.getJihuoDate() == null ? Util
									.getDateTime() : totalProcard
									.getJihuoDate());
							procardBlServer.creatBlPlan(newprocard1);
						}
					}

					/************** 如果总成不是初始的，说明已经排产了。重新计算排产 **************/
					if (!"初始".equals(totalProcard.getStatus())
							&& "总成".equals(totalProcard.getProcardStyle())) {
						// 查询是否存在未排产的零件信息
						String hql_blc = "from Procard where rootId=? and id not in "
								+ "(select procardId from ProcardBl where procardRootId=?)";
						Integer count = totalDao.getCount(hql_blc, totalProcard
								.getId(), totalProcard.getId());
						if (count > 0) {
							// 查询对应的排产计划，重新计算
							String hql = "from ProcardBl where procardId=?";
							List list_procardbl = totalDao.query(hql,
									totalProcard.getId());
							if (list_procardbl != null
									&& list_procardbl.size() > 0) {
								for (int i = 0; i < list_procardbl.size(); i++) {
									ProcardBl procardBl = (ProcardBl) list_procardbl
											.get(i);
									Procard newprocard = new Procard();
									newprocard
											.setThProcardId(procardBl.getId());
									newprocard.setJihuoDate(procardBl
											.getYlingliaoTime());
									procardBlServer.creatBlPlan(newprocard);
								}
							}
						}
					}
				}
			}
			return "设定成功!";
		}
	}

	@Override                                               
	public String backwwApply(ProcessInforWWApply pwwApply) {
		// TODO Auto-generated method stub
		ProcessInforWWApply old = getProcesswwApplyById(pwwApply.getId());
		if (old == null) {
			return "没有找到目标!";
		}
		String remark = pwwApply.getBackReMark();
		if (remark == null) {
			return "请先填写打回原由!";
		}
		remark.replaceAll(" ", "");
		if (remark.length() == 0) {
			return "请先填写打回原由!";
		}
		List<ProcessInforWWApplyDetail> detailList = totalDao
				.query(
						"from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除')) and processInforWWApply.id=?",
						pwwApply.getId());
		if (detailList != null && detailList.size() > 0) {
			for (ProcessInforWWApplyDetail detail : detailList) {
				detail.setProcessStatus("合同匹配打回");
				totalDao.save(detail);
			}
		}
		old.setProcessStatus("合同匹配打回");
		old.setBackReMark(pwwApply.getBackReMark());
		old.setStatus("打回");
		return totalDao.update(old) + "";
	}

	/**
	 * 计算在制品可用数量
	 * 
	 * @param id
	 * @return
	 */
	public Float getZaiZhiCount(Integer id) {
		// TODO Auto-generated method stub
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		// 是否为需要原材料的组合(此处只查组合的成品在制品不查组合的原材料在制品)
		boolean iszhycl = procard.isZhHasYcl();
		String hqlZaizhi = "from Goods where goodsMarkId='"
				+ procard.getMarkId()
				+ "' and goodsClass='在制品' and goodsCurQuantity>0 and (fcStatus is null or fcStatus='可用') ";
		if (iszhycl) {// 组合分成品在制品(goodsFormat 为空)和原材料在制品(goodsFormat 为'原材料')
			hqlZaizhi = hqlZaizhi
					+ " and (goodsFormat is null or goodsFormat='')";
		}
		List<Goods> listzaizhi = totalDao.query(hqlZaizhi);
		float zaizhiCount = 0f;
		if (null != listzaizhi && listzaizhi.size() > 0) {
			for (Goods goodszaizhi : listzaizhi) {
				zaizhiCount += goodszaizhi.getGoodsCurQuantity();// 在制品数量
			}
		}
		// 查询所有同总成件号没有完成的所需的在制品量，用在制品数减去(同总成除外，同总成的将在下面计算)
		String filnalCountSql = "from Procard where markId =? and id !=? and hasCount is not null and klNumber>hasCount and rootId!=?  and rootId in (select rootId from Procard where markId =(select markId from Procard where id=?)  and status not in('入库'))";
		// if (procard.getProcardStyle() != null
		// && procard.getProcardStyle().equals("外购")) {
		// filnalCountSql += " and needprocess='yes'";
		// }
		List<Procard> filnalCountList = totalDao.query(filnalCountSql, procard
				.getMarkId(), procard.getId(), procard.getRootId(), procard
				.getRootId());
		if (filnalCountList.size() > 0) {
			for (Procard zaizhiProcard : filnalCountList) {
				if (zaizhiProcard != null) {
					Procard totalCard = (Procard) totalDao.getObjectById(
							Procard.class, zaizhiProcard.getRootId());
					if (totalCard.getHasRuku() == null) {
						totalCard.setHasRuku(0f);
					}
					if (zaizhiProcard.getKlNumber() == null) {
						zaizhiProcard.setKlNumber(0f);
					}
					if (zaizhiProcard.getHascount() == null) {
						zaizhiProcard.setHascount(zaizhiProcard.getKlNumber());
					}
					// 已入库数量*该件号对总成的比例数量就是需要在制品数量
					Float hasRuKu = totalCard.getHasRuku()
							* zaizhiProcard.getFilnalCount()
							/ totalCard.getFilnalCount();
					// 已领减去已入库
					float hsaCount = (float) Math.ceil(zaizhiProcard
							.getHascount());
					Float needCount = (zaizhiProcard.getKlNumber() - hsaCount)
							- hasRuKu;
					zaizhiCount -= needCount;
				}
			}

		}
		// 查询其他含有该自制件的BOM的已领却没有入库所需要的在制品数
		String otherFilnalCountSql = "from Procard where status in('已发料','领工序','完成','待入库') and markId=?  and rootId in(select id from Procard where id in (select rootId from Procard where markId=?) and markId!=(select markId from Procard where id=?) and status not in('入库'))";
		// if (procard.getProcardStyle() != null
		// && procard.getProcardStyle().equals("外购")) {
		// otherFilnalCountSql += " and needprocess='yes'";
		// }
		List<Procard> otherProcardList = totalDao.query(otherFilnalCountSql,
				procard.getMarkId(), procard.getMarkId(), procard.getRootId());
		if (otherProcardList.size() > 0) {
			for (Procard p : otherProcardList) {
				if (p.getHascount() == null || p.getFilnalCount() == null
						|| (p.isZhHasYcl() && p.getYhascount() == null)) {
					break;
				} else {
					// 已领减去已入库
					Procard totalCard = (Procard) totalDao.getObjectById(
							Procard.class, p.getRootId());
					if (totalCard.getHasRuku() == null) {
						totalCard.setHasRuku(0f);
					}
					// （总成总数量-已入库数量）*该件号对总成的比例数量就是需要在制品数量-未领料的
					float hsaCount = (float) Math.ceil(p.getHascount());
					zaizhiCount -= (totalCard.getFilnalCount() - totalCard
							.getHasRuku())
							* p.getFilnalCount()
							/ totalCard.getFilnalCount()
							- hsaCount;
				}
			}
		}
		Procard totalCard = (Procard) totalDao.getObjectById(Procard.class,
				procard.getRootId());
		if (totalCard.getHasRuku() == null) {
			totalCard.setHasRuku(0f);
		}
		// 查询本批次同件号已领的其他件号
		Procard sameMarkId = (Procard) totalDao
				.getObjectByCondition(
						"from Procard where status in('已发料','领工序','完成','待入库') and rootId=? and markId=? and id!=?",
						procard.getRootId(), procard.getMarkId(), procard
								.getId());
		if (sameMarkId != null) {
			if (sameMarkId.getHascount() == null
					|| sameMarkId.getFilnalCount() == null
					|| (sameMarkId.isZhHasYcl() && sameMarkId.getYhascount() == null)) {
			} else {
				// 已领减去已入库
				// （总成总数量-已入库数量）*该件号对总成的比例数量就是需要在制品数量-未领料的
				if (sameMarkId.getHascount() != null) {
					float hsaCount = (float) Math
							.ceil(sameMarkId.getHascount());
					zaizhiCount -= (sameMarkId.getKlNumber() - hsaCount);// 本批次生成的在制品

					zaizhiCount += totalCard.getHasRuku()
							* sameMarkId.getFilnalCount()
							/ totalCard.getFilnalCount();// 入库扣去的在制品
				}
			}
		}
		// 查询本批次已占用的在制品，用在制品数减去
		if (procard.getHascount() != null) {
			if (procard.getKlNumber() > procard.getHascount()) {

				// 已生成的在制品-总成已入库扣去的在制品数量
				float hsaCount = (float) Math.ceil(procard.getHascount());
				zaizhiCount -= (procard.getKlNumber() - hsaCount);// 本批次生成的在制品

				zaizhiCount += totalCard.getHasRuku()
						* procard.getFilnalCount() / totalCard.getFilnalCount();// 入库扣去的在制品
			}
		}

		return zaizhiCount;
	}

	/**
	 * 获取原材料在制品可用数量
	 * 
	 * @param id
	 * @param count
	 * @return
	 */
	public Float getYclZaiZhiCount(Integer id) {
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		boolean isZhHasYcl = procard.isZhHasYcl();
		if (isZhHasYcl) {
			String hqlZaizhi = "from Goods where goodsMarkId='"
					+ procard.getMarkId()
					+ "' and goodsClass='在制品' and goodsCurQuantity>0 and goodsFormat = '原材料' and (fcStatus is null or fcStatus='可用') ";
			List<Goods> listzaizhi = totalDao.query(hqlZaizhi);
			float zaizhiCount = 0f;
			if (null != listzaizhi && listzaizhi.size() > 0) {
				for (Goods goodszaizhi : listzaizhi) {
					zaizhiCount += goodszaizhi.getGoodsCurQuantity();// 在制品数量
				}
			}
			// 查询所有同总成件号没有完成的所需的在制品量，用在制品数减去
			String filnalCountSql = "from Procard where markId =? and ((yhascount is not null and klNumber>yhascount) or (hasCount is not null and klNumber>hasCount)) and rootId !=?  and rootId in (select rootId from Procard where markId =(select markId from Procard where id=?)  and status not in('入库'))";
			// if (procard.getProcardStyle() != null
			// && procard.getProcardStyle().equals("外购")) {
			// filnalCountSql += " and needprocess='yes'";
			// }
			List<Procard> filnalCountList = totalDao.query(filnalCountSql,
					procard.getMarkId(), procard.getRootId(), procard
							.getRootId());
			if (filnalCountList.size() > 0) {
				for (Procard zaizhiProcard : filnalCountList) {
					if (zaizhiProcard.getYhascount() == null) {
						zaizhiProcard.setYhascount(zaizhiProcard.getKlNumber());
					}
					if (zaizhiProcard != null) {
						if (zaizhiProcard.getKlNumber() == null) {
							zaizhiProcard.setKlNumber(0f);
						}
						if (zaizhiProcard.getHascount() == null) {
							zaizhiProcard.setHascount(zaizhiProcard
									.getKlNumber());
						}
						if (zaizhiProcard.getYhascount() == null) {
							zaizhiProcard.setYhascount(zaizhiProcard
									.getKlNumber());
						}
						if (zaizhiProcard.getYhascount() < zaizhiProcard
								.getHascount()) {
							// 原材料比外购件多领的数量就是占用原材料在制品的数量
							zaizhiCount -= (zaizhiProcard.getHascount() - zaizhiProcard
									.getYhascount());
						}
					}
				}

			}
			// 查询其他含有该自制件的BOM的已领却没有入库所需要的在制品数
			String otherFilnalCountSql = "from Procard where status in('已发料','领工序','完成','待入库') and markId=?  and rootId in(select id from Procard where id in (select rootId from Procard where markId=?) and markId!=(select markId from Procard where id=?) and status not in('入库'))";
			// if (procard.getProcardStyle() != null
			// && procard.getProcardStyle().equals("外购")) {
			// otherFilnalCountSql += " and needprocess='yes'";
			// }
			List<Procard> otherProcardList = totalDao.query(
					otherFilnalCountSql, procard.getMarkId(), procard
							.getMarkId(), procard.getRootId());
			if (otherProcardList.size() > 0) {
				for (Procard p : otherProcardList) {
					if (p.getKlNumber() == null) {
						p.setKlNumber(0f);
					}
					if (p.getHascount() == null) {
						p.setHascount(p.getKlNumber());
					}
					if (p.getYhascount() == null) {
						p.setYhascount(p.getKlNumber());
					}
					if (p.getYhascount() < p.getHascount()) {
						// 原材料比外购件多领的数量就是占用原材料在制品的数量
						zaizhiCount -= (p.getHascount() - p.getYhascount());
					}
				}
			}
			// 查询本批次已占用的在制品，用在制品数减去
			if (procard.getKlNumber() == null) {
				procard.setKlNumber(0f);
			}
			if (procard.getHascount() == null) {
				procard.setHascount(procard.getKlNumber());
			}
			if (procard.getYhascount() == null) {
				procard.setYhascount(procard.getKlNumber());
			}
			if (procard.getYhascount() < procard.getHascount()) {
				// 原材料比外购件多领的数量就是占用原材料在制品的数量
				zaizhiCount -= (procard.getHascount() - procard.getYhascount());
			}
			// 查询本批次同件号已领的其他件号
			Procard sameMarkId = (Procard) totalDao
					.getObjectByCondition(
							"from Procard where status in('已发料','领工序','完成','待入库') and rootId=? and markId=? and id!=?",
							procard.getRootId(), procard.getMarkId(), procard
									.getId());
			if (sameMarkId != null) {
				if (sameMarkId.getKlNumber() == null) {
					sameMarkId.setKlNumber(0f);
				}
				if (sameMarkId.getHascount() == null) {
					sameMarkId.setHascount(sameMarkId.getKlNumber());
				}
				if (sameMarkId.getYhascount() == null) {
					sameMarkId.setYhascount(sameMarkId.getKlNumber());
				}
				if (sameMarkId.getYhascount() < sameMarkId.getHascount()) {
					// 原材料比外购件多领的数量就是占用原材料在制品的数量
					zaizhiCount -= (sameMarkId.getHascount() - sameMarkId
							.getYhascount());
				}
			}
			// 查询本批次已占用的在制品，用在制品数减去
			if (procard.getKlNumber() == null) {
				procard.setKlNumber(0f);
			}
			if (procard.getHascount() == null) {
				procard.setHascount(procard.getKlNumber());
			}
			if (procard.getYhascount() == null) {
				procard.setYhascount(procard.getKlNumber());
			}
			if (procard.getYhascount() < procard.getHascount()) {
				// 原材料比外购件多领的数量就是占用原材料在制品的数量
				zaizhiCount -= (procard.getHascount() - procard.getYhascount());
			}

			return zaizhiCount;
		}
		return 0f;
	}

	@Override
	public void mibuProcessinforWWProcard() {
		// TODO Auto-generated method stubProcessInforWWApplyDetail
		List<ProcessInforWWApplyDetail> detailList = totalDao
				.query("from ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in ('取消','删除')) and wwType='包工包料'");
		if (detailList != null && detailList.size() > 0) {
			for (ProcessInforWWApplyDetail detail : detailList) {
				String wwMarkId = detail.getWwMarkId();
				if (wwMarkId != null && wwMarkId.length() > 0) {
					// 包含外购件
					// 拆分外购件回馈采购
					String[] markIds = wwMarkId.split(";");
					if (detail.getWwType() != null
							&& detail.getWwType().equals("包工包料")) {// 包工包料回传采购
						if (markIds != null && markIds.length > 0) {
							for (String wgMarkId : markIds) {
								Procard wgProcard = (Procard) totalDao
										.getObjectByCondition(
												"from Procard where markId=? and procard.id=?",
												wgMarkId, detail.getProcardId());
								if (wgProcard != null) {
									ProcessInforWWProcard processwwprocard = (ProcessInforWWProcard) totalDao
											.getObjectByCondition(
													"from ProcessInforWWProcard where procardId=? and applyDtailId=? and (status is null or status not in ('删除','取消'))",
													wgProcard.getId(), detail
															.getId());
									if (processwwprocard == null) {
										processwwprocard = new ProcessInforWWProcard();
										processwwprocard.setProcardId(wgProcard
												.getId());// 零件id
										processwwprocard.setMarkId(wgProcard
												.getMarkId());// 件号
										processwwprocard.setProcName(wgProcard
												.getProName());// 名称
										processwwprocard.setBanben(wgProcard
												.getBanBenNumber());// 版本号
										processwwprocard.setBanci(wgProcard
												.getBanci());// 版次
										processwwprocard.setApplyCount(detail
												.getApplyCount()
												* wgProcard.getQuanzi2()
												/ wgProcard.getQuanzi1());// 数量
										processwwprocard
												.setHascount(processwwprocard
														.getApplyCount());
										processwwprocard.setStatus("使用");// 状态
										processwwprocard.setApplyDtailId(detail
												.getId());
										totalDao.save(processwwprocard);
									}
								}
							}
						}
					}

				}
			}
		}
	}

	/***
	 * 读取上一批次的委外记录，自动添加
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public String addHistoryWW(Integer id) {
		String msg = "";
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录!";
		}
		if (id != null) {
			Procard totalProcard = (Procard) totalDao.getObjectById(
					Procard.class, id);
			if (totalProcard != null) {
				List<ProcessInforWWApply> wwApplyList = (List<ProcessInforWWApply>) totalDao
						.query(
								"from ProcessInforWWApply where status not in('取消') and procardId=?",
								totalProcard.getId());
				ProcessInforWWApply wwApply = null;
				if (wwApplyList != null && wwApplyList.size() > 0) {
					return "此功能只能作为此批次最初预选外委使用！";
					// for (ProcessInforWWApply pa : wwApplyList) {
					// if (pa.getStatus() != null) {
					// if (pa.getStatus().equals("未审批")
					// || pa.getStatus().equals("审批中")) {
					// return "您已提交过此生产批次的外委申请请不要重复申请!";
					// } else if (pa.getStatus().equals("未申请")) {
					// wwApply = pa;
					// break;// break的作用是未申请优先于打回
					// } else if (pa.getStatus().equals("打回")) {
					// wwApply = pa;
					// }
					// }
					// }
				}
				Set<ProcessInforWWApplyDetail> detailSet = null;
				String hql_oldwwApply = "";
				if (wwApply == null) {
					wwApply = new ProcessInforWWApply();
					wwApply.setWwApplyNumber(wwNumber());// 外委申请单编号
					wwApply.setProcardId(totalProcard.getId());
					wwApply.setYwMarkId(totalProcard.getYwMarkId());// 业务件号
					wwApply.setMarkId(totalProcard.getMarkId());// 总成件号
					wwApply.setProName(totalProcard.getProName());// 总成名称
					wwApply.setSelfCard(totalProcard.getSelfCard());// 总成批次
					wwApply.setFinalCount(totalProcard.getFilnalCount());
					wwApply.setOrderNumber(totalProcard.getOrderNumber());
					wwApply.setUserId(user.getId());
					wwApply.setUserCode(user.getCode());
					wwApply.setUserName(user.getName());
					wwApply.setAddTime(Util.getDateTime());
					wwApply.setProcessStatus("预选未审批");
					wwApply.setStatus("未申请");
					detailSet = new HashSet<ProcessInforWWApplyDetail>();
					hql_oldwwApply = "from ProcessInforWWApply where markId=? order by selfCard desc";
				} else {
					hql_oldwwApply = "from ProcessInforWWApply where markId=? and id <>"
							+ wwApply.getId() + " order by selfCard desc";
					detailSet = wwApply.getProcessInforWWApplyDetails();
				}

				// 查询上一批次的申请记录
				ProcessInforWWApply oldPwwApply = (ProcessInforWWApply) totalDao
						.getObjectByCondition(hql_oldwwApply, totalProcard
								.getMarkId());
				if (oldPwwApply != null) {
					// 开始复制外委记录
					Set<ProcessInforWWApplyDetail> pwwdetailSet = oldPwwApply
							.getProcessInforWWApplyDetails();
					for (ProcessInforWWApplyDetail processInforWWApplyDetail : pwwdetailSet) {

						ProcessInforWWApplyDetail newProcessdetail = new ProcessInforWWApplyDetail();

						// 查询上次外委的件号在本次bom中对应的Procard
						String hql_nowprocard = "from Procard where rootId=? and markId=? and "
								+ "id not in(select procard.id from ProcessInfor where  (dataStatus is null or dataStatus!='删除') "
								+ " and (selectWwCount >0 or applyWwCount>0 or agreeWwCount>0))"
								+ " and fatherId in"
								+ "(select id from Procard where markId = "
								+ "(select markId from Procard where id=(select fatherId from Procard where id =?)))";
						// 这句有缺陷
						// String hql_nowprocard =
						// "from Procard where markId=? and rootId=?";
						Procard nowProcard_ww = (Procard) totalDao
								.getObjectByCondition(hql_nowprocard,
										totalProcard.getRootId(),
										processInforWWApplyDetail.getMarkId(),
										processInforWWApplyDetail
												.getProcardId());
						Procard hisProcard = (Procard) totalDao.getObjectById(
								Procard.class, processInforWWApplyDetail
										.getProcardId());
						if (hisProcard == null
								|| "删除".equals(hisProcard.getSbStatus())
								|| "删除".equals(processInforWWApplyDetail
										.getDataStatus())) {
							continue;
						}
						// Float applyCount =
						// nowProcard_ww.getFilnalCount()*processInforWWApplyDetail.getApplyCount()/hisProcard.getFilnalCount();
						// applyCount=(float)Math.ceil(applyCount);
						// if(applyCount>nowProcard_ww.getFilnalCount()){
						// applyCount = nowProcard_ww.getFilnalCount();
						// }
						if (nowProcard_ww != null) {
							BeanUtils.copyProperties(processInforWWApplyDetail,
									newProcessdetail, new String[] { "id",
											"processInforWWApply", "epstatus",
											"epId", "dataStatus" });
							Users loginUser = Util.getLoginUser();
							newProcessdetail.setBanbenNumber(nowProcard_ww
									.getBanBenNumber());
							newProcessdetail.setBanci(nowProcard_ww.getBanci());
							newProcessdetail.setProcessStatus("预选未审批");
							newProcessdetail.setMarkId(nowProcard_ww
									.getMarkId());
							newProcessdetail.setSelfCard(nowProcard_ww
									.getSelfCard());
							newProcessdetail
									.setProcardId(nowProcard_ww.getId());
							newProcessdetail.setApplyCount(nowProcard_ww
									.getFilnalCount());
							newProcessdetail.setUserId(loginUser.getId());
							newProcessdetail.setUserName(loginUser.getName());
							newProcessdetail.setUserCode(loginUser.getCode());
							newProcessdetail.setAddTime(Util.getDateTime());
							newProcessdetail.setPriceId(null);
							newProcessdetail.setGysId(null);
							newProcessdetail.setGysName(null);
						} else {
							continue;
						}
						String processNOs = newProcessdetail.getProcessNOs();
						String[] strs = processNOs.split(";");
						if (strs != null && strs.length > 0) {
							for (String processNOStr : strs) {
								Integer processNo = Integer
										.parseInt(processNOStr);
								ProcessInfor old = (ProcessInfor) totalDao
										.getObjectByCondition(
												"from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除') and processNO=?",
												nowProcard_ww.getId(),
												processNo);
								if (old != null) {
									if (old.getSelectWwCount() == null) {
										old.setSelectWwCount(0f);
									}
									if (old.getApplyWwCount() == null) {
										old.setApplyWwCount(0f);
									}
									if (old.getAgreeWwCount() == null) {
										old.setAgreeWwCount(0f);
									}
									Float syCount = nowProcard_ww
											.getFilnalCount()
											- old.getApplyCount()
											- old.getSelectWwCount()
											- old.getApplyWwCount()
											- old.getAgreeWwCount();
									if (syCount < nowProcard_ww
											.getFilnalCount()) {
										// msg += "第" + old.getProcessNO() +
										// "工序:"
										// + old.getProcessName()
										// + "最多可预选" + syCount
										// + nowProcard_ww.getUnit()
										// + "!\n";
										newProcessdetail.setApplyCount(syCount);
										old.setSelectWwCount(old
												.getSelectWwCount()
												+ syCount);
										totalDao.update(newProcessdetail);
										totalDao.update(old);
									} else {
										old.setSelectWwCount(old
												.getSelectWwCount()
												+ nowProcard_ww
														.getFilnalCount());
										totalDao.update(old);
									}
								}
							}
							totalDao.save(newProcessdetail);
							// 关联外购件
							List<String> wwMarkIds = totalDao
									.query(
											"select markId from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消')) ",
											processInforWWApplyDetail.getId());
							if (wwMarkIds != null && wwMarkIds.size() > 0) {
								// 包含外购件
								// 拆分外购件回馈采购
								for (String wgMarkId : wwMarkIds) {
									Procard wgProcard = (Procard) totalDao
											.getObjectByCondition(
													"from Procard where markId=? and procard.id=?",
													wgMarkId, nowProcard_ww
															.getId());
									if (wgProcard != null) {
										ProcessInforWWProcard processwwprocard = new ProcessInforWWProcard();
										processwwprocard.setProcardId(wgProcard
												.getId());// 零件id
										processwwprocard.setMarkId(wgProcard
												.getMarkId());// 件号
										processwwprocard.setProcName(wgProcard
												.getProName());// 名称
										processwwprocard.setBanben(wgProcard
												.getBanBenNumber());// 版本号
										processwwprocard.setBanci(wgProcard
												.getBanci());// 版次
										processwwprocard
												.setApplyCount(newProcessdetail
														.getApplyCount()
														* wgProcard
																.getQuanzi2()
														/ wgProcard
																.getQuanzi1());// 数量
										processwwprocard
												.setHascount(processwwprocard
														.getApplyCount());
										processwwprocard.setStatus("使用");// 状态
										processwwprocard
												.setApplyDtailId(newProcessdetail
														.getId());
										totalDao.save(processwwprocard);
										// 下层包工包料
										if (newProcessdetail.getWwType() != null
												&& newProcessdetail.getWwType()
														.equals("包工包料")) {// 包工包料回传采购
											if (wgProcard.getWwblCount() == null) {// 外委包料数量
												wgProcard
														.setWwblCount(newProcessdetail
																.getApplyCount()
																* wgProcard
																		.getQuanzi2()
																/ wgProcard
																		.getQuanzi1());
											} else {
												wgProcard
														.setWwblCount(wgProcard
																.getWwblCount()
																+ newProcessdetail
																		.getApplyCount()
																* wgProcard
																		.getQuanzi2()
																/ wgProcard
																		.getQuanzi1());
											}
											totalDao.update(wgProcard);
										}

									} else {
										// throw new RuntimeException(
										// "对不起"+nowProcard_ww.getMarkId()+"零件下没有找到件号为:"
										// + wgMarkId + "的外购件");
									}
								}

							}
							detailSet.add(newProcessdetail);
							if (newProcessdetail.getWwType() != null
									&& newProcessdetail.getWwType().equals(
											"包工包料")) {
								// 关联下层半成品,自制件和组合（下层组合将整体被包公包料）
								updateProcardWwblCount(nowProcard_ww,
										newProcessdetail.getApplyCount(), 0);
							}
							if (newProcessdetail.getWwType().equals("工序外委")
									&& newProcessdetail.getRelatDown().equals(
											"是")) {
								// 外委下层
								msg += updateDownWwProcess(nowProcard_ww,
										newProcessdetail.getApplyCount(),
										newProcessdetail.getId(), 0);

							}
						}
					}
					wwApply.setProcessInforWWApplyDetails(detailSet);
					if (wwApply.getId() == null) {
						totalDao.save(wwApply);
					} else {
						totalDao.update(wwApply);
					}
				}

			}
			if (msg.length() > 0) {
				throw new RuntimeException(msg);
			} else {
				return "使用历史批次外委记录成功!";
			}
		}
		return "请选择生产零件";
	}

	@Override
	public List<ProcessInfor> getProcessInforByprocardId(Integer procardId,
			String status, String workShop) {
		if (procardId != null) {
			String hql = "select processNO,processName,submmitCount,agreeWwCount,id from ProcessInfor where (dataStatus is null or dataStatus!='删除') "
					+ "and procard.id = ?  ";
			if ("zz".equals(status)) {
				hql += " and (agreeWwCount =0 or agreeWwCount is null )";
			} else if ("ww".equals(status)) {
				hql += " and agreeWwCount >0";
			}
			// 拼接工序名
			String hql_process = "";
			String[] processNames = null;
			String process = "";
			if (workShop != null && !"".equals(workShop)) {
				processNames = workShop.split(",");
				if (processNames != null && processNames.length > 0) {
					for (int i = 0; i < processNames.length; i++) {
						process += "," + "'" + processNames[i] + "'";
					}
					if (process.length() > 1) {
						process = process.substring(1);
					}
					hql_process = "  and processName in(" + process + ")";
				}
			}
			hql += hql_process;
			return totalDao.query(hql + " order by processNO", procardId);
		}
		return null;
	}

	public Float getJlZaiZhiCount(Integer id) {
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		Float count = (Float) totalDao.getObjectByCondition(
				"select wlZaiCount from ProcardMaterial where markId=?",
				procard.getMarkId());
		if (count == null) {
			return 0f;
		} else {
			return count;
		}
	}

	public Float geJltYclZaiZhiCount(Integer id) {
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		Float count = (Float) totalDao.getObjectByCondition(
				"select wlYzaiCount from ProcardMaterial where markId=?",
				procard.getMarkId());
		if (count == null) {
			return 0f;
		} else {
			return count;
		}
	}

	@Override
	public List getUsersByDeptId(Integer id, String markId, String selfCard) {
		// TODO Auto-generated method stub
		if (id != null && id != 0) {
			deptIds = new ArrayList<Integer>();
			getUnderDeptIdById(id);
			deptIds.add(id);
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < deptIds.size(); i++) {
				if (i == (deptIds.size() - 1)) {
					sb.append(deptIds.get(i) + ")");
				} else {
					sb.append(deptIds.get(i) + ",");
				}
			}
			List<String> deptnames = totalDao
					.query("select dept from DeptNumber where id in("
							+ sb.toString());
			StringBuffer sb2 = new StringBuffer();
			for (int i = 0; i < deptnames.size(); i++) {
				if (i == (deptnames.size() - 1)) {
					sb2.append("'" + deptnames.get(i) + "')");
				} else {
					sb2.append("'" + deptnames.get(i) + "',");
				}
			}
			List list = totalDao
					.query("from Users where onWork not in ('离职','离职中','内退','退休','病休') and dept in ("
							+ sb2.toString() + " order by code ");
			return list;
		} else if (id == 0) {// 获取该批次的生产员工
			List list = totalDao
					.query(
							"from Users where id in (select userId from ProcessinforPeople where procard.markId=? and procard.selfCard=?)",
							markId, selfCard);
			return list;
		} else {
			return null;
		}
	}

	/**
	 * 通过部门id递归获取该部门下所有的下级部门id
	 * 
	 * @param deptId
	 */
	public void getUnderDeptIdById(Integer deptId) {
		List list = totalDao.query("select id from DeptNumber where fatherId="
				+ deptId);
		if (list.size() != 0) {
			List<Integer> ids = list;
			deptIds.addAll(ids);
			for (Integer id : ids) {
				deptId = id;
				getUnderDeptIdById(deptId);
			}
		}

	}

	@Override
	public Object[] findProcardMaterialHeadCondition(int pageNo, int pageSize) {
		// TODO Auto-generated method stub
		String hql = "from ProcardMaterialHead where hastrue = '否'";
		List<ProcardMaterialHead> list = totalDao.findAllByPage(hql, pageNo,
				pageSize);
		List<Map<String, Object>> listAll = new ArrayList<Map<String, Object>>();
		for (ProcardMaterialHead p : list) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("pMH", p);
			List<ProcardMaterial> m = totalDao
					.query(
							"from ProcardMaterial where headId = ? and lingliaoStatus = '未领'",
							p.getId());
			map.put("pM", m);
			listAll.add(map);
		}
		int count = totalDao.getCount(hql);
		Object[] o = { listAll, count };
		return o;
	}

	@Override
	public List<Price> findPriceBywwplan(Integer id) {
		// TODO Auto-generated method stub
		WaigouWaiweiPlan wwplan = findWaigouWaiweiPlanByid1(id);
		if (wwplan != null) {
			String time = Util.getDateTime("yyyy-MM-dd");
			List<Price> priceList = totalDao
					.query(
							"from Price where produceType='外委' and wwType='工序外委' and partNumber=? and gysId is not null and pricePeriodStart <= '"
									+ time
									+ "' and (pricePeriodEnd >= '"
									+ time
									+ "' or pricePeriodEnd is null or pricePeriodEnd = '') and (gongxunum ='待填充' or gongxunum is null or gongxunum='' or gongxunum=?)",
							wwplan.getMarkId(), wwplan.getProcessNo());
			// List<Price> priceList = totalDao
			// .query(
			// "from Price where produceType='外委' and wwType=? and partNumber=? and (gongxunum ='待填充' or gongxunum=?)",
			// detail.getWwType(), detail.getMarkId(), detail
			// .getProcessNOs());
			if (priceList != null && priceList.size() > 0) {
				for (Price price : priceList) {
					if (price != null) {
						String gysName;
						try {
							gysName = (String) totalDao.getObjectByCondition(
									"select cmp from ZhUser where id=?", price
											.getGysId());
							price.setGys(gysName);
							if (wwplan.getPriceId() != null
									&& wwplan.getPriceId()
											.equals(price.getId())) {
								price.setFlag("had");
							} else {
								price.setFlag("nothad");
							}
						} catch (Exception e) {

							e.printStackTrace();
						}

					}
				}
			}
			return priceList;
		}
		return null;
	}

	@Override
	public Map<Integer, String> updatePrice2(Integer id, Integer id2) {
		// TODO Auto-generated method stub
		Map<Integer, String> map = new HashMap<Integer, String>();
		Price price = (Price) totalDao.getObjectById(Price.class, id);
		map.put(2, id2 + "");
		if (price == null) {
			map.put(1, "没有找到价格!");
			return map;
		}
		WaigouWaiweiPlan wwplan = findWaigouWaiweiPlanByid1(id2);
		if (wwplan == null) {
			map.put(1, "没有找到对应的外委申请!");
			return map;
		}
		if (!wwplan.getMarkId().equalsIgnoreCase(price.getPartNumber())) {
			map.put(1, "对不起您选择的这道工序有误!");
			return map;
		}
		map.put(1, "true");
		// 覆盖价格信息
		price.setGongxunum(wwplan.getProcessNo());
		price.setProcessNames(wwplan.getProcessName());
		totalDao.update(price);
		// 外委申请与合同绑定
		wwplan.setPriceId(price.getId());
		wwplan.setGysId(price.getGysId());
		ZhUser zhUser = (ZhUser) totalDao.getObjectById(ZhUser.class, price
				.getGysId());
		wwplan.setGysName(zhUser.getName());
		wwplan.setUserCode(zhUser.getUsercode());
		wwplan.setUserId(zhUser.getUserid());
		totalDao.update(wwplan);
		// 比对供应商设变数据
		WaigouPlan historywgp = (WaigouPlan) totalDao
				.getObjectByCondition(
						" from WaigouPlan where markId=? and processNOs=? and gysId=? order by banci desc",
						wwplan.getMarkId(), wwplan.getProcessNo(), price
								.getGysId());
		if (historywgp == null) {
			wwplan.setHadChange("第一次");
		} else {
			Procard historyp = (Procard) totalDao.getObjectByCondition(
					"from Procard where id in(select procardId from"
							+ " ProcardWGCenter where wgOrderId =?)",
					historywgp.getId());
			Procard procard = (Procard) totalDao.getObjectById(Procard.class,
					wwplan.getProcardId());
			if (historyp == null) {
				wwplan.setHadChange("是");
			} else {
				if (Util.isEquals(historyp.getBanci(), procard.getBanci())) {
					wwplan.setHadChange("否");
				} else {
					wwplan.setHadChange("是");
				}
				// int changeCount =compareProcardww(procard,historyp,detail,0);
				// if(changeCount>0){
				// detail.setHadChange("是");
				// }
			}
		}
		// 同步相同外委工序
		List<WaigouWaiweiPlan> sameList = totalDao
				.query(
						"from WaigouWaiweiPlan where markId=? and processNo=? and priceId is null and status in('待入库','待激活')",
						wwplan.getMarkId(), wwplan.getProcessNo());
		if (sameList != null && sameList.size() > 0) {
			for (WaigouWaiweiPlan same : sameList) {
				same.setPriceId(price.getId());
				same.setGysId(price.getGysId());
				same.setGysName(zhUser.getName());
				same.setUserCode(zhUser.getUsercode());
				same.setUserId(zhUser.getUserid());
				if (historywgp == null) {
					wwplan.setHadChange("第一次");
				} else {
					Procard historyp = (Procard) totalDao.getObjectByCondition(
							"from Procard where id in(select procardId from"
									+ " ProcardWGCenter where wgOrderId =?)",
							historywgp.getId());
					Procard procard = (Procard) totalDao.getObjectById(
							Procard.class, wwplan.getProcardId());
					if (historyp == null) {
						same.setHadChange("是");
					} else {
						if (Util.isEquals(historyp.getBanci(), procard
								.getBanci())) {
							same.setHadChange("否");
						} else {
							same.setHadChange("是");
						}
						// int changeCount
						// =compareProcardww(procard,historyp,detail,0);
						// if(changeCount>0){
						// detail.setHadChange("是");
						// }
					}
				}
				totalDao.update(same);
			}
		}
		return map;
	}

	@Override
	public String jihuowwPlanList(int[] selected) {
		// TODO Auto-generated method stub
		Users login = Util.getLoginUser();
		if (login == null) {
			return "请先登录!";
		}
		String msg = "";
		String msg1 = "";
		List<WaigouOrder> waigouorderList = new ArrayList<WaigouOrder>();
		List<Integer> gysIdList = new ArrayList<Integer>();
		List<String> orderNumberList = new ArrayList<String>();
		for (int wwplanId : selected) {
			WaigouWaiweiPlan wwPlan = (WaigouWaiweiPlan) totalDao
					.getObjectById(WaigouWaiweiPlan.class, wwplanId);
			if (wwPlan == null) {
				msg1 = "数据有误,请重新选择!";
			} else {
				if (wwPlan.getStatus().equals("待入库")) {
					msg += "对不起,件号:" + wwPlan.getMarkId() + ",工序号:"
							+ wwPlan.getProcessNo() + "的对应的在制品未全部入库!";
				}
				if (wwPlan.getGysId() == null) {
					msg += "对不起,件号:" + wwPlan.getMarkId() + ",工序号:"
							+ wwPlan.getProcessNo() + "没有对应的供应商合同!";
				}
				WaigouOrder waigouORder = null;
				// 订单明细
				Set<WaigouPlan> wwpSet = null;
				ZhUser gys = null;
				Users gysUser = null;
				if (gysIdList.contains(wwPlan.getGysId())) {//
					for (WaigouOrder order : waigouorderList) {
						if (order.getGysId().equals(wwPlan.getGysId())) {
							waigouORder = order;
							wwpSet = waigouORder.getWwpSet();
							gys = waigouORder.getZhUser();
							gysUser = waigouORder.getUser();
						}
					}
				}
				if (waigouORder == null) {
					waigouORder = new WaigouOrder();
					gys = (ZhUser) totalDao.getObjectById(ZhUser.class, wwPlan
							.getGysId());

					if (gys != null) {
						gysUser = (Users) totalDao.getObjectById(Users.class,
								gys.getUserid());
					}
					waigouORder = new WaigouOrder();
					if (gys != null) {
						waigouORder.setZhUser(gys);
						waigouORder.setUser(gysUser);
						waigouORder.setWwSource("BOM外委");
						waigouORder.setRootMarkId(wwPlan.getRootMarkId());
						waigouORder.setYwMarkId(wwPlan.getYwMarkId());
						waigouORder.setUserId(gys.getUserid());
						waigouORder.setUserCode(gysUser.getCode());
						waigouORder.setGysId(gys.getId());//
						waigouORder.setGysName(gys.getCmp());// 供应商名称
						waigouORder.setLxPeople(gys.getCperson());// 联系人
						waigouORder.setGysPhone(gys.getCtel());// 电话
						waigouORder.setFax(gys.getCfax());// 传真
						waigouORder.setType("外委");
						waigouORder.setPayType(gys.getFkfs());
						waigouORder.setPiaojuType(gys.getZzsl());
						// gysWWApply.settype;//票据类型
						// private String condition;//付款条件
						String wwNumber = "";
						String before = null;
						Integer bIndex = 12;
						before = "wwzc" + Util.getDateTime("yyyyMMdd");
						Integer maxNo = 0;
						String maxNumber = (String) totalDao
								.getObjectByCondition("select max(planNumber) from WaigouOrder where planNumber like '"
										+ before + "%'");
						if (maxNumber != null) {
							String num = maxNumber.substring(bIndex, maxNumber
									.length());
							try {
								Integer maxNum = Integer.parseInt(num);
								if (maxNum > maxNo) {
									maxNo = maxNum;
								}
							} catch (Exception e) {
								// TODO: handle exception
							}
						}
						maxNo++;
						wwNumber = before + String.format("%03d", maxNo);
						waigouORder.setPlanNumber(wwNumber);// 外委订单号码
						waigouORder.setAddUserCode(login.getCode());// 采购员工号
						waigouORder.setAddUserName(login.getName());// 采购员姓名
						waigouORder.setAddUserPhone(login.getPassword()
								.getPhoneNumber());// 采购员电话
						waigouORder.setAddTime(Util.getDateTime());// 添加时间
						waigouORder.setRootId(null);// 生产总成id
						waigouORder.setGhAddress(gys.getCompanydz());// 送货地址
						waigouORder
								.setCaigouMonth(Util.getDateTime("yyyy-MM月"));// 采购月份
						// gysWWApply.setshAddress;//送货地址
						waigouORder.setProcessApplyId(null);// 工序外委表Id
						waigouORder.setStatus("待核对");// 状态
						waigouORder.setApplystatus("未申请");//
					}
					waigouorderList.add(waigouORder);
				}
				WaigouPlan wgPlan = null;
				if (wwpSet == null || wwpSet.size() == 0) {
					wwpSet = new HashSet<WaigouPlan>();
				} else {
					for (WaigouPlan had : wwpSet) {
						if (had.getMarkId().equals(wwPlan.getMarkId())
								&& had.getProcessNOs().equals(
										wwPlan.getProcessNo())) {
							if (had.getBanci() == null) {
								had.setBanci(0);
							}
							if (wwPlan.getBanci() == null) {
								wwPlan.setBanci(0);
							}
							if (had.getBanci().equals(wwPlan.getBanci())) {
								wgPlan = had;
							}
						}
					}
				}
				// 供应商外委订单明细
				if (wgPlan == null) {
					wgPlan = new WaigouPlan();
					wgPlan.setMarkId(wwPlan.getMarkId());// 件号
					wgPlan.setBanben(wwPlan.getBanben()); // 版本号
					wgPlan.setProName(wwPlan.getProName());// 零件名称
					wgPlan.setBanci(wwPlan.getBanci());
					wgPlan.setProcessNOs(wwPlan.getProcessNo());// 工序号
					wgPlan.setProcessNames(wwPlan.getProcessName());// 工序名称
					wgPlan.setWwType("工序外委");// 外委类型（工序外委,包工包料）
					wgPlan.setType("外委");// 外委类型（工序外委,包工包料）
					// wgPlan.setUnit(wwPlan.getUnit());// 单位
					wgPlan.setPriceId(wwPlan.getPriceId());// 合同Id
					wgPlan.setUserId(gys.getUserid());// 供应商信息
					wgPlan.setUserCode(gysUser.getCode());
					wgPlan.setGysId(gys.getId());//
					wgPlan.setUnit(wwPlan.getUnit());
					wgPlan.setAddTime(Util.getDateTime());
					Price price = (Price) totalDao.getObjectById(Price.class,
							wwPlan.getPriceId());
					Procard procard = (Procard) totalDao.get(Procard.class,
							wwPlan.getProcardId());
					Float hsprice = 0f;
					Float bhsPrice = 0f;
					Float mj = 0f;
					if (procard != null) {
						wgPlan.setTuhao(procard.getTuhao());// 图号
						if (price != null
								&& "YES".equals(price.getIscriterion())) {
							if (procard.getThisLength() != null
									&& procard.getThisLength() > 0
									&& procard.getThisWidth() != null
									&& procard.getThisWidth() > 0) {
								mj = (procard.getThisLength() * procard
										.getThisWidth()) / 1000000;
							}
						}
					}

					wgPlan.setGysName(gys.getCmp());// 供应商名称
					wgPlan.setNumber(wwPlan.getNumber());// 数量
					wgPlan.setSyNumber(wwPlan.getNumber());// 采购数量*供应商采购比例
					wgPlan.setStatus("待核对");
					// wgPlan.setWwwwPlanId(wwPlan.getId());
					if (price.getHsPrice() != null) {
						hsprice = price.getHsPrice().floatValue();
						if (mj > 0) {
							hsprice = mj * price.getHsPrice().floatValue();
						}
						wgPlan.setHsPrice(hsprice);// 含税单价
						wgPlan.setMoney(hsprice * wwPlan.getNumber());// 总金额
						if (price.getBhsPrice() != null) {
							bhsPrice = price.getBhsPrice().floatValue();
							if (mj > 0) {
								bhsPrice = mj
										* price.getBhsPrice().floatValue();
							}
							wgPlan.setPrice(bhsPrice);// 不含税单价
						} else {
							wgPlan.setPrice(0f);
						}
						wgPlan.setTaxprice(price.getTaxprice()); // 税率
					} else {
						wgPlan.setHsPrice(0f);// 含税单价
						wgPlan.setPrice(0f);
						wgPlan.setMoney(0f);// 总金额
						wgPlan.setPrice(0f);// 不含税单价
						wgPlan.setTaxprice(0d); // 税率
					}
					// gyswwwwPlan.setpayDate;//交付日期
					wgPlan.setRemark(wwPlan.getYwMarkId());// 备注
					wgPlan.setWaigouOrder(waigouORder);
					wgPlan.setWwSource("BOM外委");
					totalDao.save(wgPlan);
					// 中间表
					ProcardWGCenter zjb = new ProcardWGCenter();
					zjb.setWgOrderId(wgPlan.getId());
					zjb.setProcardId(wwPlan.getProcardId());
					zjb.setProcardCount(wwPlan.getNumber());
					zjb.setConnectionType("mTom");
					zjb.setWwxlId(wwPlan.getId());
					totalDao.save(zjb);
					wwpSet.add(wgPlan);
					waigouORder.setWwpSet(wwpSet);
					waigouORder.setType("外委");
					waigouORder.setWwType("工序外委");
					if (waigouORder.getId() == null) {
						totalDao.save(waigouORder);
						gysIdList.add(waigouORder.getGysId());
					} else {
						totalDao.update(waigouORder);
						if (!gysIdList.contains(waigouORder.getGysId())) {
							gysIdList.add(waigouORder.getGysId());
						}
					}
					WaigouPlan historywgp = (WaigouPlan) totalDao
							.getObjectByCondition(
									" from WaigouPlan where markId=? and processNOs=? and gysId=? order by banci desc",
									wgPlan.getMarkId(), wgPlan.getProcessNOs(),
									price.getGysId());
					if (historywgp == null) {
						wgPlan.setHadChange("第一次");
					} else {
						if (Util.isEquals(historywgp.getBanci(), wgPlan
								.getBanci())) {
							wgPlan.setHadChange("否");
						} else {
							wgPlan.setHadChange("是");
						}
					}

				} else {
					wgPlan.setNumber(wgPlan.getNumber() + wwPlan.getNumber());
					wgPlan.setSyNumber(wgPlan.getSyNumber()
							+ wwPlan.getNumber());
					wgPlan.setMoney(wgPlan.getNumber() * wgPlan.getHsPrice());
					// 中间表
					ProcardWGCenter zjb = new ProcardWGCenter();
					zjb.setWgOrderId(wgPlan.getId());
					zjb.setProcardId(wwPlan.getProcardId());
					zjb.setProcardCount(wwPlan.getNumber());
					zjb.setConnectionType("mTom");
					zjb.setWwxlId(wwPlan.getId());
					totalDao.save(zjb);
					totalDao.update(wgPlan);
				}
				wwPlan.setStatus("待出库");
				totalDao.update(wwPlan);
				// 申请审批流程是否跳过
				passWWapply(waigouORder);
			}
		}
		if (msg.length() == 0 && msg1.length() == 0) {
			return "true";
		} else {
			throw new RuntimeException(msg + msg1);
		}
	}

	@Override
	public List<Procard> findProcardByfatherId(Integer fatherId, String status) {
		if (fatherId != null) {
			String hql = " from Procard where fatherId = ?";
			if ("wg".equals(status)) {
				hql += " status = '外购' ";
			}
			List<Procard> procardList = totalDao.query(hql, fatherId);
			for (Procard procard : procardList) {
				Set<String> cangquset = new HashSet<String>();
				String lingliaoDetail = procard.getLingliaoDetail();
				if (lingliaoDetail != null && lingliaoDetail.length() > 0) {
					String[] lotandnums = lingliaoDetail.split(",");
					if (lotandnums != null && lotandnums.length > 0) {
						for (int i = 0; i < lotandnums.length; i++) {
							String[] aa = lotandnums[i].split(":");
							if (aa != null && aa.length == 2
									&& !aa[0].equals("null")) {
								String hql_goods = "select goodHouseName from Goods where goodsMarkId = ? and goodsLotId = ?  and goodsClass not in ('委外库','外协库','待检库') GROUP BY goodHouseName";
								String houseName = (String) totalDao
										.getObjectByCondition(hql_goods,
												procard.getMarkId(), aa[0]);
								if (houseName != null && houseName.length() > 0) {
									cangquset.add(houseName);
								}
							}

						}
					}
				}
				String cangqu = "";
				for (String str : cangquset) {
					cangqu += ";" + str;
				}
				if (cangqu != null && cangqu.length() > 0) {
					cangqu = cangqu.substring(1);
				} else if (procard.getTjNumber() != null
						&& procard.getTjNumber() > 0) {
					String hql_cangqu = " select goodHouseName from Goods where goodsMarkId = ? and goodHouseName is not null and goodHouseName <> '' and goodsClass not in ('委外库','外协库')  GROUP BY goodHouseName  ";
					List<String> strList = totalDao.query(hql_cangqu, procard
							.getMarkId());
					for (String string : strList) {
						cangqu += ";" + string;
					}
					if (cangqu != null && cangqu.length() > 0) {
						cangqu = cangqu.substring(1);
					}
				}
				procard.setCangqu(cangqu);

			}
			return procardList;
		}
		return null;
	}

	@Override
	public List<Procard> findprocardBybarcode(String barcode) {
		Users user = Util.getLoginUser();
		if (user == null) {
			return null;
		}
		if (barcode != null && barcode.length() > 0) {
			String hql = " from Procard where id in(select procard.id from ProcessInfor where  (dataStatus is null or dataStatus!='删除') and id ="
					+ " (select fk_processInforId from  ProcessInforReceiveLog where barcode = ? ) )"
					+ " and id in (select procard.id from  ProcessinforPeople where userId = ? ) "
					+ " and id  in (select pi.procard.id from ProcessInfor pi where  (pi.dataStatus is null or pi.dataStatus!='删除') and  status not in ('完成') "
					+ "and pi.processName in (select p.processName from ProcessGzstore p join p.users u where u.id=?)) ";
			return totalDao.query(hql, barcode, user.getId(), user.getId());
		}
		return null;
	}

	@Override
	public List<String> findUserByGroupCard(String cardId, Integer processId) {
		if (cardId != null && cardId.length() > 0 && processId > 0) {
			ProcessInfor process = (ProcessInfor) totalDao.get(
					ProcessInfor.class, processId);
			String hql = " select U.cardId from Users U join  U.processGzstore p where p.processName =? and"
					+ " U.userscard.id = (select id from UsersCard where cardId = ?)   ";
			// 判断是否有考勤
			String hql2 = " and U.id in( SELECT inId FROM AccessRecords where enterTime LIKE '%"
					+ Util.getDateTime("yyyy-MM-dd") + "%')";
			return totalDao.query(hql, process.getProcessName(), cardId);
		}
		return null;
	}

	@Override
	public void exportExcel(Integer rootId) {
		// TODO Auto-generated method stub

	}

	@Override
	public List<ProcessInforWWProcard> findProcessInforWWProcardById(Integer id) {
		String hql = "from ProcessInforWWProcard where (status is null or status not in ('删除','取消')) and applyDtailId ="
				+ id;
		List<ProcessInforWWProcard> processInforWWProcardlist = totalDao
				.find(hql);
		return processInforWWProcardlist;
	}

	public List<String> findProardForQj(String markId) {
		return null;
	}

	@Override
	public boolean qxUserscardBd(String cardId) {
		if (cardId != null && cardId.length() > 0) {
			Users user = (Users) totalDao.getObjectByCondition(
					" from Users where cardId = ?", cardId);
			if (user != null) {
				user.setUserscard(null);
				return totalDao.update(user);
			}
		}
		return false;
	}

	@Override
	public String procardUpdateFirst(Integer id) {
		// TODO Auto-generated method stub
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			if (procard.getStatus().equals("待入库")
					|| procard.getStatus().equals("入库")) {
				return "当前状态为:" + procard.getStatus() + ",不允许修改!";
			} else if (procard.getProcardStyle().equals("总成")
					&& procard.getStatus().equals("完成")) {
				return "总成已完成不允许更新!";
			}
			ProcardTemplate pt = (ProcardTemplate) totalDao.getObjectById(
					ProcardTemplate.class, procard.getProcardTemplateId());
			if (pt == null) {
				return "警告:没有找到对应的模板,继续更新将会删除此零件!";
			} else if (pt.getBanbenStatus() != null
					&& pt.getBanbenStatus().equals("历史")) {
				return "警告:对应的模板没有使用版本,继续更新将会删除此零件!";
				// }else if(!pt.getMarkId().equals(procard.getMarkId())){//
				// return "警告:对应模板的件号发生改变，继续更新将会替换掉此零件及其下层零件!";
			} else {
				String bb = procard.getBanBenNumber();
				String bbpt = pt.getBanBenNumber();
				if (bb == null) {
					bb = "";
				}
				if (bbpt == null) {
					bbpt = "";
				}
				if (!bb.equals(bbpt)) {
					if (procard.getStatus().equals("领工序")
							|| procard.getStatus().equals("完成")) {
						return "警告:对应的模板版本发生升级,继续更新将会删除此零件!";
					}
				}
				String totalWlStatus = (String) totalDao.getObjectByCondition(
						"select wlstatus from Procard where id=?", procard
								.getRootId());
				if (procard.getProcard() != null) {
					updateProcard(pt, procard, procard.getProcard()
							.getFilnalCount(), totalWlStatus);
				} else {
					updateProcard(pt, procard, null, totalWlStatus);
				}
				return "true";
			}

		}
		return "没有找到目标!";
	}

	@Override
	public String procardUpdateSecond(Integer id) {
		// TODO Auto-generated method stub
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			if (procard.getStatus().equals("待入库")
					|| procard.getStatus().equals("入库")) {
				return "当前状态为:" + procard.getStatus() + ",不允许修改!";
			} else if (procard.getProcardStyle().equals("总成")
					&& procard.getStatus().equals("完成")) {
				return "总成已完成不允许更新!";
			}
			ProcardTemplate pt = (ProcardTemplate) totalDao.getObjectById(
					ProcardTemplate.class, procard.getProcardTemplateId());
			if (pt == null) {
				procard.setProcard(null);
				procard.setSbStatus("删除");
				if (procard.getFatherId() != null) {
					procard.setOldFatherId(procard.getFatherId());
					procard.setOldRootId(procard.getRootId());
				}
				procard.setFatherId(null);
				procard.setRootId(null);
				// 遍历下层零件设置设变属性为删除
				Set<Procard> sonSet = procard.getProcardSet();
				if (sonSet != null && sonSet.size() > 0) {
					for (Procard son : sonSet) {
						deleteDownProcard(son);
					}
				}
				return totalDao.update(procard) + "";
			} else if (pt.getBanbenStatus() != null
					&& pt.getBanbenStatus().equals("历史")) {
				procard.setProcard(null);
				procard.setSbStatus("删除");
				if (procard.getFatherId() != null) {
					procard.setOldFatherId(procard.getFatherId());
					procard.setOldRootId(procard.getRootId());
				}
				procard.setFatherId(null);
				procard.setRootId(null);
				// 遍历下层零件设置设变属性为删除
				Set<Procard> sonSet = procard.getProcardSet();
				if (sonSet != null && sonSet.size() > 0) {
					for (Procard son : sonSet) {
						deleteDownProcard(son);
					}
				}
				return totalDao.update(procard) + "";
			} else {
				String bb = procard.getBanBenNumber();
				String bbpt = pt.getBanBenNumber();
				if (bb == null) {
					bb = "";
				}
				if (bbpt == null) {
					bbpt = "";
				}
				if (!bb.equals(bbpt)) {
					if (procard.getStatus().equals("领工序")
							|| procard.getStatus().equals("完成")) {
						if (procard.getProcard().equals("总成")) {
							Procard newprocard = new Procard();
							copyProcard(newprocard, procard, null, null, null,
									null);
							procard.setProcard(null);
							procard.setSbStatus("删除");
							if (procard.getFatherId() != null) {
								procard.setOldFatherId(procard.getFatherId());
								procard.setOldRootId(procard.getRootId());
							}
							procard.setFatherId(null);
							procard.setRootId(null);
							// 遍历下层零件设置设变属性为删除
							Set<Procard> sonSet = procard.getProcardSet();
							if (sonSet != null && sonSet.size() > 0) {
								for (Procard son : sonSet) {
									deleteDownProcard(son);
								}
							}
							totalDao.update(procard);
							Set<ProcardTemplate> sonptSet = pt.getProcardTSet();
							if (sonptSet != null && sonptSet.size() > 0) {
								for (ProcardTemplate sonpt : sonptSet) {
									addProcardInFather(newprocard, null, sonpt,
											procard.getWlstatus(), 0);
								}
							}
						} else {
							Procard father = procard.getProcard();
							procard.setProcard(null);
							procard.setSbStatus("删除");
							if (procard.getFatherId() != null) {
								procard.setOldFatherId(procard.getFatherId());
								procard.setOldRootId(procard.getRootId());
							}
							procard.setFatherId(null);
							procard.setRootId(null);
							// 遍历下层零件设置设变属性为删除
							Set<Procard> sonSet = procard.getProcardSet();
							if (sonSet != null && sonSet.size() > 0) {
								for (Procard son : sonSet) {
									deleteDownProcard(son);
								}
							}
							totalDao.update(procard);
							String totalWlStatus = (String) totalDao
									.getObjectByCondition(
											"select wlstatus from Procard where id=?",
											procard.getRootId());
							addProcardInFather(father, null, pt, totalWlStatus,
									0);
						}
					}
				}
				// }else
				// if(!pt.getMarkId().equals(procard.getMarkId())){//件号发生改变
				// Procard father = procard.getProcard();
				// procard.setProcard(null);
				// procard.setSbStatus("删除");
				// totalDao.update(procard);
				// //遍历下层零件设置设变属性为删除
				// Set<Procard> sonSet = procard.getProcardSet();
				// if(sonSet!=null&&sonSet.size()>0){
				// for(Procard son:sonSet){
				// deleteDownProcard(son);
				// }
				// }
				// String totalWlStatus = (String)
				// totalDao.getObjectByCondition("select wlstatus from Procard where id=?",
				// procard.getRootId());
				// //在父零件下添加
				// addProcardInFather(father,procard,pt,totalWlStatus,0);
				// }else{
				// String totalWlStatus = (String)
				// totalDao.getObjectByCondition("select wlstatus from Procard where id=?",
				// procard.getRootId());
				// updateProcard(pt,
				// procard,procard.getProcard().getFilnalCount(),totalWlStatus);
			}

		}
		return "没有找到目标!";
	}

	/**
	 * 根据模板替换零件
	 * 
	 * @param father
	 *            上层零件
	 * @param procard
	 *            发生设变被替换的零件(预留,原本是用来判断被替换的零件是否可以继续用来使用)
	 * @param procardTemplate
	 *            替换零件
	 * @param totalWlStatus
	 *            总成物料状态
	 * @param index
	 *            标记 0和1
	 * @return
	 */
	private String addProcardInFather(Procard father, Procard pro,
			ProcardTemplate procardTemplate, String totalWlStatus, int index) {
		// TODO Auto-generated method stub

		String message = "";
		// 生成流水卡片
		message += procardTemplate.getMarkId();
		Procard procard = new Procard();
		int youxiao = 0;// 之前生成的零件是否有效0无效,1有效
		// if(index>0
		// &&pro!=null&&pro.getMarkId().equals(procardTemplate.getMarkId())&&pro.getBanci().equals(procardTemplate.getBanci())){
		// if(pro.getProcard().getStatus().equals("初始")||pro.getProcard().getStatus().equals("已发卡")
		// ||pro.getProcard().getStatus().equals("已发料")){//上层零件未生产过
		// youxiao=1;
		// }else if(father.getStatus().equals("领工序")){
		// //查询是否有工序进行生产
		// Float count = (Float)
		// totalDao.getObjectByCondition("select count(*) from ProcessInfor where procard.id=? and applyCount>0",
		// pro.getProcard().getId());
		// if(count==null||count==0){
		// youxiao=1;
		// }
		// }
		// }
		if (youxiao == 0) {
			/**
			 * 将流水卡片模板转换为流水卡片
			 */
			BeanUtils.copyProperties(procardTemplate, procard, new String[] {
					"rootId", "fatherId", "id", "sbStatus", "sbId" });
			if (procard.getBanci() == null) {
				procard.setBanci(0);
			}
			Float needNumber = null;
			if ("外购".equals(procard.getProcardStyle())) {
				needNumber = father.getFilnalCount() * procard.getQuanzi2()
						/ procard.getQuanzi1();
			} else {
				needNumber = father.getFilnalCount() * procard.getCorrCount();
				needNumber = (float) Math.ceil(needNumber);
			}

			// Double d = Math.ceil(needNumber);
			// procard.setNeedCount(Float.parseFloat(d.toString()));//
			// 计算外购/自制的实际需求数量(自动进1取整)
			// procard.setFilnalCount(Float.parseFloat(d.toString()));
			// Double d = Math.ceil(needNumber);
			// procard.setNeedCount(needNumber);// 计算外购/自制的实际需求数量(自动进1取整)

			procard.setPlanOrderId(father.getPlanOrderId());// 内部计划单id
			procard.setPlanOrderNum(father.getPlanOrderNum());// 内部计划单号
			procard.setOrderNumber(father.getOrderNumber());// 订单编号
			procard.setOrderId(father.getOrderId());// 订单id
			procard.setProcardTemplateId(procardTemplate.getId());// bom模板id
			procard.setStatus("初始");
			procard.setProcardTime(Util.getDateTime());// 制卡时间
			procard.setSelfCard(updateMaxSelfCard(procard.getMarkId()));// 批次号
			procard.setZhikaren(Util.getLoginUser().getName());// 制卡人(当前登录用户)
			procard.setBarcode(UUID.randomUUID().toString());// 条码
			procard.setFilnalCount(needNumber);// 生产数量
			procard.setYwMarkId(father.getYwMarkId());

			// 设置调用关系
			procard.setFatherId(father.getId());// 父类id
			procard.setRootId(father.getRootId());// 更新rootId
			procard.setProcard(father);// 设置父类
			procard.setRootSelfCard(father.getRootSelfCard());
			procard.setRootMarkId(father.getRootMarkId());
			procard.setJioafuDate(Util.getDateTime());

			totalDao.save(procard);// 添加
			// 遍历该流水卡片对应工序并生成工序
			Set<ProcessTemplate> setProCess = procardTemplate
					.getProcessTemplate();
			for (ProcessTemplate processTem : setProCess) {
				ProcessInfor process = new ProcessInfor();
				BeanUtils.copyProperties(processTem, process, new String[] {
						"id", "procardTemplate" });
				// process.setProcessNO(processTem.getProcessNO());// 工序号
				// process.setProcessName(processTem.getProcessName());// 工序名称
				// process.setProcessStatus(processTem.getProcessStatus());//
				// 状态(并行/单独)
				// process.setParallelId(processTem.getParallelId());// 并行开始id

				// 人工节拍和设备节拍处理
				if (process.getProductStyle() != null
						&& process.getProductStyle().equals("外委")) {// 外委工序节拍设为1
					process.setOpcaozuojiepai(1f);
					process.setOpshebeijiepai(1f);
					process.setGzzhunbeijiepai(1f);
					process.setGzzhunbeicishu(1f);
					process.setAllJiepai(1f);
				} else {
					if (process.getOpcaozuojiepai() == null) {
						process.setOpcaozuojiepai(0F);
					}
					if (process.getOpshebeijiepai() == null) {
						process.setOpshebeijiepai(0F);
					}
				}
				process.setTotalCount(procard.getFilnalCount());// 可领取量
				process.setStatus("初始");
				process.setWlqrcount(0f);
				process.setProcard(procard);
				// -----------------辅料------------------
				if (processTem.getIsNeedFuliao() != null
						&& processTem.getIsNeedFuliao().equals("yes")) {
					process.setIsNeedFuliao("yes");
					Set<ProcessFuLiaoTemplate> fltmpSet = processTem
							.getProcessFuLiaoTemplate();
					if (fltmpSet.size() > 0) {
						Set<ProcessinforFuLiao> pinfoFlSet = new HashSet<ProcessinforFuLiao>();
						for (ProcessFuLiaoTemplate fltmp : fltmpSet) {
							ProcessinforFuLiao pinfoFl = new ProcessinforFuLiao();
							BeanUtils.copyProperties(fltmp, pinfoFl,
									new String[] { "id" });
							if (pinfoFl.getQuanzhi1() == null) {
								pinfoFl.setQuanzhi1(1f);
							}
							if (pinfoFl.getQuanzhi2() == null) {
								pinfoFl.setQuanzhi2(1f);
							}
							pinfoFl.setTotalCount(procard.getFilnalCount()
									* pinfoFl.getQuanzhi2()
									/ pinfoFl.getQuanzhi1());
							pinfoFl.setProcessInfor(process);
							pinfoFl.setOutCount(0f);
							pinfoFlSet.add(pinfoFl);
						}
						process.setProcessinforFuLiao(pinfoFlSet);
					}
				}
				try {
					totalDao.save(process);
				} catch (Exception e) {
					// TODO: handle exception
					System.out.println("hh");
				}
			}

			// 遍历查询子类流水卡片
			Set<ProcardTemplate> setProCard = procardTemplate.getProcardTSet();
			// Set<Procard> sonSet = pro.getProcardSet();
			if (setProCard != null && setProCard.size() > 0) {
				for (ProcardTemplate procardTem2 : setProCard) {
					if (procardTem2.getBzStatus() == null
							|| !procardTem2.getBzStatus().equals("已批准")) {
						throw new RuntimeException("零件:"
								+ procardTem2.getMarkId() + "的当前编制状态为:"
								+ procardTem2.getBzStatus() + "不能用于生成或更新生产件!");
					}
					Procard thisProcard = null;
					// if(sonSet!=null&&sonSet.size()>0){
					// for(Procard son:sonSet){
					// if(son.getProcardTemplateId().equals(procardTem2.getId())){
					// thisProcard = son;
					// }
					// }
					// }
					addProcardInFather(procard, thisProcard, procardTem2,
							totalWlStatus, 1);
				}
			}
		} else {
			copyProcard(procard, pro, procardTemplate.getQuanzi1(),
					procardTemplate.getQuanzi2(), procardTemplate
							.getCorrCount(), father);
		}
		return null;

	}

	/**
	 * 复制生产件
	 * 
	 * @param procard
	 *            新生成的零件
	 * @param pro
	 *            被替换的零件
	 * @param quanzi1
	 *            新的比例
	 * @param quanzi2
	 *            新的比例
	 * @param corrCount
	 *            新的比例
	 * @param father
	 *            上层零件
	 * @return
	 */
	private String copyProcard(Procard procard, Procard pro, Float quanzi1,
			Float quanzi2, Float corrCount, Procard father) {
		// TODO Auto-generated method stub
		BeanUtils.copyProperties(pro, procard, new String[] { "id", "procard",
				"procardSet", "processInforSet", "wgwwPlanSet",
				"procardPartsSet", "procardPro", "oneProcardBonus",
				"processPeopleSet" });
		procard.setSbStatus(null);
		procard.setQuanzi1(quanzi1);
		procard.setQuanzi2(quanzi2);
		procard.setCorrCount(corrCount);
		Float nowFilnalCount = pro.getFilnalCount();
		if (father != null) {
			procard.setFatherId(father.getId());
			procard.setBelongLayer(father.getBelongLayer() + 1);
			procard.setProcard(father);
			Set<Procard> procardSet = father.getProcardSet();
			if (procardSet == null) {
				procardSet = new HashSet<Procard>();
				procardSet.add(procard);
			}
			if (procard.getProcardStyle().equals("外购")) {
				nowFilnalCount = father.getFilnalCount() * procard.getQuanzi1()
						/ procard.getQuanzi2();
			} else {
				nowFilnalCount = father.getFilnalCount()
						* procard.getCorrCount();
				nowFilnalCount = (float) Math.ceil(nowFilnalCount);
			}
			totalDao.save(procard);
			totalDao.update(father);
		}
		// 复制工序
		Set<ProcessInfor> processSet = pro.getProcessInforSet();
		if (processSet != null && processSet.size() > 0) {
			Set<ProcessInfor> newProcessSet = new HashSet<ProcessInfor>();
			for (ProcessInfor process : processSet) {
				ProcessInfor newProcess = new ProcessInfor();
				BeanUtils.copyProperties(process, newProcess, new String[] {
						"id", "procard", "osWork", "procardPro",
						"productProcess", "processinforFuLiao", "pg" });
				if (nowFilnalCount > process.getTotalCount()) {
					newProcess.setTotalCount(nowFilnalCount);
				}
				newProcessSet.add(newProcess);
				newProcess.setProcard(procard);
				totalDao.save(newProcess);
				// 复制工序日志记录
				List<ProcessInforReceiveLog> logList = totalDao.query(
						"from ProcessInforReceiveLog where fk_processInforId",
						process.getId());
				if (logList != null && logList.size() > 0) {
					for (ProcessInforReceiveLog log : logList) {
						ProcessInforReceiveLog newLog = new ProcessInforReceiveLog();
						BeanUtils.copyProperties(log, newLog, new String[] {
								"id", "fk_processInforId" });
						newLog.setFk_processInforId(newProcess.getId());
						totalDao.save(newLog);
					}
				}
				// 复制辅料
				Set<ProcessinforFuLiao> processinforFuLiaoSet = process
						.getProcessinforFuLiao();
				if (processinforFuLiaoSet != null
						&& processinforFuLiaoSet.size() > 0) {
					Set<ProcessinforFuLiao> newflSet = new HashSet<ProcessinforFuLiao>();
					for (ProcessinforFuLiao fl : processinforFuLiaoSet) {
						ProcessinforFuLiao newfl = new ProcessinforFuLiao();
						BeanUtils.copyProperties(fl, newfl, new String[] {
								"id", "processInfor" });
						newfl.setProcessInfor(newProcess);
						newflSet.add(newfl);
						totalDao.save(newfl);
					}
					newProcess.setProcessinforFuLiao(newflSet);
				}
			}
			procard.setProcessInforSet(newProcessSet);
			totalDao.update(procard);
		}
		// 复制领取工序的成员
		Set<ProcessinforPeople> processPeopleSet = pro.getProcessPeopleSet();
		if (processPeopleSet != null && processPeopleSet.size() > 0) {
			Set<ProcessinforPeople> newppSet = new HashSet<ProcessinforPeople>();
			for (ProcessinforPeople pp : processPeopleSet) {
				ProcessinforPeople newpp = new ProcessinforPeople();
				BeanUtils.copyProperties(pp, newpp, new String[] { "id",
						"procard" });
				newpp.setProcard(procard);
				newppSet.add(newpp);
				// totalDao.save(newppSet);
			}
			procard.setProcessPeopleSet(newppSet);
			totalDao.update(procard);
		}
		// 占用外购外委数据

		// 递归下层
		return null;
	}

	/**
	 * 设置下层sbStatus为删除
	 * 
	 * @param procard
	 * @return
	 */
	private String deleteDownProcard(Procard procard) {
		// TODO Auto-generated method stub
		procard.setSbStatus("删除");
		if (procard.getFatherId() != null) {
			procard.setOldFatherId(procard.getFatherId());
			procard.setOldRootId(procard.getRootId());
		}
		procard.setFatherId(null);
		procard.setRootId(null);
		totalDao.update(procard);
		// 遍历下层零件设置设变属性为删除
		Set<Procard> sonSet = procard.getProcardSet();
		if (sonSet != null && sonSet.size() > 0) {
			for (Procard son : sonSet) {
				deleteDownProcard(son);
			}
		}
		return null;
	}

	/**
	 * 更新生产件具体处理方法
	 * 
	 * @param pt
	 *            模板
	 * @param pd
	 *            生产件
	 * @param finalCount
	 *            上层数量
	 * @param totalWlStatus
	 *            总成是否已经激活
	 * @return
	 */
	public boolean updateProcard(ProcardTemplate pt, Procard pd,
			Float finalCount, String totalWlStatus) {
		boolean b = true;
		int changeType = 0;// 0没有什么递归需要性改变,1权值变化,2版次变化,3权值版次都变化
		Set<ProcessTemplate> processSet1 = pt.getProcessTemplate();
		List<Integer> processNOs1 = new ArrayList<Integer>();
		if (processSet1.size() > 0) {
			for (ProcessTemplate process1 : processSet1) {
				processNOs1.add(process1.getProcessNO());// 获取修改后的所有的工序号
			}
		}
		Float nowFinalCount = null;
		if (finalCount != null) {
			if (pt.getProcardStyle().equals("外购")) {
				nowFinalCount = finalCount * pt.getQuanzi2() / pt.getQuanzi1();
			} else {
				nowFinalCount = finalCount * pt.getCorrCount();
				nowFinalCount = (float) Math.ceil(nowFinalCount);
			}
		} else {// 没有上层数量，此为总成
			nowFinalCount = pd.getFilnalCount();
		}

		if (!pd.getFilnalCount().equals(nowFinalCount)) {
			changeType = 1;
		}
		if (!pd.getBanci().equals(pt.getBanci())) {
			if (changeType == 1) {
				changeType = 3;
			} else {
				changeType = 2;
			}
		}
		if (pd.getStatus().equals("初始") || pd.getStatus().equals("已发卡")) {
			if (pt.getProcardStyle() != null
					&& pt.getProcardStyle().equals("外购")
					&& pd.getNeedProcess() != null
					&& pd.getNeedProcess().equals("yes")
					&& (pt.getNeedProcess() == null || pt.getNeedProcess()
							.equals("no"))) {// 外购件原需要工序，现不要工序
				if (totalWlStatus == null || !totalWlStatus.equals("待定")) {// 总成已经激活
					String sumOld = "select sum(hascount) from Procard where status ='已发卡' and markId=?";
					Float blCount = (Float) totalDao
							.getObjectByCondition(
									"select sum(wwblCount) from Procard where status ='已发卡' and markId=?",
									pt.getMarkId());
					if (blCount == null) {
						blCount = 0f;
					}
					Object sumobj = null;
					sumobj = totalDao.getObjectByCondition(sumOld, pt
							.getMarkId());
					Float sumoldCount = 0F;
					if (sumobj != null) {
						sumoldCount = Float.parseFloat(sumobj.toString());
					}
					Float sumAll = sumoldCount - blCount;
					// 查询库存数量
					Object obj = totalDao
							.getObjectByCondition(
									"select sum(goodsCurQuantity) from Goods where goodsMarkId=? and goodsUnit=?",
									pt.getMarkId(), pt.getUnit());
					Float sumCount = 0F;
					if (obj != null) {
						sumCount = Float.parseFloat(obj.toString());
					}
					if (sumCount == null) {
						sumCount = Float
								.parseFloat(totalDao
										.getObjectByCondition(
												"select sum(goodsZhishu) from Goods where goodsMarkId=?",
												pt.getMarkId()).toString());
					}

					// 判断数量是否足够
					pd.setJihuoStatua("激活");
					pd.setFilnalCount(nowFinalCount);
					pd.setKlNumber(pd.getFilnalCount());
					pd.setTjNumber(0F);
					pd.setMinNumber(0F);
					if (sumCount != null && sumCount > 0) {
						// 数量充足
						if (sumCount - sumoldCount >= 0) {
							if (sumCount - sumAll >= 0) {
								pd.setTjNumber(pd.getFilnalCount());
							} else {
								// 数量不足，
								pd.setTjNumber(sumAll - sumCount);
							}

						}
						Float minNumber = pd.getTjNumber() / pt.getQuanzi2()
								* pt.getQuanzi1();// pt代表最新的权值
						if (pd.getTjNumber().equals(pd.getFilnalCount())) {
							minNumber = (float) Math.ceil(minNumber);
						}
						pd.setMinNumber(minNumber);
					}
				} else {
					pd.setJihuoStatua(null);
					pd.setFilnalCount(nowFinalCount);
					pd.setKlNumber(pd.getFilnalCount());
					pd.setTjNumber(0F);
					pd.setMinNumber(0F);
					pd.setHascount(null);
				}
			} else if (pt.getProcardStyle() != null
					&& pt.getProcardStyle().equals("外购")
					&& pt.getNeedProcess() != null
					&& pt.getNeedProcess().equals("yes")
					&& (pd.getNeedProcess() == null || pd.getNeedProcess()
							.equals("no"))) {// 外购件原不需要工序，现要工序
				pd.setTjNumber(0f);
				pd.setMinNumber(0f);
			}
			if ((pt.getLingliaostatus() == null || pt.getLingliaostatus()
					.equals("是"))
					&& pd.getLingliaostatus() != null
					&& pd.getLingliaostatus().equals("否")) {
				// 不领料变领料
				if (pd.getStatus().equals("已发料")) {
					pd.setLingliaostatus("是");
					pd.setStatus("已发卡");
					pd.setKlNumber(nowFinalCount);
					pd.setHascount(0f);
				}

			}
			if ((pd.getLingliaostatus() == null || pd.getLingliaostatus()
					.equals("是"))
					&& pt.getLingliaostatus() != null
					&& pt.getLingliaostatus().equals("否")) {
				// 领料变不领料
				if (pd.getStatus().equals("已发卡") || pd.getStatus().equals("初始")) {
					pd.setLingliaostatus("否");
					pd.setStatus("已发料");
					pd.setKlNumber(nowFinalCount);
					pd.setHascount(0f);
				}
			}
			if (pt.getProcardStyle() != null
					&& pt.getProcardStyle().equals("外购")) {
				BeanUtils.copyProperties(pt, pd, new String[] { "id", "rootId",
						"fatherId", "status", "belongLayer", "corrCount",
						"hascount", });
			} else {
				BeanUtils.copyProperties(pt, pd, new String[] { "id", "rootId",
						"fatherId", "status", "belongLayer", "hascount" });
			}
		} else {
			if (changeType > 1) {

			}
		}
		Set<ProcessInfor> processSet3 = pd.getProcessInforSet();// 循环获取其他模板的工序
		List<Integer> processNOs2 = new ArrayList<Integer>();
		if (processSet3.size() > 0) {
			for (ProcessInfor process31 : processSet3) {
				processNOs2.add(process31.getProcessNO());// 循环获取其他模板的所有的工序号
			}
		}
		List<Integer> toupdate = new ArrayList<Integer>();// 存储与修改有的工序相比都含有的工序
		List<Integer> toadd = new ArrayList<Integer>();// 存储与修改有的工序相比少的工序
		List<Integer> todelte = new ArrayList<Integer>();// 存储与修改有的工序相比多的工序
		for (Integer no1 : processNOs1) {
			if (processNOs2.contains(no1)) {
				toupdate.add(no1);
			} else {
				toadd.add(no1);
			}
		}
		for (Integer no2 : processNOs2) {
			if (!processNOs1.contains(no2)) {
				todelte.add(no2);
			}
		}
		if (toupdate.size() > 0) {// 修改在修改列表中存在的工序号的工序
			for (ProcessTemplate process35 : processSet1) {
				if (process35.getProcessNO() != null
						&& toupdate.contains(process35.getProcessNO())) {
					for (ProcessInfor process36 : processSet3) {
						if (process36.getStatus() != null
								&& (process36.getStatus().equals("初始")
										|| process36.getStatus().equals("自检") || process36
										.getStatus().equals("已领"))) {
							// 工序状态为初始,为自检或者领工序时才可以修改
							if (process36.getProcessNO() != null
									&& process36.getProcessNO().equals(
											process35.getProcessNO())) {
								if (process36.getStatus().equals("初始")) {
									process36.setTotalCount(nowFinalCount);
								} else if (pd.getLingliaostatus() == null
										|| !pd.getLingliaostatus().equals("是")) {
									process36.setTotalCount(nowFinalCount);
								}

								if (process36.getStatus().equals("已领")) {// 领工序时只可以修改几个检查项和工位信息
									process36.setZjStatus(process35
											.getZjStatus());
									// process36
									// .setGongwei(process35
									// .getGongwei());
									// process36
									// .setShebeiNo(process35
									// .getShebeiNo());
									process36.setShebeistatus(process35
											.getShebeistatus());// 设备验证
									process36.setGongzhuangstatus(process35
											.getGongzhuangstatus());// 工装验证
									process36.setLiangjustatus(process35
											.getLiangjustatus());// 量具验证
									process36.setGuifanstatus(process35
											.getGuifanstatus());// 规范验证
									process36.setKaoqingstatus(process35
											.getKaoqingstatus());// 考勤验证
									b = b & totalDao.update(process36);
								} else {

									// -----------------------processInfor辅料开始--------------------
									// 删除原有的辅料
									Set<ProcessinforFuLiao> ifFuliaoSet = process36
											.getProcessinforFuLiao();
									process36.setProcessinforFuLiao(null);
									if (ifFuliaoSet != null
											&& ifFuliaoSet.size() > 0) {
										for (ProcessinforFuLiao ifFuLiao : ifFuliaoSet) {
											ifFuLiao.setProcessInfor(null);
											totalDao.delete(ifFuLiao);
										}
									}
									if (process35.getIsNeedFuliao() != null
											&& process35.getIsNeedFuliao()
													.equals("yes")) {
										Set<ProcessFuLiaoTemplate> fltmpSet = process35
												.getProcessFuLiaoTemplate();
										if (fltmpSet.size() > 0) {
											Set<ProcessinforFuLiao> pinfoFlSet = new HashSet<ProcessinforFuLiao>();
											for (ProcessFuLiaoTemplate fltmp : fltmpSet) {
												ProcessinforFuLiao pinfoFl = new ProcessinforFuLiao();
												BeanUtils.copyProperties(fltmp,
														pinfoFl,
														new String[] { "id" });
												if (pinfoFl.getQuanzhi1() == null) {
													pinfoFl.setQuanzhi1(1f);
												}
												if (pinfoFl.getQuanzhi2() == null) {
													pinfoFl.setQuanzhi2(1f);
												}
												pinfoFl
														.setTotalCount(pd
																.getFilnalCount()
																* pinfoFl
																		.getQuanzhi2()
																/ pinfoFl
																		.getQuanzhi1());
												pinfoFl
														.setProcessInfor(process36);
												pinfoFl.setOutCount(0f);
												pinfoFlSet.add(pinfoFl);
											}
											process36
													.setProcessinforFuLiao(pinfoFlSet);
										}
									}
									// -----------------------processInfor辅料结束--------------------
									BeanUtils.copyProperties(process35,
											process36, new String[] { "id" });
									process36.setProcard(pd);
									b = b & totalDao.update(process36);
								}
							}
						}
					}
				}

			}
		}
		if (todelte.size() > 0) {// 删除在删除列表中存在的工序号的工序
			Set<ProcessInfor> deletSet = new HashSet<ProcessInfor>();
			for (ProcessInfor process32 : processSet3) {
				if (process32.getStatus() != null
						&& (process32.getStatus().equals("初始") || process32
								.getStatus().equals("自检"))) {
					// 工序状态为初始或者为自检时才可以删除
					if (process32.getProcessNO() != null
							&& todelte.contains(process32.getProcessNO())) {
						deletSet.add(process32);
					}
				}
			}
			processSet3.removeAll(deletSet);
			for (ProcessInfor delete : deletSet) {
				// delete.setProcard(null);
				// delete.setOsWork(null);
				// delete.setProcardPro(null);
				// delete.setProductProcess(null);
				// 删除原有的辅料
				Set<ProcessinforFuLiao> ifFuliaoSet = delete
						.getProcessinforFuLiao();
				delete.setProcessinforFuLiao(null);
				if (ifFuliaoSet != null && ifFuliaoSet.size() > 0) {
					for (ProcessinforFuLiao ifFuLiao : ifFuliaoSet) {
						ifFuLiao.setProcessInfor(null);
						totalDao.delete(ifFuLiao);
					}
				}
				b = b & totalDao.delete(delete);
			}
		}
		if (toadd.size() > 0) {// 添加在添加列表中存在的工序号的工序
			for (ProcessTemplate process33 : processSet1) {
				if (process33.getProcessNO() != null
						&& toadd.contains(process33.getProcessNO())) {
					ProcessInfor process34 = new ProcessInfor();
					BeanUtils.copyProperties(process33, process34,
							new String[] { "id" });
					// -----------------辅料开始------------------
					if (process33.getIsNeedFuliao() != null
							&& process33.getIsNeedFuliao().equals("yes")) {
						process34.setIsNeedFuliao("yes");
						Set<ProcessFuLiaoTemplate> fltmpSet = process33
								.getProcessFuLiaoTemplate();
						if (fltmpSet.size() > 0) {
							Set<ProcessinforFuLiao> pinfoFlSet = new HashSet<ProcessinforFuLiao>();
							for (ProcessFuLiaoTemplate fltmp : fltmpSet) {
								ProcessinforFuLiao pinfoFl = new ProcessinforFuLiao();
								BeanUtils.copyProperties(fltmp, pinfoFl,
										new String[] { "id" });
								if (pinfoFl.getQuanzhi1() == null) {
									pinfoFl.setQuanzhi1(1f);
								}
								if (pinfoFl.getQuanzhi2() == null) {
									pinfoFl.setQuanzhi2(1f);
								}
								pinfoFl.setTotalCount(pd.getFilnalCount()
										* pinfoFl.getQuanzhi2()
										/ pinfoFl.getQuanzhi1());
								pinfoFl.setProcessInfor(process34);
								pinfoFl.setOutCount(0f);
								pinfoFlSet.add(pinfoFl);
							}
							process34.setProcessinforFuLiao(pinfoFlSet);
						}
					}
					// ------------辅料结束-----
					Float klCount = 0f;// 可领数量
					Integer chaju = 0;// 工序号的差距
					if (processSet3 != null) {
						for (ProcessInfor process37 : processSet3) {// 寻找最近工序号的总数量和可领数量优先选择上条工序
							if (process37.getProcessNO() != null
									&& process33.getProcessNO() != null) {
								Integer chaju1 = process37.getProcessNO()
										- process33.getProcessNO();
								if ((chaju == 0) || (chaju > 0 && chaju1 < 0)
										|| (chaju1 > 0 && chaju1 < chaju)
										|| (chaju1 < 0 && chaju1 > chaju)) {
									chaju = chaju1;
									klCount = process37.getTotalCount();
								}
							}
						}
					}
					process34.setTotalCount(klCount);
					process34.setStatus("初始");
					process34.setProcard(pd);
					b = b & totalDao.save(process34);
					processSet3.add(process34);
				}
			}
		}
		if (b) {
			pd.setProcessInforSet(processSet3);
			b = b & totalDao.update(pd);
		}
		Set<Procard> sonSet = pd.getProcardSet();
		// if (changeType == 1) {// 仅仅调整下层数量数量
		// if (sonSet != null && sonSet.size() > 0) {
		// for (Procard son : sonSet) {
		// justUpdateProcardCount(son, pd.getFilnalCount());
		// }
		// }
		// } else if (changeType >= 2) {
		// Set<ProcardTemplate> ptsonSet = pt.getProcardTSet();
		// List<Integer> hasId = new ArrayList<Integer>();
		// List<Integer> hasId2 = new ArrayList<Integer>();
		// if (sonSet != null && sonSet.size() > 0) {
		// if (ptsonSet != null && ptsonSet.size() > 0) {
		// for (ProcardTemplate ptson : ptsonSet) {
		// for (Procard son : sonSet) {
		// if (son.getProcardTemplateId()
		// .equals(ptson.getId())
		// || son.getMarkId()
		// .equals(ptson.getMarkId())) {
		// hasId.add(son.getId());
		// hasId2.add(ptson.getId());
		// if (!son.getBanci().equals(ptson.getBanci())) {// 版次不一样
		// updateProcard(ptson, son, nowFinalCount,
		// totalWlStatus);
		// } else if (changeType == 3) {// 版次一样,但是对应的数量不一样下层的数量需要更改
		// justUpdateProcardCount(son, nowFinalCount);
		// }
		// }
		// }
		// }
		// // 模板新加
		// for (ProcardTemplate ptson : ptsonSet) {
		// if (!hasId2.contains(ptson.getId())) {
		// addProcardInFather(pd, null, ptson, totalWlStatus,
		// 0);
		// pd.setHascount(pd.getKlNumber());
		// }
		// }
		// // 模板删除
		// for (Procard son : sonSet) {
		// if (!hasId.contains(son.getId())) {
		// son.setSbStatus("删除");
		// if (son.getFatherId() != null) {
		// son.setOldFatherId(son.getFatherId());
		// son.setOldRootId(son.getRootId());
		// }
		// son.setFatherId(null);
		// son.setRootId(null);
		// totalDao.update(son);
		// // 遍历下层零件设置设变属性为删除
		// Set<Procard> sonSet2 = son.getProcardSet();
		// if (sonSet2 != null && sonSet2.size() > 0) {
		// for (Procard son2 : sonSet2) {
		// deleteDownProcard(son2);
		// }
		// }
		// }
		// }
		// } else {
		// if (!pd.getProcardStyle().equals("外购")) {
		// throw new RuntimeException("对不起非外购件下没有发现零件,更新失败!");
		// }
		// // 删除下层
		// for (Procard son : sonSet) {
		// son.setSbStatus("删除");
		// if (son.getFatherId() != null) {
		// son.setOldFatherId(son.getFatherId());
		// son.setOldRootId(son.getRootId());
		// }
		// son.setFatherId(null);
		// son.setRootId(null);
		// totalDao.update(son);
		// // 遍历下层零件设置设变属性为删除
		// Set<Procard> sonSet2 = son.getProcardSet();
		// if (sonSet2 != null && sonSet2.size() > 0) {
		// for (Procard son2 : sonSet2) {
		// deleteDownProcard(son2);
		// }
		// }
		// }
		// }
		// }
		// }
		return b;
	}

	// 仅仅调整下层数量数量
	private void justUpdateProcardCount(Procard son, Float filnalCount) {
		// TODO Auto-generated method stub
		Float nowFilnalCount = null;
		if (son.getProcardStyle().equals("外购")) {
			nowFilnalCount = filnalCount * son.getQuanzi2() / son.getQuanzi1();
			if (son.getLingliaostatus() == null
					|| !son.getLingliaostatus().equals("否")) {
				son.setHascount(nowFilnalCount
						- (son.getKlNumber() - son.getHascount()));// 扣除之前已领的数量
			}
			son.setKlNumber(nowFilnalCount);
		} else {
			nowFilnalCount = filnalCount * son.getCorrCount();
			nowFilnalCount = (float) Math.ceil(nowFilnalCount);
		}
		if (!son.getFilnalCount().equals(nowFilnalCount)) {
			son.setFilnalCount(nowFilnalCount);
			if (son.getStatus().equals("初始") || son.getStatus().equals("已发卡")) {
				Set<ProcessInfor> processSet = son.getProcessInforSet();
				if (processSet != null && processSet.size() > 0) {
					for (ProcessInfor process : processSet) {
						process.setTotalCount(nowFilnalCount);
						totalDao.update(process);
					}
				}
			}
		}
		son.setFilnalCount(nowFilnalCount);
		totalDao.update(son);
	}

	@Override
	public String jihuoAgain(Integer id) {
		// TODO Auto-generated method stub
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			if (procard.getProcardStyle().equals("外购")) {
				// Procard totalProcard =(Procard)
				// totalDao.getObjectById(Procard.class, procard.getRootId());
				// if(totalProcard.getWlstatus()==null||totalProcard.getWlstatus().equals("待定")){
				// return "生产件BOM未激活生产!";
				// }else{
				// //第一步设置激活
				// if(procard.getWwblCount()==null||procard.getWwblCount()<procard.getFilnalCount()){
				// Float wwblCount=procard.getWwblCount();
				// if(wwblCount==null){
				// wwblCount=0f;
				// }
				// if(procard.getJihuoStatua()==null||!procard.getJihuoStatua().equals("激活")){
				// procard.setJihuoStatua("激活");
				// }
				// //第二步设置tjNumber,klNumber,
				// if(procard.getNeedProcess()!=null&&procard.getNeedProcess().equals("yes")){//是需要领工序干活的
				// if(procard.getKlNumber()==null){
				// procard.setKlNumber(procard.getFilnalCount()-wwblCount);
				// procard.setHascount(procard.getFilnalCount()-wwblCount);
				// }else{
				// Float
				// ce=(procard.getFilnalCount()-wwblCount)-procard.getKlNumber();//差额
				// if(ce<0){
				// return "true";
				// }
				// procard.setKlNumber(procard.getFilnalCount()-wwblCount);
				// procard.setHascount(procard.getHascount()+ce);
				// }
				// }else{
				// //查询自身的cgNumber
				// Float cgNumber = procard.getCgNumber();
				// //查询采购单的到货情况
				//							
				//							
				// }
				// }
				// }
			}
			if ("自制".equals(procard.getProcardStyle())) {
				if (procard.getYlNumber() == null) {
					procard.setYlNumber(0F);
				}
				Float minNumber = 0f;
				if ("part".equals(procard.getLingliaoType())) {
					String minnumbers_sql = "select max(minNumber) from Procard where fatherId=?";
					minNumber = (Float) totalDao.getObjectByCondition(
							minnumbers_sql, procard.getId());
				} else {
					String minnumbers_sql = "select min(minNumber) from Procard where fatherId=?";
					minNumber = (Float) totalDao.getObjectByCondition(
							minnumbers_sql, procard.getId());
				}
				if (minNumber == null) {
					minNumber = procard.getFilnalCount();
				}
				if (procard.getWwblCount() != null) {
					minNumber -= procard.getWwblCount();
				}
				// 激活数量>0
				if (minNumber > 0) {
					if (minNumber > procard.getFilnalCount()) {
						minNumber = procard.getFilnalCount();
					}
					procard.setJihuoStatua("激活");
					// 计算剩余未领材料信息
					minNumber = (float) Math.floor(minNumber);
					if (procard.getHascount() == null) {
						procard.setHascount(minNumber);
					}
					if (procard.getKlNumber() == null
							|| procard.getKlNumber() == 0F) {
						procard.setKlNumber(minNumber);// 可领数量
					}
					procard.setHascount(minNumber - procard.getKlNumber()
							+ procard.getHascount());// 更新剩余未领数量
					if (procard.getHascount() < 0) {
						// 发送异常消息bgg
						AlertMessagesServerImpl.addAlertMessages("系统维护异常组",
								"件号:" + procard.getMarkId() + "批次:"
										+ procard.getSelfCard() + "可领数量为："
										+ procard.getHascount()
										+ "小于零，系统自动修复为0，操作是：手动激活,当前系统时间为"
										+ Util.getDateTime(), "2");
						procard.setHascount(0f);
					}
					procard.setKlNumber(minNumber);// 可领数量
				}

				/*** 根据下层的外购件激活数量 获得最小激活数量 结束 ***/

				if ("初始".equals(procard.getStatus())) {
					// 是否需要领料
					if (procard.getLingliaostatus() != null
							&& "否".equals(procard.getLingliaostatus())) {
						procard.setStatus("已发料");
						procard.setHascount(0F);
						// 生成在制品
						Float tjNumber = 0f;
						if (procard.getTjNumber() != null) {
							tjNumber = procard.getTjNumber();
						}
						String banbenSql = null;
						if (procard.getBanBenNumber() == null
								|| procard.getBanBenNumber().length() == 0) {
							banbenSql = " and (banBenNumber is null or banBenNumber='')";
						} else {
							banbenSql = " and banBenNumber='"
									+ procard.getBanBenNumber() + "'";
						}
						String hqlzaizhi = "from Goods where goodsMarkId=? and goodsLotId=? "
								+ banbenSql
								+ " and goodsClass='在制品' and goodsStyle!='半成品转库' and (fcStatus is null or fcStatus='可用') ";
						List listzizhi = totalDao.query(hqlzaizhi, procard
								.getMarkId(), procard.getSelfCard());
						Integer rgoodsId = null;
						if (listzizhi != null && listzizhi.size() > 0) {
							Goods g1 = (Goods) listzizhi.get(0);
							g1.setGoodsCurQuantity(g1.getGoodsCurQuantity()
									+ procard.getFilnalCount() - tjNumber);
							if (g1.getGoodsCurQuantity() < 0) {
								AlertMessagesServerImpl
										.addAlertMessages(
												"系统维护异常组",
												"件号:"
														+ g1.getGoodsMarkId()
														+ "批次:"
														+ g1.getGoodsLotId()
														+ "可领数量小于零，系统自动修复为0，操作是：领料,当前系统时间为"
														+ Util.getDateTime(),
												"2");
								g1.setGoodsCurQuantity(0f);
							}
							totalDao.update(g1);
							rgoodsId = g1.getGoodsId();
						} else {
							Goods gg = new Goods();
							gg.setGoodsMarkId(procard.getMarkId());
							gg.setGoodsLotId(procard.getSelfCard());
							gg.setGoodsFullName(procard.getProName());
							gg.setBanBenNumber(procard.getBanBenNumber());
							gg.setGoodsClass("在制品");
							gg.setGoodsCurQuantity(procard.getFilnalCount()
									- tjNumber);
							gg.setGoodsUnit(procard.getUnit());
							gg.setWgType(procard.getWgType());
							gg.setGoodsFormat(procard.getSpecification());
							gg.setGoodsChangeTime(Util.getDateTime());
							totalDao.save(gg);
							rgoodsId = gg.getGoodsId();
						}

						// 添加零件与在制品关系表
						ProcardProductRelation pprelation = new ProcardProductRelation();
						pprelation.setAddTime(Util.getDateTime());
						pprelation.setProcardId(procard.getId());
						pprelation.setGoodsId(rgoodsId);
						pprelation.setZyCount(procard.getFilnalCount()
								- tjNumber);
						pprelation.setFlagType("本批在制品");
						totalDao.save(pprelation);
						// 添加在制品入库记录
						GoodsStore gs = new GoodsStore();
						gs.setGoodsStoreMarkId(procard.getMarkId());// 件号
						gs.setGoodsStoreFormat(procard.getSpecification());
						gs.setTuhao(procard.getTuhao());
						gs.setBanBenNumber(procard.getBanBenNumber());
						gs.setGoodsStoreGoodsName(procard.getProName());// 名称
						gs.setGoodsStoreLot(procard.getSelfCard());// 批次
						gs.setGoodsStoreCount(procard.getFilnalCount()
								- tjNumber);// 数量
						gs.setPrintStatus("YES");
						gs.setGoodsStoreProMarkId(procard.getRootMarkId());// 总成件号
						gs.setGoodsStoreWarehouse("在制品");// 库别
						Users jingban = Util.getLoginUser();
						gs.setGoodsStoreCharger(jingban.getName());// 经办人
						gs.setStyle("正常（成品）");// 入库类型
						gs.setGoodsStorePerson("system");
						gs.setGoodsStoreDate(DateUtil.formatDate(new Date(),
								"yyyy-MM-dd"));
						gs.setGoodsStoreUnit(procard.getUnit());// 单位
						gs.setWgType(procard.getWgType());
						totalDao.save(gs);

						// /*** 同步设置工序的可领数量 ***/
						// String hql_updateProCount =
						// "update ProcessInfor set totalCount=? where procard.id=?";
						// totalDao.createQueryUpdate(hql_updateProCount,
						// null,
						// procard2.getKlNumber(), procard2.getId());

					} else {
						procard.setStatus("已发卡");
					}
				}
				totalDao.update(procard);
				return "激活成功!";
			}
		}
		return "没有找到对应的生产件!";
	}

	@Override
	public Object[] showwgjmarkId(Integer id) {
		if (id != null) {
			String hql_pwd = " from ProcessInforWWApplyDetail where procardId = ?  and (dataStatus is null or dataStatus not in ('取消','删除'))  and wwType = '包工包料'";
			ProcessInforWWApplyDetail pwd = (ProcessInforWWApplyDetail) totalDao
					.getObjectByCondition(hql_pwd, id);
			List<String> markIds = totalDao
					.query(
							"select markId from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
							pwd.getId());
			if (pwd != null && markIds != null && markIds.size() > 0) {
				String str = "";
				for (int i = 0; i < markIds.size(); i++) {
					if (i == 0) {
						str = "('" + markIds.get(i) + "'";
					} else {
						str += "," + "'" + markIds.get(i) + "'";
					}
				}

				if (str.length() > 0) {
					str += ")";
				}
				String hql_wgj = " from Procard where fatherId = ? and  (sbStatus is null or sbStatus !='删除') and markId in "
						+ str;
				List<Procard> procardWgjList = totalDao.query(hql_wgj, id);
				String hql_ = " from Procard where fatherId = ? and procardStyle='外购' and  (sbStatus is null or sbStatus !='删除') and markId not  in "
						+ str;
				List<Procard> procardWgjList0 = totalDao.query(hql_, id);
				Object[] obj = { procardWgjList0, procardWgjList };
				return obj;
			} else {
				String hql_ = " from Procard where fatherId = ? and procardStyle='外购' and  (sbStatus is null or sbStatus !='删除')";
				List<Procard> procardWgjList0 = totalDao.query(hql_, id);
				Object[] obj = { procardWgjList0, null };
				return obj;
			}
		}
		return null;
	}

	@Override
	public String zijihuoww(WaigouWaiweiPlan wwp) {
		// 查询激活外委计划是否需要
		String needJihuo = (String) totalDao
				.getObjectByCondition("select valueCode from CodeTranslation where type = 'sys' and keyCode='BOM未激活外委工序计划' and valueName='BOM未激活外委计划'");
		if (needJihuo != null && needJihuo.equals("否")) {
			if (wwp.getPriceId() != null) {// 匹配到了价格直接跳过
				WaigouOrder waigouORder = new WaigouOrder();
				// 订单明细
				Set<WaigouPlan> wwpSet = null;
				ZhUser gys = null;
				Users gysUser = null;
				gys = (ZhUser) totalDao.getObjectById(ZhUser.class, wwp
						.getGysId());

				if (gys != null) {
					gysUser = (Users) totalDao.getObjectById(Users.class, gys
							.getUserid());
				}
				if (gys != null) {
					waigouORder.setZhUser(gys);
					waigouORder.setUser(gysUser);
					waigouORder.setWwSource("BOM外委");
					waigouORder.setRootMarkId(wwp.getRootMarkId());
					waigouORder.setYwMarkId(wwp.getYwMarkId());
					waigouORder.setUserId(gys.getUserid());
					waigouORder.setUserCode(gysUser.getCode());
					waigouORder.setGysId(gys.getId());//
					waigouORder.setGysName(gys.getCmp());// 供应商名称
					waigouORder.setLxPeople(gys.getCperson());// 联系人
					waigouORder.setGysPhone(gys.getCtel());// 电话
					waigouORder.setFax(gys.getCfax());// 传真
					waigouORder.setType("外委");
					// gysWWApply.settype;//票据类型
					// private String condition;//付款条件
					String wwNumber = "";
					String before = null;
					Integer bIndex = 10;
					before = "ww" + Util.getDateTime("yyyyMMdd");
					Integer maxNo = 0;
					String maxNumber = (String) totalDao
							.getObjectByCondition("select max(planNumber) from WaigouOrder where planNumber like '"
									+ before + "%'");
					if (maxNumber != null) {
						String num = maxNumber.substring(bIndex, maxNumber
								.length());
						try {
							Integer maxNum = Integer.parseInt(num);
							if (maxNum > maxNo) {
								maxNo = maxNum;
							}
						} catch (Exception e) {
							// TODO: handle exception
						}
					}
					maxNo++;
					wwNumber = before + String.format("%03d", maxNo);
					waigouORder.setPlanNumber(wwNumber);// 外委订单号码
					waigouORder.setAddUserCode("system");// 采购员工号
					waigouORder.setAddUserName("system");// 采购员姓名
					waigouORder.setAddUserPhone("");// 采购员电话
					waigouORder.setAddTime(Util.getDateTime());// 添加时间
					waigouORder.setRootId(null);// 生产总成id
					waigouORder.setGhAddress(gys.getCompanydz());// 送货地址
					waigouORder.setCaigouMonth(Util.getDateTime("yyyy-MM月"));// 采购月份
					// gysWWApply.setshAddress;//送货地址
					waigouORder.setProcessApplyId(null);// 工序外委表Id
					waigouORder.setStatus("待核对");// 状态
					waigouORder.setApplystatus("未申请");//
				}
				WaigouPlan wgPlan = null;
				if (wwpSet == null || wwpSet.size() == 0) {
					wwpSet = new HashSet<WaigouPlan>();
				} else {
					for (WaigouPlan had : wwpSet) {
						if (had.getMarkId().equals(wwp.getMarkId())
								&& had.getProcessNOs().equals(
										wwp.getProcessNo())) {
							if (had.getBanci() == null) {
								had.setBanci(0);
							}
							if (wwp.getBanci() == null) {
								wwp.setBanci(0);
							}
							if (had.getBanci().equals(wwp.getBanci())) {
								wgPlan = had;
							}
						}
					}
				}
				// 供应商外委订单明细
				if (wgPlan == null) {
					wgPlan = new WaigouPlan();
					wgPlan.setMarkId(wwp.getMarkId());// 件号
					wgPlan.setBanben(wwp.getBanben()); // 版本号
					wgPlan.setProName(wwp.getProName());// 零件名称
					wgPlan.setBanci(wwp.getBanci());
					wgPlan.setProcessNOs(wwp.getProcessNo());// 工序号
					wgPlan.setProcessNames(wwp.getProcessName());// 工序名称
					wgPlan.setWwType("工序外委");// 外委类型（工序外委,包工包料）
					wgPlan.setType("外委");// 外委类型（工序外委,包工包料）
					// wgPlan.setUnit(wwp.getUnit());// 单位
					wgPlan.setPriceId(wwp.getPriceId());// 合同Id
					wgPlan.setUserId(gys.getUserid());// 供应商信息
					wgPlan.setUserCode(gysUser.getCode());
					wgPlan.setGysId(gys.getId());//
					wgPlan.setGysName(gys.getCmp());// 供应商名称
					wgPlan.setNumber(wwp.getNumber());// 数量
					wgPlan.setSyNumber(wwp.getNumber());// 采购数量*供应商采购比例
					wgPlan.setStatus("待核对");
					wgPlan.setUnit(wwp.getUnit());
					// wgPlan.setWwwwpId(wwp.getId());
					Price price = (Price) totalDao.getObjectById(Price.class,
							wwp.getPriceId());
					if (price.getHsPrice() != null) {
						wgPlan.setHsPrice(Float.parseFloat(price.getHsPrice()
								+ ""));// 含税单价
						wgPlan.setMoney(Float.parseFloat(price.getHsPrice()
								* wwp.getNumber() + ""));// 总金额
						if (price.getBhsPrice() != null) {
							wgPlan.setPrice(Float.parseFloat(price
									.getBhsPrice()
									+ ""));// 不含税单价
						} else {
							wgPlan.setPrice(0f);
						}
						wgPlan.setTaxprice(price.getTaxprice()); // 税率
					} else {
						wgPlan.setHsPrice(0f);// 含税单价
						wgPlan.setPrice(0f);
						wgPlan.setMoney(0f);// 总金额
						wgPlan.setPrice(0f);// 不含税单价
						wgPlan.setTaxprice(0d); // 税率
					}
					// gyswwwwp.setpayDate;//交付日期
					wgPlan.setRemark(wwp.getYwMarkId());// 备注
					wgPlan.setWaigouOrder(waigouORder);
					wgPlan.setWwSource("BOM外委");
					totalDao.save(wgPlan);
					// 中间表
					ProcardWGCenter zjb = new ProcardWGCenter();
					zjb.setWgOrderId(wgPlan.getId());
					zjb.setProcardId(wwp.getProcardId());
					zjb.setProcardCount(wwp.getNumber());
					zjb.setConnectionType("mTom");
					totalDao.save(zjb);
					wwpSet.add(wgPlan);
					waigouORder.setWwpSet(wwpSet);
					waigouORder.setType("外委");
					waigouORder.setWwType("工序外委");
					if (waigouORder.getId() == null) {
						totalDao.save(waigouORder);
					} else {
						totalDao.update(waigouORder);
					}
				} else {
					wgPlan.setNumber(wgPlan.getNumber() + wwp.getNumber());
					wgPlan.setSyNumber(wgPlan.getSyNumber() + wwp.getNumber());
					wgPlan.setMoney(wgPlan.getNumber() * wgPlan.getHsPrice());
					// 中间表
					ProcardWGCenter zjb = new ProcardWGCenter();
					zjb.setWgOrderId(wgPlan.getId());
					zjb.setProcardId(wwp.getProcardId());
					zjb.setProcardCount(wwp.getNumber());
					zjb.setConnectionType("mTom");
					totalDao.save(zjb);
					totalDao.update(wgPlan);
				}
				wwp.setStatus("待出库");
				totalDao.update(wwp);
				// 申请审批流程是否跳过
				passWWapply(waigouORder);
			}
		}
		return "true";
	}

	private void passWWapply(WaigouOrder waigouOrder) {
		// TODO Auto-generated method stub
		// 查询激活外委计划是否需要
		String needJihuo = (String) totalDao
				.getObjectByCondition("select valueCode from CodeTranslation where type = 'sys' and keyCode='外委待申请订单' and valueName='待申请外委订单'");
		if (needJihuo != null && needJihuo.equals("否")) {
			try {
				String processName = "BOM外委采购订单申请";
				Integer epId = CircuitRunServerImpl.createProcess(processName,
						WaigouOrder.class, waigouOrder.getId(), "applystatus",
						"id",
						"WaigouwaiweiPlanAction!findWwPlanList.action?pageStatus=findAll&id="
								+ waigouOrder.getId(), processName, true);
				if (epId != null && epId > 0) {
					waigouOrder.setEpId(epId);
					CircuitRun circuitRun = (CircuitRun) totalDao.get(
							CircuitRun.class, epId);
					if ("同意".equals(circuitRun.getAllStatus())
							&& "审批完成".equals(circuitRun.getAuditStatus())) {
						waigouOrder.setStatus("待通知");
						waigouOrder.setApplystatus("同意");
						// Set<WaigouPlan> wgpList = waigouOrder.getWwpSet();
						// if (wgpList != null && wgpList.size() > 0) {
						// for (WaigouPlan wp : wgpList) {
						// wp.setStatus("待通知");
						// totalDao.update(wp);
						// }
						// }
					} else {
						waigouOrder.setApplystatus("未审批");
					}
				}
				CircuitRun circuitRun = (CircuitRun) totalDao.getObjectById(
						CircuitRun.class, epId);
				if (circuitRun.getAllStatus().equals("同意")) {
					waigouOrder.setApplystatus("同意");
					waigouOrder.setEpId(epId);
					totalDao.update(waigouOrder);
					// 判断是否需要通知供应商
					String tz = (String) totalDao
							.getObjectByCondition("select valueCode from CodeTranslation where type = 'sys' and keyCode='待通知外委采购订单管理' and valueName='待通知外委订单'");
					if (tz != null && tz.equals("否")) {
						waigouOrder.setStatus("待确认");
						waigouOrder.setTongzhiTime(Util.getDateTime());
						// waigouOrder.setTzUserCode(loginUSer.getCode());//
						// 通知人员作为联系人
						// waigouOrder.setTzUserName(loginUSer.getName());//
						// 通知人员作为联系人
						// waigouOrder.setTzUserPhone(loginUSer.getPassword()
						// .getPhoneNumber());// 通知人员作为联系人
						// waigouOrder.setAddUserYx(loginUSer.getPassword()
						// .getMailBox());

						Set<WaigouPlan> planSet = waigouOrder.getWwpSet();
						for (WaigouPlan waigouPlan : planSet) {
							waigouPlan.setStatus("待确认");
						}
						if (waigouOrder.getLxPeople() == null) {
							// 供应商信息查询
							ZhUser zhuser = (ZhUser) totalDao.getObjectById(
									ZhUser.class, waigouOrder.getGysId());
							waigouOrder.setLxPeople(zhuser.getCperson());
							waigouOrder.setGysPhone(zhuser.getCmobile());
						}
						boolean bool = totalDao.update(waigouOrder);
						if (bool) {
							CompanyInfo companyInfo = (CompanyInfo) ActionContext
									.getContext().getApplication().get(
											"companyInfo");
							AlertMessagesServerImpl.addAlertMessages(
									waigouOrder.getType() + "采购订单确认(供应商)",
									"尊敬的【" + waigouOrder.getLxPeople()
											+ "】,您好:\n您有新的订单需要确认交付日期,订单号:【"
											+ waigouOrder.getPlanNumber()
											+ "】。详询"
											+ waigouOrder.getTzUserName() + "("
											+ waigouOrder.getTzUserPhone()
											+ ")。\n以下地址可以直接登录:\n用户名:"
											+ waigouOrder.getUserCode()
											+ "\n初始密码:" + 123456
											+ "(请及时修改密码)\n["
											+ companyInfo.getName() + "]", "1",
									waigouOrder.getUserCode());// 待取消
							// "helper");

							/****** 推送邮件 ******/
							// 查询供应商信息
							// ZhUser zhuser = (ZhUser) totalDao.getObjectById(
							// ZhUser.class, waigouOrder.getGysId());
							// if (zhuser != null && zhuser.getYx() != null
							// && zhuser.getYx().length() > 0) {
							// zhuser.setYx(zhuser.getYx().replaceAll("；",
							// ";"));
							// String[] yxs = zhuser.getYx().split(";");
							// Set<WaigouPlan> planSets =
							// waigouOrder.getWwpSet();
							// String caigouDetail = "";
							// for (WaigouPlan waigouPlan : planSets) {
							// if (waigouPlan.getSpecification() == null
							// || waigouPlan.getSpecification()
							// .length() == 0
							// || "null".equals(waigouPlan
							// .getSpecification())) {
							// waigouPlan.setSpecification("");
							// }
							// caigouDetail += "<tr>" + "<th>"
							// + waigouPlan.getMarkId()
							// + "</th>"
							// + "<th align='left' style='width: 150px;'>"
							// + waigouPlan.getProName() + "</th>"
							// + "<th>"
							// + waigouPlan.getSpecification()
							// + "</th>" + "<th>"
							// + waigouPlan.getBanben() + "</th>"
							// + "<th align='right'>" + "</th>"
							// + "<th>" + waigouPlan.getNumber()
							// + "</th>" + "<th>"
							// + waigouPlan.getUnit() + "</th>"
							// + "<th>" + waigouPlan.getHsPrice()
							// + "</th>" + "<th>"
							// + waigouPlan.getMoney() + "</th>"
							// + "<th>" + "</th>" + "<th>" + "</th>"
							// + "</tr>";
							// }
							// String maildetail = "<style>.table {"
							// + "font-size: 14px;" + "padding: 0px;"
							// + "margin: 0px;"
							// + "border-collapse: collapse;"
							// + "border: solid #999;"
							// + "border-width: 1px 0 0 1px;"
							// + "width: 99%;" + "}"
							// + ".table th,.table td {"
							// + "border: solid #999;"
							// + "border-width: 1 1px 1px 1;"
							// + "padding: 2px;" + "}</style>尊敬的【"
							// + waigouOrder.getLxPeople()
							// + "】先生/女士,您好:<br/>您有新的订单需要确认交付日期,订单号:【"
							// + waigouOrder.getPlanNumber()
							// + "】。<br/><div id='printdiv'>"
							// +
							// "<div align='center' style='font-size: 20px; height: 25px;'>"
							// + companyInfo.getName()
							// + "</div>"
							// +
							// "<div align='center' style='font-size: 14px; height: 25px;'>"
							// + companyInfo.getEnglishName()
							// + "</div>"
							// + "<div align='right' style='font-size: 12px;'>"
							// + "电话:"
							// + companyInfo.getTel()
							// +
							// "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
							// + "传真:"
							// + companyInfo.getFax()
							// +
							// "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
							// +
							// "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第 1 页/共 1"
							// +
							// "页&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
							// + "</div>"
							// +
							// "<table class='table' style='line-height: 15px;'>"
							// + "<tbody><tr>"
							// +
							// "<th colspan='11' style='border: hidden; font-size: x-large;' align='center'>"
							// + "采购订单"
							// + "</th>"
							// + "</tr>"
							// + "<tr>"
							// +
							// "<th style='border: hidden; width: 100px;' align='left' colspan='8'>"
							// + "REY:01"
							// + "</th>"
							// +
							// "<th style='border: hidden;' align='center' colspan='4'>"
							// + "QP140900-C"
							// + "</th>"
							// + "</tr>"
							// + "<tr>"
							// +
							// "<th style='border: hidden; width: 100px;' align='left' colspan='8'>"
							// + "供应商编号:"
							// + zhuser.getUsercode()
							// + "</th>"
							// +
							// "<th style='border: hidden;' align='left' colspan='4'>"
							// + "订单编号:"
							// + waigouOrder.getPlanNumber()
							// + "</th>"
							// + "</tr>"
							// + "<tr>"
							// +
							// "<th style='border: hidden;' align='left' '='' colspan='8'>"
							// + "供应商名称:"
							// + zhuser.getCmp()
							// + "</th>"
							// +
							// "<th style='border: hidden;' colspan='4' align='left'>"
							// + "制单日期:"
							// + waigouOrder.getTongzhiTime()
							// + "</th>"
							// + "</tr>"
							// + "<tr>"
							// +
							// "<th style='border: hidden;' colspan='8' align='left'>"
							// +
							// "地&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;址:"
							// + zhuser.getCompanydz()
							// + "</th>"
							// +
							// "<th style='border: hidden;' colspan='4' align='left'>"
							// + "采&nbsp;&nbsp;购&nbsp;&nbsp;员:"
							// + waigouOrder.getTzUserName()
							// + "</th>"
							// + "</tr>"
							// + "<tr>"
							// +
							// "<th style='border: hidden;' colspan='8' align='left'>"
							// + "联&nbsp;&nbsp;&nbsp;系&nbsp;&nbsp;&nbsp;人:"
							// + zhuser.getCperson()
							// + "</th>"
							// +
							// "<th style='border: hidden;' colspan='4' align='left'>"
							// + "付款方式:"
							// + zhuser.getFkfs()
							// + "</th>"
							// + "</tr>"
							// + "<tr>"
							// +
							// "<th style='border: hidden; border-bottom: inherit;' colspan='8' align='left'>"
							// + "电话&nbsp;/&nbsp;手机:"
							// + zhuser.getCfax()
							// + "/"
							// + zhuser.getCtel()
							// + "</th>"
							// +
							// "<th style='border: hidden; border-bottom: inherit;' colspan='4' align='left'>"
							// + "票据类型:增值税发票"
							// + zhuser.getZzsl()
							// + "</th>"
							// + "</tr>"
							// + "<tr>"
							// + "<th>"
							// + "件号"
							// + "</th>"
							// + "<th>"
							// + "物料名称"
							// + "</th>"
							// + "<th>"
							// + "规格型号"
							// + "</th>"
							// + "<th>"
							// + "版本"
							// + "</th>"
							// + "<th>"
							// + "材质"
							// + "</th>"
							// + "<th>"
							// + "订单数量"
							// + "</th>"
							// + "<th>"
							// + "单位"
							// + "</th>"
							// + "<th>"
							// + "含税单价"
							// + "</th>"
							// + "<th>"
							// + "含税金额"
							// + "</th>"
							// + "<th style='width: 80px;'>"
							// + "交货日期"
							// + "</th>"
							// + "<th>"
							// + "备注"
							// + "</th>"
							// + "</tr>"
							// + caigouDetail
							// + "<tr>"
							// + "<td colspan='11'></td>"
							// + "</tr>"
							// + "<tr style=''>"
							// +
							// "<th align='right' style='border: hidden; border-top: inset;'>"
							// + "送货地址:"
							// + "</th>"
							// +
							// "<th colspan='12' align='left' style='border: hidden; border-top: inherit;'>"
							// + companyInfo.getAddress()
							// + "</th>"
							// + "</tr>"
							// + "<tr style='border: hidden;'>"
							// + "<th align='right' style='border: hidden;'>"
							// +
							// "备&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注:"
							// + "</th>"
							// +
							// "<th colspan='12' align='left' style='border: hidden;'></th>"
							// + "</tr>"
							// + "<tr style='border: hidden;'>"
							// +
							// "<th align='right' style='border: hidden; vertical-align: top;'>"
							// +
							// "条&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;款:"
							// + "</th>"
							// +
							// "<th style='border: hidden; line-height: 25px' colspan='12' align='left'>"
							// + "<ul>"
							// + "<li>"
							// +
							// "1.供方必须遵循本订购单之交货期或需方采购部电话及书面通知调整之交期，若有延误，每延误一日扣除该批款3%。"
							// + "</li>"
							// + "<li>"
							// +
							// "2.按工程图纸要求、品质保证期限为一年，供方交货之料件必须符合需方之品质要求，否则需方在一年内有权退货或要求赔偿供方不得拒绝。"
							// + "</li>"
							// + "<li>"
							// +
							// "3.检验后如发现品质不良供方在接到通知后3日内应将退货取回，并尽快补料，延期需方自行处理，若急用料需挑选所需人工费由供方负责。"
							// + "</li>"
							// + "</ul>"
							// + "</th>"
							// + "</tr>"
							// + "</tbody></table>"
							// +
							// "</div><br/><font color='red'>以下地址可以登录系统填写交付日期:<a href='http://pebs.i-brights.cn/'>PEBS(请点击)</a><br/>用户名:"
							// + waigouOrder.getUserCode()
							// + "<br/>初始密码:123456(请及时修改密码)<br/>["
							// + companyInfo.getName()
							// + "]<br/>"
							// + "注意:本邮件由系统发送,请勿直接回复。<br/>具体事项请联系"
							// + waigouOrder.getTzUserName()
							// + ",手机号:"
							// + waigouOrder.getTzUserPhone()
							// + "/邮箱:"
							// + waigouOrder.getAddUserYx() + "</font>";
							// for (String yx : yxs) {
							// // 发送邮件提醒
							// SendMail sendMail = new SendMail();
							//
							// sendMail.sendMail(yx, "阳天电子科技-采购订单确认(供应商)",
							// maildetail);
							// }
							// }
							// 短信通知
						}
						String qr = (String) totalDao
								.getObjectByCondition("select valueCode from CodeTranslation where type = 'sys' and keyCode='待确认外委采购订单管理' and valueName='待确认外委订单'");
						if (qr != null && qr.equals("否")) {
							// CompanyInfo companyInfo = (CompanyInfo)
							// ActionContext
							// .getContext().getApplication().get(
							// "companyInfo");
							// AlertMessagesServerImpl.addAlertMessages(
							// waigouOrder.getType() + "采购订单确认(供应商)",
							// "尊敬的【" + waigouOrder.getLxPeople()
							// + "】,您好:\n您有新的订单已经确认签订,订单号:【"
							// + waigouOrder.getPlanNumber()
							// + "】。详询"
							// + waigouOrder.getTzUserName() + "("
							// + waigouOrder.getTzUserPhone()
							// + ")。\n以下地址可以直接登录:\n用户名:"
							// + waigouOrder.getUserCode()
							// + "\n初始密码:" + 123456
							// + "(请及时修改密码)\n["
							// + companyInfo.getName() + "]", "1",
							// waigouOrder.getUserCode());// 待取消
							// "helper");
							waigouOrder.setApplystatus("同意");
							waigouOrder.setStatus("生产中");
							if (planSet != null && planSet.size() > 0) {
								for (WaigouPlan waigouPlan : planSet) {
									if (waigouPlan.getWwSource()
											.equals("BOM外委")) {
										waigouPlan.setStatus("供应商领料");
										totalDao.update(waigouPlan);
									}
								}
							}
							totalDao.update(waigouOrder);

						}
					}
				} else {
					waigouOrder.setEpId(epId);
					totalDao.update(waigouOrder);
				}

			} catch (Exception e) {
				// return "审批流程有误,请联系管理员!";
			}

		}
	}

	@Override
	public List<ProcessAndWgProcardTem> findProcessAndwgProcard(Integer id) {
		if (id != null) {
			ProcessInfor processinfor = (ProcessInfor) totalDao.get(
					ProcessInfor.class, id);
			Procard procard = processinfor.getProcard();
			List<ProcessAndWgProcardTem> processAndWgList = totalDao
					.query(
							" from ProcessAndWgProcardTem where procardMarkId = ? and processNo = ? ",
							procard.getMarkId(), processinfor.getProcessNO());
			return processAndWgList;
		}
		return null;
	}

	@Override
	public String submintBreak(BreakSubmit breaksubmit, String[] markIds,
			Float[] breakscounts, String pagestatus) {
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录";
		}
		if (breaksubmit != null && breaksubmit.getProcardId() != null
				&& breaksubmit.getProcessId() != null) {
			Procard procard = (Procard) totalDao.get(Procard.class, breaksubmit
					.getProcardId());
			ProcessInfor process = (ProcessInfor) totalDao.get(
					ProcessInfor.class, breaksubmit.getProcessId());
			ProcessInfor lastprocess = null;
			breaksubmit.setMarkId(procard.getMarkId());
			breaksubmit.setTjUsersId(user.getId());
			breaksubmit.setTjUsersName(user.getName());
			breaksubmit.setTjTime(Util.getDateTime());
			breaksubmit.setSelfcard(procard.getSelfCard());
			breaksubmit.setYwmarkId(procard.getYwMarkId());
			breaksubmit.setProName(procard.getProName());
			breaksubmit.setRootmarkId(procard.getRootMarkId());
			breaksubmit.setRootselfCard(procard.getRootSelfCard());
			String prologId = "";
			if ("本工序不合格".equals(breaksubmit.getBreakgroup())) {
				List<ProcessInforReceiveLog> proLogList = totalDao
						.query(
								" from ProcessInforReceiveLog where fk_processInforId = ?  and status = '领取' ",
								process.getId());
				for (ProcessInforReceiveLog processInforReceiveLog : proLogList) {
					prologId += "," + processInforReceiveLog.getId();
				}
				if (prologId != null && prologId.length() >= 1) {
					prologId = prologId.substring(1);
				}
				breaksubmit.setGongwei(process.getGongwei());
				breaksubmit.setProcessName(process.getProcessName());
				breaksubmit.setProcessNo(process.getProcessNO());
				breaksubmit.setPrologId(prologId);
			} else {
				lastprocess = (ProcessInfor) totalDao
						.getObjectByCondition(
								" from ProcessInfor where procard.id = ? and (dataStatus is null or dataStatus!='删除') and processNO<"
										+ process.getProcessNO()
										+ " order by processNO desc", procard
										.getId());
				if (lastprocess != null) {
					List<ProcessInforReceiveLog> proLogList = totalDao
							.query(
									" from ProcessInforReceiveLog where fk_processInforId = ? ",
									lastprocess.getId());
					for (ProcessInforReceiveLog processInforReceiveLog : proLogList) {
						prologId += "," + processInforReceiveLog.getId();
					}
					if (prologId != null && prologId.length() >= 1) {
						prologId = prologId.substring(1);
					}
					breaksubmit.setPrologId(prologId);
					breaksubmit.setProcessName(lastprocess.getProcessName());
					breaksubmit.setProcessNo(lastprocess.getProcessNO());
					breaksubmit.setProcessId(lastprocess.getId());
					breaksubmit.setGongwei(lastprocess.getGongwei());
				}

			}
			if ("外购件不合格".equals(breaksubmit.getType())) {
				if (markIds != null && markIds.length > 0) {
					Float maxbreakscount = 0f;
					Float[] zzbreakscounts = new Float[breakscounts.length];
					for (int i = 0; i < markIds.length; i++) {
						if (breakscounts[i] != null && breakscounts[i] > 0) {
							BreakSubmit breaksubmit1 = new BreakSubmit();
							Procard wgprocard = (Procard) totalDao
									.getObjectByCondition(
											" from Procard where fatherId = ? and markId = ?",
											procard.getId(), markIds[i]);
							BeanUtils.copyProperties(breaksubmit, breaksubmit1);
							breaksubmit1.setWgmarkId(markIds[i]);
							breaksubmit1.setTjbreakcount(breakscounts[i]);
							breaksubmit1.setTjtype("领取工序中");
							breaksubmit1.setWgproName(wgprocard.getProName());
							breaksubmit1.setWgselfcard(wgprocard.getSelfCard());
							totalDao.save(breaksubmit1);
							// 发消息给检验员;
							String hql_user = "SELECT u.id from Category c join c.userSet u where c.name=?";
							List<Integer> userIdList = totalDao.query(hql_user,
									wgprocard.getWgType());
							Integer[] userIds = null;
							if (userIdList != null && userIdList.size() > 0) {
								userIds = new Integer[userIdList.size()];
								for (int j = 0; j < userIdList.size(); j++) {
									userIds[i] = userIdList.get(j);
								}
							}
							AlertMessagesServerImpl.addAlertMessages("检验提醒",
									"员工:" + breaksubmit.getTjUsersName()
											+ "生产时发现外购件:" + markIds[i]
											+ "不合格，不合格数量:"
											+ breaksubmit1.getTjbreakcount()
											+ " 请及时检验确认!", userIds, "", true,
									"false");
						}
					}
				} else {
					return "请至少勾选一个外购件提交!";
				}
			} else {
				if ("本工序不合格".equals(breaksubmit.getBreakgroup())) {
					breaksubmit.setTjtype("领取工序中");
					totalDao.save(breaksubmit);
				} else {
					BreakSubmit oldBreakSubmit = (BreakSubmit) totalDao
							.getObjectByCondition(
									" from BreakSubmit where processId = ? and procardId = ? and breakgroup = '上工序不合格'",
									lastprocess.getId(), procard.getId());
					if (oldBreakSubmit != null) {
					} else {
						breaksubmit.setTjtype("领取工序前");
						totalDao.save(breaksubmit);
					}
				}

			}
			// 发消息给检验员
			if (!"外购件不合格".equals(breaksubmit.getType())) {
				String workPosition = process.getGongwei();
				Integer processNo = process.getProcessNO();
				if (lastprocess != null) {
					workPosition = lastprocess.getGongwei();
					processNo = lastprocess.getProcessNO();
				}
				List<Integer> userIdList = totalDao
						.query(
								"select u.id from Users u join u.machine m where m.workPosition = ?  ",
								workPosition);
				Integer[] userIds = null;
				if (userIdList != null && userIdList.size() > 0) {
					userIds = new Integer[userIdList.size()];
					for (int i = 0; i < userIdList.size(); i++) {
						userIds[i] = userIdList.get(i);
					}
				}
				AlertMessagesServerImpl.addAlertMessages("检验提醒", "工位:"
						+ workPosition + "生产时，员工:"
						+ breaksubmit.getTjUsersName() + "发现件号:"
						+ breaksubmit.getMarkId() + ",生产批次:"
						+ breaksubmit.getSelfcard() + ",工序号:" + processNo
						+ "。不合格，不合格数量:" + breaksubmit.getTjbreakcount()
						+ " 请及时检验确认!", userIds, "", true, "false");
			}
			return "true";

		}
		return null;
	}

	@Override
	public Object[] bhgNumPd(BreakSubmit breaksubmit) {
		String msg = "";
		float tjbreakcount = 0f;
		if (breaksubmit != null) {
			ProcessInfor process = (ProcessInfor) totalDao.get(
					ProcessInfor.class, breaksubmit.getProcessId());
			if ("上工序不合格".equals(breaksubmit.getBreakgroup())) {
				ProcessInfor lastprocess = (ProcessInfor) totalDao
						.getObjectByCondition(
								" from ProcessInfor where procard.id = ? and processNO<"
										+ process.getProcessNO()
										+ " order by processNO desc", process
										.getProcard().getId());
				if (lastprocess != null) {
					if (breaksubmit.getTjbreakcount() > lastprocess
							.getSubmmitCount()) {
						msg = "不合格数量不能大于已提交数量";
					}
				}
			} else {
				if (breaksubmit.getWgmarkId() != null
						&& breaksubmit.getWgmarkId().length() > 0) {
					Procard wgprocard = (Procard) totalDao
							.getObjectByCondition(
									" from Procard where procard.id =? and markId = ? ",
									process.getProcard().getId(), breaksubmit
											.getWgmarkId());
					if (wgprocard != null) {
						float ylNumber = wgprocard.getFilnalCount()
								- (wgprocard.getHascount() == null ? 0
										: wgprocard.getHascount());
						tjbreakcount = breaksubmit.getTjbreakcount();
						if (tjbreakcount > ylNumber) {
							msg = "不合格数量不能大于已领数量";
						}
					} else {
						msg = "未查询到件号:" + breaksubmit.getWgmarkId() + "信息";
					}
				} else {
					if (breaksubmit.getTjbreakcount() > (process
							.getApplyCount() - process.getSubmmitCount())) {
						msg = "不合格数量不能大于当前已领未提交数量";
					}
				}

			}
		}
		return new Object[] { msg, tjbreakcount };
	}

	/***
	 * 显示试算页面
	 */
	public String packageData(Integer id, Map map) {
		int count = 1;
		DataGrid dg = new DataGrid();
		int length = 1;
		// 查询所有零组件信息
		String hql = "from Procard where rootId=? order by belongLayer";
		List<Procard> proTemList = totalDao.query(hql, id);
		length += proTemList.size();
		for (Procard proTem : proTemList) {

			// 组装零件信息
			VOProductTree part = new VOProductTree(count++, proTem.getMarkId(),
					proTem.getProName(), 0D, null, proTem.getId());
			// 获得零件对应工序信息
			Set<ProcessInfor> processTemSet = proTem.getProcessInforSet();
			if (processTemSet != null && processTemSet.size() > 0) {
				length += processTemSet.size();
				for (ProcessInfor processTem : processTemSet) {
					// 数据有效性效验
					Double OPLabourBeat = 0.0; // 人工节拍
					Double OPEquipmentBeat = 0.0; // 设备节拍
					Double PRLabourBeat = 0.0; // 人工节拍
					Double PRPrepareIndex = 0.0; // 准备次数
					if (processTem.getOpcaozuojiepai() != null)
						OPLabourBeat = processTem.getOpcaozuojiepai()
								.doubleValue();
					if (processTem.getOpshebeijiepai() != null)
						OPEquipmentBeat = processTem.getOpshebeijiepai()
								.doubleValue();
					if (processTem.getGzzhunbeijiepai() != null)
						PRLabourBeat = processTem.getGzzhunbeijiepai()
								.doubleValue();
					if (processTem.getGzzhunbeicishu() != null)
						PRPrepareIndex = processTem.getGzzhunbeicishu()
								.doubleValue();

					VOProductTree process = null;
					if (map != null && map.size() > 0) {
						DTOProcess dto = (DTOProcess) map.get(processTem
								.getId());
						process = new VOProductTree(count++, processTem
								.getProcessName(), processTem.getProcessNO()
								.toString(), processTem.getShebeiNo(), dto
								.getOPLabourBeat(), dto.getOPEquipmentBeat(),
								dto.getPRLabourBeat(), dto.getPRPrepareTIme(),
								dto.getHandlers(), 0D, part.getId(), processTem
										.getId(), "PR", dto.getSumMoney(), dto
										.getUnitPrice(), dto.getJobNum());
					} else {
						String jymes = "";
						if ("yes".equals(processTem.getZjStatus())
								&& processTem.getStatus() != "初始") {
							jymes = "<a href='LogoStickerAction!findLogoSticker.action?tag=manger&sticker.lotId="
									+ proTem.getSelfCard()
									+ "&sticker.markId="
									+ proTem.getMarkId()
									+ "&sticker.processNO="
									+ processTem.getProcessNO() + "'>检</a>";
						} else {
							jymes = "<font color='gray'>检</font>";
						}
						process = new VOProductTree(count++, processTem
								.getProcessName(),
								processTem.getGongwei() == null ? ""
										: processTem.getGongwei().toString(),
								processTem.getShebeiNo(), OPLabourBeat,
								OPEquipmentBeat, PRLabourBeat, PRPrepareIndex,
								processTem.getUsernames(), 0D, part.getId(),
								processTem.getId(), "PR", null, null,
								processTem.getAllJiepai() + "", processTem
										.getFirstApplyDate(), processTem
										.getSubmitDate(), jymes, "");
					}
					part.getChildren().add(process);
				}
			}
			dg.getRows().add(part);
		}
		dg.setTotal(new Long(length));
		String jsonStr = JSON.toJSON(dg).toString();
		return jsonStr;
	}

	/***
	 * 件号批次查询产品信息(总成)
	 * 
	 * @param markId
	 * @param selfCard
	 * @return
	 */
	@Override
	public Procard findProcardForQx(Procard procard, Integer goodsBzsqId) {
		String hql = "";
		if (null != procard) {
			hql = totalDao.criteriaQueries(procard, null);
			return (Procard) totalDao.getObjectByCondition(hql);
		}
		if (null != goodsBzsqId) {
			Goods_bzsq gbzsq = (Goods_bzsq) totalDao.getObjectById(
					Goods_bzsq.class, goodsBzsqId);
			if (gbzsq != null) {
				return (Procard) totalDao.getObjectByCondition(
						"from Procard where markId=? and selfCard=?", gbzsq
								.getMarkId(), gbzsq.getSelfCard());
			}
		}

		return null;
	}

	/***
	 * 订单信息
	 * 
	 * @param markId
	 * @param selfCard
	 * @return
	 */
	@Override
	public OrderManager findOrderManagerById(Integer id) {
		return (OrderManager) totalDao.getObjectById(OrderManager.class, id);
	}

	/***
	 * 订单信息
	 * 
	 * @param markId
	 * @param selfCard
	 * @return
	 */
	@Override
	public OrderManager findOrderManagerByIoId(Integer id) {
		String hql = "from OrderManager where id in (select u.id from OrderManager u join u.innerOrders f  where f.id =?)";
		return (OrderManager) totalDao.getObjectByCondition(hql, id);

	}

	@Override
	public List<ProcessinforFuLiao> fuliaoTiaobaoList() {
		String hql = "from ProcessinforFuLiao";
		List<ProcessinforFuLiao> list = totalDao.find(hql);
		for (ProcessinforFuLiao p : list) {
			p.setProcessNO(p.getProcessInfor().getProcessNO());
			p.setMarkId(p.getProcessInfor().getProcard().getMarkId());
		}
		return list;
	}

	public boolean exportFuliaoList() {
		List<ProcessinforFuLiao> list = fuliaoTiaobaoList();
		try {
			HttpServletResponse response = (HttpServletResponse) ActionContext
					.getContext().get(ServletActionContext.HTTP_RESPONSE);
			OutputStream os = response.getOutputStream();
			response.reset();
			response.setHeader("Content-disposition", "attachment; filename="
					+ new String("辅料填报列表".getBytes("GB2312"), "8859_1")
					+ ".xls");
			response.setContentType("application/msexcel");
			WritableWorkbook wwb = Workbook.createWorkbook(os);
			WritableSheet ws = wwb.createSheet("辅料填报列表", 0);
			ws.addCell(new Label(0, 0, "件号"));
			ws.addCell(new Label(1, 0, "工序号"));
			ws.addCell(new Label(2, 0, "名称"));
			ws.addCell(new Label(3, 0, "规格"));
			ws.addCell(new Label(4, 0, "用量"));
			ws.addCell(new Label(5, 0, "填报人"));
			for (int i = 0; i < list.size(); i++) {
				ProcessinforFuLiao p = (ProcessinforFuLiao) list.get(i);
				ws.addCell(new Label(0, i + 1, p.getProcessInfor().getProcard()
						.getMarkId()));
				ws.addCell(new Label(1, i + 1, p.getProcessInfor()
						.getProcessNO().toString()));
				ws.addCell(new Label(2, i + 1, p.getName()));
				ws.addCell(new Label(3, i + 1, p.getSpecification()));
				ws.addCell(new Label(4, i + 1, p.getTotalCount().toString()));
				ws.addCell(new Label(5, i + 1, p.getAddUser()));
			}
			wwb.write();
			wwb.close();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (WriteException e) {
			e.printStackTrace();
		}
		return true;
	}

	@Override
	public void copyWaigouDeliveryDetailcq() {
		// TODO Auto-generated method stub
		List<WaigouDeliveryDetail> wgdetailList = totalDao
				.query("from WaigouDeliveryDetail");
		for (WaigouDeliveryDetail wgDetail : wgdetailList) {
			try {
				WaigouPlan wgplan = (WaigouPlan) totalDao.getObjectById(
						WaigouPlan.class, wgDetail.getWaigouPlanId());
				String palnNumber = wgDetail.getWaigouDelivery()
						.getPlanNumber();
				if (wgplan != null && wgplan.getWlWeizhiDt() != null
						&& wgplan.getWlWeizhiDt().contains(palnNumber)) {
					String[] wlwzs = wgplan.getWlWeizhiDt().split("<hr/>");
					String cq = null;
					for (String wz : wlwzs) {
						if (wz.contains(palnNumber) && !wz.contains("送货中")) {
							String wz0 = wz.substring(0, wz.lastIndexOf("-"));
							String wz1 = wz0.substring(
									wz0.lastIndexOf("-") + 1, wz0.length());
							cq = wz1;
						}
					}
					wgDetail.setChangqu(cq);
					totalDao.update(wgDetail);
				}
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		}
	}

	@Override
	public Object[] findbreaksubmitByprocesId(Integer id) {
		String hql = " from BreakSubmit where processId = ? and breakgroup = '上工序不合格' and qrbreakcount is null   ";
		BreakSubmit breaksubmit = (BreakSubmit) totalDao.getObjectByCondition(
				hql, id);
		ProcessInfor processinfor = (ProcessInfor) totalDao.get(
				ProcessInfor.class, id);
		Integer processId = (Integer) totalDao
				.getObjectByCondition(
						" select id from ProcessInfor where procard.id =? and (dataStatus is null or dataStatus!='删除')  order by  processNO  ",
						processinfor.getProcard().getId());
		boolean bool = false;
		if (id.equals(processId)) {
			bool = true;
		}
		return new Object[] { breaksubmit, bool };
	}

	@Override
	public void setMachineJdl() {
		List<ProcessInfor> processInforList = totalDao
				.query("from ProcessInfor where firstApplyDate>'2016-06-30 23:59:59' and (dataStatus is null or dataStatus!='删除') and nowAllJiepai is not null and shebeiNo is not null and shebeiNo!='' and shebeiNo is not null and shebeiNo!='manual' order by shebeiNo,firstApplyDate");
		MachineDayYZSJ md = null;
		for (ProcessInfor process : processInforList) {
			String date = process.getFirstApplyDate().substring(0, 10);
			if (md == null || !md.getMachineNo().equals(process.getShebeiNo())
					|| !md.getMachineday().equals(date)) {
				md = (MachineDayYZSJ) totalDao
						.getObjectByCondition(
								"from MachineDayYZSJ where machineNo=? and machineday=?",
								process.getShebeiNo(), date);
				if (md == null) {// 系统当前没有
					Integer mId = (Integer) totalDao.getObjectByCondition(
							"select id from Machine where no=?", process
									.getShebeiNo());
					if (mId != null) {
						md = new MachineDayYZSJ();
						md.setMachineNo(process.getShebeiNo());// 设备编号;
						md.setMachineday(date);// 设备点检日期;
						md.setMachineMonth(date.substring(0, 7));// 设备点检月份;
						md.setMachine_id(mId);// 设备Id
						Float time = process.getNowAllJiepai() / 3600;
						if (time > 8) {
							time = 8f;
						}
						md.setMachineYZSJ((double) time);// 设备运转时间;
						md.setMachineYZSJ2((double) time);// 计算工序得到的设备运转时间
						md.setMachineWXSJ(0d);// 设备维修时间;
						md.setMachineTZSJ((double) (8 - time));// 设备停转时间;
						md.setJiadonglv((time * 100 / 8) + "%");// 稼动率;（总运转时间/24h）
						totalDao.save(md);
					}
				} else {
					if (md.getMachineYZSJ2() == null) {
						md.setMachineYZSJ2(0d);
					}
					Double time = md.getMachineYZSJ2()
							+ process.getNowAllJiepai() / 3600;
					if (time > 8) {
						time = 8d;
					}
					md.setMachineYZSJ2((double) time);// 计算工序得到的设备运转时间
					totalDao.update(md);
				}
			} else {
				if (md.getMachineYZSJ2() == null) {
					md.setMachineYZSJ2(0d);
				}
				Double time = md.getMachineYZSJ2() + process.getNowAllJiepai()
						/ 3600;
				if (time > 8) {
					time = 8d;
				}
				md.setMachineYZSJ2((double) time);// 计算工序得到的设备运转时间
				totalDao.update(md);
			}

		}
	}

	@Override
	public Object[] findbreaksubmitList(BreakSubmit breakSubmit, String status,
			int parseInt, int pageSize) {
		if (breakSubmit == null) {
			breakSubmit = new BreakSubmit();
		}
		String hql = totalDao.criteriaQueries(breakSubmit, null);
		if ("zzsj".equals(status)) {
			hql += " and tjtype in('领取工序中','领取工序前','提交工序时') and type='零件损坏'  and qrbreakcount is null ";
		} else if ("wgsj".equals(status)) {
			hql += " and tjtype in('领取工序中','领取工序前','提交工序时') and type='外购件不合格'  and qrbreakcount is null ";
		}
		List<BreakSubmit> breList = totalDao.findAllByPage(hql
				+ " order by id desc", parseInt, pageSize, null);
		for (BreakSubmit breakSubmit2 : breList) {
			Procard procard = (Procard) totalDao.get(Procard.class,
					breakSubmit2.getProcardId());
			breakSubmit2.setRootmarkId(procard.getRootMarkId());
			breakSubmit2.setRootselfCard(procard.getRootSelfCard());
		}
		int count = totalDao.getCount(hql);
		return new Object[] { breList, count };
	}

	@Override
	public BreakSubmit findBreakSubmitById(Integer id) {
		if (id != null) {
			return (BreakSubmit) totalDao.get(BreakSubmit.class, id);
		}
		return null;
	}

	@Override
	public List<ProcessInforReceiveLog> findpersonLiableList(
			BreakSubmit breakSubmit) {
		List<ProcessInforReceiveLog> prologList = new ArrayList<ProcessInforReceiveLog>();
		if (breakSubmit != null && breakSubmit.getPrologId() != null
				&& breakSubmit.getPrologId().length() > 0) {
			String[] prologIds = breakSubmit.getPrologId().split("、");
			if (prologIds != null && prologIds.length > 0) {
				for (int i = 0; i < prologIds.length; i++) {
					ProcessInforReceiveLog prolog = (ProcessInforReceiveLog) totalDao
							.get(ProcessInforReceiveLog.class, Integer
									.parseInt(prologIds[i]));
					prologList.add(prolog);
				}
			}
		}
		return prologList;
	}

	@Override
	public String choseUsers(BreakSubmit breakSubmit) {
		String msg = "";
		if (breakSubmit != null && breakSubmit.getId() != null) {
			BreakSubmit oldbreak = (BreakSubmit) totalDao.get(
					BreakSubmit.class, breakSubmit.getId());
			Integer prologId = null;
			if (breakSubmit.getPrologId() != null
					&& breakSubmit.getPrologId().length() > 0) {
				try {
					prologId = Integer.parseInt(breakSubmit.getPrologId());
					ProcessInforReceiveLog prolog = (ProcessInforReceiveLog) totalDao
							.get(ProcessInforReceiveLog.class, prologId);
					oldbreak.setPersonLiable(prolog.getUsernames());
					oldbreak.setCodeLiable(prolog.getUsercodes());
					oldbreak.setCardIdLiable(prolog.getUserCardId());
					msg = totalDao.update(oldbreak) + "";
				} catch (Exception e) {
					msg = "error";
				}
			}

		}
		return msg;
	}

	@Override
	public String fanxiu(BreakSubmit breakSubmit) {
		if (breakSubmit != null && breakSubmit.getId() != null) {
			BreakSubmit oldbreak = (BreakSubmit) totalDao.get(
					BreakSubmit.class, breakSubmit.getId());
			if ("返修".equals(oldbreak.getClResult())) {
				if ("已返修".equals(oldbreak.getHxStatus())) {
					return "该记录已返修过。请勿重复返修。";
				}
				// 不合格品出库
				String markId = oldbreak.getMarkId();
				Float num = oldbreak.getQrbreakcount();
				Procard procard = (Procard) totalDao.get(Procard.class,
						oldbreak.getProcardId());
				if ("外购件不合格".equals(oldbreak.getType())) {
					markId = oldbreak.getWgmarkId();
					procard = (Procard) totalDao.getObjectByCondition(
							" from Procard where markId = ? and fatherId=? ",
							markId, procard.getId());
				}
				String hql_goods = " from Goods where goodsClass = '不合格品库' and  goodsMarkId = ? and goodsLotId = ?  and  goodsCurQuantity >0";
				if (procard != null) {
					if (procard.getBanBenNumber() != null
							&& procard.getBanBenNumber().length() > 0) {
						hql_goods += " and banBenNumber =  '"
								+ procard.getBanBenNumber() + "'";
					}
					if (procard.getKgliao() != null
							&& procard.getKgliao().length() > 0) {
						hql_goods += " and kgliao =  '" + procard.getKgliao()
								+ "'";
					}
				}

				Goods goods = (Goods) totalDao.getObjectByCondition(hql_goods,
						markId, procard.getSelfCard());
				if (goods != null) {
					Sell sell = new Sell();
					sell.setSellWarehouse("不合格品库");// 库别
					sell.setSellMarkId(goods.getGoodsMarkId());// 件号
					sell.setBanBenNumber(goods.getBanBenNumber());// 版本号
					sell.setKgliao(goods.getKgliao());// 供料属性
					sell.setSellLot(goods.getGoodsLotId());// 批次
					sell.setWgType(goods.getWgType());// 物料类别
					sell.setSellGoods(goods.getGoodsFullName());// 品名
					sell.setSellFormat(goods.getGoodsFormat());// 规格
					sell.setSellCount(num);// 出库数量
					sell.setSellUnit(goods.getGoodsUnit());// 单位
					sell.setSellDate(Util.getDateTime());// 日期
					sell.setProcessNo(goods.getProcessNo());// 工序号
					sell.setProcessName(goods.getProcessName());// 工序号
					sell.setStyle("返修出库");
					sell.setTuhao(goods.getTuhao());// 图号
					sell.setPrintStatus("YES");
					totalDao.save(sell);
					goods
							.setGoodsCurQuantity(goods.getGoodsCurQuantity()
									- num);
					totalDao.update(goods);
				}
				// 返回数据
				ProcessInfor process = (ProcessInfor) totalDao.get(
						ProcessInfor.class, oldbreak.getProcessId());
				if ("零件损坏".equals(oldbreak.getType())) {
					// 由不合格品库转到正常库存
					// 出库

					// 入库
				} else {
					process.setBreakCount(process.getBreakCount() - num);
					process.setSubmmitCount(process.getSubmmitCount() + num);
					totalDao.update(process);
					// 返回下层工序的可领数量
					String afterhql = " from ProcessInfor where procard.id = ? and (dataStatus is null or dataStatus!='删除') and processNO >?";
					List<ProcessInfor> processList = totalDao.query(afterhql,
							procard.getId(), process.getProcessNO());
					if (processList != null && processList.size() > 0) {
						for (ProcessInfor processInfor : processList) {
							processInfor.setApplyCount(processInfor
									.getApplyCount()
									- num);
							processInfor.setTotalCount(processInfor
									.getTotalCount()
									+ num);
							processInfor.setApplyCount(processInfor
									.getApplyCount()
									- num);
							totalDao.update(processInfor);
						}
					}
				}
				// 记录返修人
				List<Users> listUser = new ArrayList<Users>();
				if (breakSubmit.getFanxiuCode() != null
						&& breakSubmit.getFanxiuCode().length() > 0) {
					String[] fanxiuCode = breakSubmit.getFanxiuCode()
							.split("、");
					String hql = " from Users where 1=1  and code in (";
					String str1 = "";
					for (int i = 0; i < fanxiuCode.length; i++) {
						str1 += ",'" + fanxiuCode[i] + "'";
					}
					if (str1.length() > 0) {
						str1 = str1.substring(1) + ")";
					}
					hql += str1;
					listUser = totalDao.query(hql);
					String fanxiuCardId = "";
					String fanxiuUsers = "";
					if (listUser != null && listUser.size() > 0) {
						for (Users users : listUser) {
							fanxiuCardId += "、" + users.getCardId();
							fanxiuUsers += "、" + users.getName();
						}
					}
					if (fanxiuCardId.length() > 0) {
						fanxiuCardId = fanxiuCardId.substring(1);
					}
					if (fanxiuUsers.length() > 0) {
						fanxiuUsers = fanxiuUsers.substring(1);
					}

					oldbreak.setFanxiuCode(breakSubmit.getFanxiuCode());
					oldbreak.setFanxiuCardId(fanxiuCardId);
					oldbreak.setFanxiuUsers(fanxiuUsers);
					oldbreak.setHxStatus("已返修");
					return totalDao.update(oldbreak) + "";
				} else {
					return "请先填写返修人工号!";
				}
			} else {
				return "该记录的处理结果不为返修，或尚未有处理结果。";
			}
		}
		return null;
	}

	@Override
	public Object[] finddllProcard(Integer rootId, int pageNo) {
		if (rootId != null) {
			String hql = " from Procard where rootId = ? and procardStyle = ? and jiaoliaoStatus not in ('待备料','待领料') and hascount>0";
			String hql_wg = hql
					+ " and fatherId in (select id  from Procard where status in ('已发卡','已发料','领功序') and jihuoStatua = '激活') ";
			List<Procard> wgList = totalDao.findAllByPage(hql_wg, pageNo, 8,
					rootId, "外购");
			String hql_zz = hql
					+ " and  id in (select procard.id from ProcessInfor where needSave = '是' and (dataStatus is null or dataStatus!='删除')) and status in ('已发卡','已发料','领功序') and jihuoStatua = '激活' ";
			List<Procard> zzList = totalDao.findAllByPage(hql_zz, pageNo, 7,
					rootId, "自制");
			if (wgList != null && wgList.size() > 0) {
				wgList.addAll(zzList);
			}
			for (int i = (wgList.size() - 1); i >= 0; i--) {
				Procard procard = wgList.get(i);
				String hql_goods = " from Goods where goodsMarkId = ? and goodsCurQuantity >0 ";
				if ("外购".equals(procard.getProcardStyle())) {
					hql_goods += " and  goodsClass = '外购件库'";
				} else if ("自制".equals(procard.getProcardStyle())) {
					hql_goods += " and  goodsClass = '半成品库'";
				}
				if (procard.getBanBenNumber() != null
						&& procard.getBanBenNumber().length() > 0) {
					hql_goods += " and banBenNumber = '"
							+ procard.getBanBenNumber() + "'";
				} else {
					hql_goods += " and (banBenNumber is null or banBenNumber = '')";
				}
				Goods goods = (Goods) totalDao.getObjectByCondition(hql_goods,
						procard.getMarkId());
				if (goods != null) {
					procard.setCangqu(goods.getGoodHouseName());// 仓区
				}
			}
			int count = totalDao.getCount(hql_wg, rootId, "外购")
					+ totalDao.getCount(hql_wg, rootId, "自制");
			return new Object[] { wgList, count };
		}
		return null;
	}

	@Override
	public void setRuKuProcess() {
		// TODO Auto-generated method stub
		String hq_ProcessGzstore = "from ProcessGzstore where processName='入库'";
		ProcessGzstore processGzstore = (ProcessGzstore) totalDao
				.getObjectByCondition(hq_ProcessGzstore);
		List<ProcardTemplate> ptList = totalDao
				.query("from ProcardTemplate where procardStyle='总成' and (banbenStatus is null or banbenStatus !='历史') and id not "
						+ "in(select procardTemplate.id from ProcessTemplate where processName='入库')");
		String addTime = Util.getDateTime();
		if (ptList != null && ptList.size() > 0) {
			for (ProcardTemplate pt : ptList) {
				Set<ProcessTemplate> processSet = pt.getProcessTemplate();
				Integer maxProcessNo = 0;
				if (processSet != null && processSet.size() > 0) {
					for (ProcessTemplate process : processSet) {
						if (process.getProcessNO() > maxProcessNo) {
							maxProcessNo = process.getProcessNO();
						}
					}
				}
				maxProcessNo++;
				ProcessTemplate processTemplate = new ProcessTemplate();
				BeanUtils.copyProperties(processGzstore, processTemplate,
						new String[] { "id" });
				processTemplate.setAddTime(addTime);
				processTemplate.setAddUser("admin");
				processTemplate.setProcessNO(maxProcessNo);
				// processTemplate
				// .setProcessExplain(processExplain);
				processTemplate.setProcardTemplate(pt);
				processSet.add(processTemplate);
				totalDao.update(pt);
			}
		}
	}

	@Override
	public void exportExcelumd(UserMoneyDetail umd, String pageStatus,
			String firstTime, String endTime) {
		if (umd != null) {
			String str = "";
			if (umd.getGongwei() != null && umd.getGongwei().length() > 0) {
				String[] strarray = umd.getGongwei().split(",");
				if (strarray != null && strarray.length > 0) {
					String str1 = "";
					for (int i = 0; i < strarray.length; i++) {
						str1 += "," + "'" + strarray[i] + "'";
					}
					if (str1 != null && str1.length() > 1) {
						str1 = str1.substring(1);
						str += " and (gongwei in (" + str1
								+ ") or gongwei like '%" + umd.getGongwei()
								+ "%')";
					}
				}
				umd.setGongwei(null);
			}
			String hql = totalDao.criteriaQueries(umd, "addTime", new String[] {
					firstTime, endTime }, null);
			hql += str
					+ " order by  addTime,markId,userMonthMoney.username desc";
			List<UserMoneyDetail> umdList = totalDao.query(hql);
			try {
				HttpServletResponse response = (HttpServletResponse) ActionContext
						.getContext().get(StrutsStatics.HTTP_RESPONSE);
				OutputStream os = response.getOutputStream();
				response.reset();
				response.setHeader("Content-disposition",
						"attachment; filename="
								+ new String("生产奖金分配明细".getBytes("GB2312"),
										"8859_1") + ".xls");
				response.setContentType("application/msexcel");
				WritableWorkbook wwb = Workbook.createWorkbook(os);
				WritableSheet ws = wwb.createSheet("生产奖金分配明细", 0);
				ws.setColumnView(0, 16);
				ws.setColumnView(1, 16);
				ws.setColumnView(2, 18);
				ws.setColumnView(4, 24);
				ws.setColumnView(5, 20);
				ws.setColumnView(6, 12);
				ws.setColumnView(13, 16);
				ws.setColumnView(18, 25);
				ws.addCell(new Label(0, 0, "序号"));
				ws.addCell(new Label(1, 0, "员工姓名"));
				ws.addCell(new Label(2, 0, "内部订单号"));
				ws.addCell(new Label(3, 0, "总成件号"));
				ws.addCell(new Label(4, 0, "业务件号"));
				ws.addCell(new Label(5, 0, "总成批次"));
				ws.addCell(new Label(6, 0, "零件件号"));
				ws.addCell(new Label(7, 0, "零件名称"));
				ws.addCell(new Label(8, 0, "生产类型"));
				ws.addCell(new Label(9, 0, "工序号"));
				ws.addCell(new Label(10, 0, "工序名"));
				ws.addCell(new Label(11, 0, "工位"));
				ws.addCell(new Label(12, 0, "投产时间"));
				ws.addCell(new Label(13, 0, "领取时间"));
				ws.addCell(new Label(14, 0, "提交时间"));
				ws.addCell(new Label(15, 0, "订单数量"));
				ws.addCell(new Label(16, 0, "提交数量"));
				ws.addCell(new Label(17, 0, "扣除奖金"));
				ws.addCell(new Label(18, 0, "本次奖金"));
				if ("gc".equals(pageStatus)) {
					ws.addCell(new Label(18, 0, "工厂奖金"));
				}

				DecimalFormat df = new DecimalFormat("#.##");
				for (int i = 0; i < umdList.size(); i++) {
					UserMoneyDetail umd1 = (UserMoneyDetail) umdList.get(i);
					ws.addCell(new Label(0, i + 1, i + 1 + ""));
					ws.addCell(new Label(1, i + 1, umd1.getUserMonthMoney()
							.getUsername()));
					ws.addCell(new Label(2, i + 1, umd1.getOrderNumber()));
					ws.addCell(new Label(3, i + 1, umd1.getMarkIdRoot()));
					ws.addCell(new Label(4, i + 1, umd1.getYwmarkId()));
					ws.addCell(new Label(5, i + 1, umd1.getSelfCard()));
					ws.addCell(new Label(6, i + 1, umd1.getMarkId()));
					ws.addCell(new Label(7, i + 1, umd1.getProName()));
					ws.addCell(new Label(8, i + 1, umd1.getProductStyle()));
					ws.addCell(new Label(9, i + 1, umd1.getProcessNO() + ""));
					ws.addCell(new Label(10, i + 1, umd1.getProcessName()));
					ws.addCell(new Label(11, i + 1, umd1.getGongwei()));
					ws.addCell(new Label(12, i + 1, umd1.getTcTime()));
					ws.addCell(new Label(13, i + 1, umd1.getFirstApplyDate()));
					ws.addCell(new Label(14, i + 1, umd1.getSubmitDate()));
					Float submmitCount = 0f;
					if (umd1.getSubmmitCount() != null) {
						submmitCount = Float.parseFloat(df.format(umd1
								.getSubmmitCount()));
					}
					ws.addCell(new jxl.write.Number(15, i + 1, umd1
							.getOrderNum()));
					ws.addCell(new jxl.write.Number(16, i + 1, submmitCount));
					Float nowKcMoney = 0f;
					if (umd1.getNowKcMoney() != null) {
						submmitCount = Float.parseFloat(df.format(umd1
								.getNowKcMoney()));
					}
					ws.addCell(new jxl.write.Number(17, i + 1, nowKcMoney));
					Float nowMoney = 0f;
					if (umd1.getNowMoney() != null) {
						nowMoney = Float.parseFloat(df.format(umd1
								.getNowMoney()));
					}
					ws.addCell(new jxl.write.Number(18, i + 1, nowMoney));
					if ("gc".equals(pageStatus)) {
						Float processjjAllMoneygc = 0f;
						if (umd1.getProcessjjAllMoneygc() != null) {
							nowMoney = Float.parseFloat(df.format(umd1
									.getProcessjjAllMoneygc()));
						}
						ws.addCell(new jxl.write.Number(18, i + 1,
								processjjAllMoneygc));
					}
				}
				wwb.write();
				wwb.close();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (WriteException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public List<String> findAllgongwei() {
		String hql = "select workPosition from Machine group by workPosition";
		return totalDao.query(hql);
	}

	/***
	 * 调整生产及激活时间
	 * 
	 * @param pageProcard
	 * @return
	 */
	@Override
	public boolean updateProcardForTime(Procard pageProcard) {
		if (pageProcard.getId() != null && pageProcard.getId() > 0) {
			Procard procard = (Procard) totalDao.getObjectById(Procard.class,
					pageProcard.getId());
			if (procard != null) {
				procard.setJihuoDate(pageProcard.getJihuoDate());
				try {
					jihuoProcardForPlan(procard, false);
					return true;
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return false;
	}

	/***
	 * 调整是否领料
	 * 
	 * @param pageProcard
	 * @return
	 */
	@Override
	public boolean updateProcardForLingliao(Procard pageProcard) {
		if (pageProcard.getId() != null && pageProcard.getId() > 0) {
			Procard procard = (Procard) totalDao.getObjectById(Procard.class,
					pageProcard.getId());
			if (procard != null) {
				procard.setRemark(pageProcard.getRemark());
				if ("删除".equals(pageProcard.getSbStatus())) {
					// 删除零件
					if (procard.getStatus().equals("完成")
							|| procard.getStatus().equals("已发料")
							|| procard.getStatus().equals("领工序")) {
						return false;
					} else {
						if (procard.getHascount() != null
								&& procard.getHascount() < procard
										.getKlNumber()) {
							return false;
						}
					}
					procard.setSbStatus("删除");
					procard.setProcard(null);
					if (procard.getFatherId() != null) {
						procard.setOldFatherId(procard.getFatherId());
						procard.setOldRootId(procard.getRootId());
					}
					procard.setFatherId(null);
					procard.setRootId(null);
					// 遍历下层零件设置设变属性为删除
					Set<Procard> sonSet = procard.getProcardSet();
					if (sonSet != null && sonSet.size() > 0) {
						for (Procard son : sonSet) {
							deleteDownProcard(son, Util.getDateTime());
						}
					}
					totalDao.update(procard);

				}

				// 采购状态
				if ("否".equals(pageProcard.getCgStatus())) {
					procard.setCgNumber(null);
					procard.setCgStatus(pageProcard.getCgStatus());
				} else if ("是".equals(pageProcard.getCgStatus())
						&& "否".equals(procard.getCgStatus())) {
					procard.setCgNumber(0F);
					procard.setWlstatus("");
					procard.setGongwei("");
					procard.setCgStatus(pageProcard.getCgStatus());
				}

				// 领料状态
				String lingliaos = procard.getLingliaostatus();

				if ("否".equals(pageProcard.getLingliaostatus())) {
					procard.setLingliaostatus(pageProcard.getLingliaostatus());
				} else {
					procard.setLingliaostatus("是");
				}
				// 设置为不领料,启动激活
				if ("否".equals(procard.getLingliaostatus())
						&& "是".equals(lingliaos)) {
					if ("激活".equals(procard.getJihuoStatua())) {
						procard.setCgNumber(null);
						procard.setWlstatus("入库");
						procard.setGongwei("虚拟");
						procard.setJihuoStatua("激活");
						procard.setStatus("完成");
						procard.setKlNumber(procard.getFilnalCount());
						procard.setHascount(0F);
						procard.setTjNumber(procard.getFilnalCount());
						Float minNumber1 = procard.getFilnalCount()
								/ procard.getQuanzi2() * procard.getQuanzi1();
						if (minNumber1 % 1 > 0.95) {
							minNumber1 = (float) Math.ceil(minNumber1);
						} else {
							minNumber1 = (float) Math.floor(minNumber1);
						}
						procard.setMinNumber(minNumber1);
						procard.setDhNumber(procard.getFilnalCount());
						totalDao.update(procard);
						Procard fatherProcard = procard.getProcard();
						Float llCount = (Float) totalDao
								.getObjectByCondition(
										"select count(*) from Procard where procard.id=? and id<>?  "
												+ " and procardStyle='外购' "
												+ " and (needProcess is null or needProcess !='yes') and (lingliaostatus is null or lingliaostatus!='否')",
										procard.getFatherId(), procard.getId());
						if (llCount != null && llCount > 0) {
							fatherProcard.setLingliaostatus("是");
						} else {
							fatherProcard.setLingliaostatus("否");
						}

						String hql_process = "from ProcessInfor where procard.id=?";
						List<ProcessInfor> list_process = totalDao.query(
								hql_process, fatherProcard.getId());
						// 首次设置为已发料，统一设置工序的可领数量
						if ("已发卡".equals(fatherProcard.getStatus())) {
							fatherProcard.setStatus("已发料");
							for (ProcessInfor processInfor : list_process) {
								processInfor.setTotalCount(0F);
								totalDao.update(processInfor);
							}
						}
						// 更新整体可领数量
						String minnumbers_sql = "select min(minNumber) from Procard where fatherId=? and (sbStatus is null or sbStatus !='删除') ";
						Float minNumber = (Float) totalDao
								.getObjectByCondition(minnumbers_sql,
										fatherProcard.getId());
						if (minNumber == null) {
							minNumber = 0F;
						}
						if (fatherProcard.getWwblCount() != null
								&& fatherProcard.getWwblCount() < minNumber) {
							minNumber -= fatherProcard.getWwblCount();
						} else if (fatherProcard.getWwblCount() != null
								&& fatherProcard.getWwblCount() > minNumber) {
							minNumber = fatherProcard.getWwblCount();
						}
						// 查询零件对应工序
						String hql_glprocess = "select processNo from ProcessAndWgProcardTem where procardMarkId=? and wgprocardMardkId=?";
						Integer processNofrom = (Integer) totalDao
								.getObjectByCondition(hql_glprocess,
										fatherProcard.getMarkId(), procard
												.getMarkId());
						if (processNofrom == null) {
							processNofrom = 0;
						}

						// /*** 同步设置工序的可领总数量 ***/
						for (ProcessInfor processInfor : list_process) {
							if (processNofrom.equals(processInfor
									.getProcessNO())) {
								processInfor.setTotalCount(procard
										.getMinNumber().intValue());
							} else {
								if (minNumber > processInfor.getTotalCount()) {
									Double max = Math.ceil(minNumber
											.doubleValue());
									Double min = Math.floor(minNumber
											.doubleValue());
									if (max - minNumber < 0.005) {
										minNumber = max.floatValue();
									} else if (minNumber - min < 0.005) {
										minNumber = min.floatValue();
									}
									int t = (int) (float) minNumber;
									processInfor.setTotalCount(t);
								}
							}
							totalDao.update(processInfor);
						}

						return true;
						// 激活上层数据
						// return jihuoSingleProcard(fatherProcard);
					}
				} else if ("否".equals(lingliaos)
						&& "是".equals(pageProcard.getLingliaostatus())) {
					if ("激活".equals(procard.getJihuoStatua())) {
						procard.setWlstatus("入库");
						procard.setGongwei("虚拟");
						procard.setJihuoStatua("激活");
						procard.setStatus("已发卡");
						// 已领数量=可领总数量-剩余未领数量 剩余未领数量=调整后的可领数量-已领数量
						procard.setHascount(pageProcard.getKlNumber()
								- (procard.getKlNumber() - procard
										.getHascount()));
						procard.setKlNumber(pageProcard.getKlNumber());
						procard.setTjNumber(procard.getFilnalCount());
						Float minNumber1 = pageProcard.getKlNumber()
								/ procard.getQuanzi2() * procard.getQuanzi1();
						if (minNumber1 % 1 > 0.95) {
							minNumber1 = (float) Math.ceil(minNumber1);
						} else {
							minNumber1 = (float) Math.floor(minNumber1);
						}
						procard.setMinNumber(minNumber1);
						procard.setDhNumber(procard.getFilnalCount());
						totalDao.update(procard);
						Procard fatherProcard = procard.getProcard();
						Float llCount = (Float) totalDao
								.getObjectByCondition(
										"select count(*) from Procard where procard.id=? and id<>?  "
												+ " and procardStyle='外购' "
												+ " and (needProcess is null or needProcess !='yes') and (lingliaostatus is null or lingliaostatus!='否')",
										procard.getFatherId(), procard.getId());
						if (llCount != null && llCount > 0) {
							fatherProcard.setLingliaostatus("是");
						} else {
							fatherProcard.setLingliaostatus("否");
						}
						// 激活上层数据
						return jihuoSingleProcard(fatherProcard);
					}
					// return totalDao.update(procard);
				} else if ("是".equals(lingliaos)
						&& "是".equals(pageProcard.getLingliaostatus())) {
					if ("激活".equals(procard.getJihuoStatua())) {
						procard.setWlstatus("入库");
						procard.setGongwei("虚拟");
						procard.setJihuoStatua("激活");
						procard.setStatus("已发卡");
						procard.setHascount(pageProcard.getKlNumber()
								- (procard.getKlNumber() - procard
										.getHascount()));
						procard.setKlNumber(pageProcard.getKlNumber());
						procard.setTjNumber(procard.getFilnalCount());
						Float minNumber1 = pageProcard.getKlNumber()
								/ procard.getQuanzi2() * procard.getQuanzi1();
						if (minNumber1 % 1 > 0.95) {
							minNumber1 = (float) Math.ceil(minNumber1);
						} else {
							minNumber1 = (float) Math.floor(minNumber1);
						}
						procard.setMinNumber(minNumber1);
						procard.setDhNumber(procard.getFilnalCount());
						totalDao.update(procard);
						Procard fatherProcard = procard.getProcard();
						Float llCount = (Float) totalDao
								.getObjectByCondition(
										"select count(*) from Procard where procard.id=? and id<>?  "
												+ " and procardStyle='外购' "
												+ " and (needProcess is null or needProcess !='yes') and (lingliaostatus is null or lingliaostatus!='否')",
										procard.getFatherId(), procard.getId());
						if (llCount != null && llCount > 0) {
							fatherProcard.setLingliaostatus("是");
						} else {
							fatherProcard.setLingliaostatus("否");
						}
						// 激活上层数据
						return jihuoSingleProcard(fatherProcard);
					}
					// return totalDao.update(procard);
				}
			}
		}
		return true;
	}

	/**
	 * 设置下层sbStatus为删除
	 * 
	 * @param procard
	 * @param nowTime
	 * @return
	 */
	private String deleteDownProcard(Procard procard, String nowTime) {
		// TODO Auto-generated method stub
		procard.setSbStatus("删除");
		if (procard.getFatherId() != null) {
			procard.setOldFatherId(procard.getFatherId());
			procard.setOldRootId(procard.getRootId());
		}
		procard.setFatherId(null);
		procard.setRootId(null);
		totalDao.update(procard);
		// 遍历下层零件设置设变属性为删除
		Set<Procard> sonSet = procard.getProcardSet();
		if (sonSet != null && sonSet.size() > 0) {
			for (Procard son : sonSet) {
				deleteDownProcard(son, nowTime);
			}
		}
		return null;
	}

	/***
	 * 生产计划管理 （入库计划、组装计划、日排产工序计划）
	 * 
	 * @param pageStatus
	 * @param startDate
	 * @param endDate
	 * @return
	 */
	@Override
	public Map<String, String> findAllPlan(String pageStatus, String startDate,
			String endDate, Procard pageProcard) {
		if (startDate == null || startDate.equals("")) {
			startDate = Util.getCalendarModified(
					Util.getDateTime("yyyy-MM-dd") + " 00:00:00", 5, -3)
					.substring(0, 10);
		}
		startDate += " 00:00:00";
		if (endDate == null || endDate.equals("")) {
			endDate = Util.getCalendarModified(startDate, 5, 45).substring(0,
					10);
		}
		endDate += " 23:59:59";
		String otherHql = "";
		String hql = "";
		if (pageProcard != null) {
			if (pageProcard.getOrderNumber() != null
					&& pageProcard.getOrderNumber().length() > 0) {
				otherHql += " and orderNumber like'%"
						+ pageProcard.getOrderNumber() + "%'";
			}
			if (pageProcard.getMarkId() != null
					&& pageProcard.getMarkId().length() > 0) {
				otherHql += " and (markId like '%" + pageProcard.getMarkId()
						+ "%' or ywMarkId like '%" + pageProcard.getMarkId()
						+ "%' )";
			}
			if (pageProcard.getProName() != null
					&& pageProcard.getProName().length() > 0) {
				otherHql += " and proName like'%" + pageProcard.getProName()
						+ "%'";
			}
			if (pageProcard.getCarStyle() != null
					&& pageProcard.getCarStyle().length() > 0) {
				otherHql += " and carStyle like'%" + pageProcard.getCarStyle()
						+ "%'";
			}
			if (pageProcard.getWgType() != null
					&& pageProcard.getWgType().length() > 0) {
				otherHql += " and wgType like'%" + pageProcard.getWgType()
						+ "%'";
			}
			// 默认显示制单人的数据
			if (pageProcard.getZhikaren() == null) {
				pageProcard.setZhikaren("one");
			}
			if (pageProcard.getZhikaren() != null
					&& pageProcard.getZhikaren().length() > 0) {
				if ("one".equals(pageProcard.getZhikaren())) {
					otherHql += " and zhikarenId="
							+ Util.getLoginUser().getId();
				}
			}
			// 剩余排产数量
			if (pageProcard.getHasPlan() != null) {
				if (pageProcard.getHasPlan() == 1F) {
					otherHql += " and (hasPlan is null or (filnalCount-hasPlan>0))";
				}
			}
			// 生产类型(试制/批产)
			if (pageProcard.getProductStyle() != null
					&& pageProcard.getProductStyle().length() > 0) {
				otherHql += " and productStyle='"
						+ pageProcard.getProductStyle() + "'";
			}
		}
		if ("rukuPlan".equals(pageStatus)) {
			hql = "from Procard where procardStyle='总成' and needFinalDate between '"
					+ startDate
					+ "' and '"
					+ endDate
					+ "' and needFinalDate is not null "
					+ otherHql
					+ " and status not in ('入库')  ";
			if (pageProcard != null && pageProcard.getRemark() != null
					&& pageProcard.getRemark().length() > 0) {
				hql += " and id in (select procard.id from ProcessInfor where processName like '%"
						+ pageProcard.getRemark()
						+ "%' and (dataStatus is null or dataStatus!='删除') and procard.id in (select id "
						+ hql + ") )";
			}
			hql += " order by needFinalDate";
		} else if ("zhuanpeiPlan".equals(pageStatus)) {
			// hql =
			// "from Procard where procardStyle='总成'  and jihuoDate is not null and needFinalDate is not null and jihuoDate between '"
			// + startDate
			// + "' and '"
			// + endDate
			// + "' "
			// + otherHql
			// + " and status not in ('入库','待入库','取消') ";
			hql = "from Procard where procardStyle='总成'  "
					+ "and status not in ('入库','待入库','取消','暂停')  " + otherHql;
			if (pageProcard != null && pageProcard.getRemark() != null
					&& pageProcard.getRemark().length() > 0) {
				hql += " and id in (select procard.id from ProcessInfor where processName like '%"
						+ pageProcard.getRemark()
						+ "%' and (dataStatus is null or dataStatus!='删除') and procard.id in (select id "
						+ hql + ") )";
			}
			hql += " order by jihuoDate";
		} else if ("dayPlan".equals(pageStatus)) {
			hql = "from Procard where procardStyle='自制' and jihuoDate between '"
					+ startDate
					+ "' and '"
					+ endDate
					+ "' and jihuoDate is not null "
					+ otherHql
					+ " and status not in ('完成','入库','待入库','取消')";
			if (pageProcard != null && pageProcard.getRemark() != null
					&& pageProcard.getRemark().length() > 0) {
				hql += " and id in (select procard.id from ProcessInfor where processName like '%"
						+ pageProcard.getRemark()
						+ "%' and (dataStatus is null or dataStatus!='删除') and procard.id in (select id "
						+ hql + ") )";
			}
			hql += " order by jihuoDate";
		} else if ("gonghuoPlan".equals(pageStatus)) {
			hql = "from Procard where procardStyle='外购' and needFinalDate between '"
					+ startDate
					+ "' and '"
					+ endDate
					+ "' and needFinalDate is not null "
					+ otherHql
					+ " and status in ('已发卡')";
			if (pageProcard.getGys() != null
					&& pageProcard.getGys().length() > 0) {
				hql += " and id in (select procardId from ManualOrderPlanDetail where manualPlan.id in ("
						+ "select mopId from WaigouPlan where gysName like '%"
						+ pageProcard.getGys() + "%'))";
			}
			if (pageProcard.getZhikaren() != null
					&& pageProcard.getZhikaren().length() > 0) {
				hql += " and id in (select procardId from ManualOrderPlanDetail where manualPlan.id in ("
						+ "select mopId from WaigouPlan where waigouOrder.id in (select id from WaigouOrder where addUserName like '%"
						+ pageProcard.getGys() + "%')))";
			}
			hql += " order by needFinalDate";
		}
		if (hql != "") {
			List<Procard> list = totalDao.query(hql);
			Map<String, String> proMap = new HashMap<String, String>();
			for (Procard procard : list) {
				if (procard.getYwMarkId() == null
						|| "".equals(procard.getYwMarkId())) {
					procard.setYwMarkId(procard.getMarkId());
				}
				if (procard.getCarStyle() == null) {
					procard.setCarStyle(procard.getProName());
				}
				String key = procard.getOrderNumber() + ";"
						+ procard.getMarkId() + ";" + procard.getYwMarkId()
						+ ";" + procard.getProName() + ";"
						+ procard.getCarStyle() + ";"
						+ procard.getProductStyle();

				if ("gonghuoPlan".equals(pageStatus)) {
					key = ";" + procard.getMarkId() + ";";
				}
				/** 查询备货表(拆分计划表) ***/
				String hql_procardbl = "from ProcardBl where procardId=? order by ylingliaoTime";
				List blList = totalDao.query(hql_procardbl, procard.getId());
				String dateAndCount = "";
				if ("rukuPlan".equals(pageStatus)) {
					// 拼接总成最后一道工序
					String hql_firstProcess = "select processNO,processName from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除') order by processNO desc";
					Object[] obj = (Object[]) totalDao.getObjectByCondition(
							hql_firstProcess, procard.getId());
					// key += ";" + obj[0].toString() + ";" + obj[1].toString();
					key += ";;;" + procard.getId() + ";;";
					if (pageProcard != null
							&& pageProcard.getRemark() != null
							&& pageProcard.getRemark().length() > 0
							&& !pageProcard.getRemark().equals(
									obj[1].toString())) {
						continue;
					}
					if (blList != null) {
						for (int i = 0; i < blList.size(); i++) {
							ProcardBl procardBl = (ProcardBl) blList.get(i);
							dateAndCount += procardBl.getYlingliaoTime() + "|"
									+ procardBl.getPcCount() + ";";
						}
					}
				} else if ("zhuanpeiPlan".equals(pageStatus)) {
					// 拼接总成第一道工序
					// String hql_firstProcess =
					// "select processNO,processName from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除') order by processNO";
					// Object[] obj = (Object[]) totalDao.getObjectByCondition(
					// hql_firstProcess, procard.getId());
					// if(obj==null){
					// System.out.println(456);
					// }
					// if(obj.length<1){
					// System.out.println(123);
					// }
					// key += ";" + obj[0].toString() + ";" + obj[1].toString()
					// + ";" + procard.getId() + ";"
					// + procard.getFilnalCount() + ";"
					// + (procard.getFilnalCount() -
					// (procard.getHasPlan()==null?0F:procard.getHasPlan()));
					// if (pageProcard != null
					// && pageProcard.getRemark() != null
					// && pageProcard.getRemark().length() > 0
					// && !pageProcard.getRemark().equals(
					// obj[1].toString())) {
					// continue;
					// }

					key += ";;;" + procard.getId() + ";";
					Double mainWastage = Double.parseDouble(procard
							.getFilnalCount().toString());
					if (mainWastage.intValue() - mainWastage == 0) {// 判断是否符合取整条件
						key += String.valueOf(mainWastage.intValue()) + ";";
					} else {
						key += String.valueOf(mainWastage) + ";";
					}
					Double mainWastage2 = Double
							.parseDouble((procard.getFilnalCount() - (procard
									.getHasPlan() == null ? 0F : procard
									.getHasPlan()))
									+ "");
					if (mainWastage2.intValue() - mainWastage2 == 0) {// 判断是否符合取整条件
						key += String.valueOf(mainWastage2.intValue()) + ";";
					} else {
						key += String.valueOf(mainWastage2) + ";";
					}

					if (blList != null) {
						for (int i = 0; i < blList.size(); i++) {
							ProcardBl procardBl = (ProcardBl) blList.get(i);
							dateAndCount += procardBl.getYlingliaoTime() + "|"
									+ procardBl.getPcCount() + ";";
						}
					}
				} else if ("dayPlan".equals(pageStatus)) {
					// 拼接零件第一道工序
					String hql_firstProcess = "select processNO,processName from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除') order by processNO";
					Object[] obj = (Object[]) totalDao.getObjectByCondition(
							hql_firstProcess, procard.getId());
					// key += ";" + obj[0].toString() + ";" + obj[1].toString();
					key += ";;;" + procard.getRootId() + ";;";
					if (pageProcard != null
							&& pageProcard.getRemark() != null
							&& pageProcard.getRemark().length() > 0
							&& !pageProcard.getRemark().equals(
									obj[1].toString())) {
						continue;
					}
					if (blList != null) {
						for (int i = 0; i < blList.size(); i++) {
							ProcardBl procardBl = (ProcardBl) blList.get(i);
							dateAndCount += procardBl.getYjiagongTime()
									+ "|"
									+ Float.parseFloat(String.format("%.2f",
											procardBl.getPcCount())) + ";";
						}
					}
				} else if ("gonghuoPlan".equals(pageStatus)) {
					String kgsql = "";
					if (procard.getKgliao() != null
							&& procard.getKgliao().length() > 0) {
						kgsql += " and kgliao ='" + procard.getKgliao() + "'";
					}
					String goodsClassSql = " and goodsClass in ('外购件库') "
							+ kgsql;
					String banben_hql = "";
					if (procard.getBanBenNumber() != null
							&& procard.getBanBenNumber().length() > 0) {
						banben_hql = " and banBenNumber='"
								+ procard.getBanBenNumber() + "'";
					}

					// 库存量(件号+版本+供料属性+库别)
					String hqlGoods = "";
					hqlGoods = "select sum(goodsCurQuantity) from Goods where goodsMarkId=? "
							+ goodsClassSql
							+ " and goodsCurQuantity>0 "
							+ banben_hql
							+ " and (fcStatus is null or fcStatus='可用')";
					Float kcCount = (Float) totalDao.getObjectByCondition(
							hqlGoods, procard.getMarkId());
					if (kcCount == null || kcCount < 0) {
						kcCount = 0f;
					}
					kcCount = 0f;

					// 外购件按照件号、名称
					key = procard.getMarkId() + ";" + procard.getBanBenNumber()
							+ ";" + procard.getKgliao() + ";"
							+ procard.getProName();

					if (blList != null && blList.size() > 0) {
						for (int i = 0; i < blList.size(); i++) {
							ProcardBl procardBl = (ProcardBl) blList.get(i);
							Float needcount = Float.parseFloat(String.format(
									"%.2f", procardBl.getPcCount()
											- procardBl.getYlCount()));
							if (needcount > 0) {
								kcCount = kcCount - needcount;
								if (kcCount <= 0) {
									dateAndCount += procardBl
											.getYlingliaoTime()
											+ "|" + needcount + ";";
								}
							}
						}
					} else {
						dateAndCount = procard.getNeedFinalDate()
								+ "|"
								+ Float.parseFloat(String.format("%.2f",
										procard.getFilnalCount())) + ";";
					}

				}
				String value = proMap.get(key);
				if (value != null && value.length() > 0) {
					value += dateAndCount;
					proMap.put(key, value);
				} else {
					proMap.put(key, dateAndCount);
				}
			}
			return proMap;
		}
		return null;
	}

	@Override
	public void linshi() {
		// TODO Auto-generated method stub
	}

	@Override
	public String getWwxdStatus() {
		// TODO Auto-generated method stub
		String hql1 = "select valueCode from CodeTranslation where type = 'sys' and keyCode='外委合同确认时下单' ";
		String valueCode = (String) totalDao.getObjectByCondition(hql1);
		if (valueCode == null) {
			return "是";
		} else {
			return valueCode;
		}
	}

	@Override
	public Object[] backsdWwdetail(Integer id) {
		// TODO Auto-generated method stub
		Procard rootProcard = null;
		Object[] objs = new Object[2];
		ProcessInforWWApplyDetail pwwDetail = (ProcessInforWWApplyDetail) totalDao
				.getObjectById(ProcessInforWWApplyDetail.class, id);
		if (pwwDetail != null) {
			ProcessInforWWApply pwwApply = pwwDetail.getProcessInforWWApply();
			objs[0] = pwwApply.getId();
			Procard procard = (Procard) totalDao.getObjectById(Procard.class,
					pwwDetail.getProcardId());
			if (procard != null) {
				if (rootProcard == null) {
					rootProcard = (Procard) totalDao.getObjectById(
							Procard.class, procard.getRootId());
				}
				// 解锁工序
				String[] processNos = pwwDetail.getProcessNOs().split(";");
				Set<ProcessInfor> processSet = procard.getProcessInforSet();
				if (processSet == null || processSet.size() == 0) {
					String msg = "对应生产件没有工序数据异常请核查！";
					objs[1] = msg;
					return objs;
				}
				for (ProcessInfor process : processSet) {
					if (process.getDataStatus() != null
							&& process.getDataStatus().equals("删除")) {
						continue;
					}
					for (String processno : processNos) {
						String processNos2 = process.getProcessNO() + "";
						if (processNos2.equals(processno)) {
							process.setAgreeWwCount(process.getAgreeWwCount()
									- pwwDetail.getApplyCount());
							if (process.getAgreeWwCount() < 0) {
								process.setAgreeWwCount(0f);
								totalDao.update(process);
							}
						}
					}
				}
				if (pwwDetail.getWwType().equals("包工包料")) {
					// 解锁下层
					backblWWDown(procard, pwwDetail.getApplyCount());
					rootProcard.setWlstatus("待定");
				} else if (pwwDetail.getRelatDown() != null
						&& pwwDetail.getRelatDown().equals("是")) {
					backgxwwDown(procard, pwwDetail.getApplyCount());
				}
			}
			pwwDetail.setDataStatus("取消");
			totalDao.update(pwwDetail);
			objs[1] = "true";
		}
		return objs;
	}

	private void backgxwwDown(Procard procard, Float applyCount) {
		// TODO Auto-generated method stub
		Set<Procard> sonSet = procard.getProcardSet();
		if (sonSet != null && sonSet.size() > 0) {
			for (Procard son : sonSet) {
				if (son.getSbStatus() != null && son.getSbStatus().equals("删除")) {
					continue;
				}
				if (son.getProcard().equals("自制")) {
					Float dCount = applyCount * son.getCorrCount();
					dCount = (float) Math.ceil(dCount);
					Set<ProcessInfor> processSet = son.getProcessInforSet();
					if (processSet != null && processSet.size() > 0) {
						for (ProcessInfor process : processSet) {
							if ((process.getDataStatus() == null || !process
									.getDataStatus().equals("删除"))
									&& process.getAgreeWwCount() != null) {
								process.setAgreeWwCount(process
										.getAgreeWwCount()
										- dCount);
								if (process.getAgreeWwCount() < 0) {
									process.setAgreeWwCount(0f);
								}
								totalDao.update(process);
							}
						}

					}
					backgxwwDown(son, dCount);
				} else if (son.getProcard().equals("外购")
						&& son.getNeedProcess() != null
						&& son.getNeedProcess().equals("yes")) {
					Float dCount = applyCount * son.getQuanzi2()
							/ son.getQuanzi1();
					Set<ProcessInfor> processSet = son.getProcessInforSet();
					if (processSet != null && processSet.size() > 0) {
						for (ProcessInfor process : processSet) {
							if ((process.getDataStatus() == null || !process
									.getDataStatus().equals("删除"))
									&& process.getAgreeWwCount() != null) {
								process.setAgreeWwCount(process
										.getAgreeWwCount()
										- dCount);
								if (process.getAgreeWwCount() < 0) {
									process.setAgreeWwCount(0f);
								}
								totalDao.update(process);
							}
						}

					}
				}
			}
		}
	}

	private void backblWWDown(Procard procard, Float deleteCount) {
		// TODO Auto-generated method stub
		Set<Procard> sonSet = procard.getProcardSet();
		if (sonSet != null && sonSet.size() > 0) {
			for (Procard son : sonSet) {
				if (son.getSbStatus() != null && son.getSbStatus().equals("删除")) {
					continue;
				}
				if (son.getProcardStyle().equals("外购")) {
					Float dCount = deleteCount * son.getQuanzi2()
							/ son.getQuanzi1();
					if (son.getWwblCount() != null) {
						son.setWwblCount(son.getWwblCount() - dCount);
						if (son.getWwblCount() < 0
								|| ((son.getWwblCount() * son.getQuanzi1() / son
										.getQuanzi2()) < 0.05)) {
							son.setWwblCount(0f);
						}
						totalDao.update(son);
					}
					// MRP
					Float needNumber = son.getFilnalCount();// 原材料/外购件的需求总量
					// 判断外委数量
					if (son.getWwblCount() != null && son.getWwblCount() > 0) {
						needNumber -= son.getWwblCount();
						if ((needNumber * son.getQuanzi1() / son.getQuanzi2()) < 0.05) {// 过滤小数点问题
							needNumber = 0f;
						}
						if (needNumber <= 0) {
							continue;
						}
					}
					if (!"TK".equals(son.getKgliao())
							&& !"TK AVL".equals(son.getKgliao())
							&& !"TK Price".equals(son.getKgliao())
							&& !"CS".equals(son.getKgliao())) {
						son.setKgliao("TK");
					}
					// Float number = son.getNeedCount();
					if (son.getProductStyle() != null
							&& son.getProductStyle().equals("试制")) {// 试制外购件参与计算的数据全设置
						son.setSingleDuration(1f);
						son.setCapacity(1f);
						son.setCapacitySurplus(1f);
						son.setCapacityRatio(1f);
						son.setDeliveryDuration(1f);
						son.setDeliveryRatio(1f);
						son.setDeliveryPeriod(1);
						son.setDeliveryAmount(1f);
						son.setProSingleDuration(1f);
						son.setAllJiepai(1f);
					}
					/***************** MRP计算(库存量&&&&&占用量) *****************/
					String goodsClassSql = null;
					// if (son.getProductStyle() != null
					// && son.getProductStyle().equals("试制")) {
					// // 试制的外购件去试制库取
					// goodsClassSql = " and goodsClass ='试制库'";
					// } else {
					String kgsql = "";
					if (son.getKgliao() != null && son.getKgliao().length() > 0) {
						kgsql += " and kgliao ='" + son.getKgliao() + "'";
					}
					// goodsClassSql =
					// " and ((goodsClass in ('外购件库','中间库') "
					// + kgsql + " ) or goodsClass = '备货库')";
					goodsClassSql = " and goodsClass in ('外购件库') " + kgsql;
					// }
					String banben_hql = "";
					String banben_hql2 = "";
					if (son.getBanBenNumber() != null
							&& son.getBanBenNumber().length() > 0) {
						banben_hql = " and banBenNumber='"
								+ son.getBanBenNumber() + "'";
						banben_hql2 = " and banben='" + son.getBanBenNumber()
								+ "'";
					}
					String specification_sql = "";
					// if (son.getSpecification() != null
					// && son.getSpecification().length() > 0) {
					// specification_sql = " and specification = '"
					// + son.getSpecification() + "'";
					// } else {
					// specification_sql =
					// " and (specification = '' and specification is null)";
					// }

					// 库存量(件号+版本+供料属性+库别)
					String hqlGoods = "";
					hqlGoods = "select sum(goodsCurQuantity) from Goods where goodsMarkId=? "
							+ goodsClassSql
							+ " and goodsCurQuantity>0 "
							+ banben_hql
							+ " and (fcStatus is null or fcStatus='可用')";
					Float kcCount = (Float) totalDao.getObjectByCondition(
							hqlGoods, son.getMarkId());
					if (kcCount == null || kcCount < 0) {
						kcCount = 0f;
					}

					/****************** 占用量=生产占用量+导入占用量 ******************************/
					// 系统占用量(已计算过采购量(1、有库存 2、采购中)，未领料)
					String zyCountSql = "select sum(hascount) from Procard where markId=? and productStyle=? and kgliao=? and id !="
							+ son.getId()
							+ banben_hql
							+ " and jihuoStatua='激活' and (status='已发卡' or (oldStatus='已发卡' and status='设变锁定')) and procardStyle='外购'  and (sbStatus is null or sbStatus!='删除')";
					// Float zyCount = (Float) totalDao
					// .getObjectByCondition(zyCountSql, procard
					// .getMarkId(),
					// procard.getProductStyle(), procard
					// .getKgliao());
					Float zyCount = (Float) totalDao.getObjectByCondition(
							zyCountSql, son.getMarkId(), son.getProductStyle(),
							son.getKgliao());
					if (zyCount == null || zyCount < 0) {
						zyCount = 0f;
					}

					// 导入占用量(系统切换时导入占用量)
					String hqlGoods_zy = "select sum(goodsCurQuantity) from Goods where goodsMarkId=?"
							+ banben_hql
							+ " and goodsClass in ('占用库') and kgliao=? and goodsCurQuantity>0 and (fcStatus is null or fcStatus='可用')";
					Float kcCount_zy = (Float) totalDao.getObjectByCondition(
							hqlGoods_zy, son.getMarkId(), son.getKgliao());
					if (kcCount_zy == null || kcCount_zy < 0) {
						kcCount_zy = 0f;
					}
					zyCount += kcCount_zy;
					if (zyCount < 0) {
						zyCount = 0F;
					}
					/****************** 结束 占用量=生产占用量+导入占用量 结束 ******************************/
					/****************** 在途量=采购在途量+导入在途量 ******************************/
					// 系统在途量(已生成采购计划，未到货)
					String hql_zc = "select sum(cgNumber-dhNumber) from  Procard where markId=? and productStyle=? "
							+ banben_hql
							+ " and kgliao=? and jihuoStatua='激活' and (status='已发卡' or (oldStatus='已发卡' and status='设变锁定')) and procardStyle='外购'"
							+ " and cgNumber >0 and dhNumber is not null and (sbStatus is null or sbStatus!='删除')";
					// Float ztCount = (Float) totalDao.getObjectByCondition(
					// hql_zc, procard.getMarkId(), procard
					// .getProductStyle(), procard.getKgliao());

					// 系统在途量(已生成物料需求信息，未到货)
					String hql_zc0 = "select sum(number-ifnull(rukuNum,0)) from ManualOrderPlan where markId = ?  "
							+ banben_hql2
							+ " and kgliao=? and (number>rukuNum or rukuNum is null) and (status<>'取消' or status is null)"
							+ specification_sql;
					Double ztCountd = (Double) totalDao.getObjectByCondition(
							hql_zc0, procard.getMarkId(),
							procard.getKgliao() == null ? "TK" : procard
									.getKgliao());
					if (ztCountd == null) {
						ztCountd = 0D;
					}
					Float ztCount = ztCountd.floatValue();

					// 导入在途量(系统切换时导入在途量)
					String hqlGoods_zt = "select sum(goodsCurQuantity) from Goods where goodsMarkId=?"
							+ banben_hql
							+ " and kgliao=? and goodsClass in ('在途库') and goodsCurQuantity>0 and (fcStatus is null or fcStatus='可用')";
					Float kcCount_zt = (Float) totalDao.getObjectByCondition(
							hqlGoods_zt, son.getMarkId(), son.getKgliao());
					if (kcCount_zt == null || kcCount_zt < 0) {
						kcCount_zt = 0f;
					}
					ztCount += kcCount_zt;
					if (ztCount < 0) {
						ztCount = 0F;
					}
					/****************** 结束 在途量=采购在途量+导入在途量 结束 ******************************/
					// (库存量+在途量(已生成采购，未到货))-占用量=剩余可用库存量
					Float daizhiCount = (kcCount + ztCount) - zyCount;
					if (daizhiCount < 0) {
						daizhiCount = 0F;
					}
					if (daizhiCount < son.getFilnalCount()) {
						son.setTjNumber(Util.FomartFloat(daizhiCount, 4));
						son.setMinNumber(daizhiCount * son.getQuanzi2()
								/ son.getQuanzi1());
					} else {
						son.setTjNumber(son.getFilnalCount());
						son.setMinNumber(procard.getFilnalCount());
					}

					// cgNumber
					Float dcgnumber = son.getFilnalCount() - son.getTjNumber();
					if (dcgnumber > 0) {
						if (son.getCgNumber() == null
								|| son.getCgNumber() < dcgnumber) {
							son.setCgNumber(dcgnumber);
							son.setWlstatus("待采购");
						}
					}
					jihuoSingleProcard(son);
					totalDao.update(son);

				} else {
					Float dCount = deleteCount * son.getCorrCount();
					dCount = (float) Math.ceil(dCount);
					if (son.getWwblCount() != null) {
						son.setWwblCount(son.getWwblCount() - dCount);
						if (son.getWwblCount() < 0 || ((dCount) < 0.05)) {
							son.setWwblCount(0f);
						}
						totalDao.update(son);
						backblWWDown(son, dCount);
					}
				}
			}
		}
	}

	@Override
	public void bdPeopleByRootId(Integer id) {
		// TODO Auto-generated method stub
		List<Procard> procardList = totalDao
				.query(
						"from Procard where rootId=? and procardStyle='自制' and jihuoStatua='激活'",
						id);
		for (Procard procard : procardList) {
			if (procard.getProcessPeopleSet() != null
					&& procard.getProcessPeopleSet().size() > 0) {
				continue;
			}
			/**** 绑定领取成员 (智能安排:第一次安排所有的人,后续按照领取过该零件的人员列表安排) ***/
			// 查询是否存在已经完成的批次
			String hql_historySelfCard = "from Procard where markId =? and tjNumber>0";
			Integer count = totalDao.getCount(hql_historySelfCard, procard
					.getMarkId());
			String hql = "";
			List userList = new ArrayList();
			if (count == null || count == 0) {
				// 查询上一批激活的
				String hql_befor = "from Procard where markId=? and id<? and jihuoStatua='激活' and status <> '取消' order by id DESC";
				Procard beforProcard = (Procard) totalDao.getObjectByCondition(
						hql_befor, procard.getMarkId(), procard.getId());
				if (beforProcard != null) {
					// 沿用上一批次
					String hql_old = "from Users where onWork in ('在职','试用','实习','离职中') and id in (select userId from ProcessinforPeople where procard.id=?)";
					userList = totalDao.query(hql_old, beforProcard.getId());
				} else {
					// 綁定所有人员
					hql = "from Users where onWork in ('在职','试用','实习','离职中') and id in (select u.id from Users u join u.processGzstore p where p.processName in "
							+ "(select i.processName from ProcessInfor i join i.procard c where c.id="
							+ procard.getId() + "))";
					userList = totalDao.query(hql);
				}
			} else {
				// 绑定所有生产过该零件的人员
				hql = "from Users where onWork in ('在职','试用','实习','离职中') and id in "
						+ "(select userId from ProcessInforReceiveLog where  fk_processInforId in "
						+ "(select i.id from ProcessInfor  i join i.procard c where c.markId ='"
						+ procard.getMarkId() + "' and c.tjNumber>0 ))))";
				userList = totalDao.query(hql);
				// 自动绑定人员时，将上批次领料人员加入绑定人员序列
				// 先查询此件号是否需要领料
				if ("是".equals(procard.getLingliaostatus())) {
					String hql_befor = "from Procard where markId=? and id<? and jihuoStatua='激活' and status <> '取消' order by id DESC";
					Procard beforProcard = (Procard) totalDao
							.getObjectByCondition(hql_befor, procard
									.getMarkId(), procard.getId());
					if (beforProcard != null) {
						String markId = "";// 外购件列表
						if ("总成".equals(procard.getProcardStyle())) {
							List<String> mark = totalDao
									.query(
											"select markId from Procard where rootId = ?",
											procard.getId());
							if (mark != null && mark.size() > 0) {
								markId = Util.selectString(mark.toString());
							}
						} else if ("自制".equals(procard.getProcardStyle())) {
							List<String> mark = totalDao
									.query(
											"select markId from Procard where fatherId = ?",
											procard.getId());
							if (mark != null && mark.size() > 0) {
								markId = Util.selectString(mark.toString());
							}
						} else if ("外购".equals(procard.getProcardStyle())) {
							markId = procard.getMarkId();
						}
						if (!"".equals(markId)) {
							String hql_linliao = "from Users where onWork in ('在职','试用','实习','离职中') and name in "
									+ "(select sellCharger from Sell where sellWarehouse = '外购件库' and rootSelfCard = ? and sellMarkId in ('"
									+ markId
									+ "')) "
									+ "and id in (select u.id from Users u join u.processGzstore p where p.processName in "
									+ "(select i.processName from ProcessInfor i join i.procard c where c.id="
									+ beforProcard.getId() + "))";
							userList.addAll(totalDao.query(hql_linliao,
									beforProcard.getSelfCard()));
						}
					}
				}
			}

			if (userList != null && userList.size() > 0) {
				Set<ProcessinforPeople> processUser = new HashSet<ProcessinforPeople>();
				for (int i = 0, len = userList.size(); i < len; i++) {
					Users user = (Users) userList.get(i);
					if (user != null) {
						ProcessinforPeople pp = new ProcessinforPeople();
						pp.setUserId(user.getId());
						pp.setCode(user.getCode());
						pp.setName(user.getName());
						pp.setDept(user.getDept());
						pp.setAddTime(Util.getDateTime());
						pp.setStatus("激活");
						pp.setProcard(procard);
						processUser.add(pp);
					}
				}
				procard.setProcessPeopleSet(processUser);// 领取人员
			}
			totalDao.update(procard);
		}

	}

	@Override
	public List<ZhUser> findAllzZhUsers() {
		return totalDao.query(" from ZhUser ");
	}

	@Override
	public List<ProcardVo> findBcprkDate(Integer id, String type) {
		// TODO Auto-generated method stub
		List<ProcessInfor> processInforList = totalDao
				.query(
						"from ProcessInfor where needSave='是' and (dataStatus is null or dataStatus !='删除')"
								+ " and procard.rootId=? and (procard.sbStatus is null or procard.sbStatus !='删除') order by procard.id",
						id);
		// List<GoodsStore> gsList2 =
		// totalDao.query(" from GoodsStore g join  Procard p on g.style ='半成品转库'  and p.rootId=? and g.goodsStoreLot=p.selfCard and g.goodsStoreMarkId = p.markId   ",
		// id);
		// List<GoodsStore> gsList2 =
		// totalDao.query("select g.goodsStoreId,g.goodsStoreLot,g.goodsStoreMarkId,g.processNo,g.processName,g.status,g.goodsStoreCount from GoodsStore g,Procard p where g.style ='半成品转库'  and p.rootId=? and g.goodsStoreLot=p.selfCard and g.goodsStoreMarkId = p.markId   ",
		// id);
		List<Object[]> gsList = totalDao
				.query(
						"select g.goodsStoreId,g.goodsStoreLot,g.goodsStoreMarkId,g.processNo,g.processName,g.status,g.goodsStoreCount from GoodsStore g,Procard p where g.style ='半成品转库'  and p.rootId=? and g.goodsStoreLot=p.selfCard and g.goodsStoreMarkId = p.markId   ",
						id);
		List<Object[]> hadgsList = new ArrayList<Object[]>();
		List<ProcardVo> procardVoList = new ArrayList<ProcardVo>();
		if (processInforList == null || processInforList.size() > 0) {
			for (ProcessInfor process : processInforList) {
				Procard procard = process.getProcard();
				if (procard != null) {
					ProcardVo procardVo = new ProcardVo();
					BeanUtils.copyProperties(procard, procardVo,
							new String[] { "zaizhiApplyZk", "zaizhikzkCount",
									"zaizhizkCount" });
					procardVo.setProcessNo(process.getProcessNO());
					procardVo.setProcessName(process.getProcessName());
					procardVo.setFlag("是");
					if (gsList != null && gsList.size() > 0) {
						for (Object[] gs : gsList) {
							if (gs[1] != null
									&& gs[1].toString().equals(
											procardVo.getSelfCard())
									&& gs[2] != null
									&& gs[2].toString().equals(
											procardVo.getMarkId())
									&& gs[3] != null
									&& procardVo.getProcessNo().equals(
											Integer.parseInt(gs[3].toString()))) {
								if (gs[6].toString().equals("待入库")) {
									if (procardVo.getZaizhiApplyZk() == null) {
										procardVo.setZaizhiApplyZk(Float
												.parseFloat(gs[6].toString()));
									} else {
										procardVo.setZaizhiApplyZk(procardVo
												.getZaizhiApplyZk()
												+ Float.parseFloat(gs[6]
														.toString()));
									}
								} else {
									if (procardVo.getZaizhizkCount() == null) {
										procardVo.setZaizhizkCount(Float
												.parseFloat(gs[6].toString()));
									} else {
										if (procardVo.getZaizhiApplyZk() == null) {
											procardVo.setZaizhizkCount(Float
													.parseFloat(gs[6]
															.toString()));
										} else {

											procardVo
													.setZaizhizkCount(procardVo
															.getZaizhiApplyZk()
															+ Float
																	.parseFloat(gs[6]
																			.toString()));
										}
									}
								}
								hadgsList.add(gs);
							}
						}
					}
					procardVoList.add(procardVo);

				}
			}
		}
		if (gsList != null && gsList.size() > 0) {
			gsList.removeAll(hadgsList);
			if (gsList.size() > 0) {
				for (Object[] gs : gsList) {
					Procard procard = (Procard) totalDao
							.getObjectByCondition(
									"from Procard where selfCard=? and markId=? and (sbStatus is null or sbStatus !='删除')",
									gs[1].toString(), gs[2].toString());
					if (procard != null) {
						ProcardVo procardVo = new ProcardVo();
						BeanUtils.copyProperties(procard, procardVo,
								new String[] { "zaizhiApplyZk",
										"zaizhikzkCount", "zaizhizkCount" });
						procardVo.setProcessNo(Integer.parseInt(gs[3]
								.toString()));
						if (gs[4] != null) {
							procardVo.setProcessName(gs[4].toString());
						}
						procardVo.setFlag("否");
						if (gs[5].toString().equals("待入库")) {
							if (procardVo.getZaizhiApplyZk() == null) {
								procardVo.setZaizhiApplyZk(Float
										.parseFloat(gs[6].toString()));
							} else {
								procardVo.setZaizhiApplyZk(procardVo
										.getZaizhiApplyZk()
										+ Float.parseFloat(gs[6].toString()));
							}
						} else {
							if (procardVo.getZaizhizkCount() == null) {
								procardVo.setZaizhizkCount(Float
										.parseFloat(gs[6].toString()));
							} else {
								procardVo.setZaizhizkCount(procardVo
										.getZaizhiApplyZk()
										+ Float.parseFloat(gs[6].toString()));
							}
						}
						procardVoList.add(procardVo);
					}

				}
			}
		}
		if ("export".equals(type)) {
			Procard root = (Procard) totalDao.getObjectById(Procard.class, id);
			WritableWorkbook wwb = null;
			try {
				HttpServletResponse response = (HttpServletResponse) ActionContext
						.getContext().get(StrutsStatics.HTTP_RESPONSE);
				OutputStream os = response.getOutputStream();
				response.reset();
				String fileName = null;
				if (root.getYwMarkId() != null
						&& root.getYwMarkId().length() > 0) {
					fileName = root.getYwMarkId() + "第" + root.getSelfCard()
							+ "批次半成品入库数据";
				} else {
					fileName = root.getMarkId() + "第" + root.getSelfCard()
							+ "批次半成品入库数据";
				}
				response.setHeader("Content-disposition",
						"attachment; filename="
								+ new String(fileName.getBytes("GB2312"),
										"8859_1") + ".xls");
				response.setContentType("application/msexcel");
				wwb = Workbook.createWorkbook(os);
				WritableSheet ws = wwb.createSheet("半成品入库数据", 0);
				ws.setColumnView(1, 18);
				ws.setColumnView(2, 18);
				ws.setColumnView(3, 18);
				ws.setColumnView(4, 16);
				ws.setColumnView(5, 18);
				ws.setColumnView(6, 25);
				ws.setColumnView(9, 16);
				ws.addCell(new Label(0, 0, "总成件号:"));
				ws.addCell(new Label(1, 0, root.getMarkId() + "("
						+ root.getSelfCard() + ")"));
				ws.addCell(new Label(3, 0, "批次："));
				ws.addCell(new Label(4, 0, root.getSelfCard()));
				ws.addCell(new Label(6, 0, "导出时间："));
				ws.addCell(new Label(7, 0, Util.getDateTime()));

				ws.addCell(new Label(0, 2, "序号"));
				ws.addCell(new Label(1, 2, "内部订单号"));
				ws.addCell(new Label(2, 2, "业务件号"));
				ws.addCell(new Label(3, 2, "总成件号"));
				ws.addCell(new Label(4, 2, "总成批次"));
				ws.addCell(new Label(5, 2, "件号"));
				ws.addCell(new Label(6, 2, "版本"));
				ws.addCell(new Label(7, 2, "名称"));
				ws.addCell(new Label(8, 2, "工序号"));
				ws.addCell(new Label(9, 2, "工序名"));
				ws.addCell(new Label(10, 2, "批次"));
				ws.addCell(new Label(11, 2, "批次数量"));
				ws.addCell(new Label(12, 2, "申请中数量"));
				ws.addCell(new Label(13, 2, "已转库数量"));
				ws.addCell(new Label(14, 2, "标记转库"));

				for (int i = 0; i < procardVoList.size(); i++) {
					ProcardVo procardVo = (ProcardVo) procardVoList.get(i);
					ws.addCell(new Label(0, i + 3, i + 1 + ""));
					ws.addCell(new Label(1, i + 3, procardVo.getOrderNumber()));
					ws.addCell(new Label(2, i + 3, procardVo.getYwMarkId()));
					ws.addCell(new Label(3, i + 3, procardVo.getRootMarkId()));
					ws
							.addCell(new Label(4, i + 3, procardVo
									.getRootSelfCard()));
					ws.addCell(new Label(5, i + 3, procardVo.getMarkId()));
					ws
							.addCell(new Label(6, i + 3, procardVo
									.getBanBenNumber()));
					ws.addCell(new Label(7, i + 3, procardVo.getProName()));
					ws.addCell(new Label(8, i + 3, procardVo.getProcessNo()
							+ ""));
					ws.addCell(new Label(9, i + 3, procardVo.getProcessName()));
					ws.addCell(new Label(10, i + 3, procardVo.getSelfCard()));
					Float filnalCount = procardVo.getFilnalCount() == null ? 0
							: procardVo.getFilnalCount();
					Float zaizhiApplyZk = procardVo.getZaizhiApplyZk() == null ? 0
							: procardVo.getZaizhiApplyZk();
					Float zaizhizkCount = procardVo.getZaizhizkCount() == null ? 0
							: procardVo.getZaizhizkCount();
					ws.addCell(new jxl.write.Number(11, i + 3, filnalCount));
					ws.addCell(new jxl.write.Number(12, i + 3, zaizhiApplyZk));
					ws.addCell(new jxl.write.Number(13, i + 3, zaizhizkCount));
					ws.addCell(new Label(14, i + 3, procardVo.getFlag()));
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					wwb.write();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					wwb.close();
				} catch (WriteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} else {
			return procardVoList;
		}
		return null;
	}

	@Override
	public List findtzBywwapplyDetail(Integer id) {
		// TODO Auto-generated method stub
		ProcessInforWWApplyDetail wwDetail = (ProcessInforWWApplyDetail) totalDao
				.getObjectById(ProcessInforWWApplyDetail.class, id);
		if (wwDetail != null) {
			Procard procard = (Procard) totalDao.getObjectById(Procard.class,
					wwDetail.getProcardId());
			if (procard != null) {
				List<ProcessTemplateFile> tzListAll = new ArrayList<ProcessTemplateFile>();
				String[] processNos = wwDetail.getProcessNOs().split(";");
				StringBuffer sb = new StringBuffer();
				for (String pno : processNos) {
					if (sb.length() == 0) {
						sb.append(pno);
					} else {
						sb.append("," + pno);
					}
				}
				List<ProcessTemplateFile> list1 = null;
				String banciSql = null;
				if (procard.getBanci() == null || procard.getBanci() == 0) {
					banciSql = " and (banci is null or banci=0)";
				} else {
					banciSql = " and banci=" + procard.getBanci();
				}
				if (procard.getProductStyle().equals("批产")) {
					list1 = totalDao
							.query(
									"from ProcessTemplateFile where markId=? and processNO in("
											+ sb.toString()
											+ ") "
											+ banciSql
											+ "and productStyle='批产' and (status is null or status!='历史')",
									procard.getMarkId());
				} else {
					list1 = totalDao
							.query(
									"from ProcessTemplateFile where markId=? and processNO is not null and glId in(select id from ProcessTemplate where procardTemplate.id=? and processNO in("
											+ sb.toString()
											+ ") )"
											+ banciSql
											+ "and productStyle='试制' and (status is null or status!='历史')",
									procard.getMarkId(), procard
											.getProcardTemplateId());
				}
				if (list1 != null && list1.size() > 0) {
					for (ProcessTemplateFile file : list1) {
						if (file.getProcessName() != null) {
							file.setOldfileName(file.getOldfileName() + "("
									+ file.getProcessName() + ")");
						}
					}
					tzListAll.addAll(list1);
				}
				if (wwDetail.getWwType().equals("包工包料")
						|| (wwDetail.getRelatDown() != null && wwDetail
								.getRelatDown().equals("是"))) {
					Set<Procard> sonptSet = procard.getProcardSet();
					if (sonptSet != null && sonptSet.size() > 0) {
						for (Procard son : sonptSet) {
							List<ProcessTemplateFile> list2 = findSonTz(son);
							if (list2 != null && list2.size() > 0) {
								for (ProcessTemplateFile file : list2) {
									if (file.getProcessName() != null) {
										file.setOldfileName(file
												.getOldfileName()
												+ "("
												+ file.getProcessName()
												+ ")");
									}
								}
								tzListAll.addAll(list2);
							}
						}
					}
				}
				return tzListAll;
			}

		}
		return null;
	}

	@Override
	public Map<String, String> findtzBywwapplyDetail2(Integer id) {
		// TODO Auto-generated method stub
		Map<String, String> tzwzMap = new HashMap<String, String>();
		ProcessInforWWApplyDetail wwDetail = (ProcessInforWWApplyDetail) totalDao
				.getObjectById(ProcessInforWWApplyDetail.class, id);
		if (wwDetail != null) {
			Procard procard = (Procard) totalDao.getObjectById(Procard.class,
					wwDetail.getProcardId());
			if (procard != null) {
				String[] processNos = wwDetail.getProcessNOs().split(";");
				StringBuffer sb = new StringBuffer();
				for (String pno : processNos) {
					if (sb.length() == 0) {
						sb.append(pno);
					} else {
						sb.append("," + pno);
					}
				}
				List<ProcessTemplateFile> list1 = null;
				String banciSql = null;
				if (procard.getBanci() == null || procard.getBanci() == 0) {
					banciSql = " and (banci is null or banci=0)";
				} else {
					banciSql = " and banci=" + procard.getBanci();
				}
				if (procard.getProductStyle().equals("批产")) {
					list1 = totalDao
							.query(
									"from ProcessTemplateFile where markId=? and processNO in("
											+ sb.toString()
											+ ") "
											+ banciSql
											+ "and productStyle='批产' and (status is null or status!='历史')",
									procard.getMarkId());
				} else {
					list1 = totalDao
							.query(
									"from ProcessTemplateFile where markId=? and processNO is not null and glId in(select id from ProcessTemplate where procardTemplate.id=? and processNO in("
											+ sb.toString()
											+ ") )"
											+ banciSql
											+ "and productStyle='试制' and (status is null or status!='历史')",
									procard.getMarkId(), procard
											.getProcardTemplateId());
				}
				if (list1 != null && list1.size() > 0) {
					for (ProcessTemplateFile file : list1) {
						String wz = file.getMonth() + "/" + file.getFileName();
						String name = file.getOldfileName();
						if (file.getProcessName() != null) {
							file.setOldfileName("(" + file.getProcessName()
									+ ")" + file.getOldfileName());
						}
						tzwzMap.put(wz, name);
					}
				}

				if (wwDetail.getWwType().equals("包工包料")
						|| (wwDetail.getRelatDown() != null && wwDetail
								.getRelatDown().equals("是"))) {
					Set<Procard> sonptSet = procard.getProcardSet();
					if (sonptSet != null && sonptSet.size() > 0) {
						for (Procard son : sonptSet) {
							List<ProcessTemplateFile> list2 = findSonTz(son);
							if (list2 != null && list2.size() > 0) {
								for (ProcessTemplateFile file : list2) {
									String wz = file.getMonth() + "/"
											+ file.getFileName();
									if (file.getProcessName() != null
											&& !file.getOldfileName().contains(
													file.getProcessName())) {
										file.setOldfileName("("
												+ file.getProcessName() + ")"
												+ file.getOldfileName());
									}
									String name = file.getOldfileName();
									tzwzMap.put(wz, name);
								}
							}
						}
					}
				}
			}

		}
		return tzwzMap;
	}

	@Override
	public Map<String, String> findtzBywwapply2(Integer id) {
		// TODO Auto-generated method stub
		Map<String, String> tzwzMap = new HashMap<String, String>();
		ProcessInforWWApply wwApply = (ProcessInforWWApply) totalDao
				.getObjectById(ProcessInforWWApply.class, id);
		// Set<ProcessInforWWApplyDetail> wwDetailSet =
		// ProcessInforWWApplyDetail wwDetail = (ProcessInforWWApplyDetail)
		// totalDao
		// .getObjectById(ProcessInforWWApplyDetail.class, id);
		// if (wwDetail != null) {
		// Procard procard = (Procard) totalDao.getObjectById(Procard.class,
		// wwDetail.getProcardId());
		// if (procard != null) {
		// String[] processNos = wwDetail.getProcessNOs().split(";");
		// StringBuffer sb = new StringBuffer();
		// for (String pno : processNos) {
		// if (sb.length() == 0) {
		// sb.append(pno);
		// } else {
		// sb.append("," + pno);
		// }
		// }
		// List<ProcessTemplateFile> list1 = null;
		// String banciSql = null;
		// if (procard.getBanci() == null || procard.getBanci() == 0) {
		// banciSql = " and (banci is null or banci=0)";
		// } else {
		// banciSql = " and banci=" + procard.getBanci();
		// }
		// if (procard.getProductStyle().equals("批产")) {
		// list1 = totalDao
		// .query(
		// "from ProcessTemplateFile where markId=? and processNO in("
		// + sb.toString()
		// + ") "
		// + banciSql
		// + "and productStyle='批产' and (status is null or status!='历史')",
		// procard.getMarkId());
		// } else {
		// list1 = totalDao
		// .query(
		// "from ProcessTemplateFile where markId=? and processNO is not null and glId in(select id from ProcessTemplate where procardTemplate.id=? and processNO in("
		// + sb.toString()
		// + ") )"
		// + banciSql
		// + "and productStyle='试制' and (status is null or status!='历史')",
		// procard.getMarkId(), procard
		// .getProcardTemplateId());
		// }
		// if (list1 != null && list1.size() > 0) {
		// for (ProcessTemplateFile file : list1) {
		// String wz = file.getMonth() + "/" + file.getFileName();
		// String name = file.getOldfileName();
		// if (file.getProcessName() != null) {
		// file.setOldfileName("(" + file.getProcessName()
		// + ")" + file.getOldfileName());
		// }
		// tzwzMap.put(wz, name);
		// }
		// }
		// if (wwDetail.getWwType().equals("包工包料")
		// || (wwDetail.getRelatDown() != null && wwDetail
		// .getRelatDown().equals("是"))) {
		// Set<Procard> sonptSet = procard.getProcardSet();
		// if (sonptSet != null && sonptSet.size() > 0) {
		// for (Procard son : sonptSet) {
		// List<ProcessTemplateFile> list2 = findSonTz(son);
		// if (list2 != null && list2.size() > 0) {
		// for (ProcessTemplateFile file : list2) {
		// String wz = file.getMonth() + "/"
		// + file.getFileName();
		// String name = file.getOldfileName();
		// if (file.getProcessName() != null) {
		// file.setOldfileName("("
		// + file.getProcessName() + ")"
		// + file.getOldfileName());
		// }
		// tzwzMap.put(wz, name);
		// }
		// }
		// }
		// }
		// }
		// }
		//			
		// }
		return tzwzMap;
	}

	private List<ProcessTemplateFile> findSonTz(Procard procard) {
		// TODO Auto-generated method stub
		if (procard.getProcardStyle().equals("外购")) {
			List<ProcessTemplateFile> list1 = null;
			String banciSql = null;
			if (procard.getBanci() == null || procard.getBanci() == 0) {
				banciSql = " and (banci is null or banci=0)";
			} else {
				banciSql = " and banci=" + procard.getBanci();
			}
			if (procard.getProductStyle().equals("批产")) {
				list1 = totalDao
						.query(
								"from ProcessTemplateFile where markId=? and processNO is null "
										+ banciSql
										+ "and productStyle='批产' and (status is null or status!='历史')",
								procard.getMarkId());
			} else {
				list1 = totalDao
						.query(
								"from ProcessTemplateFile where markId=? and processNO is null and glId =? "
										+ banciSql
										+ "and productStyle='试制' and (status is null or status!='历史')",
								procard.getMarkId(), procard
										.getProcardTemplateId());
			}
			return list1;
		} else {
			List<ProcessTemplateFile> list1 = null;
			String banciSql = null;
			if (procard.getBanci() == null || procard.getBanci() == 0) {
				banciSql = " and (banci is null or banci=0)";
			} else {
				banciSql = " and banci=" + procard.getBanci();
			}
			if (procard.getProductStyle().equals("批产")) {
				list1 = totalDao
						.query(
								"from ProcessTemplateFile where markId=? and processNO is not null "
										+ banciSql
										+ "and productStyle='批产' and (status is null or status!='历史')",
								procard.getMarkId());
			} else {
				list1 = totalDao
						.query(
								"from ProcessTemplateFile where markId=? and processNO is not null and glId =? "
										+ banciSql
										+ "and productStyle='试制' and (status is null or status!='历史')",
								procard.getMarkId(), procard
										.getProcardTemplateId());
			}
			Set<Procard> sonptSet = procard.getProcardSet();
			if (sonptSet != null && sonptSet.size() > 0) {
				for (Procard son : sonptSet) {
					List<ProcessTemplateFile> list2 = findSonTz(son);
					if (list2 != null && list2.size() > 0) {
						list1.addAll(list2);
					}
				}
			}
			return list1;
		}
	}

	public List findLingliaoStatus() {
		List<Procard> procardList = totalDao
				.query("from Procard where  status in ('领工序','已发料') and jihuoStatua is null");
		return procardList;
	}

	@Override
	public boolean updateLingliaoStatus(Integer procardId) {
		if (procardId != null && procardId > 0) {
			Procard procard = (Procard) totalDao.getObjectById(Procard.class,
					procardId);
			if (procard != null) {
				procard.setStatus("初始");
				boolean bool = jihuoSingleProcard(procard);
				return bool;
			}
		}
		return false;

		// List<Procard> procardList = totalDao
		// .query("from Procard where status in ('初始','已发卡','已发料') and lingliaostatus='否' and procardStyle in('总成','自制')");
		// if (procardList != null && procardList.size() > 0) {
		// Integer errorcount = 0;
		// for (Procard procard : procardList) {
		// boolean ll = false;
		// Set<Procard> sonSet = procard.getProcardSet();
		// if (sonSet != null && sonSet.size() > 0) {
		// for (Procard son : sonSet) {
		// if (son.getProcardStyle().equals("外购")
		// && (son.getNeedProcess() == null || !son
		// .getNeedProcess().equals("yes"))
		// && (son.getLingliaostatus() == null || !son
		// .getLingliaostatus().equals("否"))) {
		// // 外购件需要领料
		// ll = true;
		// break;
		// }
		// }
		// }
		// if (ll
		// && (procard.getLingliaostatus() != null && procard
		// .getLingliaostatus().equals("否"))) {// 需要领料但是设置为不领料
		// System.out.println(procard.getMarkId());
		// procard.setLingliaostatus("是");
		// if (procard.getStatus().equals("初始")) {
		// totalDao.update(procard);
		// } else {
		// procard.setStatus("已发卡");
		// jihuoSingleProcard(procard);
		// }
		// errorcount++;
		// }
		// // if (!ll
		// // && (procard.getLingliaostatus() == null && procard
		// // .getLingliaostatus().equals("是"))) {
		// // if (procard.getStatus().equals("初始")) {
		// // procard.setLingliaostatus("否");
		// // totalDao.update(procard);
		// // } else {
		// // procard.setLingliaostatus("否");
		// // procard.setKlNumber(procard.getFilnalCount());
		// // procard.setHascount(0f);
		// // procard.setSbStatus("已发料");
		// // totalDao.update(procard);
		// // }
		// // }
		// }
		// return errorcount + "个";
		// }
		// return null;
	}

	@Override
	public Object[] yulan_nowwyx(Integer id) {

		// if (id == null) {
		// String hql_lsJihuo =
		// "from Procard where procardStyle='自制' and status='已发卡' and (jihuoStatua<>'激活' or jihuoStatua is null)";
		// List<Procard> list_wjh = totalDao.query(hql_lsJihuo);
		// for (Procard procard : list_wjh) {
		// jihuoSingleProcard(procard);
		// }
		// return list_wjh.size() + "条异常数据已处理";
		// }
		List<Procard> procardList = new ArrayList<Procard>();
		Procard totalProcard0 = (Procard) totalDao.getObjectById(Procard.class,
				id);
		Procard totalProcard = new Procard();
		BeanUtils.copyProperties(totalProcard0, totalProcard, new String[] {});
		if (totalProcard == null) {
			return new Object[] { "没有找到目标流水卡!", null, null };
		} else {
			// if(totalProcard.getOrderId()!=null){
			// OrderManager order = (OrderManager) totalDao.get(
			// OrderManager.class, Integer.parseInt(totalProcard
			// .getOrderId()));
			// OrderManager ycorder = null;
			// if (order != null && order.getOrderId() != null) {
			// ycorder = (OrderManager) totalDao.get(OrderManager.class, order
			// .getOrderId());
			// }
			// }

			String nowTimne = Util.getDateTime();
			// String hql_old =
			// "from Users where onWork in ('在职','试用') and id in"
			// +
			// "(select userId from ProcessinforPeople where procard.markId ='DKBA8.045.2435' and  and procard.id<49567 order by selfCard desc)";
			// List userList = totalDao.query(hql_old);

			if (totalProcard != null) {
				Float unOverCount = (Float) totalDao
						.getObjectByCondition(
								"select count(*) from ProcessInforWWApply where status in('未申请','未审批','审批中') and procardId=?",
								totalProcard.getId());
				if (unOverCount != null && unOverCount > 0) {
					return new Object[] { "有外委预选未处理完,请处理完再点击!", null, null };
				}
				/************* 查看是否需要开启 无限物料 模式 **************/
				// String hql1 =
				// "select valueCode from CodeTranslation where type = 'sys' and keyCode='无限物料' and valueName='MRP'";
				// String valueCode = (String)
				// totalDao.getObjectByCondition(hql1);
				String valueCode = "";
				// 这里根据系统设置是否需要确认不需要的话状态设置为“待采购”
				totalProcard.setWlstatus("待确认");
				// 这里根据系统设置是否需要确认

				/******************* 开始计算整个bom的采购数量 ***********************/
				String hql_caigouN = "from Procard where rootId=? and procardStyle='外购'";
				List list_caigou = totalDao.query(hql_caigouN, totalProcard
						.getId());
				for (int i = 0; i < list_caigou.size(); i++) {
					Procard procard0 = (Procard) list_caigou.get(i);

					Procard procard = new Procard();
					BeanUtils.copyProperties(procard0, procard,
							new String[] { "id" });
					Float needNumber = procard.getFilnalCount();// 原材料/外购件的需求总量
					// 判断外委数量
					if (procard.getWwblCount() != null
							&& procard.getWwblCount() > 0) {
						needNumber -= procard.getWwblCount();
						if ((needNumber * procard.getQuanzi1() / procard
								.getQuanzi2()) < 0.05) {// 过滤小数点问题
							needNumber = 0f;
						}
						if (needNumber <= 0) {
							continue;
						}
					}
					procard.setWgjihuoTime(nowTimne);
					if (!"TK".equals(procard.getKgliao())
							&& !"TK AVL".equals(procard.getKgliao())
							&& !"TK Price".equals(procard.getKgliao())
							&& !"CS".equals(procard.getKgliao())) {
						procard.setKgliao("TK");
					}
					// Float number = procard.getNeedCount();
					if (procard.getProductStyle() != null
							&& procard.getProductStyle().equals("试制")) {// 试制外购件参与计算的数据全设置
						procard.setSingleDuration(1f);
						procard.setCapacity(1f);
						procard.setCapacitySurplus(1f);
						procard.setCapacityRatio(1f);
						procard.setDeliveryDuration(1f);
						procard.setDeliveryRatio(1f);
						procard.setDeliveryPeriod(1);
						procard.setDeliveryAmount(1f);
						procard.setProSingleDuration(1f);
						procard.setAllJiepai(1f);
					}
					/***************** MRP计算(库存量&&&&&占用量) *****************/
					String kgsql = "";
					if (procard.getKgliao() != null
							&& procard.getKgliao().length() > 0) {
						kgsql += " and kgliao ='" + procard.getKgliao() + "'";
					}
					String goodsClassSql = " and goodsClass in ('外购件库') "
							+ kgsql;
					String banben_hql = "";
					String banben_hql2 = "";
					if (procard.getBanBenNumber() != null
							&& procard.getBanBenNumber().length() > 0) {
						banben_hql = " and banBenNumber='"
								+ procard.getBanBenNumber() + "'";
						banben_hql2 = " and banben='"
								+ procard.getBanBenNumber() + "'";
					}
					String specification_sql = "";
					// if (procard.getSpecification() != null
					// && procard.getSpecification().length() > 0) {
					// specification_sql = " and specification = '"
					// + procard.getSpecification() + "'";
					// }

					// 库存量(件号+版本+供料属性+库别)
					String hqlGoods = "";
					hqlGoods = "select sum(goodsCurQuantity) from Goods where goodsMarkId=? "
							+ goodsClassSql
							+ " and goodsCurQuantity>0 "
							+ banben_hql
							+ " and (fcStatus is null or fcStatus='可用')";
					Float kcCount = (Float) totalDao.getObjectByCondition(
							hqlGoods, procard.getMarkId());
					if (kcCount == null || kcCount < 0) {
						kcCount = 0f;
					}

					/****************** 占用量=生产占用量+导入占用量 ******************************/
					// 系统占用量(含损耗)(已计算过采购量(1、有库存 2、采购中)，未领料)
					String zyCountSql = "select sum(hascount) from Procard where markId=? and kgliao=? "
							+ banben_hql
							+ " and jihuoStatua='激活' and (status='已发卡' or (oldStatus='已发卡' and status='设变锁定')) and procardStyle='外购' and (lingliaostatus='是' or lingliaostatus is null ) "
							+ " and (sbStatus<>'删除' or sbStatus is null ) ";
					Double zyCountD = (Double) totalDao.getObjectByConditionforDouble(
							zyCountSql, procard.getMarkId(), procard
									.getKgliao());
					if (zyCountD == null || zyCountD < 0) {
						zyCountD = 0d;
					}
					Float zyCount = zyCountD.floatValue();

					// // 导入占用量(系统切换时导入占用量)
					// String hqlGoods_zy =
					// "select sum(goodsCurQuantity) from Goods where goodsMarkId=?"
					// + banben_hql
					// +
					// " and goodsClass in ('占用库') and kgliao=? and goodsCurQuantity>0 and (fcStatus is null or fcStatus='可用')";
					// Float kcCount_zy = (Float) totalDao.getObjectByCondition(
					// hqlGoods_zy, procard.getMarkId(), procard
					// .getKgliao());
					// if (kcCount_zy == null || kcCount_zy < 0) {
					// kcCount_zy = 0f;
					// }
					// zyCount += kcCount_zy;
					// if (zyCount < 0) {
					// zyCount = 0F;
					// }
					/****************** 结束 占用量=生产占用量+导入占用量 结束 ******************************/
					/****************** 在途量=采购在途量+导入在途量 ******************************/
					// 系统在途量(已生成采购计划，未到货)
					// String hql_zc =
					// "select sum(cgNumber-dhNumber) from  Procard where markId=? and productStyle=? "
					// + banben_hql
					// +
					// " and kgliao=? and jihuoStatua='激活' and status='已发卡' and procardStyle='外购'"
					// +
					// " and cgNumber >0 and dhNumber is not null and (sbStatus is null or sbStatus!='删除')";
					// Float ztCount = (Float) totalDao.getObjectByCondition(
					// hql_zc, procard.getMarkId(), procard
					// .getProductStyle(), procard.getKgliao());

					// 系统在途量(已生成物料需求信息，未到货)
					String hql_zc0 = "select sum(number-ifnull(rukuNum,0)) from ManualOrderPlan where markId = ?  "
							+ banben_hql2
							+ " and kgliao=? and (number>rukuNum or rukuNum is null) and (status<>'取消' or status is null)"
							+ specification_sql;
					Double ztCountd = (Double) totalDao.getObjectByCondition(
							hql_zc0, procard.getMarkId(), procard.getKgliao());
					if (ztCountd == null) {
						ztCountd = 0D;
					}
					Float ztCount = ztCountd.floatValue();

					// // 导入在途量(系统切换时导入在途量)
					// String hqlGoods_zt =
					// "select sum(goodsCurQuantity) from Goods where goodsMarkId=?"
					// + banben_hql
					// +
					// " and kgliao=? and goodsClass in ('在途库') and goodsCurQuantity>0 and (fcStatus is null or fcStatus='可用')";
					// Float kcCount_zt = (Float) totalDao.getObjectByCondition(
					// hqlGoods_zt, procard.getMarkId(), procard
					// .getKgliao());
					// if (kcCount_zt == null || kcCount_zt < 0) {
					// kcCount_zt = 0f;
					// }
					// ztCount += kcCount_zt;
					// if (ztCount < 0) {
					// ztCount = 0F;
					// }
					/****************** 结束 在途量=采购在途量+导入在途量 结束 ******************************/
					// (库存量+在途量(已生成采购，未到货))-占用量=剩余可用库存量
					Float daizhiCount = (kcCount + ztCount) - zyCount;
					if (daizhiCount < 0) {
						daizhiCount = 0F;
					}
					// 无限物料模式 库存根据需求数量自动增加
					if (needNumber > daizhiCount && "是".equals(valueCode)) {
						String hqlgoods = "from Goods where goodsMarkId=? "
								+ goodsClassSql + " and goodsCurQuantity>0 "
								+ banben_hql
								+ " and (fcStatus is null or fcStatus='可用')";
						Goods goods = (Goods) totalDao.getObjectByCondition(
								hqlgoods, procard.getMarkId());
						if (goods != null) {
							goods.setGoodsCurQuantity(goods
									.getGoodsCurQuantity()
									+ procard.getFilnalCount());
						} else {
							goods = new Goods();
							goods.setGoodsMarkId(procard.getMarkId());
							if (procard.getBanBenNumber() != null
									&& procard.getBanBenNumber().length() > 0) {
								goods
										.setBanBenNumber(procard
												.getBanBenNumber());
							}
							goods.setGoodsFullName(procard.getProName());
							goods.setGoodsClass("外购件库");
							if (procard.getKgliao() != null
									&& procard.getKgliao().length() > 0) {
								goods.setKgliao(procard.getKgliao());
							}
							goods.setGoodsCurQuantity(procard.getFilnalCount());
						}
						daizhiCount += needNumber;
					}
					// Float caigouCount = 0F;// 临时屏蔽
					// 激活外购件并判断数量是否足够(外购件保持
					// finalCount=klnumber=hasCount，变动是tjNumber,minNumber
					// )
					procard.setJihuoStatua("激活");
					procard.setStatus("已发卡");
					procard.setKlNumber(needNumber);
					procard.setHascount(needNumber);
					procard.setTjNumber(0F);
					procard.setMinNumber(0F);
					procard.setDhNumber(0F);
					procard.setZzNumber(zyCount);// 占用
					procard.setZtNumber(ztCount);// 在途

					procard.setKcNumber(kcCount);// 库存

					// 剩余可用库存量多余
					if (daizhiCount > 0) {
						/****
						 * 有可用量（库存+在途）
						 */
						// 待采购量(需求数量-呆滞数量)
						Float dcgNumber = needNumber - daizhiCount;

						// 计算可激活数量(// 库存减去占用 大于 0的为可激活量)
						Float tjnumber = kcCount - zyCount;
						if (tjnumber > 0) {
							if (tjnumber > needNumber) {
								// 剩余可用库存大于需求数量（说明实际库存充足，全部激活，无需采购）
								procard.setTjNumber(needNumber);
							} else {
								// 按照多余的库存激活（部分采购）
								procard.setTjNumber(tjnumber);
							}
						}

						// 可用量小于待采购量（部分采购）
						if (dcgNumber > 0) {
							procard.setCgNumber(dcgNumber);
							procard.setWlstatus("待采购");
							// (部分库存)
							if (tjnumber > 0) {
								procard.setZtzyNumber(daizhiCount - tjnumber);
							} else {// 无多余库存,在途补充
								procard.setZtzyNumber(daizhiCount);
							}
						} else {
							// 可用量大于待采购量，不再进行采购
							procard.setCgNumber(0F);
							// 存在多余库存量
							if (tjnumber > 0) {
								if (tjnumber >= needNumber) {
									// 多余库存量可以满足本次需求
									procard.setWlstatus("入库");
								} else {
									// 只有部分库存，不满足本次需求的使用在途
									procard
											.setZtzyNumber(needNumber
													- tjnumber);
								}
							} else {
								// 全部是在途数量
								procard.setZtzyNumber(needNumber);
								procard.setGongwei("在途");
							}
						}
						// 换算最小激活数量
						Float minNumber = procard.getTjNumber()
								/ procard.getQuanzi2() * procard.getQuanzi1();
						if (procard.getTjNumber().equals(needNumber)) {
							minNumber = (float) Math.ceil(minNumber);
						}
						procard.setMinNumber(minNumber);

					} else {
						// 无库存，完全采购
						procard.setCgNumber(needNumber);
						procard.setWlstatus("待采购");
						procard.setGongwei("待采购");
					}
					// 计算损耗率，提高采购量
					if (procard.getSunhao() != null && procard.getSunhao() > 0) {
						Float cgNumber = procard.getCgNumber()
								* (100 + procard.getSunhao()) / 100;
						if ("个".equals(procard.getUnit())
								|| "pcs".equals(procard.getUnit())
								|| "PCS".equals(procard.getUnit())) {
							Double newnum = Math.ceil(cgNumber);
							cgNumber = newnum.floatValue();
						}
						procard.setCgNumber(cgNumber);
					}
					// 客供料，无需采购
					if ("CS".equals(procard.getKgliao())) {
						procard.setCgNumber(null);
						procard.setWlstatus("入库");
						procard.setGongwei("CS");
					}
					if ("否".equals(procard.getLingliaostatus())) {
						procard.setCgNumber(null);
						procard.setWlstatus("入库");
						procard.setGongwei("虚拟");
						procard.setJihuoStatua("激活");
						procard.setStatus("完成");
						procard.setKlNumber(needNumber);
						procard.setHascount(0F);
						procard.setTjNumber(needNumber);
						procard.setMinNumber(needNumber);
						procard.setDhNumber(needNumber);
					}

					// 半成品不能直接设置激活数量
					if (procard.getNeedProcess() != null
							&& procard.getNeedProcess().equals("yes")) {
						procard.setKlNumber(procard.getTjNumber());
						procard.setHascount(procard.getKlNumber());
						procard.setKlNumber(procard.getTjNumber());// 将外购件的激活数量作为半成品的可领数量
						procard.setMinNumber(procard.getTjNumber());
						procard.setTjNumber(0F);
						procard.setMinNumber(0F);
						procard.setJihuoStatua(null);
						procard.setStatus("初始");
					}
					if (procard.getCgNumber() != null) {
						procard.setOutcgNumber(0F);
					}
					procardList.add(procard);
				}

			}
			return new Object[] { "true", procardList, totalProcard };
		}

	}

	@Override
	public void exportWwApplyDetail(Integer id) {
		ProcessInforWWApply wwApply = (ProcessInforWWApply) totalDao
				.getObjectById(ProcessInforWWApply.class, id);
		if (wwApply != null) {
			try {
				HttpServletResponse response = (HttpServletResponse) ActionContext
						.getContext().get(StrutsStatics.HTTP_RESPONSE);
				OutputStream os = response.getOutputStream();
				response.reset();
				String fileName = wwApply.getMarkId() + "第"
						+ wwApply.getSelfCard() + "批次委外申请明细";
				response.setHeader("Content-disposition",
						"attachment; filename="
								+ new String(fileName.getBytes("GB2312"),
										"8859_1") + ".xls");
				response.setContentType("application/msexcel");
				WritableWorkbook wwb = Workbook.createWorkbook(os);
				WritableSheet ws = wwb.createSheet("sheet1", 0);
				ws.setColumnView(1, 18);
				ws.setColumnView(5, 18);
				ws.addCell(new Label(0, 0, "总成"));
				ws.addCell(new Label(1, 0, wwApply.getMarkId() + "("
						+ wwApply.getYwMarkId() + ")"));
				ws.addCell(new Label(2, 0, "批次"));
				ws.addCell(new Label(3, 0, wwApply.getSelfCard()));
				ws.addCell(new Label(4, 0, "订单编号"));
				ws.addCell(new Label(5, 0, wwApply.getOrderNumber()));
				ws.addCell(new Label(6, 0, "批次数量"));
				ws.addCell(new Label(7, 0, wwApply.getFinalCount() + ""));
				ws.addCell(new Label(8, 0, "申请人"));
				ws.addCell(new Label(9, 0, wwApply.getUserName()));
				ws.addCell(new Label(10, 0, "申请时间"));
				ws.addCell(new Label(11, 0, wwApply.getAddTime()));
				Set<ProcessInforWWApplyDetail> wwApplyDetailSet = wwApply
						.getProcessInforWWApplyDetails();
				ws.addCell(new Label(0, 2, "序号"));
				ws.addCell(new Label(1, 2, "供应商"));
				ws.addCell(new Label(2, 2, "件号"));
				ws.addCell(new Label(3, 2, "零件名称"));
				ws.addCell(new Label(4, 2, "批次"));
				ws.addCell(new Label(5, 2, "版本"));
				ws.addCell(new Label(6, 2, "版次"));
				ws.addCell(new Label(7, 2, "工序号"));
				ws.addCell(new Label(8, 2, "工序名称"));
				ws.addCell(new Label(9, 2, "数量"));
				ws.addCell(new Label(10, 2, "外委类型"));
				ws.addCell(new Label(11, 2, "添加人"));
				ws.addCell(new Label(12, 2, "添加时间"));
				ws.addCell(new Label(13, 2, "关联外购件"));
				int i = 2;
				int xuhao = 1;
				for (ProcessInforWWApplyDetail wwApplyDetail : wwApplyDetailSet) {
					if ("删除".equals(wwApplyDetail.getProcessStatus())
							|| "取消".equals(wwApplyDetail.getDataStatus())
							|| "删除".equals(wwApplyDetail.getDataStatus())
							|| "取消".equals(wwApplyDetail.getDataStatus())) {
						continue;
					}
					ws.addCell(new Label(0, i + 1, xuhao + ""));
					ws.addCell(new Label(1, i + 1, wwApplyDetail.getGysName()));
					ws.addCell(new Label(2, i + 1, wwApplyDetail.getMarkId()));
					ws.addCell(new Label(3, i + 1, wwApplyDetail.getProName()));
					ws
							.addCell(new Label(4, i + 1, wwApplyDetail
									.getSelfCard()));
					ws.addCell(new Label(5, i + 1, wwApplyDetail
							.getBanbenNumber()));
					ws.addCell(new Label(6, i + 1, wwApplyDetail.getBanci()
							+ ""));
					ws.addCell(new Label(7, i + 1, wwApplyDetail
							.getProcessNOs()));
					ws.addCell(new Label(8, i + 1, wwApplyDetail
							.getProcessNames()));
					ws.addCell(new Label(9, i + 1, wwApplyDetail
							.getApplyCount()
							+ ""));
					ws.addCell(new Label(10, i + 1, wwApplyDetail.getWwType()));
					ws
							.addCell(new Label(11, i + 1, wwApplyDetail
									.getUserName()));
					ws
							.addCell(new Label(12, i + 1, wwApplyDetail
									.getAddTime()));
					ws
							.addCell(new Label(13, i + 1, wwApplyDetail
									.getWwMarkId()));
					i++;
					xuhao++;
				}
				wwb.write();
				wwb.close();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (WriteException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void findDaoChuBomByWaigou(List<Procard> list, String pageStatus) {
		// TODO Auto-generated method stub
		try {
			HttpServletResponse response = (HttpServletResponse) ActionContext
					.getContext().get(ServletActionContext.HTTP_RESPONSE);
			OutputStream os = response.getOutputStream();
			response.reset();
			response
					.setHeader("Content-disposition", "attachment; filename="
							+ new String("外购件导出".getBytes("GB2312"), "8859_1")
							+ ".xls");
			response.setContentType("application/msexcel");

			SXSSFWorkbook workBook = new SXSSFWorkbook(50000);
			org.apache.poi.ss.usermodel.Sheet sheet = workBook
					.createSheet("外购件导出");
			Row row = sheet.createRow(2);
			CellRangeAddress rangeAddress = new CellRangeAddress(0, 0, 1, 8);
			CellStyle style = workBook.createCellStyle();
			style.setAlignment(HorizontalAlignment.CENTER);
			Font font = workBook.createFont();
			font.setFontHeightInPoints((short) 16);
			font.setBold(true);
			style.setFont(font);
			sheet.addMergedRegion(rangeAddress);
			row = sheet.createRow(0);
			org.apache.poi.ss.usermodel.Cell cell = row.createCell(1);
			cell.setCellValue("外购件导出");
			cell.setCellStyle(style);

			row = sheet.createRow(1);
			cell = row.createCell(0, CellType.STRING);
			cell.setCellValue("订单编号");
			cell = row.createCell(1, CellType.STRING);
			cell.setCellValue("件号");
			cell = row.createCell(2, CellType.STRING);
			cell.setCellValue("总成件号");
			cell = row.createCell(3, CellType.STRING);
			cell.setCellValue("业务件号");
			cell = row.createCell(4, CellType.STRING);
			cell.setCellValue("名称");
			cell = row.createCell(5, CellType.STRING);
			cell.setCellValue("卡片类型");
			cell = row.createCell(6, CellType.STRING);
			cell.setCellValue("产品类型");
			cell = row.createCell(7, CellType.STRING);
			cell.setCellValue("批次");
			cell = row.createCell(8, CellType.STRING);
			cell.setCellValue("计划下达时间");
			cell = row.createCell(9, CellType.STRING);
			cell.setCellValue("负责人");
			cell = row.createCell(10, CellType.STRING);
			cell.setCellValue("产品开始时间");
			cell = row.createCell(11, CellType.STRING);
			cell.setCellValue("产品入库时间");
			cell = row.createCell(12, CellType.STRING);
			cell.setCellValue("生产数量");
			cell = row.createCell(13, CellType.STRING);
			cell.setCellValue("采购数量");
			cell = row.createCell(14, CellType.STRING);
			cell.setCellValue("可领数量");
			cell = row.createCell(15, CellType.STRING);
			cell.setCellValue("已领数量");
			cell = row.createCell(16, CellType.STRING);
			cell.setCellValue("提交数量");
			cell = row.createCell(17, CellType.STRING);
			cell.setCellValue("剩余数量");
			cell = row.createCell(18, CellType.STRING);
			cell.setCellValue("版本");
			int ii = 0;
			for (int i = 0; i < list.size(); i++) {
				ii = i + 2;
				row = sheet.createRow(ii);
				Procard pt = (Procard) list.get(i);
				cell = row.createCell(0, CellType.STRING);
				cell.setCellValue(pt.getOrderNumber());
				cell = row.createCell(1, CellType.STRING);
				cell.setCellValue(pt.getMarkId());
				cell = row.createCell(2, CellType.STRING);
				cell.setCellValue(pt.getRootMarkId());
				cell = row.createCell(3, CellType.STRING);
				cell.setCellValue(pt.getYwMarkId());
				cell = row.createCell(4, CellType.STRING);
				cell.setCellValue(pt.getProName());
				if (pt.getProcardStyle() != null
						&& pt.getProcardStyle().equals("外购")
						&& pt.getNeedProcess() != null
						&& pt.getNeedProcess().equals("yes")) {
					cell = row.createCell(5, CellType.STRING);
					cell.setCellValue("外购半成品");
				} else {
					cell = row.createCell(5, CellType.STRING);
					cell.setCellValue(pt.getProcardStyle());
				}
				cell = row.createCell(6, CellType.STRING);
				cell.setCellValue(pt.getProductStyle());
				cell = row.createCell(7, CellType.STRING);
				cell.setCellValue(pt.getSelfCard());
				cell = row.createCell(8, CellType.STRING);
				cell.setCellValue(pt.getProcardTime());
				cell = row.createCell(9, CellType.STRING);
				cell.setCellValue(pt.getZhikaren());
				cell = row.createCell(10, CellType.STRING);
				cell.setCellValue(pt.getJihuoDate());
				cell = row.createCell(11, CellType.STRING);
				cell.setCellValue(pt.getNeedFinalDate());
				cell = row.createCell(12, CellType.STRING);
				cell.setCellValue(pt.getFilnalCount() == null ? 0 : Util
						.fiveWei(pt.getFilnalCount()));// 数量
				cell = row.createCell(13, CellType.STRING);
				cell.setCellValue(pt.getCgNumber() == null ? 0 : Util
						.fiveWei(pt.getCgNumber()));// 采购数量
				cell = row.createCell(14, CellType.STRING);
				cell.setCellValue(pt.getKlNumber() == null ? 0 : Util
						.fiveWei(pt.getKlNumber()));// 可领
				cell = row.createCell(15, CellType.STRING);
				cell.setCellValue(pt.getKlNumber() == null ? 0 : Util
						.fiveWei(pt.getKlNumber() - pt.getHascount()));// 已领
				cell = row.createCell(16, CellType.STRING);
				cell.setCellValue(pt.getTjNumber() == null ? 0 : Util
						.fiveWei(pt.getTjNumber()));// 提交
				cell = row.createCell(17, CellType.STRING);
				cell.setCellValue(pt.getHascount() == null ? 0 : Util
						.fiveWei(pt.getHascount()));// 剩余
				cell = row.createCell(18, CellType.STRING);
				cell.setCellValue(pt.getBanBenNumber());// 剩余
			}
			workBook.write(os);
			workBook.close();// 记得关闭工作簿
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void findDaoChuBomByRootIdWaigou(Set<Integer> rootIdSet,
			String pageStatus) {
		// TODO Auto-generated method stub
		try {
			HttpServletResponse response = (HttpServletResponse) ActionContext
					.getContext().get(ServletActionContext.HTTP_RESPONSE);
			OutputStream os = response.getOutputStream();
			response.reset();
			response
					.setHeader("Content-disposition", "attachment; filename="
							+ new String("外购件导出".getBytes("GB2312"), "8859_1")
							+ ".xls");
			response.setContentType("application/msexcel");
			WritableWorkbook wwb = Workbook.createWorkbook(os);
			WritableSheet ws = wwb.createSheet("外购件导出", 0);
			ws.setColumnView(4, 20);
			ws.setColumnView(3, 10);
			ws.setColumnView(1, 12);
			WritableFont wf = new WritableFont(WritableFont.ARIAL, 8,
					WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE,
					Colour.BLACK);
			WritableCellFormat wc = new WritableCellFormat(wf);
			wc.setAlignment(Alignment.LEFT);
			ws.addCell(new jxl.write.Label(9, 0, "外购件导出", wc));

			ws.addCell(new jxl.write.Label(0, 2, "层次", wc));
			ws.addCell(new jxl.write.Label(1, 2, "物料名称", wc));
			ws.addCell(new jxl.write.Label(2, 2, "规格型号", wc));
			ws.addCell(new jxl.write.Label(3, 2, "物料属性", wc));
			ws.addCell(new jxl.write.Label(4, 2, "件号", wc));
			ws.addCell(new jxl.write.Label(5, 2, "图号", wc));
			ws.addCell(new jxl.write.Label(6, 2, "单位", wc));
			ws.addCell(new jxl.write.Label(7, 2, "单位用量", wc));
			ws.addCell(new jxl.write.Label(8, 2, "单台用量(导入前删除)", wc));
			ws.addCell(new jxl.write.Label(9, 2, "版本", wc));
			ws.addCell(new jxl.write.Label(10, 2, "使用工序", wc));
			ws.addCell(new jxl.write.Label(11, 2, "采购数量", wc));
			ws.addCell(new jxl.write.Label(12, 2, "生产数量", wc));
			ws.addCell(new jxl.write.Label(13, 2, "可领数量", wc));
			ws.addCell(new jxl.write.Label(14, 2, "已领数量", wc));
			ws.addCell(new jxl.write.Label(15, 2, "提交数量", wc));
			ws.addCell(new jxl.write.Label(16, 2, "剩余数量", wc));
			ws.addCell(new jxl.write.Label(17, 2, "供料属性", wc));
			// totalCard.setXiaohaoCount(1f);
			for (Integer integer : rootIdSet) {
				Procard totalCard = (Procard) totalDao.getObjectById(
						Procard.class, integer);
				if (totalCard != null)
					daochuBom3(totalCard, 3, ws, wc, pageStatus);
			}
			wwb.write();
			wwb.close();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (WriteException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void findDaoChuBomByRootId(Integer rootId, String pageStatus) {
		// TODO Auto-generated method stub
		try {
			HttpServletResponse response = (HttpServletResponse) ActionContext
					.getContext().get(ServletActionContext.HTTP_RESPONSE);
			Procard totalCard = (Procard) totalDao.getObjectById(Procard.class,
					rootId);
			OutputStream os = response.getOutputStream();
			response.reset();
			String name = totalCard.getMarkId();
			if (name == null || name.length() == 0) {
				name = totalCard.getMarkId();
			}
			response.setHeader("Content-disposition", "attachment; filename="
					+ new String(name.getBytes("GB2312"), "8859_1") + ".xls");
			response.setContentType("application/msexcel");
			WritableWorkbook wwb = Workbook.createWorkbook(os);
			WritableSheet ws = wwb.createSheet(name + "生产Bom明细", 0);
			ws.setColumnView(4, 20);
			ws.setColumnView(3, 10);
			ws.setColumnView(2, 20);
			ws.setColumnView(1, 12);
			WritableFont wf = new WritableFont(WritableFont.ARIAL, 8,
					WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE,
					Colour.BLACK);
			WritableCellFormat wc = new WritableCellFormat(wf);
			wc.setAlignment(Alignment.LEFT);
			ws.addCell(new jxl.write.Label(9, 0, name + "总成", wc));

			ws.addCell(new jxl.write.Label(0, 2, "层次", wc));
			ws.addCell(new jxl.write.Label(1, 2, "物料名称", wc));
			ws.addCell(new jxl.write.Label(2, 2, "规格型号", wc));
			ws.addCell(new jxl.write.Label(3, 2, "物料属性", wc));
			ws.addCell(new jxl.write.Label(4, 2, "件号", wc));
			ws.addCell(new jxl.write.Label(5, 2, "图号", wc));
			ws.addCell(new jxl.write.Label(6, 2, "单位", wc));
			ws.addCell(new jxl.write.Label(7, 2, "单位用量", wc));
			ws.addCell(new jxl.write.Label(8, 2, "单台用量(导入前删除)", wc));
			ws.addCell(new jxl.write.Label(9, 2, "版本", wc));
			ws.addCell(new jxl.write.Label(10, 2, "使用工序", wc));
			ws.addCell(new jxl.write.Label(11, 2, "采购数量", wc));
			ws.addCell(new jxl.write.Label(12, 2, "生产数量", wc));
			ws.addCell(new jxl.write.Label(13, 2, "可领数量", wc));
			ws.addCell(new jxl.write.Label(14, 2, "已领数量", wc));
			ws.addCell(new jxl.write.Label(15, 2, "提交数量", wc));
			ws.addCell(new jxl.write.Label(16, 2, "剩余数量", wc));
			ws.addCell(new jxl.write.Label(17, 2, "供料属性", wc));
			totalCard.setXiaohaoCount(1f);
			daochuBom2(totalCard, 3, ws, wc, pageStatus);
			wwb.write();
			wwb.close();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (WriteException e) {
			e.printStackTrace();
		}
	}

	// 导出单个总成 生产零件 Excel
	public void exportProcard(Integer id) {
		try {
			Procard totalCard = (Procard) totalDao.get(Procard.class, id);
			String hql = " FROM Procard where id IN (SELECT procard.id FROM ProcessInfor where (dataStatus is null or dataStatus!='删除'))  and rootId = ?  ";
			//
			// List<Procard> all = totalDao.query(hql, new Object[] { id });
			// 把同件号的合并一下数量

			// Map<String, Procard> dif = new HashMap<String, Procard>();
			// for (Procard p : all) {
			// Float danTai = gainDanTai(p, null);
			// p.setCorrCountDao(danTai);
			// if (dif.get(p.getMarkId()) == null) {
			// dif.put(p.getMarkId(), p);
			// } else {
			// Procard p0 = dif.get(p.getMarkId());
			// p0.setCorrCountDao(danTai + p0.getCorrCountDao());
			// p0.setCountDao(p.getFilnalCount() + p0.getFilnalCount());
			// dif.put(p0.getMarkId(), p0);
			// }
			// }

			HttpServletResponse response = (HttpServletResponse) ActionContext
					.getContext().get(ServletActionContext.HTTP_RESPONSE);

			OutputStream os = response.getOutputStream();
			response.reset();

			String mark = totalCard.getYwMarkId() + "--生产零件";
			response.setHeader("Content-disposition", "attachment; filename="
					+ new String(mark.getBytes("GB2312"), "8859_1") + ".xls");
			response.setContentType("application/msexcel");
			WritableWorkbook wwb = Workbook.createWorkbook(os);
			// WritableSheet ws =null;
			WritableFont wf = new WritableFont(WritableFont.ARIAL, 8,
					WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE,
					Colour.BLACK);
			WritableCellFormat wc = new WritableCellFormat(wf);
			WritableSheet ws = wwb.createSheet(mark, 0);
			ws.setColumnView(0, 5);
			ws.setColumnView(1, 18);
			ws.setColumnView(2, 4);
			ws.setColumnView(3, 4);
			ws.setColumnView(4, 4);
			ws.setColumnView(5, 4);
			ws.setColumnView(6, 4);
			ws.setColumnView(7, 4);
			ws.setColumnView(8, 4);
			ws.setColumnView(9, 4);
			ws.setColumnView(10, 4);
			ws.setColumnView(11, 4);

			ws.addCell(new Label(0, 0, "序号"));
			ws.addCell(new Label(1, 0, "图号"));
			ws.addCell(new Label(2, 0, "层次"));
			ws.addCell(new Label(3, 0, "层次"));
			ws.addCell(new Label(4, 0, "层次"));
			ws.addCell(new Label(5, 0, "层次"));
			ws.addCell(new Label(6, 0, "层次"));
			ws.addCell(new Label(7, 0, "层次"));
			ws.addCell(new Label(8, 0, "层次"));
			ws.addCell(new Label(9, 0, "层次"));
			ws.addCell(new Label(10, 0, "层次"));
			ws.addCell(new Label(11, 0, "层次"));
			ws.addCell(new Label(12, 0, "名称"));
			ws.addCell(new Label(13, 0, "材质"));
			ws.addCell(new Label(14, 0, "单台数量"));
			ws.addCell(new Label(15, 0, "订单数量"));
			ws.addCell(new Label(16, 0, "备注"));
			ws.addCell(new Label(17, 0, "版本号"));
			ws.addCell(new Label(18, 0, "加工工序"));
			daochuBom4(totalCard, 1, ws, wc, "总成");
			wwb.write();
			wwb.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (RowsExceededException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WriteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	// 导出和页面显示一样的效果

	public void exportforpage(Procard procard, String startTime, String endTime) {
		try {
			if (procard == null) {
				procard = new Procard();
			}
			HttpServletResponse response = (HttpServletResponse) ActionContext
					.getContext().get(ServletActionContext.HTTP_RESPONSE);

			OutputStream os = response.getOutputStream();
			response.reset();

			String mark = "总成批次导出列表";
			// response.setHeader("Content-disposition", "attachment; filename="
			// + new String(mark.getBytes("GB2312"), "8859_1") + ".xls");
			response.setContentType("application/msexcel");

			SXSSFWorkbook workBook = new SXSSFWorkbook(50000);
			org.apache.poi.ss.usermodel.Sheet sheet = workBook
					.createSheet(mark);
			Row row = sheet.createRow(2);

			CellStyle style = workBook.createCellStyle();
			style.setAlignment(HorizontalAlignment.CENTER);
			Font font = workBook.createFont();
			font.setFontHeightInPoints((short) 16);
			font.setBold(true);
			style.setFont(font);
			row = sheet.createRow(0);
			org.apache.poi.ss.usermodel.Cell cell = row.createCell(1);

			cell = row.createCell(0, CellType.STRING);
			cell.setCellValue("序号");
			cell = row.createCell(1, CellType.STRING);
			cell.setCellValue("订单编号 (内部)");
			cell = row.createCell(2, CellType.STRING);
			cell.setCellValue("件号");
			cell = row.createCell(3, CellType.STRING);
			cell.setCellValue("业务件号");
			cell = row.createCell(4, CellType.STRING);
			cell.setCellValue("名称");
			cell = row.createCell(5, CellType.STRING);
			cell.setCellValue("卡片类型");
			cell = row.createCell(6, CellType.STRING);
			cell.setCellValue("产品类型");
			cell = row.createCell(7, CellType.STRING);
			cell.setCellValue("批次");
			cell = row.createCell(8, CellType.STRING);
			cell.setCellValue("计划下达时间");
			cell = row.createCell(9, CellType.STRING);
			cell.setCellValue("负责人");
			cell = row.createCell(10, CellType.STRING);
			cell.setCellValue("产品开始时间");
			cell = row.createCell(11, CellType.STRING);
			cell.setCellValue("入库时间");
			cell = row.createCell(12, CellType.STRING);
			cell.setCellValue("数量");
			cell = row.createCell(13, CellType.STRING);
			cell.setCellValue("待入库数");
			cell = row.createCell(14, CellType.STRING);
			cell.setCellValue("入库数");
			cell = row.createCell(15, CellType.STRING);
			cell.setCellValue("已领数量");
			cell = row.createCell(16, CellType.STRING);
			cell.setCellValue("状态");
			cell = row.createCell(17, CellType.STRING);
			cell.setCellValue("版本");
			cell = row.createCell(18, CellType.STRING);
			cell.setCellValue("供料属性");

			String hql = totalDao.criteriaQueries(procard, null, "status");
			if (startTime != null && !"".equals(startTime)) {
				hql += " and procardTime >= '" + startTime + "'";
			}
			if (endTime != null && !"".equals(endTime)) {
				hql += " and procardTime <= '" + endTime + "'";
			}
			if (procard.getStatus() != null && !"".equals(procard.getStatus())) {
				String[] p_status = procard.getStatus().split(",");
				if (p_status != null && p_status.length > 0) {
					String status_str = "";
					for (int i = 0; i < p_status.length; i++) {
						if ("".equals(status_str)) {
							status_str += "'" + p_status[i] + "'";
						} else {
							status_str += "," + "'" + p_status[i] + "'";
						}
					}
					hql += " and status in (" + status_str + ")";
				}
			}
			hql += " and (sbStatus is null  or sbStatus !='删除')";
			List<Procard> pList = totalDao.query(hql);
			String time = Util.getDateTime();

			if (pList.size() > 60000) {
				response.setHeader("Content-disposition",
						"attachment; filename="
								+ new String(mark.getBytes("GB2312"), "8859_1")
								+ ".xlsx");
			} else {
				response.setHeader("Content-disposition",
						"attachment; filename="
								+ new String(mark.getBytes("GB2312"), "8859_1")
								+ ".xls");
			}
			if (pList != null && pList.size() > 0) {
				for (int i = 0; i < pList.size(); i++) {
					Procard p = pList.get(i);

					row = sheet.createRow(i + 1);
					cell = row.createCell(0, CellType.STRING);
					cell.setCellValue(i + 1);
					cell = row.createCell(1, CellType.STRING);
					cell.setCellValue(p.getOrderNumber());
					cell = row.createCell(2, CellType.STRING);
					cell.setCellValue(p.getMarkId());
					cell = row.createCell(3, CellType.STRING);
					cell.setCellValue(p.getYwMarkId());
					cell = row.createCell(4, CellType.STRING);
					cell.setCellValue(p.getProName());
					cell = row.createCell(5, CellType.STRING);
					cell.setCellValue(p.getProcardStyle());
					cell = row.createCell(6, CellType.STRING);
					cell.setCellValue(p.getProductStyle());
					cell = row.createCell(7, CellType.STRING);
					cell.setCellValue(p.getSelfCard());
					cell = row.createCell(8, CellType.STRING);
					cell.setCellValue(p.getProcardTime());
					cell = row.createCell(9, CellType.STRING);
					cell.setCellValue(p.getZhikaren());

					if (p.getJihuoDate() != null
							&& !"".equals(p.getJihuoDate())) {
						cell = row.createCell(10, CellType.STRING);
						cell.setCellValue(p.getJihuoDate());
					}
					if (p.getNeedFinalDate() != null
							&& !"".equals(p.getNeedFinalDate())) {
						cell = row.createCell(11, CellType.STRING);
						cell.setCellValue(p.getNeedFinalDate());
					}
					cell = row.createCell(12, CellType.STRING);
					cell.setCellValue(p.getFilnalCount() + "");
					if (p.getRukuCount() == null) {
						cell = row.createCell(13, CellType.STRING);
						cell.setCellValue("0");
					} else if (p.getHasRuku() != null) {
						cell = row.createCell(13, CellType.STRING);
						cell.setCellValue((p.getRukuCount() - p.getHasRuku())
								+ "");
					} else {
						cell = row.createCell(13, CellType.STRING);
						cell.setCellValue(p.getRukuCount() + "");
					}
					if ("总成".equals(p.getProcardStyle())) {
						if (p.getHasRuku() == null) {
							cell = row.createCell(14, CellType.STRING);
							cell.setCellValue(0 + "");
						} else {
							cell = row.createCell(14, CellType.STRING);
							cell.setCellValue(p.getHasRuku() + "");
						}
					} else {
						cell = row.createCell(14, CellType.STRING);
						cell.setCellValue("");
					}
					if (p.getFilnalCount() != null
							&& !"".equals(p.getFilnalCount())
							&& p.getHascount() != null
							&& !"".equals(p.getHascount())) {
						cell = row.createCell(15, CellType.STRING);
						cell.setCellValue(p.getFilnalCount() - p.getHascount()
								+ "");
					} else {
						cell = row.createCell(15, CellType.STRING);
						cell.setCellValue(0 + "");
					}
					cell = row.createCell(16, CellType.STRING);
					cell.setCellValue(p.getStatus());
					cell = row.createCell(17, CellType.STRING);
					cell.setCellValue(p.getBanBenNumber());
					cell = row.createCell(18, CellType.STRING);
					cell.setCellValue(p.getKgliao());

				}
			}
			workBook.write(os);
			workBook.close();// 记得关闭工作簿
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private int daochuBom4(Procard p, int i, WritableSheet ws,
			WritableCellFormat wc, String pageStatus) {
		// TODO Auto-generated method stub
		try {

			Float corrCountDao = gainDanTai(p, 1f);
			String xuhao = (i) + "";
			ws.addCell(new Label(0, i, xuhao));
			ws.addCell(new Label(1, i, p.getMarkId()));
			if (p.getBelongLayer() != null) {
				for (int b = 1; b <= 10; b++) {
					if (b == p.getBelongLayer()) {
						ws
								.addCell(new Label(b + 1, i, p.getBelongLayer()
										+ ""));
					} else {
						ws.addCell(new Label(b + 1, i, ""));
					}
				}
			}
			ws.addCell(new Label(12, i, p.getProName()));
			ws.addCell(new Label(13, i, p.getCaizhi()));
			ws.addCell(new jxl.write.Number(14, i, corrCountDao == null ? 1
					: corrCountDao));// 单台数量
			ws.addCell(new jxl.write.Number(15, i,
					p.getFilnalCount() == null ? 1 : p.getFilnalCount()));// 单台数量
			ws.addCell(new Label(16, i, p.getRemark()));
			ws.addCell(new Label(17, i, p.getBanBenNumber()));
			// 工序
			String gongxu = "";
			String hql1 = "from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除') order by processNO";
			List<ProcessInfor> process = totalDao.query(hql1, new Object[] { p
					.getId() });
			if (process != null && process.size() > 0) {
				int index = 18;
				for (ProcessInfor pro : process) {
					// gongxu = pro.getProcessNO() + "_" + pro.getProcessName();
					gongxu = pro.getProcessName();
					ws.addCell(new Label(index++, i, gongxu));
				}
			}
			String hql2 = "SELECT COUNT(procard.id)  from ProcessInfor WHERE procard.id in "
					+ " (SELECT id FROM Procard WHERE rootid=?)  GROUP BY procard.id  order by  COUNT(procard.id) desc ";
			Long max = (Long) totalDao
					.getObjectByCondition(hql2, p.getRootId());

			ws.mergeCells(18, 0, max.intValue() + 18, 0);
			i++;
			List<Procard> sonSet = totalDao.query(
					"from Procard where fatherId = ? and procardStyle = '自制'",
					p.getId());
			if (sonSet != null && sonSet.size() > 0) {
				for (Procard son : sonSet) {
					i = daochuBom4(son, i, ws, wc, pageStatus);
				}
			}
		} catch (RowsExceededException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WriteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}// 材质
		return i;
	}

	// 递归 求单台数量
	public Float gainDanTai(Procard sonProcardT, Float num) {
		Float corrCount = sonProcardT.getCorrCount();
		num = (corrCount == null ? 1 : corrCount) * (num == null ? 1 : num);
		if (sonProcardT.getFatherId() != null
				|| !"总成".equals(sonProcardT.getProcardStyle())) {
			Procard fatherProcard = (Procard) totalDao.get(Procard.class,
					sonProcardT.getFatherId());
			num = gainDanTai(fatherProcard, num);
		}
		return num;
	}

	private int daochuBom2(Procard pt, int i, WritableSheet ws,
			WritableCellFormat wc, String pageStatus) {
		// TODO Auto-generated method stub
		try {
			String befor = "";
			if (pt.getBelongLayer() != null) {
				for (int b = 0; b < pt.getBelongLayer(); b++) {
					befor += ".";
				}
			}
			ws.addCell(new Label(0, i, befor + pt.getBelongLayer(), wc));// 层次
			ws.addCell(new Label(1, i, pt.getProName(), wc));// 名称
			if (pt.getProcardStyle() != null
					&& !pt.getProcardStyle().equals("外购")) {
				ws.addCell(new Label(2, i, "", wc));// 规格
			} else {
				ws.addCell(new Label(2, i, pt.getSpecification(), wc));// 规格
			}
			if (pt.getProcardStyle() != null
					&& pt.getProcardStyle().equals("外购")
					&& pt.getNeedProcess() != null
					&& pt.getNeedProcess().equals("yes")) {
				ws.addCell(new Label(3, i, "半成品", wc));// 零件类型
			} else {
				ws.addCell(new Label(3, i, pt.getProcardStyle(), wc));// 零件类型

			}
			ws.addCell(new Label(4, i, pt.getMarkId(), wc));// 件号
			ws.addCell(new Label(5, i, pt.getTuhao(), wc));// 图号
			ws.addCell(new Label(6, i, pt.getUnit(), wc));// 单位
			if (pt.getProcardStyle() != null
					&& pt.getProcardStyle().equals("总成")) {
				ws.addCell(new Label(7, i, 1 + "", wc));
			} else if (pt.getProcardStyle() != null
					&& !pt.getProcardStyle().equals("外购")) {
				ws.addCell(new Label(7, i, pt.getCorrCount() + "", wc));// 用量
			} else {
				if (pt.getQuanzi2() != null && pt.getQuanzi1() != null
						&& pt.getQuanzi1() != 0) {
					ws.addCell(new Label(7, i, (pt.getQuanzi2() / pt
							.getQuanzi1())
							+ "", wc));// 用量
				} else {
					ws.addCell(new Label(7, i, "需填写", wc));// 用量
				}
			}
			ws.addCell(new Label(8, i, pt.getXiaohaoCount() + "", wc));// 单台用量
			ws.addCell(new Label(9, i, pt.getBanBenNumber(), wc));// 版本
			// ws.addCell(new Label(9,i, pt.getBili()+"", wc));//比重
			ws.addCell(new Label(10, i, huoqugongxu(pt), wc));// 使用工序
			ws.addCell(new jxl.write.Number(11, i,
					(pt.getCgNumber() == null ? 0 : Util.fiveWei(pt
							.getCgNumber())), wc));// 采购数量
			ws.addCell(new jxl.write.Number(12, i,
					(pt.getFilnalCount() == null ? 0 : Util.fiveWei(pt
							.getFilnalCount())), wc));// 数量
			ws.addCell(new jxl.write.Number(13, i,
					(pt.getKlNumber() == null ? 0 : Util.fiveWei(pt
							.getKlNumber())), wc));// 可领
			ws.addCell(new jxl.write.Number(14, i,
					(pt.getYlNumber() == null ? 0 : Util.fiveWei(pt
							.getYlNumber())), wc));// 已领
			ws.addCell(new jxl.write.Number(15, i,
					(pt.getTjNumber() == null ? 0 : Util.fiveWei(pt
							.getTjNumber())), wc));// 提交
			ws.addCell(new jxl.write.Number(16, i,
					(pt.getHascount() == null ? 0 : Util.fiveWei(pt
							.getHascount())), wc));// 剩余
			ws.addCell(new Label(17, i, pt.getKgliao(), wc));// 供料属性
			i++;
			List<Procard> sonSet = totalDao.query(
					"from Procard where fatherId = ?", pt.getId());
			if (sonSet != null && sonSet.size() > 0) {
				for (Procard son : sonSet) {
					Float xiaohao = 0f;
					if (son.getProcardStyle().equals("外购")) {
						if (son.getQuanzi2() != null
								&& son.getQuanzi1() != null
								&& son.getQuanzi1() != 0) {
							if (pt.getMarkId().equals("DKBA8.039.8894")) {
								System.out.println(pt.getMarkId());
								System.out.println(son.getMarkId());
							}
							xiaohao = pt.getXiaohaoCount() * son.getQuanzi2()
									/ son.getQuanzi1();
							xiaohao = Util.FomartFloat(xiaohao, 4);
						}
					} else {
						if (son.getCorrCount() != null
								&& pt.getXiaohaoCount() != null) {
							xiaohao = pt.getXiaohaoCount() * son.getCorrCount();
							xiaohao = Util.FomartFloat(xiaohao, 4);
						}
						if (pt.getXiaohaoCount() != null
								&& son.getCorrCount() != null) {
							if (son.getProcardStyle().equals("外购")) {
								xiaohao = pt.getXiaohaoCount()
										* son.getQuanzi2() / son.getQuanzi1();
							} else {
								xiaohao = pt.getXiaohaoCount()
										* son.getCorrCount();
								xiaohao = (float) Math.ceil(xiaohao);
							}
							xiaohao = Util.FomartFloat(xiaohao, 4);
						}
					}
					son.setXiaohaoCount(xiaohao);
					i = daochuBom2(son, i, ws, wc, pageStatus);
				}
			}
		} catch (RowsExceededException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WriteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}// 材质
		return i;
	}

	private int daochuBom3(Procard pt, int i, WritableSheet ws,
			WritableCellFormat wc, String pageStatus) {
		// TODO Auto-generated method stub
		try {
			if (pt.getProcardStyle() != null
					&& pt.getProcardStyle().equals("外购")) {
				ws.addCell(new Label(0, i, "" + pt.getBelongLayer(), wc));// 层次
				ws.addCell(new Label(1, i, pt.getProName(), wc));// 名称
				if (pt.getProcardStyle() != null
						&& !pt.getProcardStyle().equals("外购")) {
					ws.addCell(new Label(2, i, "", wc));// 规格
				} else {
					ws.addCell(new Label(2, i, pt.getSpecification(), wc));// 规格
				}
				if (pt.getProcardStyle() != null
						&& pt.getProcardStyle().equals("外购")
						&& pt.getNeedProcess() != null
						&& pt.getNeedProcess().equals("yes")) {
					ws.addCell(new Label(3, i, "半成品", wc));// 零件类型
				} else {
					ws.addCell(new Label(3, i, pt.getProcardStyle(), wc));// 零件类型
				}
				ws.addCell(new Label(4, i, pt.getMarkId(), wc));// 件号
				ws.addCell(new Label(5, i, pt.getTuhao(), wc));// 图号
				ws.addCell(new Label(6, i, pt.getUnit(), wc));// 单位
				if (pt.getProcardStyle() != null
						&& pt.getProcardStyle().equals("总成")) {
					ws.addCell(new Label(7, i, 1 + "", wc));
				} else if (pt.getProcardStyle() != null
						&& !pt.getProcardStyle().equals("外购")) {
					ws.addCell(new Label(7, i, pt.getCorrCount() + "", wc));// 用量
				} else {
					if (pt.getQuanzi2() != null && pt.getQuanzi1() != null
							&& pt.getQuanzi1() != 0) {
						ws.addCell(new Label(7, i, (pt.getQuanzi2() / pt
								.getQuanzi1())
								+ "", wc));// 用量
					} else {
						ws.addCell(new Label(7, i, "需填写", wc));// 用量
					}
				}
				ws.addCell(new Label(8, i, pt.getXiaohaoCount() + "", wc));// 单台用量
				ws.addCell(new Label(9, i, pt.getBanBenNumber(), wc));// 版本
				ws.addCell(new Label(10, i, huoqugongxu(pt), wc));// 使用工序
				ws.addCell(new jxl.write.Number(11, i,
						(pt.getCgNumber() == null ? 0 : Util.fiveWei(pt
								.getCgNumber())), wc));// 采购数量
				ws.addCell(new jxl.write.Number(12, i,
						(pt.getFilnalCount() == null ? 0 : Util.fiveWei(pt
								.getFilnalCount())), wc));// 数量
				ws.addCell(new jxl.write.Number(13, i,
						(pt.getKlNumber() == null ? 0 : Util.fiveWei(pt
								.getKlNumber())), wc));// 可领
				ws.addCell(new jxl.write.Number(14, i,
						(pt.getYlNumber() == null ? 0 : Util.fiveWei(pt
								.getYlNumber())), wc));// 已领
				ws.addCell(new jxl.write.Number(15, i,
						(pt.getTjNumber() == null ? 0 : Util.fiveWei(pt
								.getTjNumber())), wc));// 提交
				ws.addCell(new jxl.write.Number(16, i,
						(pt.getHascount() == null ? 0 : Util.fiveWei(pt
								.getHascount())), wc));// 剩余
				ws.addCell(new Label(17, i, pt.getKgliao(), wc));// 供料属性
				i++;
			}
			List<Procard> sonSet = totalDao.query(
					"from Procard where fatherId = ?", pt.getId());
			if (sonSet != null && sonSet.size() > 0) {
				for (Procard son : sonSet) {
					Float xiaohao = 0f;
					if (son.getProcardStyle().equals("外购")) {
						if (son.getQuanzi2() != null
								&& son.getQuanzi1() != null
								&& son.getQuanzi1() != 0) {
							if (pt.getMarkId().equals("DKBA8.039.8894")) {
								System.out.println(pt.getMarkId());
								System.out.println(son.getMarkId());
							}
						}
					}
					son.setXiaohaoCount(xiaohao);
					i = daochuBom3(son, i, ws, wc, pageStatus);
				}
			}
		} catch (RowsExceededException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WriteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}// 材质
		return i;
	}

	/**
	 * 获取外购件用于什么工序
	 * 
	 * @param pt
	 * @return
	 */
	private String huoqugongxu(Procard pt) {
		String gongxuNum = "";
		String gongxuName = "";
		if (pt.getProcardStyle().equals("外购")) {
			List<ProcessAndWgProcardTem> proAndWgList = totalDao
					.query(
							" from ProcessAndWgProcardTem where procardMarkId = ? and wgprocardMardkId = ? ",
							pt.getMarkId(), pt.getMarkId());
			if (proAndWgList != null && proAndWgList.size() > 0) {
				for (ProcessAndWgProcardTem proAndWg : proAndWgList) {
					if (gongxuNum == null) {
						gongxuNum = "" + proAndWg.getProcessNo();
						gongxuName = "" + proAndWg.getProcessName();
					} else {
						gongxuNum += ";" + proAndWg.getProcessNo();
						gongxuName += ";" + proAndWg.getProcessName();
					}
				}
			}
		}
		if ((gongxuName != null && !"".equals(gongxuName))
				|| (gongxuName != null && !"".equals(gongxuNum)))
			return gongxuNum + ":" + gongxuName;
		else {
			return "";
		}
	}

	@Override
	public void findAllPlanDaochu(Map<String, String> map, String firstTime,
			String endTime) {
		// TODO Auto-generated method stub
		try {
			HttpServletResponse response = (HttpServletResponse) ActionContext
					.getContext().get(ServletActionContext.HTTP_RESPONSE);
			OutputStream os = response.getOutputStream();
			response.reset();
			response.setHeader("Content-disposition", "attachment; filename="
					+ new String("排产数据汇总".getBytes("GB2312"), "8859_1")
					+ ".xls");
			response.setContentType("application/msexcel");
			WritableWorkbook wwb = Workbook.createWorkbook(os);
			WritableSheet ws = wwb.createSheet("排产汇总数据", 0);
			WritableFont wf = new WritableFont(WritableFont.ARIAL, 14,
					WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE,
					Colour.BLACK);
			WritableCellFormat wcf = new WritableCellFormat(wf);
			wcf.setVerticalAlignment(VerticalAlignment.CENTRE);
			wcf.setAlignment(Alignment.CENTRE);

			jxl.write.Label label0 = new Label(0, 0, "排产汇总数据", wcf);
			ws.addCell(label0);
			wf = new WritableFont(WritableFont.ARIAL, 12, WritableFont.NO_BOLD,
					false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
			WritableCellFormat wc = new WritableCellFormat(wf);
			wc.setAlignment(Alignment.CENTRE);
			int ie = 0;
			int ii = 14;
			ws.addCell(new jxl.write.Label(ie, 1, "序号", wc));
			ie++;
			ws.addCell(new jxl.write.Label(ie, 1, "件号", wc));
			ie++;
			ws.addCell(new jxl.write.Label(ie, 1, "名称", wc));
			ie++;
			ws.setColumnView(ie, ii);
			ws.addCell(new jxl.write.Label(ie, 1, "排产数量", wc));
			ie++;
			ws.setColumnView(ie, ii);
			ws.addCell(new jxl.write.Label(ie, 1, firstTime, wc));
			ie++;
			ws.setColumnView(ie, ii);
			if (endTime == null || "".equals(endTime))
				endTime = Util.getSpecifiedDayAfter(firstTime, 44);
			List<Date> list = Util.getBetweenDates(Util.StringToDate(firstTime,
					"yyyy-MM-dd"), Util.StringToDate(endTime, "yyyy-MM-dd"));
			for (Date date : list) {
				ws.addCell(new jxl.write.Label(ie, 1, Util.DateToString(date,
						"yyyy-MM-dd"), wc));
				ie++;
				ws.setColumnView(ie, ii);
			}
			ws.addCell(new jxl.write.Label(ie, 1, endTime, wc));
			ie++;
			ws.setColumnView(ie, ii);
			ws.mergeCells(0, 0, ie - 1, 0);
			// ws.addCell(new jxl.write.Label(ie, 1, endTime, wc));
			// ws.addCell(new jxl.write.Label(0, 1, "序号", wc));
			// ws.addCell(new jxl.write.Label(1, 1, "件号", wc));
			// ws.addCell(new jxl.write.Label(2, 1, "名称", wc));
			// ws.addCell(new jxl.write.Label(3, 1, "排产数量", wc));

			wwb.write();
			wwb.close();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WriteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public List<Procard> findAllProcarddcl(Procard procard, String startDate,
			String endDate, String pageStatus) {

		if (procard == null) {
			procard = new Procard();
			procard.setProcardStyle("总成"); // 只查询第一层的总成模板
		}
		String hql = totalDao.criteriaQueries(procard, null)
				+ "and (sbStatus is null or sbStatus !='删除') and status not in('暂停','取消') and wlstatus = '待定' ";
		if (startDate != null && endDate != null && !startDate.equals("")
				&& !endDate.equals("")) {
			hql += " and procardTime between '" + startDate + "' and '"
					+ endDate + "'";
		} else if (startDate != null && !startDate.equals("")
				&& (endDate == null || endDate.equals(""))) {
			hql += " and procardTime >= '" + startDate + "'";
		} else if ((startDate == null || startDate.equals(""))
				&& endDate != null && !endDate.equals("")) {
			hql += " and procardTime <= '" + endDate + "'";
		}
		if ("ruku".equals(pageStatus)) {
			hql += " and status  in ('完成','入库')";
		} else if ("scz".equals(pageStatus)
				&& (procard == null || procard.getStatus() == null || procard
						.getStatus().length() == 0)) {
			hql += " and status not in ('完成','入库')";
		} else if ("buliao".equals(pageStatus)) {
			hql += " and oldProcardId is not null ";
		}
		// 外购外委查询列表
		if (pageStatus != null
				&& (pageStatus.equals("materials")
						|| pageStatus.equals("forwaiwei") || pageStatus
						.equals("forwaiweisq"))) {
			hql += " and status not in('完成','待入库','入库','暂停','取消')";
			// if (pageStatus.equals("forwaiweisq")) {
			// hql +=
			// "and id in(select procard.rootId from ProcessInfor where status !='完成' and"
			// + " ((selectWwCount is not null and selectWwCount>0) "
			// + "		or (applyWwCount is not null and applyWwCount>0) "
			// + "		or (agreeWwCount is not null and agreeWwCount>0)))";
			// }
		}
		if ("noCardPlan".equals(pageStatus)) {
			/***
			 * 查询所有待生产计划(已激活，小于等于今天应开始生产任务)
			 */
			// String date = Util.getDateTime("yyyy-MM-dd");
			// hql += " and (jihuoDate<='"
			// + Util.getDateTime()
			// + "' or jihuoDate like '%"
			// + date
			// + "%' or jihuoDate is null) "
			// +
			// "and (procardstyle in ('总成','自制','组合') or (needProcess ='yes' and procardstyle='外购')) "
			// +
			// "and status not in ('入库','完成') and jihuoStatua='激活' order by jihuoDate";
			hql += " and procardstyle in ('总成') and status not in ('入库','完成') and jihuoDate is not null and jihuoDate<>'' order by jihuoDate";
		} else {
			// 排序
			// if (pageStatus != null && pageStatus.equals("noCard")){
			hql += " order by id desc";
			// }

		}
		List list = totalDao.query(hql);
		if (list != null) {
			for (int i = 0, len = list.size(); i < len; i++) {
				Procard nowProcard = (Procard) list.get(i);
				// 查询业务件号
				String ywmarkid = (String) totalDao.getObjectByCondition(
						"select ywMarkId from Procard where id=?", nowProcard
								.getRootId());
				nowProcard.setYwMarkId(ywmarkid);
				// 查询总成件号
				String rootMarkid = (String) totalDao.getObjectByCondition(
						"select markId from Procard where id=?", nowProcard
								.getRootId());
				nowProcard.setRootMarkId(rootMarkid);
				ProcessInforWWApply processinforWWApply = (ProcessInforWWApply) totalDao
						.getObjectByCondition(
								" from ProcessInforWWApply where procardId =? and status = '同意' ",
								nowProcard.getId());
				if (processinforWWApply != null) {
					nowProcard.setRemark("red");
				}
				if (!nowProcard.getStatus().equals("初始")) {
					if (nowProcard.getOldProcardId() != null) {
						nowProcard.setRemark("shouhou");
					} else {
						nowProcard.setRemark("shebian");
					}

				}
			}
		}
		Float sum = 0f;
		for (Object obj : list) {
			Procard procard1 = (Procard) obj;
			sum += procard1.getFilnalCount();
		}
		return list;

	}

	@Override
	public List<Procard> findLackWgProcardByRootId(Integer rootId) {
		if (rootId != null) {
			String hql_wg = "from Procard where rootId=? and procardStyle='外购' and jihuoStatua='激活' and status<>'完成' and  ABS(filnalCount- tjNumber) > 1e-2";
			List<Procard> list_wg = totalDao.query(hql_wg, rootId);
			if (list_wg != null && list_wg.size() > 0) {
				for (Procard procard : list_wg) {
					String hql_kcwg = "select sum(goodsCurQuantity)  from Goods where goodsMarkId = ? and goodsClass =? and kgliao =? and goodsCurQuantity>0";
					if (procard.getBanBenNumber() != null
							&& procard.getBanBenNumber().length() > 0) {
						hql_kcwg += " and banBenNumber = '%"
								+ procard.getBanBenNumber() + "%'";
					} else {
						hql_kcwg += " and (banBenNumber is null or banBenNumber = '')";
					}
					if (procard.getSpecification() != null
							&& procard.getSpecification().length() > 0) {
						hql_kcwg += " and goodsFormat like '%"
								+ procard.getSpecification() + "%'";
					} else {
						hql_kcwg += " and (goodsFormat is null or goodsFormat = '')";
					}
					// 查询出外购件库库存量
					Float kcNumber = (Float) totalDao.getObjectByCondition(
							hql_kcwg, procard.getMarkId(), "外购件库", procard
									.getKgliao());
					// 查出待检库出库存量
					Float ztNumber = (Float) totalDao.getObjectByCondition(
							hql_kcwg, procard.getMarkId(), "待检库", procard
									.getKgliao());
					procard.setKcNumber(kcNumber);
					procard.setZtNumber(ztNumber);
				}

			}
			return list_wg;
		}
		return null;
	}

	@Override
	public Object[] totzgongxu(Integer id) {
		if (id != null) {
			ProcessInforWWApplyDetail pwad = (ProcessInforWWApplyDetail) totalDao
					.get(ProcessInforWWApplyDetail.class, id);
			String processNOs = pwad.getProcessNOs();
			String[] processNOArray = null;
			if (processNOs != null && processNOs.length() > 0) {
				processNOArray = processNOs.split(";");
			}
			List<ProcessInfor> processInforList = totalDao
					.query(
							" from ProcessInfor where procard.id = ? and (dataStatus is null or dataStatus!='删除') order by processNO ",
							pwad.getProcardId());
			if (processInforList != null && processInforList.size() > 0) {
				for (ProcessInfor processInfor : processInforList) {
					String processNOStr = processInfor.getProcessNO() + "";
					for (int i = 0; i < processNOArray.length; i++) {
						if (processNOStr.equals(processNOArray[i])) {
							processInfor.setMsg("true");
							break;
						}
					}
				}
			}
			return new Object[] { pwad, processInforList };

		}
		return null;
	}

	@Override
	public String tzgongxu(Integer id, Integer[] ids) {
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录！~";
		}
		if (id != null) {
			ProcessInforWWApplyDetail pwad = (ProcessInforWWApplyDetail) totalDao
					.get(ProcessInforWWApplyDetail.class, id);
			String status = pwad.getProcessInforWWApply().getStatus();
			if (ids != null && ids.length > 0) {
				String[] oldselectnoList = pwad.getProcessNOs().split(";");
				List<Integer> oldselectnoList2 = new ArrayList<Integer>();
				for (String oldselect : oldselectnoList) {
					oldselectnoList2.add(Integer.parseInt(oldselect));
				}
				List<ProcessInfor> processInforList = totalDao
						.query(
								" from ProcessInfor where procard.id = ? and (dataStatus is null or dataStatus!='删除')  order by processNO ",
								pwad.getProcardId());
				List<Integer> processNOList = totalDao
						.query(
								" select processNO  from ProcessInfor where procard.id = ? and (dataStatus is null or dataStatus!='删除')  order by processNO ",
								pwad.getProcardId());
				List<Integer> selectprocessNOList = new ArrayList<Integer>();
				for (int i = 0; i < ids.length; i++) {
					ProcessInfor process = (ProcessInfor) totalDao.get(
							ProcessInfor.class, ids[i]);
					selectprocessNOList.add(process.getProcessNO());
				}
				List<Integer> indexList = new ArrayList<Integer>();
				for (int i = 0; i < processNOList.size(); i++) {
					for (int j = 0; j < selectprocessNOList.size(); j++) {
						if (processNOList.get(i) == selectprocessNOList.get(j)) {
							indexList.add(i);
							break;
						}
					}
				}
				int lastindex = indexList.get(0);
				for (int i = 1; i < indexList.size(); i++) {
					Integer index = indexList.get(i);
					if (index - lastindex != 1) {
						return "请不要跳选工序!~";
					}
					lastindex = index;
				}
				if ("同意".equals(status)) {
					String processNOs = "";
					String processNames = "";
					for (int i = 0; i < ids.length; i++) {
						ProcessInfor process = (ProcessInfor) totalDao.get(
								ProcessInfor.class, ids[i]);
						process.setSelectWwCount(pwad.getApplyCount());
						processNOs += ";" + process.getProcessNO();
						processNames += ";" + process.getProcessName();
					}
					if (processNOs.length() > 1) {
						processNOs = processNOs.substring(1);
					}
					if (processNames.length() > 1) {
						processNames = processNames.substring(1);
					}
					pwad.setNewprocessNOs(processNOs);
					pwad.setNewprocessNames(processNames);
					String processName = "外委调整工序申请";
					Integer epId = null;
					try {
						epId = CircuitRunServerImpl.createProcess(processName,
								ProcessInforWWApplyDetail.class, pwad.getId(),
								"ep_status", "id", "", user.getDept() + "部门 "
										+ user.getName() + "外委调整工序申请，请您审批",
								true);
						if (epId != null && epId > 0) {
							pwad.setEpId(epId);
							CircuitRun circuitRun = (CircuitRun) totalDao.get(
									CircuitRun.class, epId);
							if ("同意".equals(circuitRun.getAllStatus())
									&& "审批完成".equals(circuitRun
											.getAuditStatus())) {
								pwad.setEpstatus("同意");
								if (processInforList != null
										&& processInforList.size() > 0) {
									for (ProcessInfor processInfor : processInforList) {
										if (oldselectnoList2
												.contains(processInfor
														.getProcessNO())) {
											processInfor.setSelectWwCount(0f);
											processInfor.setApplyWwCount(0f);
											processInfor.setAgreeWwCount(0f);
											totalDao.update(processInfor);
										}
									}
								}
								for (int i = 0; i < ids.length; i++) {
									ProcessInfor process = (ProcessInfor) totalDao
											.get(ProcessInfor.class, ids[i]);
									process.setAgreeWwCount(pwad
											.getApplyCount());
									totalDao.update(process);
								}
								pwad.setProcessNOs(processNOs);
								pwad.setProcessNames(processNames);
							} else {
								pwad.setEpstatus("未审批");
							}
							return totalDao.update(pwad) + "";
						}
					} catch (Exception e) {
						e.printStackTrace();
						return "未找到" + processName + "的审批流程！~";
					}
				} else {
					if (processInforList != null && processInforList.size() > 0) {
						for (ProcessInfor processInfor : processInforList) {
							if (oldselectnoList2.contains(processInfor
									.getProcessNO())) {
								processInfor.setSelectWwCount(0f);
								processInfor.setApplyWwCount(0f);
								processInfor.setAgreeWwCount(0f);
								totalDao.update(processInfor);
							}
						}
					}
					String processNOs = "";
					String processNames = "";
					for (int i = 0; i < ids.length; i++) {
						ProcessInfor process = (ProcessInfor) totalDao.get(
								ProcessInfor.class, ids[i]);
						process.setSelectWwCount(pwad.getApplyCount());
						processNOs += ";" + process.getProcessNO();
						processNames += ";" + process.getProcessName();
						totalDao.update(process);
					}
					if (processNOs != null && processNOs.length() >= 1) {
						processNOs = processNOs.substring(1);
					}
					if (processNames != null && processNames.length() >= 1) {
						processNames = processNames.substring(1);
					}
					pwad.setProcessNOs(processNOs);
					pwad.setProcessNames(processNames);
					return totalDao.update(pwad) + "";

				}
			} else {
				return "请至少选择一个工序!";
			}
		}
		return "请刷新后重试!~";
	}

	@Override
	public String pladddbjBomww(Integer rootId) {
		// TODO Auto-generated method stub
		List<Procard> ptList = totalDao
				.query(
						"from Procard where markId='DKBA8.056.0030ASM' and id in("
								+ "select min(id) from Procard where rootId=?  and (sbStatus<> '删除' or sbStatus is null) and id in("
								+ "select procard.id from ProcessInfor where productStyle='外委' and (dataStatus<> '删除' or dataStatus is null)"
								+ ") )", rootId);
		int i = 0;
		if (ptList != null && ptList.size() > 0) {
			StringBuffer sb = new StringBuffer();
			for (Procard pt : ptList) {
				if (sb.length() == 0) {
					sb.append("'" + pt.getMarkId() + "'");
				} else {
					sb.append(",'" + pt.getMarkId() + "'");
				}
			}
			String nowDate = Util.getDateTime("yyyy-MM-dd");
			List<Price> priceList = totalDao
					.query("from Price where partNumber in("
							+ sb.toString()
							+ ") and (pricePeriodEnd is null or pricePeriodEnd>='"
							+ nowDate + "') and wwType='工序外委'");
			for (Procard pt : ptList) {
				Set<ProcessInfor> processSet = pt.getProcessInforSet();
				List<List<String>> needList = new ArrayList<List<String>>();
				boolean b = false;
				StringBuffer nosb = null;
				StringBuffer namesb = null;
				for (ProcessInfor process : processSet) {
					if (process.getProductStyle().equals("外委")) {
						if (process.getProcessStatus() != null
								&& process.getProcessStatus().equals("yes")
								&& b) {
							// 并行外委,上道工序外委
							nosb.append(";" + process.getProcessNO());
							namesb.append(";" + process.getProcessName());
						} else {
							if (nosb != null) {
								List<String> noAndname = new ArrayList<String>();
								noAndname.add(nosb.toString());
								noAndname.add(namesb.toString());
								needList.add(noAndname);
								nosb = null;
								namesb = null;
							}
							nosb = new StringBuffer();
							namesb = new StringBuffer();
							nosb.append(process.getProcessNO());
							namesb.append(process.getProcessName());
						}
						b = true;
					} else {
						if (nosb != null) {
							List<String> noAndname = new ArrayList<String>();
							noAndname.add(nosb.toString());
							noAndname.add(namesb.toString());
							needList.add(noAndname);
							nosb = null;
							namesb = null;
						}
						b = false;
					}
				}
				if (nosb != null) {// 最后一道工序是外委
					List<String> noAndname = new ArrayList<String>();
					noAndname.add(nosb.toString());
					noAndname.add(namesb.toString());
					needList.add(noAndname);
				}
				if (needList.size() > 0) {
					String banbenSql = null;
					if (pt.getBanBenNumber() == null
							|| pt.getBanBenNumber().length() == 0) {
						banbenSql = " and (banben is null or banben='')";
					} else {
						banbenSql = " and banben='" + pt.getBanBenNumber()
								+ "'";

					}
					for (List<String> noAndname : needList) {
						// 查询待报价是否有数据
						Integer count = totalDao
								.getCount(
										" from NoPriceprocess where markId =? and processName=?",
										pt.getMarkId(), noAndname.get(1));
						if (count == null || count == 0) {
							boolean had = false;
							for (Price price : priceList) {
								if (Util.isEquals(price.getPartNumber(), pt
										.getMarkId())
										&& price.getGongxunum().equals(
												noAndname.get(1))) {
									had = true;
									break;
								}
							}
							if (!had) {
								NoPriceprocess np = new NoPriceprocess();
								np.setRootMarkId(pt.getRootMarkId());// 总成件号
								np.setMarkId(pt.getMarkId());
								np.setName(pt.getProName());// 零件名称
								np.setBanben(pt.getBanBenNumber());
								np.setProcardId(pt.getId());
								np.setProcessNO(noAndname.get(0));
								np.setProcessName(noAndname.get(1));
								// np.setprocessId;
								np.setWaiweiShenqiCount(pt.getFilnalCount());// 外委申请数量
								np.setPiciCount(pt.getFilnalCount());// 批次数量
								// np.setStutas(stutas);
								np.setBjStartDate(nowDate);// 报价开始日期
								// np.setbjEndDate;//报价结束日期
								// np.setcycle;//周期
								totalDao.save(np);
								i++;
							}
						}

					}
				}

			}

		}
		return "生成了" + i + "条待报价信息";
	}

	@Override
	public List<Procard> getwwWgj(Integer id) {
		// TODO Auto-generated method stub
		return totalDao
				.query(
						"from Procard where (sbStatus is null or sbStatus!='删除') and procard.id=(select procardId from ProcessInforWWApplyDetail where id=?) and procardStyle ='外购' and (needProcess is null or needProcess!='yes')",
						id);
	}

	@Override
	public String wwtzwgj(int[] selected, Integer id) {
		// TODO Auto-generated method stub
		if (Util.getLoginUser() == null) {
			return "请先登录!";
		}
		List<ProcessInforWWProcard> wwplist = totalDao
				.query(
						"from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
						id);
		ProcessInforWWApplyDetail wwd = (ProcessInforWWApplyDetail) totalDao
				.getObjectById(ProcessInforWWApplyDetail.class, id);
		if (wwplist != null && wwplist.size() > 0) {
			List<ProcessInforWWProcard> deleteList = new ArrayList<ProcessInforWWProcard>();
			for (ProcessInforWWProcard had : wwplist) {
				if (selected == null || selected.length == 0) {
					deleteList.add(had);
				} else {
					boolean h = false;
					for (int s : selected) {
						if (had.getProcardId().equals(s)) {
							h = true;
						}
					}
					if (!h) {
						deleteList.add(had);
					}
				}
			}
			if (deleteList != null && deleteList.size() > 0) {
				for (ProcessInforWWProcard d : deleteList) {
					Procard selectP = (Procard) totalDao.getObjectById(
							Procard.class, d.getProcardId());
					if (wwd.getWwType().equals("包工包料")
							&& !wwd.getProcessInforWWApply().getStatus()
									.equals("同意")) {
						selectP.setWwblCount(0f);
						totalDao.update(selectP);
					}
					totalDao.delete(d);
				}
			}
		}
		if (selected == null || selected.length == 0) {
			return "true";
		}
		List<Procard> procardList = totalDao
				.query(
						"from Procard where (sbStatus is null or sbStatus!='删除') and procard.id=(select procardId from ProcessInforWWApplyDetail where id=?) and procardStyle ='外购' and (needProcess is null or needProcess!='yes')",
						id);
		List<Procard> selectPList = new ArrayList<Procard>();
		if (procardList != null && procardList.size() > 0) {
			for (Procard p : procardList) {
				boolean h = false;
				for (int s : selected) {
					if (p.getId().equals(s)) {
						h = true;
					}
				}
				if (h) {
					selectPList.add(p);
				}
			}
		}
		if (selectPList != null && selectPList.size() > 0) {
			for (Procard selectP : selectPList) {
				boolean need = true;
				if (wwplist != null && wwplist.size() > 0) {
					for (ProcessInforWWProcard had : wwplist) {
						if (had.getProcardId().equals(selectP.getId())) {
							need = false;
							break;
						}
					}
				}
				if (wwd.getWwType().equals("包工包料")
						&& !wwd.getProcessInforWWApply().getStatus().equals(
								"同意")) {
					selectP.setWwblCount(selectP.getFilnalCount());
					totalDao.update(selectP);
				}
				if (need) {
					ProcessInforWWProcard newwwp = new ProcessInforWWProcard();
					newwwp.setProcardId(selectP.getId());// 零件id
					newwwp.setMarkId(selectP.getMarkId());// 件号
					newwwp.setProcName(selectP.getProName());// 名称
					newwwp.setBanben(selectP.getBanBenNumber());// 版本号
					newwwp.setBanci(selectP.getBanci());// 版次
					newwwp.setApplyCount(selectP.getFilnalCount());// 数量
					newwwp.setHascount(selectP.getFilnalCount());// 剩余未领数量（工序外委使用）
					newwwp.setStatus("使用");// 状态
					newwwp.setApplyDtailId(id);// 外委申请明细id对应表ProcessInforWWApplyDetail
					totalDao.save(newwwp);
				}
			}
		}
		return "true";
	}

	@Override
	public String wwgxcf(Integer id, int[] selected) {
		// TODO Auto-generated method stub
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录!";
		}
		ProcessInforWWApplyDetail wwd = (ProcessInforWWApplyDetail) totalDao
				.getObjectById(ProcessInforWWApplyDetail.class, id);
		if (wwd == null) {
			return "没有找到对应的申请明细!";
		}
		int taotalCount = 0;
		for (int count : selected) {
			if (count > 0) {
				taotalCount += count;
			}
		}
		int i = 0;
		if (wwd.getApplyCount().equals(taotalCount)) {
			String nowtime = Util.getDateTime();
			ProcessInforWWApply processInforWWApply = wwd
					.getProcessInforWWApply();
			Set<ProcessInforWWApplyDetail> wwdSet = processInforWWApply
					.getProcessInforWWApplyDetails();
			for (int count : selected) {
				if (count > 0) {
					if (i == 0) {
						wwd.setApplyCount((float) count);
						totalDao.update(wwd);
					} else {
						ProcessInforWWApplyDetail newwwd = new ProcessInforWWApplyDetail();
						BeanUtils.copyProperties(wwd, newwwd, new String[] {
								"id", "processInforWWApply" });
						newwwd.setUserId(user.getId());
						newwwd.setUserName(user.getName());// 选择人名字
						newwwd.setUserCode(user.getCode());// 选择人工号
						newwwd.setAddTime(nowtime);// 选择时间
						newwwd.setApplyCount((float) count);
						newwwd.setProcessInforWWApply(processInforWWApply);
						wwdSet.add(newwwd);
					}
					i++;
				}
			}
			processInforWWApply.setProcessInforWWApplyDetails(wwdSet);
			totalDao.update(processInforWWApply);
			return "true";
		} else {
			return "拆分总额不对,请重新填写!";
		}
	}

	// 递归生产补料流水单
	private void addblProcard(Procard procard, LogoStickers ls,
			Procard newFProcard, String responsible, Integer rootId) {
		Procard newProcard = new Procard();
		BeanUtils.copyProperties(procard, newProcard, new String[] { "id",
				"procard", "procardSet", "processInforSet", "procardPartsSet",
				"procardPro", "oneProcardBonus", "planOrderId", "submitDate",
				"processPeopleSet", "planOrderDetailId", "wgwwPlanSet",
				"rukuCount", "tjNumber", "klNumber", "zaizhizkCount",
				"zaizhiApplyZk", "zaizhikzkCount", "processPeopleSet",
				"proAndWgList", "sbId", "sbNumber", "zzNumber", "ztNumber",
				"qjCount", "cgNumber", "outcgNumber", "status", "wlstatus",
				"wwblCount" });
		newProcard.setCardId(ls.getId());// 报修单id
		newProcard.setCardNum(ls.getNumber());// 报修单条码
		newProcard.setOldProcardId(procard.getId());// 对应正常流水单id
		float count = ls.getCount();
		if ("外购".equals(newProcard.getProcardStyle())) {
			count = ls.getCount() * newProcard.getQuanzi2()
					/ newProcard.getQuanzi1();
			newProcard.setWlstatus("待定");
		} else if ("自制".equals(newProcard.getProcardStyle())) {
			count = ls.getCount() * newProcard.getCorrCount();
			count = (float) Math.ceil(count);
		}
		newProcard.setFilnalCount(count);// 数量
		newProcard.setTjNumber(0f);
		newProcard.setMaxCount(ls.getCount());
		newProcard.setRootId(rootId);
		newProcard.setProcard(newFProcard);
		newProcard.setHascount(count);
		newProcard.setOldProcardId(procard.getId());
		newProcard.setFatherId(newFProcard.getId());
		newProcard.setProcardTime(Util.getDateTime());
		newProcard.setStatus("初始");

		// 工序处理
		List<ProcessInfor> oldProInfo = totalDao
				.query(
						" from ProcessInfor "
								+ " where procard.id =? and  (dataStatus is null or  dataStatus <> '删除')",
						procard.getId());

		Set<ProcessInfor> newProInfo = new HashSet<ProcessInfor>();
		for (ProcessInfor processInfor : oldProInfo) {
			ProcessInfor newProInfor = new ProcessInfor();
			BeanUtils.copyProperties(processInfor, newProInfor, new String[] {
					"id", "totalCount", "applyCount", "usercodes",
					"userCardId", "usernames", "userId", "submmitCount",
					"breakCount", "firstApplyDate", "procard", "procardPro",
					"productProcess", "osWork", "processZjSet",
					"processinforFuLiao", "agreeWwCount", "selectWwCount",
					"applyWwCount", "wwbackCount" });
			newProInfor.setTotalCount(ls.getCount());
			newProInfor.setStatus("初始");
			newProInfor.setProcard(newProcard);
			newProInfor.setWlqrcount(0f);
			newProInfo.add(newProInfor);
		}
		newProcard.setProcessInforSet(newProInfo);
		newProcard.setJihuoStatua(null);
		totalDao.save(newProcard);

		// 新废品单
		// LogoStickers logoStickers = new LogoStickers();
		// // 生成编号
		// String date = Util.getDateTime("yyyyMM");
		// String number = "";
		// String hql =
		// "select max(number) from LogoStickers where stickStyle='补料单' and number like '%QD-RP-"
		// + date + "%'";
		// Object object = (Object) totalDao
		// .getObjectByCondition(hql);
		// if (object != null) {
		// String maxNumber = object.toString();
		// Long selfCard = Long.parseLong(maxNumber.substring(
		// 6, maxNumber.length())) + 1;// 当前最大流水卡片
		// number = "QD-RP-" + selfCard.toString();
		// } else {
		// number = "QD-RP-" + date + "001";
		// }
		// logoStickers.setNumber(number);// 编号
		// logoStickers.setStickStyle("补料单");
		// logoStickers.setMarkId(procard.getMarkId());// 件号
		// logoStickers.setLotId(procard.getSelfCard());// 批次号
		// logoStickers.setProcessNO("全部");
		// logoStickers.setOperator(ls.getOperator());
		// logoStickers.setCode(ls.getCode());
		// logoStickers.setCount(ls.getCount());// 报废数量
		// logoStickers.setPartsName(procard.getProName());// 名称
		// logoStickers.setBillDate(Util.getDateTime());
		// logoStickers.setOldProcardId(procard.getId());// 老流水单id
		// logoStickers.setWorkingGroup(ls.getWorkingGroup());// 部门编码
		// logoStickers.setIsPrint("NO");
		// logoStickers.setStatus("已发卡");
		// logoStickers.setResponsible(responsible);
		// logoStickers.setProcardId(newProcard.getId());
		// totalDao.save(logoStickers);
		List<Procard> procardList = totalDao
				.query(
						" from Procard where procard.id =? and (sbStatus is null or sbStatus <> '删除') ",
						procard.getId());
		if (!"外购".equals(procard.getProcardStyle()) && procardList != null
				&& procardList.size() > 0) {
			for (Procard procard2 : procardList) {
				addblProcard(procard2, ls, newProcard, responsible, rootId);
			}
		}
	}

	public String isCheck(String processNos, String processNames, String markId) {
		if (processNos != null && !"".equals(processNos)
				&& processNames != null && !"".equals(processNames)
				&& markId != null && !"".equals(markId)) {
			String hql = "from ProcessAndWgProcardTem where wgprocardMardkId =? and processNo =? and processName =?";
			if (totalDao.query(hql, markId, processNos, processNames) != null) {
				return "in";
			} else {
				return "out";
			}
		} else {
			return "数据异常";
		}
	}

	@Override
	public ProcessInfor getProcessById(Integer id) {
		return (ProcessInfor) totalDao.get(ProcessInfor.class, id);
	}

	@Override
	public String wlqueren(Integer id, Integer count) {
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录@_@";
		}
		if (id != null) {
			ProcessInfor process = (ProcessInfor) totalDao.get(
					ProcessInfor.class, id);
			Float wlqrCount = process.getWlqrcount() == null ? count : process
					.getWlqrcount()
					+ count;
			if (wlqrCount > process.getTotalCount()) {
				return "物料确认数量:" + wlqrCount + "，已超出本工序可领数量:"
						+ process.getTotalCount();
			}
			process.setWlqrcount(wlqrCount);
			ProcessWlqr processwlqr = new ProcessWlqr();
			processwlqr.setProcessId(id);
			processwlqr.setCount(count);
			processwlqr.setAddTime(Util.getDateTime());
			processwlqr.setAddUsers(user.getName());
			processwlqr.setAddUsersCode(user.getCode());
			totalDao.save(processwlqr);
			return totalDao.update(process) + "";
		}
		return null;
	}

	@Override
	public List<Procard> tocsbl(Integer id, Procard procard) {
		if (procard == null) {
			procard = new Procard();
		}
		String hql = totalDao.criteriaQueries(procard,
				" rootId =? and (sbStatus is null or sbStatus <> '删除') ");
		List<Procard> procardList = totalDao.query(hql, id);
		return procardList;
	}

	@Override
	public String csbl(Integer id, Integer[] ids, Float[] blNums,
			Integer waigouplanId, String[] remarks) {
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录!~";
		}
		if (id != null) {
			String time = Util.getDateTime();
			Procard rootprocard = (Procard) totalDao.get(Procard.class, id);
			if (ids != null && ids.length > 0) {
				ProcardCsBlOrder csblOrder = new ProcardCsBlOrder();
				boolean iswwbl = false;
				if (waigouplanId != null) {
					iswwbl = true;
					csblOrder.setType("外委补料");
				} else {
					csblOrder.setType("超损补料");
				}
				csblOrder.setOrderNumber(rootprocard.getOrderNumber());
				csblOrder.setYwMarkId(rootprocard.getYwMarkId());
				csblOrder.setRootMarkId(rootprocard.getMarkId());
				csblOrder.setRootSelfCard(rootprocard.getSelfCard());
				csblOrder.setOrderCount(rootprocard.getFilnalCount());
				csblOrder.setSqdept(user.getDept());
				csblOrder.setSqUsersName(user.getName());
				csblOrder.setSqUsersCode(user.getCode());
				csblOrder.setSqdate(Util.getDateTime("yyyy-MM-dd"));
				csblOrder.setAddTime(time);
				csblOrder.setRootId(rootprocard.getId());//
				Set<ProcardCsBl> csblSet = new HashSet<ProcardCsBl>();
				Float sumPrice = 0f;
				for (int i = 0; i < ids.length; i++) {
					Procard procard = (Procard) totalDao.get(Procard.class,
							ids[i]);
					ProcardCsBl csbl = new ProcardCsBl();
					csbl.setMarkId(procard.getMarkId());
					csbl.setProName(procard.getProName());
					csbl.setSpecification(procard.getSpecification());
					csbl.setKgliao(procard.getKgliao());
					csbl.setUnit(procard.getUnit());
					csbl.setWgtype(procard.getWgType());
					csbl.setProcardId(procard.getId());
					csbl.setBlNum(blNums[i]);
					if (remarks != null && remarks.length > i) {
						csbl.setRemark(remarks[i]);
					}
					csbl.setSelfcard(procard.getSelfCard());
					csbl.setYwmarkId(procard.getYwMarkId());
					csbl.setRootMarkId(procard.getRootMarkId());
					csbl.setRootSelfCard(procard.getRootSelfCard());
					csbl.setOrderNum(procard.getOrderNumber());
					csbl.setBanebenhao(procard.getBanBenNumber());
					csbl.setAddtime(time);
					WaigouPlan waigouplan = null;
					if (waigouplanId != null) {
						csbl.setType("外委补料");
						csbl.setWgplanId(waigouplanId);
						waigouplan = (WaigouPlan) totalDao.get(
								WaigouPlan.class, waigouplanId);
						if (waigouplan != null) {
							csbl.setProcessNos(waigouplan.getProcessNOs());
							csbl.setProcessNames(waigouplan.getProcessNames());
							csbl.setCgOrderNum(waigouplan.getWaigouOrder()
									.getPlanNumber());
						}
					} else {
						csbl.setType("超损补料");
					}
					csbl.setProcardStyle(procard.getProcardStyle());
					if ("外购".equals(csbl.getProcardStyle())) {
						Double[] obj = csblWgPrice(time, csbl.getMarkId(), csbl
								.getBanebenhao(), csbl.getKgliao());
						Double hsprice = obj[0];
						Double bhsprice = obj[1];
						csbl.setHsprice(hsprice.floatValue());
						csbl.setBhsprice(bhsprice.floatValue());
						csbl.setTaxprice(16F);
						csbl.setSumPrice((bhsprice.floatValue())
								* csbl.getBlNum());
						sumPrice += csbl.getSumPrice();
					} else {
						Float zzsumPrice = 0f;
						if (iswwbl) {
							// 查询到外委工序关联的外购件
							String hql_wwSource = "";
							if ("手动外委".equals(waigouplan.getWwSource())) {
								hql_wwSource = "from ProcessInforWWProcard where applyDtailId in(select wwxlId from ProcardWGCenter where wgOrderId=?) and (status is null or status not in ('删除','取消'))";
							} else if ("BOM外委".equals(waigouplan.getWwSource())) {
								hql_wwSource = "from ProcessInforWWProcard where wwxlId in(select wwxlId from ProcardWGCenter where wgOrderId=?) and (status is null or status not in ('删除','取消'))";
							}
							List<ProcessInforWWProcard> wwprocardList = totalDao
									.query(hql_wwSource, waigouplanId);
							if (wwprocardList != null
									&& wwprocardList.size() > 0) {
								for (ProcessInforWWProcard ProcessWwProcard : wwprocardList) {
									Procard procard1 = (Procard) totalDao
											.getObjectByCondition(
													" from Procard where id=? and (sbStatus is null or sbStatus <> '删除')",
													ProcessWwProcard
															.getProcardId());
									if ("外购".equals(procard1.getProcardStyle())) {
										Double[] obj = csblWgPrice(time,
												procard1.getMarkId(), procard1
														.getBanBenNumber(),
												procard1.getKgliao());
										Double hsprice = obj[0];
										Float num = (procard1.getQuanzi2() / procard1
												.getQuanzi1())
												* csbl.getBlNum();
										zzsumPrice += (hsprice.floatValue() * num);
									} else if ("自制".equals(procard1
											.getProcardStyle())) {
										Float hsprice = getWgProcardPrice(
												procard1, csbl.getBlNum(),
												procard1.getBelongLayer());
										zzsumPrice += hsprice;
									}
								}
							}
							// 查询前工序关联的外购件。
							String processNos = waigouplan.getProcessNOs();
							String[] processNoArray = processNos.split(";");
							Integer lastProcessNo = Integer
									.parseInt(processNoArray[0]);
							List<ProcessInfor> procesList = totalDao
									.query(
											" from ProcessInfor where procard.id =? and processNO<? and "
													+ "(dataStatus is null or dataStatus <> '删除')",
											procard.getId(), lastProcessNo);
							if (procesList != null && procesList.size() > 0) {
								for (ProcessInfor process : procesList) {
									// 这里其实还应该判断工序是否是外委工序，如果是外委工序照上面的再来一遍，并且把外委工序的加工费给算上.
									List<String> wgprocardMardkIdList = totalDao
											.query(
													"select DISTINCT wgprocardMardkId  from ProcessAndWgProcardTem where procardMarkId =? and"
															+ " processNo=? ",
													procard.getMarkId(),
													process.getProcessNO());
									if (wgprocardMardkIdList != null
											&& wgprocardMardkIdList.size() > 0) {
										for (String wgmarkId : wgprocardMardkIdList) {
											Procard wgprocard = (Procard) totalDao
													.getObjectByCondition(
															" from Procard where procard.id =? and markId =? and "
																	+ "(sbStatus is null or sbStatus <> '删除')",
															procard.getId(),
															wgmarkId);
											if (wgprocard != null) {
												Double[] obj = csblWgPrice(
														time,
														wgprocard.getMarkId(),
														wgprocard
																.getBanBenNumber(),
														wgprocard.getKgliao());
												Double hsprice = obj[0];
												Float wgprice = (wgprocard
														.getQuanzi2() / wgprocard
														.getQuanzi1())
														* blNums[i]
														* hsprice.floatValue();
												zzsumPrice += wgprice;
											}
										}
									}
								}
							}
						} else {
							Float hsprice = getWgProcardPrice(procard, csbl
									.getBlNum(), procard.getBelongLayer());
							zzsumPrice += hsprice;
						}
						csbl.setSumPrice(zzsumPrice);
						sumPrice += zzsumPrice;
					}
					csbl.setRootId(id);
					csbl.setCsblOrder(csblOrder);
					csblSet.add(csbl);
				}
				csblOrder.setSumPrice(sumPrice);
				csblOrder.setCsblSet(csblSet);
				totalDao.save(csblOrder);
				String processName = csblOrder.getType() + "申请";
				Integer epId = null;
				try {
					epId = CircuitRunServerImpl.createProcess(processName,
							ProcardCsBlOrder.class, csblOrder.getId(),
							"epStatus", "id",
							"ProcardAction!findCsblListById.action?id="
									+ csblOrder.getId(), user.getDept() + "部门 "
									+ user.getName() + processName + "，请您审批",
							true);
					if (epId != null && epId > 0) {
						csblOrder.setEpId(epId);
						CircuitRun circuitRun = (CircuitRun) totalDao.get(
								CircuitRun.class, epId);
						if ("同意".equals(circuitRun.getAllStatus())
								&& "审批完成".equals(circuitRun.getAuditStatus())) {
							csblOrder.setEpStatus("同意");
						} else {
							csblOrder.setEpStatus("未审批");
						}
						if (waigouplanId != null) {
							return totalDao.update(csblOrder) + ";"
									+ csblOrder.getId();
						}
						return totalDao.update(csblOrder) + "";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return null;
	}

	@Override
	public Object[] findRootProcardListForww(Procard procard, int cpage,
			int pageSize) {
		if (procard == null) {
			procard = new Procard();
		}
		String hql = totalDao.criteriaQueries(procard, null, null)
				+ "  and procardStyle='总成' order by id desc";
		List list = totalDao.findAllByPage(hql, cpage, pageSize);
		int count = totalDao.getCount(hql);
		Object[] o = { list, count };
		return o;
	}

	@Override
	public List<ProcardVo> showProcardwwList(Integer rootId) {
		// TODO Auto-generated method stub
		List<Procard> procardList = totalDao
				.query(
						"from Procard where rootId =? and (sbStatus is null or sbStatus!='删除') "
								+ " and (id in(select procardId from  ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in('取消','删除'))"
								+ " and processInforWWApply.status !='打回' and processInforWWApply.processStatus not in('取消','删除'))"
								+ " or  id in(select procard.id from ProcessInfor where productStyle='外委' and (dataStatus is null or dataStatus!='删除')))"
								+ " order by markId", rootId);
		List<ProcardVo> procardVolist = new ArrayList<ProcardVo>();
		if (procardList != null && procardList.size() > 0) {
			for (Procard procard : procardList) {
				List<ProcessInforWWApplyDetail> pwwdList = totalDao
						.query(
								"from  ProcessInforWWApplyDetail where (dataStatus is null or dataStatus not in('取消','删除'))"
										+ " and processInforWWApply.status !='打回' and processInforWWApply.processStatus not in('取消','删除') and procardId=?"
										+ " order by processNOs ", procard
										.getId());
				if (pwwdList != null && pwwdList.size() > 0) {
					ProcardVo procardVo = null;
					String processnos = null;
					for (ProcessInforWWApplyDetail pwwd : pwwdList) {
						if (processnos == null
								|| processnos.equals(pwwd.getProcessNOs())) {
							procardVo = new ProcardVo();
							BeanUtils
									.copyProperties(procard, procardVo,
											new String[] { "zaizhiApplyZk",
													"zaizhikzkCount",
													"zaizhizkCount" });
							procardVolist.add(procardVo);

						}
						processnos = pwwd.getProcessNOs();
						procardVo.setProcessnos(pwwd.getProcessNOs());
						procardVo.setProcessnames(pwwd.getProcessNames());
						List<Waiweishow> wwshowList = procardVo.getWwshowList();
						if (wwshowList == null) {
							wwshowList = new ArrayList<Waiweishow>();
						}
						Waiweishow wwshow = new Waiweishow();
						WaigouPlan wp = (WaigouPlan) totalDao
								.getObjectByCondition(
										"from WaigouPlan where wwSource='手动外委' and id in("
												+ " select wgOrderId from ProcardWGCenter where wwxlId=? and procardId=?) ",
										pwwd.getId(), procard.getId());
						if (wp != null) {
							wwshow.setWwnumber(wp.getWaigouOrder()
									.getPlanNumber());
							wwshow.setWwstatus(wp.getStatus());
						} else {
							wwshow.setWwnumber("待下单");
							wwshow.setWwstatus("未采购");
						}
						wwshow.setWwcount(pwwd.getApplyCount());
						wwshowList.add(wwshow);
						if (procard.getMarkId().equals("DKBA8.052.1927")) {
							System.out.println("DKBA8.052.1927");
						}
						procardVo.setWwshowList(wwshowList);
						Integer pno = Util.getSplitNumber(pwwd.getProcessNOs(),
								";", "max");
						procardVo.setProcessNo(pno);
						String nextProcessName = (String) totalDao
								.getObjectByCondition(
										"select processName from ProcessInfor where (dataStatus is null or dataStatus!='删除') "
												+ " and procard.id =? and processNO >? order by processNO",
										procard.getId(), pno);
						if (nextProcessName == null) {
							if (procard.getProcard() != null) {
								nextProcessName = (String) totalDao
										.getObjectByCondition(
												"select processName from ProcessInfor where (dataStatus is null or dataStatus!='删除') and procard.id=? order by processNO",
												procard.getProcard().getId());
							} else {
								nextProcessName = "无";
							}
						}
						procardVo.setNextProcessName(nextProcessName);
					}

				}
				List<ProcessInfor> processList = totalDao
						.query(
								"from ProcessInfor where procard.id =? and (dataStatus is null or dataStatus!='删除') "
										+ "order by processNO", procard.getId());
				boolean upww = false;// 上工序是否外委
				ProcardVo procardVo = null;
				List<ProcardVo> procardVolist2 = new ArrayList<ProcardVo>();
				for (ProcessInfor process : processList) {
					if (upww) {
						if (process.getProductStyle().equals("外委")) {
							if (process.getProcessStatus().equals("yes")) {// 并行
								procardVo.setProcessnos(procardVo
										.getProcessnos()
										+ ";" + process.getProcessNO());
								procardVo.setProcessnames(procardVo
										.getProcessnames()
										+ ";" + process.getProcessName());
								procardVo.setProcessNo(process.getProcessNO());
								procardVo.setProcessName(process
										.getProcessName());
							} else {
								procardVo.setNextProcessName(process
										.getProcessName());
								procardVo = new ProcardVo();
								BeanUtils.copyProperties(procard, procardVo,
										new String[] { "zaizhiApplyZk",
												"zaizhikzkCount",
												"zaizhizkCount" });
								procardVolist2.add(procardVo);
								procardVo.setProcessnos(process.getProcessNO()
										+ "");
								procardVo.setProcessnames(process
										.getProcessName());
								procardVo.setProcessNo(process.getProcessNO());
								procardVo.setProcessName(process
										.getProcessName());
							}
							upww = true;
						} else {
							procardVo.setNextProcessName(process
									.getProcessName());
							upww = false;
						}
					} else {
						if (process.getProductStyle().equals("外委")) {
							procardVo = new ProcardVo();
							BeanUtils
									.copyProperties(procard, procardVo,
											new String[] { "zaizhiApplyZk",
													"zaizhikzkCount",
													"zaizhizkCount" });
							procardVolist2.add(procardVo);
							procardVo
									.setProcessnos(process.getProcessNO() + "");
							procardVo.setProcessnames(process.getProcessName());
							procardVo.setProcessNo(process.getProcessNO());
							procardVo.setProcessName(process.getProcessName());
							upww = true;
						} else {
							upww = false;
						}
					}
				}
				if (procardVo != null && procardVo.getNextProcessName() == null) {
					if (procard.getProcard() != null) {
						String nextProcessName = (String) totalDao
								.getObjectByCondition(
										"select processName from ProcessInfor where (dataStatus is null or dataStatus!='删除') and procard.id=? order by processNO",
										procard.getProcard().getId());
						procardVo.setNextProcessName(nextProcessName);
					} else {
						procardVo.setNextProcessName("无");
					}
				}
				for (ProcardVo bompvo : procardVolist2) {
					List<WaigouPlan> wgPlanList = totalDao
							.query(
									"from WaigouPlan where wwSource='BOM外委' and processNOs=? and id in("
											+ " select wgOrderId from ProcardWGCenter where  procardId=?) ",
									bompvo.getProcessnos(), procard.getId());
					if (wgPlanList != null && wgPlanList.size() > 0) {
						List<Waiweishow> wwshowList = bompvo.getWwshowList();
						if (wwshowList == null) {
							wwshowList = new ArrayList<Waiweishow>();
						}
						Float unxdCount = procard.getFilnalCount();
						for (WaigouPlan wp : wgPlanList) {
							Waiweishow wwshow = new Waiweishow();
							wwshow.setWwnumber(wp.getWaigouOrder()
									.getPlanNumber());
							wwshow.setWwstatus(wp.getStatus());
							Float wwCount = (Float) totalDao
									.getObjectByCondition(
											"select sum(procardCount) from ProcardWGCenter where wgOrderId=? and procardId=? ",
											wp.getId(), procard.getId());
							wwshow.setWwcount(wwCount);
							wwshowList.add(wwshow);
							unxdCount -= wwCount;
						}
						if (unxdCount > 0) {
							Waiweishow wwshow = new Waiweishow();
							wwshow.setWwnumber("待下单");
							wwshow.setWwstatus("未采购");
							wwshow.setWwcount(unxdCount);
							wwshowList.add(wwshow);
						}
						bompvo.setWwshowList(wwshowList);
					} else {
						List<Waiweishow> wwshowList = bompvo.getWwshowList();
						if (wwshowList == null) {
							wwshowList = new ArrayList<Waiweishow>();
						}
						Waiweishow wwshow = new Waiweishow();
						wwshow.setWwnumber("待下单");
						wwshow.setWwstatus("未采购");
						wwshow.setWwcount(bompvo.getFilnalCount());
						wwshowList.add(wwshow);
						bompvo.setWwshowList(wwshowList);
					}

				}
				procardVolist.addAll(procardVolist2);

			}
		}
		for (ProcardVo rprocardVo : procardVolist) {// 查看库存数据
			Float wwklNumber = 0f;
			Float wwylCount = 0f;
			List<ProcardProductRelation> pprList = totalDao
					.query(
							"from ProcardProductRelation where procardId=? and goodsId "
									+ "in(select goodsId from Goods where goodsClass='外协库' and processNo=?)",
							rprocardVo.getId(), rprocardVo.getProcessNo());
			List<Goods> goodsList = new ArrayList<Goods>();
			if (pprList != null && pprList.size() > 0) {
				for (ProcardProductRelation ppr : pprList) {
					if ((ppr.getZyCount() - ppr.getCkCount()) > 0) {
						Goods goods = (Goods) totalDao.getObjectById(
								Goods.class, ppr.getGoodsId());
						if (goods != null) {
							goods
									.setGoodsCurQuantitySting((ppr.getZyCount() - ppr
											.getCkCount())
											+ "");
							goodsList.add(goods);
						}
						if (goods.getDtcFlag() != null
								&& goods.getDtcFlag().equals("外协调委外")) {
							continue;
						}
						wwklNumber = wwklNumber + ppr.getZyCount()
								- ppr.getCkCount();
					}
					wwylCount += ppr.getCkCount();

				}
			}
			rprocardVo.setGoodsList(goodsList);
			rprocardVo.setWwklCount(wwklNumber);
			rprocardVo.setWwylCount(wwylCount);

		}
		return procardVolist;
	}

	@Override
	public String procardOutww(int[] selected, Float[] lqCounts,
			Integer[] processnos, String cardId, String pwsswords) {
		// TODO Auto-generated method stub
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录";
		}
		String time = Util.getDateTime();
		Users lqr = (Users) totalDao
				.getObjectByCondition(
						"from Users where cardId=? and onWork not in('离职','离职中','内退','退休')",
						cardId);
		if (lqr == null) {
			return "请刷有效员工卡!";
		}
		MD5 md5 = new MD5();
		String mdsPassword = md5.getMD5(pwsswords.getBytes());// 密码MD5转换
		Password oldpassword = lqr.getPassword();
		if (!oldpassword.getPassword().equals(mdsPassword)) {
			return "刷卡人密码有误!";
		}
		// 密码验证
		List<String> qxProcessName = totalDao
				.query(
						"select p.processName from ProcessGzstore p join p.users u where u.id=?",
						lqr.getId());
		if (qxProcessName == null || qxProcessName.size() == 0) {
			return "此员工没有绑定技能,前先让其班组长绑定技能!";
		}
		String msg = "";
		if (selected != null && selected.length > 0) {
			int i = 0;
			for (int pid : selected) {
				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, pid);
				if (procard == null) {
					msg += "第" + (i + 1) + "条选中项没有找到对应的生产件!";
					continue;
				}
				Float lqCount = lqCounts[i];
				Float outcount = 0f;
				Integer processno = processnos[i];
				if (lqCount == null || lqCount == 0) {
					msg += "第" + (i + 1) + "条选中项" + procard.getMarkId() + "("
							+ procard.getSelfCard() + "),请填写有效的领取数量!";
					continue;
				}
				List<ProcessInfor> nextList = totalDao
						.query(
								"from ProcessInfor where processNO>=? and (dataStatus is null or dataStatus!='删除') and procard.id=? order by processNO",
								processno, procard.getId());
				ProcessInfor thisprocess = nextList.get(0);
				nextList.remove(0);
				String processname = null;
				if (nextList.size() == 0 && procard.getProcard() != null) {
					processname = (String) totalDao
							.getObjectByCondition(
									"select processName from ProcessInfor where (dataStatus is null or dataStatus!='删除') and procard.id=? order by processNO",
									procard.getProcard().getId());
				} else {
					processname = nextList.get(0).getProcessName();
				}
				if (processname != null && !qxProcessName.contains(processname)) {
					msg += "第" + (i + 1) + "条选中项" + procard.getMarkId() + "("
							+ procard.getSelfCard() + "),下工序为" + processname
							+ ",此员工无此技能!";
					continue;
				}
				List<ProcardProductRelation> pprList = totalDao
						.query(
								"from ProcardProductRelation where procardId=? and (zyCount>ckCount)"
										+ " and goodsId in( select goodsId from Goods where goodsClass='外协库' and processNo=? "
										+ " and (dtcFlag is null or dtcFlag !='外协调委外')) ",
								pid, processno);
				if (pprList != null && pprList.size() > 0) {
					for (ProcardProductRelation ppr : pprList) {
						Float canout = ppr.getZyCount() - ppr.getCkCount();
						Goods goods = (Goods) totalDao.getObjectById(
								Goods.class, ppr.getGoodsId());
						if (goods != null) {
							if (goods.getDtcFlag() != null
									&& goods.getDtcFlag().equals("外协调委外")) {
								continue;
							}
							if (canout > goods.getGoodsCurQuantity()) {
								canout = goods.getGoodsCurQuantity();
							}
							if (canout > 0) {
								if (lqCount >= canout) {
									lqCount -= canout;
								} else {
									canout = lqCount;
									lqCount = 0f;
								}
								outcount = Util.Floatadd(outcount, canout);
								goods.setGoodsCurQuantity(Util.Floatdelete(
										goods.getGoodsCurQuantity(), canout));
								totalDao.update(goods);
								ppr.setCkCount(Util.Floatadd(ppr.getCkCount(),
										canout));
								// 生成出库记录
								Sell sell = new Sell();
								sell.setSellMarkId(goods.getGoodsMarkId());// 件号
								sell.setSellWarehouse(goods.getGoodsClass());// 库别
								sell.setGoodHouseName(goods.getGoodHouseName());// 仓区
								sell.setKuwei(goods.getGoodsPosition());// 库位
								sell.setBanBenNumber(goods.getBanBenNumber());// 版本号
								sell.setKgliao(goods.getKgliao());// 供料属性
								sell.setWgType(goods.getWgType());// 物料类别
								sell.setSellGoods(goods.getGoodsFullName());// 品名
								sell.setSellFormat(goods.getGoodsFormat());// 规格
								sell.setSellCount(canout);// 出库数量
								sell.setSellUnit(goods.getGoodsUnit());// 单位
								sell.setSellSupplier(goods.getGoodsSupplier());// 供应商
								sell.setSellTime(time);// 出库时间
								sell
										.setSellDate(Util
												.getDateTime("yyyy-MM-dd"));// 出库时间
								sell.setTuhao(goods.getTuhao());// 图号
								sell.setPrintStatus("NO");// 打印状态
								sell.setProcessNo(goods.getProcessNo());
								sell.setProcessName(goods.getProcessName());
								sell.setYwmarkId(procard.getYwMarkId());// 业务件号
								sell.setOrderNum(procard.getOrderNumber());// 内部订单号
								sell.setRootSelfCard(procard.getRootSelfCard());
								sell.setSellLot(goods.getGoodsLotId());
								sell.setStyle("外协刷卡出库(BOM)");
								sell.setSellCharger(lqr.getName());// 领料人
								sell.setSellchardept(lqr.getDept());
								sell.setSellAdminName(Util.getLoginUser()
										.getName());// 管理人员
								sell.setGoodsId(goods.getGoodsId());
								sell.setGoodsPrice(goods.getGoodsPrice());// 库存单价(不含税)
								sell.setSellPrice(goods.getGoodsBuyPrice()); // 批次
								// 单价
								sell.setSellbhsPrice(goods
										.getGoodsBuyBhsPrice());// 批次 不含税单价
								sell.setTaxprice(goods.getTaxprice());// 批次 税率
								// String printNumber =
								// updatMaxSellPrintNumber(sell,time);
								// sell.setPrintNumber(printNumber);
								totalDao.save(sell);
							}
						}

					}
				}
				if (lqCount > 0) {
					msg += "第" + (i + 1) + "条选中项" + procard.getMarkId() + "("
							+ procard.getSelfCard() + "),没有足够的领取数量还差" + lqCount
							+ procard.getUnit() + "没有领取!";
				}
				if (procard.getZaizhizkCount() == null) {
					procard.setZaizhizkCount(0f);
				} else {
					procard.setZaizhizkCount(procard.getZaizhizkCount()
							- outcount);
					if (procard.getZaizhizkCount() < 0) {
						procard.setZaizhizkCount(0f);
					}
				}
				// 填充工序
				// 1.查出最后一道工序号
				// Integer maxNo = (Integer) totalDao
				// .getObjectByCondition(
				// "select max(processNO) from ProcessInfor where procard.id=? ",
				// procard.getId());
				// 2.查出最后一个工序卡住数量
				List<Procard> wgjList = totalDao
						.query(
								"from Procard where procard.id=? and procardStyle='外购' and (sbStatus is null or sbStatus!='删除')  and hascount>0",
								procard.getId());
				if (procard.getHascount() == null) {
					procard.setHascount(procard.getKlNumber());
				}
				Float lastCount = procard.getKlNumber() - procard.getHascount();
				if (wgjList != null && wgjList.size() > 0) {
					for (Procard wgj : wgjList) {
						float scCount = (wgj.getKlNumber() - wgj.getHascount())
								* wgj.getQuanzi1() / wgj.getQuanzi2();
						scCount = (float) Math.floor(scCount);
						if (scCount < lastCount) {
							lastCount = scCount;
						}
					}
				}
				if (nextList != null && nextList.size() > 0) {
					String upProcesstype = "";
					String upNeedSave = null;
					boolean b = true;// 半成品转库之后工序限制可领数量，半成品转库或者领取之后解开限制数量
					float lastTotalCount = -1;// 上道工序可领数量
					for (int j = 0; j < nextList.size(); j++) {
						ProcessInfor processInfor = nextList.get(j);
						if (b) {
							if ((upNeedSave != null && upNeedSave.equals("是"))
									&& (processInfor.getNeedSave() == null || !processInfor
											.getNeedSave().equals("是"))) {
								b = false;
							}
							if (upProcesstype.equals("外委")
									&& processInfor.getProductStyle() != null
									&& processInfor.getProductStyle().equals(
											"自制")) {
								b = false;
							}
							if (upProcesstype.equals("外委")
									&& processInfor.getProductStyle() != null
									&& processInfor.getProductStyle().equals(
											"外委")
									&& processInfor.getProcessStatus() != null
									&& processInfor.getProcessStatus().equals(
											"no")) {
								b = false;
							}
						}
						upProcesstype = processInfor.getProductStyle();
						upNeedSave = processInfor.getNeedSave();
						if (i == (nextList.size() - 1)
								&& ((procard.getKlNumber() - procard
										.getHascount()) > lastCount)) {// 部分领料最后一道工序的可领数量为最小minNumber-
							// maxNo = processInfor.getProcessNO();// 最大工序号
							if (!b) {
								continue;
							} else {
								if ((processInfor.getTotalCount() + outcount) < lastCount) {
									processInfor.setTotalCount(processInfor
											.getTotalCount()
											+ outcount);
								} else {
									processInfor.setTotalCount((float) Math
											.floor(lastCount));
								}
							}
						} else {
							if (!b) {
								continue;
							} else {
								processInfor.setTotalCount(processInfor
										.getTotalCount()
										+ outcount);
								if (processInfor.getTotalCount() > procard
										.getFilnalCount()) {
									// 发送异常消息bgg
									// AlertMessagesServerImpl.addAlertMessages("系统维护异常组",
									// "件号:" + procard.getMarkId() + "批次:"
									// +
									// procard.getSelfCard()+"第"+processInfor.getProcessNO()
									// + "工序可领数量为："
									// + processInfor.getTotalCount()
									// +
									// "大于批次数量，系统自动修复为批次数量"+procard.getFilnalCount()+"，操作是：半成品转库,当前系统时间为"
									// + Util.getDateTime(), "2");
									processInfor.setTotalCount(procard
											.getFilnalCount());
								}
								if (lastTotalCount > 0
										&& lastTotalCount < processInfor
												.getTotalCount()) {// 不能超过伤到工序的可领数量
									processInfor.setTotalCount(lastTotalCount);
								}
							}
						}
						lastTotalCount = processInfor.getTotalCount();
						totalDao.update(processInfor);
					}
					// 如果下道工序为外委则做外委入库申请
					int n = 0;
					WaigouWaiweiPlan wwp = new WaigouWaiweiPlan();
					// // 查看是否有委外库
					// Float wwckCount = (Float) totalDao
					// .getObjectByCondition("select count(*) from WareHouse where name='委外库'");
					for (ProcessInfor nextWwProcessInfor : nextList) {
						if (nextWwProcessInfor != null) {
							if ("外委".equals(nextWwProcessInfor
									.getProductStyle())
									&& (n == 0 || ("yes")
											.equals(nextWwProcessInfor
													.getProcessStatus()))) {
								if (n == 0) {
									wwp.setRootMarkId(procard.getRootMarkId());
									wwp.setRootSelfCard(procard
											.getRootSelfCard());
									wwp.setOrderNum(procard.getOrderNumber());
									wwp.setYwMarkId(procard.getYwMarkId());
									wwp.setBanben(procard.getBanBenNumber());
									wwp.setBanci(procard.getBanci());
									wwp.setMarkId(procard.getMarkId());
									wwp.setProcessNo(nextWwProcessInfor
											.getProcessNO()
											+ "");
									wwp.setProName(procard.getProName());
									wwp.setProcessName(nextWwProcessInfor
											.getProcessName());
									wwp.setType("外委");
									wwp.setUnit(procard.getUnit());
									Float wwCount = outcount;
									wwp.setNumber(outcount);
									wwp.setBeginCount(outcount);
									wwp.setAddTime(Util.getDateTime());
									wwp.setJihuoTime(Util.getDateTime());
									wwp.setShArrivalTime(procard
											.getNeedFinalDate());// 应到货时间在采购确认通知后计算
									wwp.setCaigouMonth(Util
											.getDateTime("yyyy-MM月"));// 采购月份
									String wwNumber = "";
									String before = null;
									Integer bIndex = 10;
									before = "ww"
											+ Util.getDateTime("yyyyMMdd");
									Integer maxNo2 = 0;
									String maxNumber = (String) totalDao
											.getObjectByCondition("select max(planNumber) from WaigouWaiweiPlan where planNumber like '"
													+ before + "%'");
									if (maxNumber != null) {
										String wwnum = maxNumber.substring(
												bIndex, maxNumber.length());
										try {
											Integer maxNum = Integer
													.parseInt(wwnum);
											if (maxNum > maxNo2) {
												maxNo2 = maxNum;
											}
										} catch (Exception e) {
											// TODO: handle exception
										}
									}
									maxNo2++;
									wwNumber = before
											+ String.format("%03d", maxNo2);
									wwp.setPlanNumber(wwNumber);// 采购计划编号
									wwp.setSelfCard(procard.getSelfCard());// 批次
									// wwp.setGysId(nextWwProcessInfor
									// .getZhuserId());// 供应商id
									// wwp.setGysName(nextWwProcessInfor
									// .getGys());// 供应商名称
									wwp.setAllJiepai(nextWwProcessInfor
											.getAllJiepai());// 单件总节拍
									wwp.setDeliveryDuration(nextWwProcessInfor
											.getDeliveryDuration());// 耽误时长
									wwp.setSingleDuration(procard
											.getSingleDuration());// 单班时长(工作时长)
									wwp.setProcardId(procard.getId());
									wwp.setProcard(procard);
									// if (wwckCount != null
									// && wwckCount > 0) {
									wwp.setStatus("待入库");
									// 在制品待入库
									if (procard.getZaizhiApplyZk() == null) {
										procard.setZaizhiApplyZk(0f);
									}
									if (procard.getZaizhizkCount() == null) {
										procard.setZaizhizkCount(0f);
									}
									if (procard.getKlNumber() == null) {
										procard.setKlNumber(procard
												.getFilnalCount());
									}
									if (procard.getHascount() == null) {
										procard.setHascount(procard
												.getKlNumber());
									}
									// procard.getKlNumber()-procard.getHascount()=已生产数量
									// 可转库数量=已生产数量-已转库数量-转库申请中数量
									procard.setZaizhikzkCount(procard
											.getFilnalCount()
											- procard.getZaizhizkCount()
											- procard.getZaizhiApplyZk());
									if (procard.getZaizhikzkCount() >= wwCount) {
										procard.setZaizhiApplyZk(procard
												.getZaizhiApplyZk()
												+ wwCount);
										String orderNum = (String) totalDao
												.getObjectByCondition(
														"select orderNumber from Procard where id=?",
														procard.getRootId());
										GoodsStore goodsStore2 = new GoodsStore();
										goodsStore2.setNeiorderId(orderNum);
										goodsStore2.setWaiorderId(procard
												.getOutOrderNum());
										goodsStore2.setGoodsStoreMarkId(procard
												.getMarkId());
										goodsStore2.setBanBenNumber(procard
												.getBanBenNumber());
										goodsStore2.setGoodsStoreLot(procard
												.getSelfCard());
										goodsStore2
												.setGoodsStoreGoodsName(procard
														.getProName());
										goodsStore2.setApplyTime(Util
												.getDateTime());
										goodsStore2
												.setGoodsStoreArtsCard((String) totalDao
														.getObjectByCondition(
																"select selfCard from Procard where id=?",
																procard
																		.getRootId()));
										goodsStore2.setGoodsStorePerson(Util
												.getLoginUser().getName());
										goodsStore2.setStatus("待入库");
										goodsStore2.setStyle("半成品转库");
										goodsStore2.setProcardId(procard
												.getId());
										goodsStore2
												.setGoodsStoreWarehouse("委外库");// 库别
										// goodsStore2.setGoodHouseName(goodsStore.getGoodHouseName());//
										// 区名
										// goodsStore2.setGoodsStorePosition(goodsStore.getGoodsStorePosition());//
										// 库位
										goodsStore2.setGoodsStoreUnit(procard
												.getUnit());
										goodsStore2.setGoodsStoreCount(wwCount);
										goodsStore2.setProcessNo(processno);
										goodsStore2.setProcessName(thisprocess
												.getProcessName());
										totalDao.update(procard);
										totalDao.save(goodsStore2);
										// 判断外委进委外入库是否要做
										String hql1 = "select valueCode from CodeTranslation where type = 'sys' and keyCode='委外库接收半成品' and valueName='委外库接收半成品'";
										String valueCode = (String) totalDao
												.getObjectByCondition(hql1);
										if (valueCode != null
												&& valueCode.equals("否")) {
											// 入库记录直接通过
											goodsStore2.setStatus("入库");
											goodsStore2.setPrintStatus("YES");
											totalDao.update(goodsStore2);
											// 增加库存记录
											String hqlgoods = "from Goods where goodsMarkId='"
													+ procard.getMarkId()
													+ "' and goodsLotId='"
													+ procard.getSelfCard()
													+ "' and goodsStyle='半成品转库' and processNo="
													+ processno
													+ " and goodsClass='委外库'";
											Goods wwgoods = (Goods) totalDao
													.getObjectByCondition(hqlgoods);
											if (wwgoods != null) {
												wwgoods
														.setGoodsCurQuantity(wwgoods
																.getGoodsCurQuantity()
																+ goodsStore2
																		.getGoodsStoreCount());
												totalDao.update(wwgoods);
											} else {
												wwgoods = new Goods();
												wwgoods
														.setGoodsMarkId(goodsStore2
																.getGoodsStoreMarkId());
												wwgoods
														.setGoodsFormat(goodsStore2
																.getGoodsStoreFormat());
												wwgoods
														.setBanBenNumber(goodsStore2
																.getBanBenNumber());
												wwgoods
														.setGoodsFullName(goodsStore2
																.getGoodsStoreGoodsName());
												wwgoods.setGoodsClass("委外库");
												wwgoods
														.setGoodsBeginQuantity(goodsStore2
																.getGoodsStoreCount());
												wwgoods
														.setGoodsCurQuantity(goodsStore2
																.getGoodsStoreCount());
												totalDao.save(wwgoods);
											}
											// 添加零件与在制品关系表
											ProcardProductRelation pprelation = new ProcardProductRelation();
											pprelation.setAddTime(Util
													.getDateTime());
											pprelation.setProcardId(procard
													.getId());
											pprelation.setGoodsId(wwgoods
													.getGoodsId());
											pprelation.setZyCount(goodsStore2
													.getGoodsStoreCount());
											pprelation.setFlagType("本批在制品");
											totalDao.save(pprelation);
											// 将外购外委激活序列状态改为待激活
											wwp.setStatus("待激活");
											// totalDao.save(wwp);
										}
									} else {
										return "对不起超过可申请数量("
												+ procard.getZaizhikzkCount()
												+ ")";
									}
									// } else {
									// wwp.setStatus("待激活");
									// }
									totalDao.save(wwp);
									// wgSet.add(wwp);
								} else {
									wwp
											.setProcessNo(wwp.getProcessNo()
													+ ";"
													+ nextWwProcessInfor
															.getProcessNO());
									wwp.setProcessName(wwp.getProcessName()
											+ ";"
											+ nextWwProcessInfor
													.getProcessName());
									totalDao.update(wwp);
								}
							} else {
								break;
							}
						} else {
							break;
						}
						n++;
					}
					if (wwp.getId() != null) {
						// 匹配供应商
						Price price = (Price) totalDao
								.getObjectByCondition(
										"from Price where wwType='工序外委' and partNumber=? and gongxunum=? and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
												+ Util
														.getDateTime("yyyy-MM-dd")
												+ "')  order by id desc", wwp
												.getMarkId(), wwp
												.getProcessNo());
						if (price != null) {
							wwp.setPriceId(price.getId());
							wwp.setGysId(price.getGysId());
							ZhUser zhUser = (ZhUser) totalDao.getObjectById(
									ZhUser.class, price.getGysId());
							wwp.setGysName(zhUser.getName());
							wwp.setUserCode(zhUser.getUsercode());
							wwp.setUserId(zhUser.getUserid());
							totalDao.update(wwp);
						}
					}
					if (wwp.getStatus() != null
							&& wwp.getStatus().equals("待激活")) {// 说明自动跳过了半成品入委外库操作
						// 下一步操作
						zijihuoww(wwp);
					}
				} else {
					if (procard.getTjNumber() == null) {
						procard.setTjNumber(outcount);
					} else {
						procard.setTjNumber(procard.getTjNumber() + outcount);
					}
					if (procard.getTjNumber() > procard.getFilnalCount()) {
						procard.setTjNumber(procard.getFilnalCount());
					}
					if (procard.getTjNumber().equals(procard.getFilnalCount())) {
						procard.setStatus("完成");
					}
					Float minNumber = null;
					if (procard.getProcardStyle().equals("外购件")) {
						minNumber = procard.getTjNumber()
								* procard.getQuanzi1() / procard.getQuanzi2();
					} else if (procard.getProcardStyle().equals("总成")) {
					} else {
						minNumber = procard.getTjNumber()
								/ procard.getCorrCount();
					}
					if (minNumber % 1 > 0.95) {
						minNumber = (float) Math.ceil(minNumber);
					} else {
						minNumber = (float) Math.floor(minNumber);
					}
					procard.setMinNumber(minNumber);
					totalDao.update(procard);
					// 没有下道工序就激活上次流水卡
					Procard father = procard.getProcard();
					if (father != null) {
						if (father.getLingliaoType() != null
								&& father.getLingliaoType().equals("part")) {
							Float maxMinNumber = (Float) totalDao
									.getObjectByCondition(
											"select max(minNumber) from Procard where procard.id=? and (sbStatus is null or sbStatus!='删除')",
											father.getId());
							if (maxMinNumber != null) {
								if (father.getHascount() == null) {
									father.setHascount(maxMinNumber);
									father.setKlNumber(maxMinNumber);
								} else {
									if (father.getKlNumber() > maxMinNumber) {
										// father
										// .setHascount(father
										// .getHascount()
										// + (father.getKlNumber() -
										// maxMinNumber));
									} else {
										// Float hascount =
										// father.getHascount()+ (maxMinNumber -
										// father
										// .getKlNumber());
										// father.setHascount(hascount);
										father.setKlNumber(maxMinNumber);
									}
								}
							}
							// if (father.getJihuoStatua() == null
							// || father.getJihuoStatua().length() == 0) {
							// father.setJihuoStatua("激活");
							// father.setStatus("已发卡");
							// totalDao.update(father);
							// }
							// 运算工序激活数量
							ysgxjhCount(father);
						} else {
							Float nullMinNumber = (Float) totalDao
									.getObjectByCondition(
											"select count(*) from Procard where procard.id=? and minNumber is null and (sbStatus is null or sbStatus!='删除')",
											father.getId());
							if (nullMinNumber == null || nullMinNumber == 0) {
								Float minMinNumber = (Float) totalDao
										.getObjectByCondition(
												"select min(minNumber) from Procard where procard.id=? and (sbStatus is null or sbStatus!='删除')",
												father.getId());
								if (minMinNumber != null) {
									if (father.getHascount() == null) {
										father.setHascount(minMinNumber);
										father.setKlNumber(minMinNumber);
									} else {
										if (father.getKlNumber() > minMinNumber) {
											father
													.setHascount(father
															.getHascount()
															+ (father
																	.getKlNumber() - minMinNumber));
										} else {
											father.setHascount(father
													.getHascount()
													- (minMinNumber - father
															.getKlNumber()));
											father.setKlNumber(minMinNumber);
										}
									}
									// if (father.getJihuoStatua() == null
									// || father.getJihuoStatua().length() == 0)
									// {
									// father.setJihuoStatua("激活");
									// father.setStatus("已发卡");
									// totalDao.update(father);
									// }
									// 运算工序激活数量
									ysgxjhCount(father);
								}
							}
						}
					}

				}

				i++;
			}
		}

		return msg;
	}

	@Override
	public String chengcsblProcard(ProcardCsBlOrder csblorder) {
		if (csblorder != null) {
			Procard rootprocard = (Procard) totalDao.get(Procard.class,
					csblorder.getRootId());
			boolean isblwg = false;
			List<ProcardCsBl> csblList = totalDao.query(
					" from ProcardCsBl where csblOrder.id = ? ", csblorder
							.getId());
			for (ProcardCsBl csbl : csblList) {
				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, csbl.getProcardId());
				if ("外购".equals(procard.getProcardStyle())) {
					// 生成一个报废procard记录补料的数量.
					isblwg = true;
					Procard newProcard = new Procard();
					BeanUtils.copyProperties(procard, newProcard, new String[] {
							"id", "procard", "procardSet", "processInforSet",
							"procardPartsSet", "procardPro", "oneProcardBonus",
							"planOrderId", "submitDate", "processPeopleSet",
							"planOrderDetailId", "wgwwPlanSet", "rukuCount",
							"tjNumber", "klNumber", "zaizhizkCount",
							"zaizhiApplyZk", "zaizhikzkCount",
							"processPeopleSet", "proAndWgList", "sbId",
							"sbNumber", "zzNumber", "ztNumber", "qjCount",
							"cgNumber", "outcgNumber", "status", "wlstatus",
							"wwblCount", "wwblreceiveCount" });
					newProcard.setOldProcardId(procard.getId());// 对应正常流水单id
					float count = csbl.getBlNum();
					newProcard.setFilnalCount(count);// 数量
					newProcard.setTjNumber(0f);
					newProcard.setMaxCount(csbl.getBlNum());
					newProcard.setRootId(rootprocard.getId());
					newProcard.setProcard(rootprocard);
					newProcard.setHascount(0f);
					newProcard.setKlNumber(count);
					newProcard.setTjNumber(count);
					newProcard.setLingliaoDetail(null);
					newProcard.setOldProcardId(procard.getId());
					newProcard.setFatherId(rootprocard.getId());
					newProcard.setProcardTime(Util.getDateTime());
					newProcard.setProductStyle(procard.getProductStyle());
					newProcard.setBelongLayer(2);
					newProcard.setProcard(rootprocard);
					newProcard.setFatherId(rootprocard.getId());
					newProcard.setStatus("完成");
					// 重新生成批次号
					String selfcard = huoquMaxSelfCard(newProcard.getMarkId());
					newProcard.setSelfCard(selfcard);
					Float quanzhi2 = csbl.getBlNum()
							/ rootprocard.getFilnalCount();
					newProcard.setQuanzi2(quanzhi2);
					newProcard.setJihuoStatua("激活");
					newProcard.setHasPlan(0f);
					totalDao.save(newProcard);
					// 返回数据，
					if (procard.getHascount().equals(procard.getFilnalCount())) {
						procard.setHascount(procard.getHascount() + count);
					}
					ProcardBl wgbl = (ProcardBl) totalDao.getObjectByCondition(
							" from ProcardBl where procardId =? ", procard
									.getId());
					if (wgbl != null) {
						wgbl.setStatus("未领完");
						wgbl.setYlCount(wgbl.getYlCount() - count);
						totalDao.update(wgbl);
					}
					ProcardBl zzbl = (ProcardBl) totalDao.getObjectByCondition(
							" from ProcardBl where procardId =? ", procard
									.getFatherId());
					if (zzbl != null) {
						zzbl.setStatus("未领完");
						if (zzbl.getYlCount() != null && zzbl.getYlCount() > 0) {
							zzbl.setYlCount(zzbl.getYlCount()
									- (count * (procard.getQuanzi1() / procard
											.getQuanzi2())));
						}
						totalDao.update(zzbl);
					}
					procard.setStatus("已发卡");
					totalDao.update(procard);
					// 修改上层自制件的hascount;
					Procard zzprocard = (Procard) totalDao.get(Procard.class,
							procard.getFatherId());
					if (zzprocard.getHascount().equals(
							zzprocard.getFilnalCount())) {
						zzprocard.setHascount(zzprocard.getHascount()
								+ (count * (procard.getQuanzi1() / procard
										.getQuanzi2())));
					}
					totalDao.update(zzprocard);
					saveBlMop(newProcard, Util.getLoginUser());
				} else {
					try {
						addblProcard(procard, csbl.getBlNum(), rootprocard,
								rootprocard.getId(), csbl);
					} catch (Exception e) {
						e.printStackTrace();
					}

				}
			}
			if (isblwg) {
				rootprocard.setHascount(0f);
				ProcardBl rootBl = (ProcardBl) totalDao.getObjectByCondition(
						" from ProcardBl where procardId =? ", rootprocard
								.getId());
				if (rootBl != null) {
					rootBl.setYlCount(0f);
					rootBl.setStatus("未领");
					totalDao.update(rootBl);
				}
			}
			if (isbgbl) {
				rootprocard.setWlstatus("待定");
				isbgbl = false;
			}
			totalDao.update(rootprocard);
		}
		return null;
	}

	public String chengcsblProcard2(ProcardCsBlOrder csblorder) {
		if (csblorder != null) {
			Procard rootprocard = (Procard) totalDao.get(Procard.class,
					csblorder.getRootId());
			boolean isblwg = false;
			List<ProcardCsBl> csblList = totalDao.query(
					" from ProcardCsBl where csblOrder.id = ? ", csblorder
							.getId());
			for (ProcardCsBl csbl : csblList) {
				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, csbl.getProcardId());
				if ("外购".equals(procard.getProcardStyle())) {
					// 生成一个全新的procard记录补料的数量.
					isblwg = true;
					Procard newProcard = new Procard();
					BeanUtils.copyProperties(procard, newProcard, new String[] {
							"id", "procard", "procardSet", "processInforSet",
							"procardPartsSet", "procardPro", "oneProcardBonus",
							"planOrderId", "submitDate", "processPeopleSet",
							"planOrderDetailId", "wgwwPlanSet", "rukuCount",
							"tjNumber", "klNumber", "zaizhizkCount",
							"zaizhiApplyZk", "zaizhikzkCount",
							"processPeopleSet", "proAndWgList", "sbId",
							"sbNumber", "zzNumber", "ztNumber", "qjCount",
							"cgNumber", "outcgNumber", "status", "wlstatus",
							"wwblCount", "wwblreceiveCount" });
					newProcard.setOldProcardId(procard.getId());// 对应正常流水单id
					float count = csbl.getBlNum();
					String selfCard = huoquMaxSelfCard(newProcard.getMarkId());
					newProcard.setSelfCard(selfCard);
					newProcard.setFilnalCount(count);// 数量
					newProcard.setTjNumber(0f);
					newProcard.setMaxCount(csbl.getBlNum());
					newProcard.setRootId(rootprocard.getId());
					newProcard.setProcard(rootprocard);
					newProcard.setHascount(0f);
					newProcard.setLingliaoDetail(null);
					newProcard.setOldProcardId(procard.getId());
					newProcard.setFatherId(rootprocard.getId());
					newProcard.setProcardTime(Util.getDateTime());
					newProcard.setProductStyle(procard.getProductStyle());
					newProcard.setBelongLayer(2);
					newProcard.setProcard(rootprocard);
					newProcard.setFatherId(rootprocard.getId());
					newProcard.setStatus("初始");
					String selfcard = huoquMaxSelfCard(newProcard.getMarkId());
					newProcard.setSelfCard(selfcard);
					Float quanzhi2 = csbl.getBlNum()
							/ rootprocard.getFilnalCount();
					newProcard.setQuanzi2(quanzhi2);
					newProcard.setHasPlan(0f);
					totalDao.save(newProcard);
				} else {
					try {
						addblProcard2(procard, csbl.getBlNum(), rootprocard,
								rootprocard.getId(), csbl);
					} catch (Exception e) {
						e.printStackTrace();
					}

				}
			}
			if (isblwg) {
				rootprocard.setHascount(0f);
				ProcardBl rootBl = (ProcardBl) totalDao.getObjectByCondition(
						" from ProcardBl where procardId =? ", rootprocard
								.getId());
				if (rootBl != null) {
					rootBl.setYlCount(0f);
					rootBl.setStatus("未领");
					totalDao.update(rootBl);
				}
			}
			rootprocard.setWlstatus("待定");
			totalDao.update(rootprocard);
		}
		return null;
	}

	// 递归生成补料流水单
	private void addblProcard(Procard procard, Float Num, Procard newFProcard,
			Integer rootId, ProcardCsBl csbl) {
		boolean isCsbl = true;
		if ("超损补料".equals(csbl.getType())) {
			isCsbl = true;
		} else if ("外委补料".equals(csbl.getType())) {
			isCsbl = false;
		}
		String hql_processNo = "";
		String hql_processNo0 = "";
		String hql_processNos = "";
		Integer processNo = 0;
		if (!isCsbl && procard.getId().equals(csbl.getProcardId())) {
			String processNOs = csbl.getProcessNos();
			String[] processNoArray = processNOs.split(";");
			processNo = Integer.parseInt(processNoArray[0]);
			Integer nextprocessNo = Integer
					.parseInt(processNoArray[processNoArray.length - 1]);
			hql_processNo = " and processNO <" + processNo;
			hql_processNo0 = " and processNO <=" + nextprocessNo;
			hql_processNos = " and processNOs = '" + processNOs + "'";
		}
		Procard newProcard = new Procard();
		BeanUtils.copyProperties(procard, newProcard, new String[] { "id",
				"procard", "procardSet", "processInforSet", "procardPartsSet",
				"procardPro", "oneProcardBonus", "planOrderId", "submitDate",
				"processPeopleSet", "planOrderDetailId", "wgwwPlanSet",
				"rukuCount", "tjNumber", "klNumber", "zaizhizkCount",
				"zaizhiApplyZk", "zaizhikzkCount", "processPeopleSet",
				"proAndWgList", "sbId", "sbNumber", "zzNumber", "ztNumber",
				"qjCount", "cgNumber", "outcgNumber", "status", "wlstatus",
				"wwblCount" });
		newProcard.setOldProcardId(procard.getId());// 对应正常流水单id
		float count = Num;
		float minNumber = 0f;
		minNumber = count;
		if (procard.getId().equals(csbl.getProcardId())) {
			Float corrCount = newFProcard.getFilnalCount() / count;
			newProcard.setCorrCount(corrCount);
			minNumber = newFProcard.getFilnalCount();
		} else if ("外购".equals(procard.getProcardStyle())) {
			count = count * (procard.getQuanzi2() / procard.getQuanzi1());
		} else if ("自制".equals(procard.getProcardStyle())) {
			count = count * procard.getCorrCount();
			count = (float) Math.ceil(count);
		}
		newProcard.setFilnalCount(count);// 数量aa
		newProcard.setTjNumber(count);
		newProcard.setMaxCount(count);
		newProcard.setRootId(rootId);
		newProcard.setKlNumber(count);
		newProcard.setLingliaoDetail(null);
		newProcard.setProcard(newFProcard);
		newProcard.setHascount(0f);
		newProcard.setOldProcardId(procard.getId());
		newProcard.setFatherId(newFProcard.getId());
		newProcard.setProcardTime(Util.getDateTime());
		String selfCard = huoquMaxSelfCard(procard.getMarkId());
		newProcard.setSelfCard(selfCard);
		newProcard.setProductStyle(newFProcard.getProductStyle());
		newProcard.setStatus("完成");
		newProcard.setMinNumber(minNumber);
		newProcard.setJihuoStatua("激活");
		newProcard.setHasPlan(0f);
		// 工序处理
		List<ProcessInfor> oldProInfo = totalDao.query(" from ProcessInfor "
				+ " where procard.id =? " + hql_processNo
				+ "and  (dataStatus is null or  dataStatus <> '删除')", procard
				.getId());

		Set<ProcessInfor> newProInfo = new HashSet<ProcessInfor>();
		for (ProcessInfor processInfor : oldProInfo) {
			ProcessInfor newProInfor = new ProcessInfor();
			BeanUtils.copyProperties(processInfor, newProInfor, new String[] {
					"id", "totalCount", "applyCount", "usercodes",
					"userCardId", "usernames", "userId", "submmitCount",
					"breakCount", "firstApplyDate", "procard", "procardPro",
					"productProcess", "osWork", "processZjSet",
					"processinforFuLiao", "agreeWwCount", "selectWwCount",
					"applyWwCount", "wwbackCount" });
			newProInfor.setTotalCount(count);
			newProInfor.setStatus("完成");
			newProInfor.setProcard(newProcard);
			newProInfor.setApplyCount(count);
			newProInfor.setSubmmitCount(count);
			newProInfor.setWlqrcount(0f);
			newProInfo.add(newProInfor);
		}
		newProcard.setProcessInforSet(newProInfo);
		newProcard.setJihuoStatua(null);
		totalDao.save(newProcard);
		if ("外购".equals(procard.getProcardStyle())
				&& (procard.getWwblCount() == null || procard.getWwblCount() == 0)) {
			// 返回数据，
			procard.setHascount(procard.getHascount() + count);
			ProcardBl wgbl = (ProcardBl) totalDao.getObjectByCondition(
					" from ProcardBl where procardId =? ", procard.getId());
			if (wgbl != null) {
				wgbl.setStatus("未领完");
				wgbl.setYlCount(wgbl.getYlCount() - count);
				totalDao.update(wgbl);
			}
			ProcardBl zzbl = (ProcardBl) totalDao.getObjectByCondition(
					" from ProcardBl where procardId =? ", procard
							.getFatherId());
			if (zzbl != null) {
				zzbl.setStatus("未领完");
				zzbl
						.setYlCount(zzbl.getYlCount()
								- (count * (procard.getQuanzi1() / procard
										.getQuanzi2())));
				totalDao.update(zzbl);
			}
			procard.setStatus("已发卡");
			totalDao.update(procard);
			// 修改上层自制件的hascount;
			Procard zzprocard = (Procard) totalDao.get(Procard.class, procard
					.getFatherId());
			zzprocard.setHascount(zzprocard.getHascount()
					+ (count * (procard.getQuanzi1() / procard.getQuanzi2())));
			totalDao.update(zzprocard);
			saveBlMop(newProcard, Util.getLoginUser());
			if ("外委补料".equals(csbl.getType())) {
				// 修改中间变的数量。以便供应商继续领料。
				ProcessInforWWProcard prowprocard = (ProcessInforWWProcard) totalDao
						.getObjectByCondition(
								" from ProcessInforWWProcard where "
										+ " procardId =? and (status is null or status not in ('删除','取消'))",
								procard.getId());
				if (prowprocard != null) {
					prowprocard.setApplyCount(prowprocard.getApplyCount()
							+ newProcard.getFilnalCount());
					prowprocard.setHascount(prowprocard.getHascount()
							+ newProcard.getFilnalCount());
					totalDao.update(prowprocard);
				}
			}
		} else if ("自制".equals(procard.getProcardStyle())) {
			// 处理工序,可以继续领工序。
			List<ProcessInfor> oldProInfo1 = totalDao
					.query(
							"  from ProcessInfor "
									+ " where procard.id =? and  (dataStatus is null or  dataStatus <> '删除') and submmitCount>?"
									+ hql_processNo, procard.getId(), count);
			// 修改工序领取日志，以便工序可以继续领取提交。
			for (ProcessInfor process : oldProInfo1) {
				process.setSubmmitCount(process.getSubmmitCount() - count);
				process.setApplyCount(process.getApplyCount() - count);
				process.setStatus("领工序");
				if (process.getWlqrcount() != null
						&& process.getWlqrcount() > 0) {
					process.setWlqrcount(process.getWlqrcount() - count);
				}
				totalDao.update(process);
				List<ProcessInforReceiveLog> processLogList = totalDao
						.query(
								" from ProcessInforReceiveLog where "
										+ " fk_processInforId =? and status = '提交'   and (istuliao is null or istuliao <> '是') order by submitNumber desc ",
								process.getId());
				float flagcount = count;
				ProcessInfor newProInfo1 = (ProcessInfor) totalDao
						.getObjectByCondition(
								"  from ProcessInfor "
										+ " where procard.id =? and processNO =? and   (dataStatus is null or  dataStatus <> '删除') ",
								newProcard.getId(), process.getProcessNO());
				for (ProcessInforReceiveLog proLog : processLogList) {
					if (flagcount > 0) {
						if (flagcount <= proLog.getSubmitNumber()) {
							ProcessInforReceiveLog proLog0 = new ProcessInforReceiveLog();
							BeanUtils.copyProperties(proLog, proLog0,
									new String[] { "id", "receiveNumber",
											"submitNumber" });
							proLog.setSubmitNumber(proLog.getSubmitNumber()
									- flagcount);
							proLog.setReceiveNumber(proLog.getReceiveNumber()
									- flagcount);
							proLog0.setSubmitNumber(flagcount);
							proLog0.setReceiveNumber(flagcount);
							proLog0.setIstuliao("是");
							flagcount = 0f;
							totalDao.update(proLog);
							proLog0.setFk_processInforId(newProInfo1.getId());
							totalDao.save(proLog0);
						} else {
							ProcessInforReceiveLog proLog0 = new ProcessInforReceiveLog();
							BeanUtils.copyProperties(proLog, proLog0,
									new String[] { "id", "receiveNumber",
											"submitNumber" });
							proLog0.setSubmitNumber(proLog.getSubmitNumber());
							proLog0.setReceiveNumber(proLog.getReceiveNumber());
							proLog.setSubmitNumber(0f);
							proLog.setReceiveNumber(0f);
							proLog0.setIstuliao("是");
							flagcount = flagcount - proLog.getSubmitNumber();
							totalDao.update(proLog);
							proLog0.setFk_processInforId(newProInfo1.getId());
							totalDao.save(proLog0);
						}

					}
				}
			}
			// 处理外委领过料的，可以继续外委领料
			List<Object[]> ListprocessNOsAndProcessName = totalDao
					.query(
							" select processNOs, processNames  from ProcessInforWWApplyDetail where procardId=? "
									+ hql_processNos
									+ " group by processNOs, processNames",
							procard.getId());

			// 1.修改一部分出库记录的出库方式
			if (ListprocessNOsAndProcessName != null
					&& ListprocessNOsAndProcessName.size() > 0) {
				for (Object[] processNOsAndProcessName : ListprocessNOsAndProcessName) {
					String processNOs = (String) processNOsAndProcessName[0];
					String processName = (String) processNOsAndProcessName[1];
					String[] processNOArray = processNOs.split(";");
					// 判断是否有领过料的外委工序
					List<Sell> listSell = totalDao
							.query(
									" from Sell where sellMarkId=? and sellArtsCard =?  and orderNum =? and processNo=?",
									procard.getMarkId(),
									procard.getSelfCard(),
									procard.getOrderNumber(),
									Integer
											.parseInt(processNOArray[processNOArray.length - 1]));
					Float sellNum = count;
					if (listSell != null && listSell.size() > 0) {
						for (Sell sell : listSell) {
							if (sellNum > 0) {
								Sell s = new Sell();
								BeanUtils.copyProperties(sell, s, new String[] {
										"sellId", "sellCount", "style" });
								s.setStyle("外委补料");
								if (sell.getSellCount() > sellNum) {
									s.setSellCount(sellNum);
									sell.setSellCount(sell.getSellCount()
											- sellNum);
									sellNum = 0f;
								} else {
									s.setSellCount(sell.getSellCount());
									sell.setSellCount(0f);
									sellNum -= sell.getSellCount();
								}
								s.setSellTime(Util.getDateTime());
								s.setPlanID(Util.getLoginUser().getName());
								s.setPrintStatus("YES");
								totalDao.save(s);
								totalDao.update(sell);
							}
							// 2.修改中间表的sellcount;
							ProcardProductRelation ppr = (ProcardProductRelation) totalDao
									.getObjectByCondition(
											" from ProcardProductRelation where procardId = ? and ckCount>0 and goodsId=?",
											procard.getId(), sell.getGoodsId());
							if (ppr != null) {
								ppr.setCkCount(ppr.getCkCount() - count);
								totalDao.update(ppr);
							}
						}
					}
				}

			}
			Integer finalProcessNo = (Integer) totalDao
					.getObjectByCondition(
							"select processNO  from ProcessInfor where procard.id =? and  (dataStatus is null or  dataStatus <> '删除')"
									+ " order by processNO desc ", procard
									.getId());
			Integer maxProcessNo = (Integer) totalDao
					.getObjectByCondition(
							"select processNO  from ProcessInfor where procard.id =? and  (dataStatus is null or  dataStatus <> '删除')"
									+ hql_processNo0
									+ " order by processNO desc ", procard
									.getId());
			if (finalProcessNo.equals(maxProcessNo)) {
				if (procard.getTjNumber() != null) {
					procard.setTjNumber(procard.getTjNumber() - count);
				}
			}
			// 包工包料逻辑处理
			if (isCsbl) {
				processNo = maxProcessNo;
			}
			csbl_wwblcl(procard.getId(), count, processNo);
			procard.setStatus("领工序");
			totalDao.update(procard);
		}

		List<Procard> procardList = null;
		List<Integer> procardIdList = new ArrayList<Integer>();
		if (isCsbl || !procard.getId().equals(csbl.getProcardId())) {
			procardList = totalDao
					.query(
							" from Procard where procard.id =? and (sbStatus is null or sbStatus <> '删除') ",
							procard.getId());
		} else {
			procardList = new ArrayList<Procard>();
			WaigouPlan waigouplan = (WaigouPlan) totalDao.get(WaigouPlan.class,
					csbl.getWgplanId());
			// 查询到外委工序关联的外购件
			String hql_wwSource = "";
			if ("手动外委".equals(waigouplan.getWwSource())) {
				hql_wwSource = "from ProcessInforWWProcard where applyDtailId in(select wwxlId from ProcardWGCenter where wgOrderId=?) and (status is null or status not in ('删除','取消'))";
			} else if ("BOM外委".equals(waigouplan.getWwSource())) {
				hql_wwSource = "from ProcessInforWWProcard where wwxlId in(select wwxlId from ProcardWGCenter where wgOrderId=?) and (status is null or status not in ('删除','取消'))";
			}
			List<ProcessInforWWProcard> wwprocardList = totalDao.query(
					hql_wwSource, waigouplan.getId());
			if (wwprocardList != null && wwprocardList.size() > 0) {
				for (ProcessInforWWProcard ProcessWwProcard : wwprocardList) {
					Procard procard1 = (Procard) totalDao
							.getObjectByCondition(
									" from Procard where id=? and (sbStatus is null or sbStatus <> '删除')",
									ProcessWwProcard.getProcardId());
					if (procard1 != null) {
						procardIdList.add(procard1.getId());
						procardList.add(procard1);
					}
				}
			}
			// 查询前工序关联的外购件。
			String processNos = waigouplan.getProcessNOs();
			String[] processNoArray = processNos.split(";");
			Integer lastProcessNo = Integer.parseInt(processNoArray[0]);
			List<ProcessInfor> procesList = totalDao.query(
					" from ProcessInfor where procard.id =? and processNO<? and "
							+ "(dataStatus is null or dataStatus <> '删除')",
					procard.getId(), lastProcessNo);
			if (procesList != null && procesList.size() > 0) {
				for (ProcessInfor process : procesList) {
					List<String> wgprocardMardkIdList = totalDao
							.query(
									"select DISTINCT wgprocardMardkId  from ProcessAndWgProcardTem where procardMarkId =? and"
											+ " processNo=? ", procard
											.getMarkId(), process
											.getProcessNO());
					if (wgprocardMardkIdList != null
							&& wgprocardMardkIdList.size() > 0) {
						for (String wgmarkId : wgprocardMardkIdList) {
							Procard wgprocard = (Procard) totalDao
									.getObjectByCondition(
											" from Procard where procard.id =? and markId =? and "
													+ "(sbStatus is null or sbStatus <> '删除')",
											procard.getId(), wgmarkId);
							if (wgprocard != null
									&& !procardIdList.contains(wgprocard
											.getId())) {
								procardList.add(wgprocard);
							}
						}
					}
				}
			}

		}

		if (!"外购".equals(procard.getProcardStyle()) && procardList != null
				&& procardList.size() > 0) {
			for (Procard procard2 : procardList) {
				addblProcard(procard2, count, newProcard, rootId, csbl);
			}
		}

	}

	// 递归生成补料流水单
	private void addblProcard2(Procard procard, Float Num, Procard newFProcard,
			Integer rootId, ProcardCsBl csbl) {
		Procard newProcard = new Procard();
		BeanUtils.copyProperties(procard, newProcard, new String[] { "id",
				"procard", "procardSet", "processInforSet", "procardPartsSet",
				"procardPro", "oneProcardBonus", "planOrderId", "submitDate",
				"processPeopleSet", "planOrderDetailId", "wgwwPlanSet",
				"rukuCount", "tjNumber", "klNumber", "zaizhizkCount",
				"zaizhiApplyZk", "zaizhikzkCount", "processPeopleSet",
				"proAndWgList", "sbId", "sbNumber", "zzNumber", "ztNumber",
				"qjCount", "cgNumber", "outcgNumber", "status", "wlstatus",
				"wwblCount" });
		newProcard.setOldProcardId(procard.getId());// 对应正常流水单id
		float count = Num;
		float minNumber = 0f;
		minNumber = count;
		if (procard.getId().equals(csbl.getProcardId())) {
			Float corrCount = newFProcard.getFilnalCount() / count;
			newProcard.setCorrCount(corrCount);
			minNumber = newFProcard.getFilnalCount();
		} else if ("外购".equals(procard.getProcardStyle())) {
			count = count * (procard.getQuanzi2() / procard.getQuanzi1());
		} else if ("自制".equals(procard.getProcardStyle())) {
			count = count * procard.getCorrCount();
			count = (float) Math.ceil(count);
		}
		String selfCard = huoquMaxSelfCard(newProcard.getMarkId());
		newProcard.setSelfCard(selfCard);
		newProcard.setFilnalCount(count);// 数量aa
		newProcard.setMaxCount(count);
		newProcard.setRootId(rootId);
		newProcard.setLingliaoDetail(null);
		newProcard.setProcard(newFProcard);
		newProcard.setHascount(0f);
		newProcard.setOldProcardId(procard.getId());
		newProcard.setFatherId(newFProcard.getId());
		newProcard.setProcardTime(Util.getDateTime());
		newProcard.setProductStyle(newFProcard.getProductStyle());
		newProcard.setStatus("初始");
		newProcard.setMinNumber(minNumber);
		newProcard.setHasPlan(0f);
		// 工序处理
		List<ProcessInfor> oldProInfo = totalDao.query(" from ProcessInfor "
				+ " where procard.id =? "
				+ "and  (dataStatus is null or  dataStatus <> '删除')", procard
				.getId());

		Set<ProcessInfor> newProInfo = new HashSet<ProcessInfor>();
		for (ProcessInfor processInfor : oldProInfo) {
			ProcessInfor newProInfor = new ProcessInfor();
			BeanUtils.copyProperties(processInfor, newProInfor, new String[] {
					"id", "totalCount", "applyCount", "usercodes",
					"userCardId", "usernames", "userId", "submmitCount",
					"breakCount", "firstApplyDate", "procard", "procardPro",
					"productProcess", "osWork", "processZjSet",
					"processinforFuLiao", "agreeWwCount", "selectWwCount",
					"applyWwCount", "wwbackCount" });
			newProInfor.setTotalCount(count);
			newProInfor.setStatus("初始");
			newProInfor.setProcard(newProcard);
			newProInfor.setWlqrcount(0f);
			newProInfo.add(newProInfor);
		}
		newProcard.setProcessInforSet(newProInfo);
		newProcard.setJihuoStatua(null);
		totalDao.save(newProcard);

		List<Procard> procardList = null;
		procardList = totalDao
				.query(
						" from Procard where procard.id =? and (sbStatus is null or sbStatus <> '删除') ",
						procard.getId());
		if (!"外购".equals(procard.getProcardStyle()) && procardList != null
				&& procardList.size() > 0) {
			for (Procard procard2 : procardList) {
				addblProcard2(procard2, count, newProcard, rootId, csbl);
			}
		}

	}

	@Override
	public Object[] findAllCsblOrderList(ProcardCsBlOrder csblOrder,
			int parseInt, int pageSize, String status) {
		if (csblOrder == null) {
			csblOrder = new ProcardCsBlOrder();
		}
		String hql = totalDao.criteriaQueries(csblOrder, null);
		List<ProcardCsBlOrder> csblOrderList = totalDao.findAllByPage(hql
				+ " order by id desc", parseInt, pageSize);
		int count = totalDao.getCount(hql);
		return new Object[] { csblOrderList, count };
	}

	@Override
	public Object[] findCsblListById(Integer id, ProcardCsBl csbl) {
		if (id != null) {
			if (csbl == null) {
				csbl = new ProcardCsBl();
			}
			ProcardCsBlOrder csblOrder = (ProcardCsBlOrder) totalDao.get(
					ProcardCsBlOrder.class, id);
			String hql = totalDao.criteriaQueries(csbl, " csblOrder.id =?");
			List<ProcardCsBl> csblList = totalDao.query(hql, id);
			return new Object[] { csblOrder, csblList };
		}
		return null;
	}

	public List<OnorderInventory> showOiList() {
		// 先查询(状态不是入库,取消,初始)
		List<Procard> procardList = totalDao
				.query("from Procard where status not in ('入库','取消','初始') and rootId = id and procardStyle = '总成'");
		List<OnorderInventory> oiList = new ArrayList<OnorderInventory>();
		for (Procard procard : procardList) {
			OnorderInventory oi = new OnorderInventory();
			oi.setMarkId(procard.getMarkId());// 件号
			oi.setOrderNumber(procard.getOrderNumber());// 订单号
			oi.setYwMarkId(procard.getYwMarkId());// 业务件号
			oi.setName(procard.getProName());// 名称
			oi.setProductStyle(procard.getProductStyle());// 生产类型
			oi.setProcardTime(procard.getProcardTime());// 任务下达时间
			oi.setStatus(procard.getStatus());// 状态
			oi.setFilnalCount(procard.getFilnalCount());
			Float rukuCount = 0F;
			if (procard.getHasRuku() != null) {
				rukuCount = procard.getHasRuku();// 出库数量
			}
			oi.setRukuCount(rukuCount);
			String time = Util.getDateTime("yyyy-MM-dd");
			// 查询投料金额、已领金额
			String price_hql = "SELECT sum(pd.klNumber*pc.ta_bhsPrice),sum((pd.klNumber-pd.hascount)*pc.ta_bhsPrice)"
					+ " from ta_sop_w_procard pd JOIN ta_sop_w_procard pd1 ON pd1.id = pd.rootId and pd1.id ="
					+ procard.getId()
					+ " and pd.procardStyle ='外购' and (pd.wwblCount is null or pd.wwblCount!=0)"
					+ " LEFT JOIN ta_price pc on  pc.ta_kgliao=pd.kgliao and "
					+ "pd.markid=pc.ta_partNumber and pc.banbenhao = pd.banBenNumber and pc.ta_pricePeriodStart<='"
					+ time
					+ "' and ("
					+ " pc.ta_pricePeriodEnd>='"
					+ time
					+ "' "
					+ "or pc.ta_pricePeriodEnd is null "
					+ "or pc.ta_pricePeriodEnd='')";
			List<Map> list = totalDao.findBySql(price_hql);
			Float tlPrice = 0F;
			if (list.get(0).get("sum(pd.klNumber*pc.ta_bhsPrice)") != null) {
				tlPrice = Float.valueOf(list.get(0).get(
						"sum(pd.klNumber*pc.ta_bhsPrice)").toString());// 投料金额(数量*不含税价)
			}
			oi.setTlPrice(tlPrice);
			Float ylPrice = 0F;
			if (list.get(0).get("sum(pd.klNumber*pc.ta_bhsPrice)") != null) {
				ylPrice = Float.valueOf(list.get(0).get(
						"sum((pd.klNumber-pd.hascount)*pc.ta_bhsPrice)")
						.toString());// 已领金额
			}
			oi.setYlPrice(ylPrice);
			// 订单约单完工量
			Float contractCompletion = 0F;
			if (tlPrice != 0 && tlPrice != null) {
				contractCompletion = ylPrice / tlPrice;
			}
			oi.setContractCompletion(contractCompletion);
			// 在途约单产量
			Float singleProductionOntheway = contractCompletion
					* procard.getFilnalCount() - rukuCount;
			oi.setSingleProductionOntheway(singleProductionOntheway);
			// 单台材料成本
			Float singleMaterialCost = 0F;
			if (procard.getFilnalCount() != 0) {
				singleMaterialCost = tlPrice / procard.getFilnalCount();
			}
			oi.setSingleMaterialCost(singleMaterialCost);
			// 在途材料
			oi.setMaterialsInTransit(singleMaterialCost
					* singleProductionOntheway);
			oiList.add(oi);
		}
		return oiList;
	}

	public void findOorderInventory(OnorderInventory onorderInventory) {
		// 先查询(状态不是入库,取消,初始)
		List<Procard> procardList = totalDao
				.query("from Procard where status not in ('入库','取消','初始') and rootId = id and procardStyle = '总成'");
		List<OnorderInventory> oiList = new ArrayList<OnorderInventory>();
		for (Procard procard : procardList) {
			OnorderInventory oi = new OnorderInventory();
			oi.setMarkId(procard.getMarkId());// 件号
			oi.setOrderNumber(procard.getOrderNumber());// 订单号
			oi.setYwMarkId(procard.getYwMarkId());// 业务件号
			oi.setName(procard.getProName());// 名称
			oi.setProductStyle(procard.getProductStyle());// 生产类型
			oi.setProcardTime(procard.getProcardTime());// 任务下达时间
			oi.setStatus(procard.getStatus());// 状态
			oi.setFilnalCount(procard.getFilnalCount());
			Float rukuCount = 0F;
			if (procard.getHasRuku() != null) {
				rukuCount = procard.getHasRuku();// 出库数量
			}
			oi.setRukuCount(rukuCount);
			String time = Util.getDateTime();
			// 查询投料金额、已领金额
			String price_hql = "SELECT sum(zt.klNumber*pc.ta_bhsPrice) as tl,sum((zt.klNumber-zt.hascount)*pc.ta_bhsPrice) as kl"
					+ " from (SELECT pd.markId as markId,pd.selfCard as selfCard,pd.klNumber as klNumber,pd.hascount as hascount from ta_sop_w_procard pd JOIN ta_sop_w_procard pd1 ON pd1.id =pd.rootid and pd1.id ="
					+ procard.getId()
					+ " and pd1.status not in ('入库','取消','初始') and pd.procardStyle ='外购' ) zt"
					+ " LEFT JOIN ta_price pc on  zt.markid=pc.ta_partNumber  GROUP BY zt.markId,zt.selfCard";
			// String price_hql =
			// "SELECT sum(pd.count*pc.ta_bhsPrice),sum((pd.klNumber-pd.hascount)*pc.ta_bhsPrice)"+
			// " from ta_sop_w_procard pd JOIN ta_sop_w_procard pd1 ON pd1.id = pd.rootId and pd1.id ="+procard.getId()+" and pd.procardStyle ='外购' and pd.hascount is not null and (pd.hascount-pd.klNumber)<0.05 "+
			// " LEFT JOIN ta_price pc on  pc.ta_kgliao=pd.kgliao and "+
			// "pd.markid=pc.ta_partNumber and pc.banbenhao = pd.banBenNumber and pc.ta_pricePeriodStart<='"+time+"' and ("+
			// " pc.ta_pricePeriodEnd>='"+time+"' "+
			// "or pc.ta_pricePeriodEnd is null "+
			// "or pc.ta_pricePeriodEnd='') GROUP BY pd.markid , pd.selfcard";

			List<Map> list = totalDao.findBySql(price_hql);
			if (list != null && list.size() > 0) {
				Float tlPrice = 0F;
				if (list.get(0).get("tl") != null) {
					tlPrice = Float.valueOf(list.get(0).get("tl").toString());// 投料金额(数量*不含税价)

				}
				oi.setTlPrice(tlPrice);
				Float ylPrice = 0F;
				if (list.get(0).get("kl") != null) {
					ylPrice = Float.valueOf(list.get(0).get("kl").toString());// 已领金额

				}
				oi.setYlPrice(ylPrice);
				// 订单约单完工量
				Float contractCompletion = 0F;
				if (tlPrice != 0 && tlPrice != null) {
					contractCompletion = ylPrice / tlPrice;
				}
				oi.setContractCompletion(contractCompletion);
				// 在途约单产量
				Float singleProductionOntheway = contractCompletion
						* procard.getFilnalCount() - rukuCount;
				oi.setSingleProductionOntheway(singleProductionOntheway);
				// 单台材料成本
				Float singleMaterialCost = 0F;
				if (procard.getFilnalCount() != 0) {
					singleMaterialCost = tlPrice / procard.getFilnalCount();
				}
				oi.setSingleMaterialCost(singleMaterialCost);
				// 在途材料
				oi.setMaterialsInTransit(singleMaterialCost
						* singleProductionOntheway);
				oiList.add(oi);
			}
		}
		try {
			HttpServletResponse response = (HttpServletResponse) ActionContext
					.getContext().get(ServletActionContext.HTTP_RESPONSE);

			OutputStream os = response.getOutputStream();
			response.reset();

			String mark = "外购件导出列表";
			response.setHeader("Content-disposition", "attachment; filename="
					+ new String(mark.getBytes("GB2312"), "8859_1") + ".xls");
			response.setContentType("application/msexcel");
			WritableWorkbook wwb = Workbook.createWorkbook(os);
			// WritableSheet ws =null;
			WritableFont wf = new WritableFont(WritableFont.ARIAL, 8,
					WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE,
					Colour.BLACK);
			WritableCellFormat wc = new WritableCellFormat(wf);
			WritableSheet ws = wwb.createSheet(mark, 0);
			ws.setColumnView(0, 5);
			ws.setColumnView(1, 18);
			ws.setColumnView(2, 18);
			ws.setColumnView(3, 18);
			ws.setColumnView(4, 18);
			ws.setColumnView(5, 18);
			ws.setColumnView(6, 18);
			ws.setColumnView(7, 18);
			ws.setColumnView(8, 18);
			ws.setColumnView(9, 18);
			ws.setColumnView(10, 18);
			ws.setColumnView(11, 18);
			ws.setColumnView(12, 18);
			ws.setColumnView(13, 18);
			ws.setColumnView(14, 18);
			ws.setColumnView(15, 18);
			ws.setColumnView(16, 18);

			ws.addCell(new Label(0, 0, "序号"));
			ws.addCell(new Label(1, 0, "订单编号 (内部)"));
			ws.addCell(new Label(2, 0, "件号"));
			ws.addCell(new Label(3, 0, "业务件号"));
			ws.addCell(new Label(4, 0, "名称"));
			ws.addCell(new Label(5, 0, "产品类型"));
			ws.addCell(new Label(6, 0, "计划下达时间"));
			ws.addCell(new Label(7, 0, "数量"));
			ws.addCell(new Label(8, 0, "入库数量"));
			ws.addCell(new Label(9, 0, "状态"));
			ws.addCell(new Label(10, 0, "投料金额"));
			ws.addCell(new Label(11, 0, "已领金额"));
			ws.addCell(new Label(12, 0, "订单约单完工量"));
			ws.addCell(new Label(13, 0, "在途约单产量"));
			ws.addCell(new Label(14, 0, "单台材料成本"));
			ws.addCell(new Label(15, 0, "在途材料"));
			if (oiList != null && oiList.size() > 0) {
				for (int i = 0; i < oiList.size(); i++) {
					OnorderInventory oi_ex = oiList.get(i);
					ws.addCell(new Label(0, i + 1, (i + 1) + ""));
					ws
							.addCell(new Label(1, i + 1, oi_ex.getOrderNumber()
									+ ""));
					ws.addCell(new Label(2, i + 1, oi_ex.getMarkId() + ""));
					ws.addCell(new Label(3, i + 1, oi_ex.getYwMarkId() + ""));
					ws.addCell(new Label(4, i + 1, oi_ex.getName() + ""));
					ws
							.addCell(new Label(5, i + 1, oi_ex
									.getProductStyle()
									+ ""));
					ws
							.addCell(new Label(6, i + 1, oi_ex.getProcardTime()
									+ ""));
					ws
							.addCell(new Label(7, i + 1, oi_ex.getFilnalCount()
									+ ""));
					ws.addCell(new Label(8, i + 1, oi_ex.getRukuCount() + ""));
					ws.addCell(new Label(9, i + 1, oi_ex.getStatus() + ""));
					ws.addCell(new Label(10, i + 1, oi_ex.getTlPrice() + ""));
					ws.addCell(new Label(11, i + 1, oi_ex.getYlPrice() + ""));
					ws.addCell(new Label(12, i + 1, oi_ex
							.getContractCompletion()
							+ ""));
					ws.addCell(new Label(13, i + 1, oi_ex
							.getSingleProductionOntheway()
							+ ""));
					ws.addCell(new Label(14, i + 1, oi_ex
							.getSingleMaterialCost()
							+ ""));
					ws.addCell(new Label(15, i + 1, oi_ex
							.getMaterialsInTransit()
							+ ""));
				}
			}
			wwb.write();
			wwb.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (RowsExceededException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WriteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void waiweiforPrice() {
		String hql = "SELECT xx.orderNumber,xx.procardId ,xx.rootSelfCard,xx.markId,xx.ywMarkId,xx.proName ,xx.selfCard ,xx.processNames ,xx.count ,xx.price,xx.processStatus,ppr.ylcount from "
				+ " (SELECT pd.orderNumber as orderNumber,pd.rootSelfCard as rootSelfCard,pid.procardId as procardId,pid.markId as markId ,pia.ywMarkId as ywMarkId,pid.proName as proName,pid.selfCard as selfCard,pid.processNames as processNames,pid.applyCount as count,pid.hsprice as price,pid.processStatus as processStatus "
				+ " from ta_sop_w_ProcessInforWWApplyDetail pid, ta_sop_w_ProcessInforWWApply pia,ta_sop_w_procard pd WHERE"
				+ " pid.applyId = pia.id and pia.procardId = pd .id and pd.id=pd.rootid and pd.status not in ('取消','初始') "
				+ " and ( pd.sbStatus is null or pd.sbStatus <>'删除') and pid.processStatus not in ('删除','取消','待下单')"
				+ " and (pid.dataStatus not in ('删除','取消') or pid.dataStatus is null) and pid.wwType ='包工包料') xx LEFT JOIN "
				+ " (select pr.procardId procardId,sum(pr.ckCount) ylcount,goods.processName processName from ta_sop_w_ProcardProductRelation pr, goods goods where pr.goodsId = goods.goods_id and goods.goods_class = '外协库'"
				+ " GROUP BY pr.procardId) ppr ON xx.procardId = ppr.procardId ";
		List<Map> list = totalDao.findBySql(hql);
		try {
			HttpServletResponse response = (HttpServletResponse) ActionContext
					.getContext().get(ServletActionContext.HTTP_RESPONSE);

			OutputStream os = response.getOutputStream();
			response.reset();

			String mark = Util.getDateTime() + "外委导出列表";
			response.setHeader("Content-disposition", "attachment; filename="
					+ new String(mark.getBytes("GB2312"), "8859_1") + ".xls");
			response.setContentType("application/msexcel");
			WritableWorkbook wwb = Workbook.createWorkbook(os);
			// WritableSheet ws =null;
			WritableFont wf = new WritableFont(WritableFont.ARIAL, 8,
					WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE,
					Colour.BLACK);
			WritableCellFormat wc = new WritableCellFormat(wf);
			WritableSheet ws = wwb.createSheet(mark, 0);
			ws.setColumnView(0, 5);
			ws.setColumnView(1, 18);
			ws.setColumnView(2, 18);
			ws.setColumnView(3, 18);
			ws.setColumnView(4, 18);
			ws.setColumnView(5, 18);
			ws.setColumnView(6, 18);
			ws.setColumnView(7, 18);
			ws.setColumnView(8, 18);
			ws.setColumnView(9, 18);
			ws.setColumnView(10, 18);
			ws.setColumnView(11, 18);
			ws.setColumnView(12, 18);
			ws.setColumnView(13, 18);
			ws.setColumnView(14, 18);
			ws.setColumnView(15, 18);
			ws.setColumnView(16, 18);

			ws.addCell(new Label(0, 0, "序号"));
			ws.addCell(new Label(1, 0, "订单编号"));
			ws.addCell(new Label(2, 0, "件号"));
			ws.addCell(new Label(3, 0, "名称"));
			ws.addCell(new Label(4, 0, "数量"));
			ws.addCell(new Label(5, 0, "已领数量"));
			ws.addCell(new Label(6, 0, "状态"));
			ws.addCell(new Label(7, 0, "价格"));
			ws.addCell(new Label(8, 0, "已领金额"));
			ws.addCell(new Label(9, 0, "应发金额"));
			ws.addCell(new Label(10, 0, "业务件号"));
			ws.addCell(new Label(11, 0, "总成批次"));
			if (list != null && list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Map map = list.get(i);
					ws.addCell(new Label(0, i + 1, (i + 1) + ""));
					ws.addCell(new Label(1, i + 1, (String) map
							.get("orderNumber")));
					ws.addCell(new Label(2, i + 1, (String) map.get("markId")));
					ws
							.addCell(new Label(3, i + 1, (String) map
									.get("proName")));
					Double count = Double.valueOf(map.get("count").toString());
					ws.addCell(new Label(4, i + 1, count + ""));// count
					Double ylcount = 0D;
					if (map.get("ylcount") != null) {
						ylcount = Double.valueOf(map.get("ylcount").toString());
						if (ylcount > count) {
							ylcount = count;
						}
						ws.addCell(new Label(5, i + 1, ylcount + ""));

					} else {
						ws.addCell(new Label(5, i + 1, 0 + ""));
					}
					if (map.get("processStatus") != null) {
						ws.addCell(new Label(6, i + 1, (String) map
								.get("processStatus")));
					}
					Double price = 0D;
					if (map.get("price") != null) {
						ws.addCell(new Label(7, i + 1, map.get("price")
								.toString()));
						price = Double.valueOf(map.get("price").toString());
					}
					ws.addCell(new Label(8, i + 1, ylcount * price + ""));
					ws.addCell(new Label(9, i + 1, count * price + ""));
					ws.addCell(new Label(10, i + 1, map.get("ywMarkId")
							.toString()));
					ws.addCell(new Label(11, i + 1, map.get("rootSelfCard")
							.toString()));
				}
			}
			wwb.write();
			wwb.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (RowsExceededException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WriteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void waigouforPrice(Procard procard, String startTime, String endTime) {
		String time = Util.getDateTime();
		String startTimeHql = "";
		String endTimeHql = "";
		if (startTime != null && !"".equals(startTime)) {
			startTimeHql = " and pd.procardTime >= '" + startTime + "'";
		}
		if (endTime != null && !"".equals(endTime)) {
			endTimeHql = " and pd.procardTime <= '" + endTime + "'";
		}
		String hql = "SELECT  zt.orderNumber,zt.markId,zt.ywMarkId,zt.proName,zt.procardStyle,zt.productStyle,"
				+ "zt.selfCard,zt.procardTime ,zt.banBenNumber ,zt.kgliao ,zt.zhikaren,zt.jihuoDate,zt.needFinalDate,zt.lingliaostatus,"
				+ "zt.klNumber,zt.hascount,zt.status,zt.rootSelfCard,pc.ta_bhsPrice,pc.ta_hsPrice,pc.ta_taxprice from (SELECT pd.orderNumber as orderNumber,pd.markId as markId,pd.ywMarkId as ywMarkId,pd.proName as proName,pd.procardStyle as procardStyle,pd.productStyle as productStyle,"
				+ "pd.selfCard as selfCard,pd.procardTime as procardTime,pd.banBenNumber as banBenNumber,pd.kgliao as kgliao,pd.zhikaren as zhikaren,pd.jihuoDate as jihuoDate,pd.needFinalDate as needFinalDate,pd.lingliaostatus as lingliaostatus,"
				+ "pd.klNumber as klNumber,pd.hascount as hascount,pd.status as status,pd.rootSelfCard as rootSelfCard from ta_sop_w_procard pd JOIN ta_sop_w_procard pd1 ON pd1.id =pd.rootid "
				+ startTimeHql
				+ endTimeHql
				+ " and pd1.status not in ('取消','初始')  and pd.procardStyle ='外购' and pd.hascount is not null and (pd.wwblCount is null or pd.wwblCount =0)) zt"
				+ " LEFT JOIN ta_price pc on  zt.markid=pc.ta_partNumber  GROUP BY zt.markId,zt.selfCard,zt.orderNumber";
		// String hql =
		// "SELECT  zt.orderNumber,zt.markId,zt.ywMarkId,zt.proName,zt.procardStyle,zt.productStyle,"+
		// " zt.selfCard,zt.procardTime ,zt.banBenNumber ,zt.kgliao ,zt.zhikaren,zt.jihuoDate,zt.needFinalDate,zt.lingliaostatus,"+
		// " zt.klNumber,zt.hascount,zt.status,pc.ta_bhsPrice,pc.ta_hsPrice,pc.ta_taxprice from (SELECT pd.orderNumber as orderNumber,pd.markId as markId,pd.ywMarkId as ywMarkId,pd.proName as proName,pd.procardStyle as procardStyle,pd.productStyle as productStyle,"+
		// " pd.selfCard as selfCard,pd.procardTime as procardTime,pd.banBenNumber as banBenNumber,pd.kgliao as kgliao,pd.zhikaren as zhikaren,pd.jihuoDate as jihuoDate,pd.needFinalDate as needFinalDate,pd.lingliaostatus as lingliaostatus,"+
		// " pd.klNumber as klNumber,pd.hascount as hascount,pd.status as status from ta_sop_w_procard pd JOIN ta_sop_w_procard pd1 ON pd1.id =pd.rootid  and pd.rootid =435782  and pd.procardStyle ='外购' and pd.hascount is not null and (pd.wwblCount is null or pd.wwblCount =0)) zt"+
		// " LEFT JOIN ta_price pc on  zt.markid=pc.ta_partNumber  GROUP BY zt.markId,zt.selfCard,zt.orderNumber";
		List<Map> list = totalDao.findBySql(hql);
		try {
			if (procard == null) {
				procard = new Procard();
			}
			HttpServletResponse response = (HttpServletResponse) ActionContext
					.getContext().get(ServletActionContext.HTTP_RESPONSE);

			OutputStream os = response.getOutputStream();
			response.reset();

			String mark = "外购件导出列表";
			if (list.size() > 60000) {
				response.setHeader("Content-disposition",
						"attachment; filename="
								+ new String(mark.getBytes("GB2312"), "8859_1")
								+ ".xlsx");
			} else {
				response.setHeader("Content-disposition",
						"attachment; filename="
								+ new String(mark.getBytes("GB2312"), "8859_1")
								+ ".xls");
			}
			response.setContentType("application/msexcel");

			// WritableWorkbook wwb = Workbook.createWorkbook(os);
			// // WritableSheet ws =null;
			// WritableFont wf = new WritableFont(WritableFont.ARIAL, 8,
			// WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE,
			// Colour.BLACK);
			// WritableCellFormat wc = new WritableCellFormat(wf);
			// WritableSheet ws = wwb.createSheet(mark, 0);

			SXSSFWorkbook workBook = new SXSSFWorkbook(50000);
			org.apache.poi.ss.usermodel.Sheet sheet = workBook
					.createSheet(mark);
			Row row = sheet.createRow(2);
			CellRangeAddress rangeAddress = new CellRangeAddress(0, 0, 1, 30);
			CellStyle style = workBook.createCellStyle();
			// style.setAlignment(HorizontalAlignment.CENTER);
			Font font = workBook.createFont();
			font.setFontHeightInPoints((short) 16);
			font.setBold(true);
			// style.setFont(font);
			// sheet.addMergedRegion(rangeAddress);
			row = sheet.createRow(0);
			org.apache.poi.ss.usermodel.Cell cell = row.createCell(1);
			// cell.setCellValue("入库历史记录");
			// cell.setCellStyle(style);

			row = sheet.createRow(0);
			cell = row.createCell(0, CellType.STRING);
			cell.setCellValue("序号");
			cell = row.createCell(1, CellType.STRING);
			cell.setCellValue("订单编号");
			cell = row.createCell(2, CellType.STRING);
			cell.setCellValue("件号");
			cell = row.createCell(3, CellType.STRING);
			cell.setCellValue("业务件号");
			cell = row.createCell(4, CellType.STRING);
			cell.setCellValue("名称");
			cell = row.createCell(5, CellType.STRING);
			cell.setCellValue("卡片类型");
			cell = row.createCell(6, CellType.STRING);
			cell.setCellValue("产品类型");
			cell = row.createCell(7, CellType.STRING);
			cell.setCellValue("批次");
			cell = row.createCell(8, CellType.STRING);
			cell.setCellValue("计划下达时间");
			cell = row.createCell(9, CellType.STRING);
			cell.setCellValue("负责人");
			cell = row.createCell(10, CellType.STRING);
			cell.setCellValue("产品开始时间");
			cell = row.createCell(11, CellType.STRING);
			cell.setCellValue("入库时间");
			cell = row.createCell(12, CellType.STRING);
			cell.setCellValue("数量");
			cell = row.createCell(13, CellType.STRING);
			cell.setCellValue("已领数量");
			cell = row.createCell(14, CellType.STRING);
			cell.setCellValue("状态");
			cell = row.createCell(15, CellType.STRING);
			cell.setCellValue("含税价");
			cell = row.createCell(16, CellType.STRING);
			cell.setCellValue("不含税价");
			cell = row.createCell(17, CellType.STRING);
			cell.setCellValue("税率");
			cell = row.createCell(18, CellType.STRING);
			cell.setCellValue("已领金额");
			cell = row.createCell(19, CellType.STRING);
			cell.setCellValue("应发金额");
			cell = row.createCell(20, CellType.STRING);
			cell.setCellValue("版本");
			cell = row.createCell(21, CellType.STRING);
			cell.setCellValue("供料属性");
			cell = row.createCell(22, CellType.STRING);
			cell.setCellValue("领料属性");
			cell = row.createCell(23, CellType.STRING);
			cell.setCellValue("总成批次");
			if (list != null && list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Map map = list.get(i);
					row = sheet.createRow(i + 1);
					cell = row.createCell(0, CellType.STRING);
					cell.setCellValue(i + 1);
					cell = row.createCell(1, CellType.STRING);
					cell.setCellValue((String) map.get("orderNumber"));
					cell = row.createCell(2, CellType.STRING);
					cell.setCellValue((String) map.get("markId"));
					cell = row.createCell(3, CellType.STRING);
					cell.setCellValue((String) map.get("ywMarkId"));
					cell = row.createCell(4, CellType.STRING);
					cell.setCellValue((String) map.get("proName"));
					cell = row.createCell(5, CellType.STRING);
					cell.setCellValue((String) map.get("procardStyle"));
					cell = row.createCell(6, CellType.STRING);
					cell.setCellValue((String) map.get("productStyle"));
					cell = row.createCell(7, CellType.STRING);
					cell.setCellValue((String) map.get("selfCard"));
					cell = row.createCell(8, CellType.STRING);
					cell.setCellValue((String) map.get("procardTime"));
					cell = row.createCell(9, CellType.STRING);
					cell.setCellValue((String) map.get("zhikaren"));

					if ((String) map.get("jihuoDate") != null
							&& !"".equals((String) map.get("jihuoDate"))) {
						cell = row.createCell(10, CellType.STRING);
						cell.setCellValue((String) map.get("jihuoDate"));
					}
					if ((String) map.get("needFinalDate") != null
							&& !"".equals((String) map.get("needFinalDate"))) {
						cell = row.createCell(11, CellType.STRING);
						cell.setCellValue((String) map.get("needFinalDate"));
					}
					Double count = 0d;
					Double hascount = 0d;
					if (map.get("lingliaostatus") == null
							|| "是".equals(map.get("lingliaostatus").toString())) {
						if (map.get("klNumber") != null) {
							count = Double.valueOf(map.get("klNumber")
									.toString());
						}

						if (map.get("hascount") != null) {
							hascount = Double.valueOf(map.get("hascount")
									.toString());
						}
					}

					cell = row.createCell(12, CellType.STRING);
					cell.setCellValue(count + "");
					cell = row.createCell(13, CellType.STRING);
					cell.setCellValue(count - hascount + "");
					cell = row.createCell(14, CellType.STRING);
					cell.setCellValue((String) map.get("status"));
					if (map.get("ta_hsPrice") != null) {
						cell = row.createCell(15, CellType.STRING);
						cell.setCellValue(map.get("ta_hsPrice").toString());
					} else {
						cell = row.createCell(15, CellType.STRING);
						cell.setCellValue(0 + "");
					}
					// hascount
					Double bhsPrice = 0D;
					if (map.get("ta_bhsPrice") != null) {
						bhsPrice = Double.valueOf(map.get("ta_bhsPrice")
								.toString());
						cell = row.createCell(16, CellType.STRING);
						cell.setCellValue(map.get("ta_bhsPrice").toString());
					} else {
						cell = row.createCell(16, CellType.STRING);
						cell.setCellValue(0 + "");
					}
					if (map.get("ta_hsPrice") != null) {
						cell = row.createCell(17, CellType.STRING);
						cell.setCellValue(map.get("ta_taxprice").toString());
					} else {
						cell = row.createCell(17, CellType.STRING);
						cell.setCellValue(0 + "");
					}
					Double zaitu = (count - hascount) * bhsPrice;
					cell = row.createCell(18, CellType.STRING);
					cell.setCellValue(zaitu + "");
					Double zong = count * bhsPrice;
					cell = row.createCell(19, CellType.STRING);
					cell.setCellValue(zong + "");
					if (map.get("banBenNumber") != null) {
						cell = row.createCell(20, CellType.STRING);
						cell.setCellValue(map.get("banBenNumber").toString());
					}
					if (map.get("kgliao") != null) {
						cell = row.createCell(21, CellType.STRING);
						cell.setCellValue(map.get("kgliao").toString());
					}
					if (map.get("lingliaostatus") != null) {
						cell = row.createCell(22, CellType.STRING);
						cell.setCellValue(map.get("lingliaostatus").toString());

					}
					if (map.get("rootSelfCard") != null) {
						cell = row.createCell(23, CellType.STRING);
						cell.setCellValue(map.get("rootSelfCard").toString());

					}
				}
			}
			workBook.write(os);
			workBook.close();// 记得关闭工作簿

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/**
	 * 遍历获取自制件下外购件所有价格
	 * 
	 * @return
	 */
	private Float getWgProcardPrice(Procard procard, Float blNum,
			Integer belongLayer) {
		Float sumprice = 0f;
		List<Procard> procardList = totalDao
				.query(
						" from Procard where procard.id = ? and (sbStatus is null or sbStatus <> '删除' )",
						procard.getId());
		for (Procard procard2 : procardList) {
			if ("外购".equals(procard2.getProcardStyle())) {
				String time = Util.getDateTime("yyyy-MM-dd");
				String hql = " select avg(hsPrice) from Price where partNumber = ? and kgliao =? and"
						+ " pricePeriodStart <= '"
						+ time
						+ "' and (pricePeriodEnd >= '"
						+ time
						+ "' or pricePeriodEnd is null or pricePeriodEnd = '')";
				if (procard2.getBanBenNumber() != null
						&& procard2.getBanBenNumber().length() > 0) {
					hql += " and  banbenhao = '" + procard2.getBanBenNumber()
							+ "'";
				} else {
					hql += " and (banbenhao is null or banbenhao = '' )";
				}
				Double bhsPrice = (Double) totalDao.getObjectByCondition(hql,
						procard2.getMarkId(), procard2.getKgliao());
				if (bhsPrice == null) {
					bhsPrice = 0d;
				}
				Float num = getcgNum(procard2, blNum, belongLayer);
				sumprice += (bhsPrice.floatValue()) * num;
			} else {
				sumprice += getWgProcardPrice(procard2, blNum, belongLayer);
			}
		}
		return sumprice;
	}

	private Float getcgNum(Procard sonProcardT, Float num, Integer belongLayer) {
		Float cgNum = 0f;
		if ("外购".equals(sonProcardT.getProcardStyle())) {
			cgNum = (sonProcardT.getQuanzi2() / sonProcardT.getQuanzi1()) * num;
		} else {
			Float corrCount = sonProcardT.getCorrCount();
			if (corrCount == null) {
				corrCount = 1f;
			}
			cgNum = corrCount * num;
		}
		if (sonProcardT.getBelongLayer() <= belongLayer) {
			Procard fatherProcardT = (Procard) totalDao.get(Procard.class,
					sonProcardT.getFatherId());
			cgNum = getcgNum(fatherProcardT, cgNum, belongLayer);
		}
		return cgNum;
	}

	@Override
	public String delCsblOrder(ProcardCsBlOrder csblOrder) {
		if (csblOrder != null) {
			csblOrder = (ProcardCsBlOrder) totalDao.get(ProcardCsBlOrder.class,
					csblOrder.getId());
			List<ProcardCsBl> csblList = totalDao
					.query(" from ProcardCsBl where csblOrder.id=?", csblOrder
							.getId());
			for (ProcardCsBl procardCsBl : csblList) {
				totalDao.delete(procardCsBl);
			}
			return totalDao.delete(csblOrder) + "";
		}
		return null;
	}

	@Override
	public String OneUpdateCgStatus(Integer[] ids, Procard pageProcard) {
		if (ids != null && ids.length > 0) {
			for (int i = 0; i < ids.length; i++) {
				Procard procard0 = new Procard();
				procard0.setId(ids[i]);
				procard0.setCgStatus(pageProcard.getCgStatus());
				procard0.setLingliaostatus(pageProcard.getLingliaostatus());
				if (!updateProcardForLingliao(procard0)) {
					return "设置失败!~";
				}
			}
			return "true";
		}
		return "未选择外购件!~";
	}

	public String xiufuTotalCount(Procard procard) {
		if (procard.getMarkId() != null && procard.getSelfCard() != null) {
			String hql_procard = "from Procard where markId =? and selfCard = ?";
			Procard procard_old = (Procard) totalDao.getObjectByCondition(
					hql_procard, procard.getMarkId(), procard.getSelfCard());
			if (procard_old != null) {
				String hql_ProcessInfor = "from ProcessInfor where procard.id = ? and (dataStatus is null or  dataStatus <> '删除')";
				List<ProcessInfor> processInforList = totalDao.query(
						hql_ProcessInfor, procard_old.getId());
				for (ProcessInfor processInfor : processInforList) {
					processInfor.setTotalCount(procard_old.getFilnalCount());
					totalDao.update(processInfor);
				}
				return "可领数量已经调整";
			} else {
				return "你这个件号，批次可能有点问题。";
			}
		} else {
			return "数据异常";
		}
	}

	/**
	 * 查找所有工序
	 */
	public List<ProcessInfor> findAllProcessInfor(Procard procard) {
		if (procard.getMarkId() != null && procard.getSelfCard() != null) {
			String hql_procard = "from Procard where markId =? and selfCard = ? and (sbStatus is null or  sbStatus <> '删除')";
			Procard procard_old = (Procard) totalDao.getObjectByCondition(
					hql_procard, procard.getMarkId(), procard.getSelfCard());
			if (procard_old != null) {
				String hql_ProcessInfor = "from ProcessInfor where procard.id = ? and (dataStatus is null or  dataStatus <> '删除')";
				List<ProcessInfor> processInforList = totalDao.query(
						hql_ProcessInfor, procard_old.getId());
				return processInforList;
			} else {
				return null;
			}
		} else {
			return null;
		}
	}

	/**
	 * 跳工序
	 */
	public String backProcessInfor(Procard procard, Integer[] ids) {
		if (procard.getMarkId() != null && procard.getSelfCard() != null) {
			// 查询零件
			String hql_procard = "from Procard where markId =? and selfCard = ? and (sbStatus is null or  sbStatus <> '删除')";
			Procard procard_old = (Procard) totalDao.getObjectByCondition(
					hql_procard, procard.getMarkId(), procard.getSelfCard());
			if (ids != null && ids.length > 0) {
				for (Integer id : ids) {
					ProcessInfor pf = (ProcessInfor) totalDao.get(
							ProcessInfor.class, id);
					pf.setApplyCount(0);
					pf.setSubmmitCount(0);
					pf.setUsercodes(null);
					pf.setUsernames(null);
					pf.setUserId(null);
					pf.setFirstApplyDate(null);
					pf.setSubmitDate(null);
					pf.setUserCardId(null);
					pf.setStatus("自检");
					if (totalDao.update(pf)) {
						List<ProcessInforReceiveLog> prlList = totalDao
								.query(
										"from ProcessInforReceiveLog where fk_processInforId = ?",
										id);
						if (prlList != null && prlList.size() > 0) {
							for (ProcessInforReceiveLog prl : prlList) {
								totalDao.delete(prl);
							}
						}
					}
				}
				procard_old.setStatus("领工序");
				procard_old.setTjNumber(0F);
				if (totalDao.update(procard_old)) {
					return "成功";
				} else {
					return "失败";
				}
			} else {
				return "没有选择需要退还的工序";
			}
		} else {
			return "件号，批次不太对";
		}
	}

	/**
	 * 过工序
	 */
	public String passProcessInfor(Procard procard, Integer[] ids) {
		if (procard.getMarkId() != null && procard.getSelfCard() != null) {
			String hql_procard = "from Procard where markId =? and selfCard = ? and (sbStatus is null or  sbStatus <> '删除')";
			List<Procard> procardList = totalDao.query(hql_procard, procard
					.getMarkId(), procard.getSelfCard());
			if (procardList.size() == 1) {
				Procard procard_old = procardList.get(0);
				String ids_str = "";
				if (ids != null && ids.length > 0) {
					for (Integer id : ids) {
						ProcessInfor pf = (ProcessInfor) totalDao.get(
								ProcessInfor.class, id);
						pf.setTotalCount(procard_old.getFilnalCount());
						pf.setApplyCount(procard_old.getFilnalCount());
						pf.setSubmmitCount(procard_old.getFilnalCount());
						pf.setStatus("完成");
						// 删除外委记录
						totalDao.update(pf);
						if ("".equals(ids_str)) {
							ids_str += id;
						} else {
							ids_str += "," + id;
						}
					}
				} else {
					return "没有选择需要跳过的工序";
				}
				String hql_ProcessInfor = "from ProcessInfor where procard.id = ? and (dataStatus is null or  dataStatus <> '删除')"
						+ " and id not in (" + ids_str + ")";
				List<ProcessInfor> processInforList = totalDao.query(
						hql_ProcessInfor, procard_old.getId());
				boolean b = true;
				for (ProcessInfor processInfor : processInforList) {
					if (!"完成".equals(processInfor.getStatus())) {
						b = false;
					}
					processInfor.setTotalCount(procard_old.getFilnalCount());
					totalDao.update(processInfor);
				}
				// 如果过掉全部工序
				if (b) {
					procard_old.setStatus("完成");
					procard_old.setTjNumber(procard_old.getFilnalCount());
					totalDao.update(procard_old);
				}
				return "成功";
			} else {
				return "存在同批次，同件号的情况，请联系管理员";
			}

		} else {
			return "件号，批次不太对";
		}
	}

	@Override
	public String gysCsbl(Integer[] ids, Float[] blNums, Integer waigouplaId) {
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录！~";
		}
		String msg = "";
		if (ids != null && ids.length > 0) {
			String csblOrderId = "";
			Float blNum = 0f;
			for (int i = 0; i < ids.length; i++) {
				Procard procard = (Procard) totalDao.get(Procard.class, ids[i]);
				try {
					msg = csbl(procard.getRootId(), new Integer[] { ids[i] },
							new Float[] { blNums[i] }, waigouplaId, null);
					String[] msgArray = msg.split(";");
					if (msgArray != null && msgArray.length == 2) {
						msg = msgArray[0];
						csblOrderId = ";" + msgArray[1];
					}
					blNum += blNums[i];
				} catch (Exception e) {
					msg = "error";
					e.printStackTrace();
				}
				if (!"true".equals(msg)) {
					throw new RuntimeException(msg.toString());
				}
				if (csblOrderId.length() > 1) {
					csblOrderId = csblOrderId.substring(1);
				}
			}
			// 记录采购单明细补料数量
			if (waigouplaId != null) {
				WaigouPlan waigouplan = (WaigouPlan) totalDao.get(
						WaigouPlan.class, waigouplaId);
				waigouplan.setBlNum(waigouplan.getBlNum() == null ? blNum
						: waigouplan.getBlNum() + blNum);
				totalDao.update(waigouplan);
				// 生成扣款单
				ZhUser zhUser = (ZhUser) totalDao.get(ZhUser.class, waigouplan
						.getGysId());
				ChargebackNotice cn = (ChargebackNotice) totalDao
						.getObjectByCondition(
								" from ChargebackNotice "
										+ " where zhUser_name = ? and jbName =? and epstatus = '未审批' and kkCause='补料单申请，系统自动生成。' ",
								zhUser.getCmp(), waigouplan.getWaigouOrder()
										.getAddUserName());
				String orderNum = "";
				Float kkMoney = 0f;
				if (csblOrderId != null) {
					ProcardCsBlOrder csblorder = (ProcardCsBlOrder) totalDao
							.get(ProcardCsBlOrder.class, Integer
									.parseInt(csblOrderId));
					if (csblorder != null) {
						orderNum = csblorder.getOrderNumber();
						kkMoney = csblorder.getSumPrice();
					}
				}
				if (cn != null) {
					cn.setDescription(cn.getDescription() + ";" + "采购单号:"
							+ waigouplan.getWaigouOrder().getPlanNumber()
							+ "内部订单号:" + orderNum + waigouplan.getMarkId()
							+ waigouplan.getProName() + "报废数量:" + blNum);

					cn
							.setWaiGouPlanId(cn.getWaiGouPlanId() + ";"
									+ waigouplaId);
					cn.setKkMoney(kkMoney + cn.getKkMoney());
					cn.setCsblOrderId(cn.getCsblOrderId() + ";" + csblOrderId);
					totalDao.update(cn);
				} else {
					cn = new ChargebackNotice();
					cn.setZhUser(zhUser);
					cn.setZhUser_name(zhUser.getCmp());
					cn.setDescription("采购单号:"
							+ waigouplan.getWaigouOrder().getPlanNumber()
							+ "内部订单号:" + orderNum + waigouplan.getMarkId()
							+ waigouplan.getProName() + "报废数量:" + blNum);
					cn.setJbName(user.getName());
					cn.setWaiGouPlanId(waigouplaId + "");
					cn.setCsblOrderId(csblOrderId);
					cn.setKkCause("补料单申请，系统自动生成。");
					cn.setKkMoney(kkMoney);
					cn.setKkMouth(Util.getDateTime("yyyy-MM"));
					cn.setAddTime(Util.getDateTime());
					cn.setAddName(user.getName());
					cn.setReportUnit(Util.getLoginCompanyInfo().getName());
					String time = Util.getDateTime("yyyyMMdd");
					String number = (String) totalDao
							.getObjectByCondition(" select max(number) from ChargebackNotice  where number like 'CS"
									+ time + "%'");
					if (number != null && number.length() > 0) {
						int num = 10000 + Integer.parseInt(number.substring(10,
								number.length())) + 1;
						String nums = num + "";
						nums = nums.substring(1);
						number = "CS" + time + nums;
					} else {
						number = "CS" + time + "0001";
					}
					cn.setNumber(number);
					totalDao.save(cn);
					String processName = "扣款单申请";
					Integer epId = null;
					try {
						epId = CircuitRunServerImpl.createProcess(processName,
								ChargebackNotice.class, cn.getId(), "epstatus",
								"id",
								"ProcardAction!findCsblListById.action?id="
										+ cn.getId(), user.getDept() + "部门 "
										+ user.getName() + "扣款单申请，请您审批", true);
						if (epId != null && epId > 0) {
							cn.setEpId(epId);
							CircuitRun circuitRun = (CircuitRun) totalDao.get(
									CircuitRun.class, epId);
							if ("同意".equals(circuitRun.getAllStatus())
									&& "审批完成".equals(circuitRun
											.getAuditStatus())) {
								cn.setEpstatus("同意");
							} else {
								cn.setEpstatus("未审批");
							}
							msg = totalDao.update(cn) + "";
						}
					} catch (Exception e) {
						e.printStackTrace();
						msg = "流程申请异常";
					}
				}

			}
			return msg;
		}
		return null;
	}

	@Override
	public String tclwwyx(Integer id) {
		// TODO Auto-generated method stub
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录!";
		}
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			List<ProcessInforWWApplyDetail> wwdList = totalDao
					.query(
							"from ProcessInforWWApplyDetail where procardId=?"
									+ " and (dataStatus is null or dataStatus!='删除') and  processInforWWApply.status not in('删除','取消','打回')",
							id);
			if (wwdList != null && wwdList.size() > 0) {
				Procard totalProcard = (Procard) totalDao.getObjectById(
						Procard.class, procard.getRootId());
				if (totalProcard != null) {
					List<ProcessInforWWApply> wwApplyList = (List<ProcessInforWWApply>) totalDao
							.query(
									"from ProcessInforWWApply where status not in('取消') and procardId=?",
									totalProcard.getId());
					Set<ProcessInforWWApplyDetail> detailSet = null;
					ProcessInforWWApply wwApply = null;
					if (wwApplyList != null && wwApplyList.size() > 0) {
						for (ProcessInforWWApply pa : wwApplyList) {
							if (pa.getStatus() != null) {
								if (pa.getStatus().equals("未审批")
										|| pa.getStatus().equals("审批中")) {
									// return "您已提交过此生产批次的外委申请请不要重复申请!";
								} else if (pa.getStatus().equals("未申请")) {
									wwApply = pa;
									break;// break的作用是未申请优先于打回
								} else if (pa.getStatus().equals("打回")) {
									wwApply = pa;
								}
							}
						}
					}
					if (wwApply == null) {
						wwApply = new ProcessInforWWApply();
						wwApply.setWwApplyNumber(wwNumber());// 外委申请单编号
						wwApply.setProcardId(totalProcard.getId());
						wwApply.setYwMarkId(totalProcard.getYwMarkId());// 业务件号
						wwApply.setMarkId(totalProcard.getMarkId());// 总成件号
						wwApply.setProName(totalProcard.getProName());// 总成名称
						wwApply.setSelfCard(totalProcard.getSelfCard());// 总成批次
						wwApply.setFinalCount(totalProcard.getFilnalCount());
						wwApply.setOrderNumber(totalProcard.getOrderNumber());
						wwApply.setUserId(user.getId());
						wwApply.setUserCode(user.getCode());
						wwApply.setUserName(user.getName());
						wwApply.setAddTime(Util.getDateTime());
						wwApply.setProcessStatus("预选未审批");
						wwApply.setStatus("未申请");
						detailSet = new HashSet<ProcessInforWWApplyDetail>();
					} else {
						detailSet = wwApply.getProcessInforWWApplyDetails();
					}
					for (ProcessInforWWApplyDetail processInforWWApplyDetail : wwdList) {

						// 查询上次外委的件号在本次bom中对应的Procard
						String hql_nowprocard = "from Procard where rootId=? and markId=? and (sbStatus is null or sbStatus !='删除') and id !=? ";
						// 这句有缺陷
						// String hql_nowprocard =
						// "from Procard where markId=? and rootId=?";
						List<Procard> nowProcard_wwList = totalDao.query(
								hql_nowprocard, totalProcard.getRootId(),
								processInforWWApplyDetail.getMarkId(),
								processInforWWApplyDetail.getProcardId());
						Procard hisProcard = (Procard) totalDao.getObjectById(
								Procard.class, processInforWWApplyDetail
										.getProcardId());
						if (nowProcard_wwList != null
								&& nowProcard_wwList.size() > 0) {
							for (Procard nowProcard_ww : nowProcard_wwList) {
								ProcessInforWWApplyDetail newProcessdetail = new ProcessInforWWApplyDetail();
								if (nowProcard_ww != null) {
									BeanUtils.copyProperties(
											processInforWWApplyDetail,
											newProcessdetail, new String[] {
													"id",
													"processInforWWApply",
													"epstatus", "epId",
													"dataStatus" });
									Users loginUser = Util.getLoginUser();
									newProcessdetail.setProcessStatus("预选未审批");
									newProcessdetail.setMarkId(nowProcard_ww
											.getMarkId());
									newProcessdetail.setSelfCard(nowProcard_ww
											.getSelfCard());
									newProcessdetail.setProcardId(nowProcard_ww
											.getId());
									newProcessdetail.setUserId(loginUser
											.getId());
									newProcessdetail.setUserName(loginUser
											.getName());
									newProcessdetail.setUserCode(loginUser
											.getCode());
									newProcessdetail.setAddTime(Util
											.getDateTime());
								} else {
									continue;
								}
								String processNOs = newProcessdetail
										.getProcessNOs();
								String[] strs = processNOs.split(";");
								boolean need = true;
								Float appyCount = nowProcard_ww
										.getFilnalCount();
								if (strs != null && strs.length > 0) {
									for (String processNOStr : strs) {
										Integer processNo = Integer
												.parseInt(processNOStr);
										ProcessInfor old = (ProcessInfor) totalDao
												.getObjectByCondition(
														"from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除') and processNO=?",
														nowProcard_ww.getId(),
														processNo);
										if (old != null) {
											Float haswwCount = 0f;
											if (old.getSelectWwCount() == null) {
												old.setSelectWwCount(0f);
											} else if (old.getSelectWwCount() > 0) {
												haswwCount += old
														.getSelectWwCount();
											}
											if (old.getApplyWwCount() == null) {
												old.setApplyWwCount(0f);
											} else if (old.getApplyWwCount() > 0) {
												haswwCount += old
														.getApplyWwCount();
											}
											if (old.getAgreeWwCount() == null) {
												old.setAgreeWwCount(0f);
											} else if (old.getAgreeWwCount() > 0) {
												haswwCount += old
														.getAgreeWwCount();
											}
											if ((nowProcard_ww.getFilnalCount() - haswwCount) < appyCount) {
												appyCount = nowProcard_ww
														.getFilnalCount()
														- haswwCount;
											}
											if (appyCount == 0) {
												need = false;
												continue;
											}
											old.setSelectWwCount(appyCount);
											totalDao.update(old);
										}
									}
									if (!need) {
										continue;
									}
									newProcessdetail.setApplyCount(appyCount);
									totalDao.save(newProcessdetail);
									// 关联外购件
									List<String> wwMarkIds = totalDao
											.query(
													"select markId from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
													processInforWWApplyDetail
															.getId());
									if (wwMarkIds != null
											&& wwMarkIds.size() > 0) {
										// 包含外购件
										// 拆分外购件回馈采购
										for (String wgMarkId : wwMarkIds) {
											Procard wgProcard = (Procard) totalDao
													.getObjectByCondition(
															"from Procard where markId=? and procard.id=? and (sbStatus is null or sbStatus!='删除')",
															wgMarkId,
															nowProcard_ww
																	.getId());
											if (wgProcard != null) {
												ProcessInforWWProcard processwwprocard = new ProcessInforWWProcard();
												processwwprocard
														.setProcardId(wgProcard
																.getId());// 零件id
												processwwprocard
														.setMarkId(wgProcard
																.getMarkId());// 件号
												processwwprocard
														.setProcName(wgProcard
																.getProName());// 名称
												processwwprocard
														.setBanben(wgProcard
																.getBanBenNumber());// 版本号
												processwwprocard
														.setBanci(wgProcard
																.getBanci());// 版次
												processwwprocard
														.setApplyCount(newProcessdetail
																.getApplyCount()
																* wgProcard
																		.getQuanzi2()
																/ wgProcard
																		.getQuanzi1());// 数量
												processwwprocard
														.setHascount(processwwprocard
																.getApplyCount());
												processwwprocard
														.setStatus("使用");// 状态
												processwwprocard
														.setApplyDtailId(newProcessdetail
																.getId());
												totalDao.save(processwwprocard);
												// 下层包工包料
												if (newProcessdetail
														.getWwType() != null
														&& newProcessdetail
																.getWwType()
																.equals("包工包料")) {// 包工包料回传采购
													if (wgProcard
															.getWwblCount() == null) {// 外委包料数量
														wgProcard
																.setWwblCount(newProcessdetail
																		.getApplyCount()
																		* wgProcard
																				.getQuanzi2()
																		/ wgProcard
																				.getQuanzi1());
													} else {
														wgProcard
																.setWwblCount(wgProcard
																		.getWwblCount()
																		+ newProcessdetail
																				.getApplyCount()
																		* wgProcard
																				.getQuanzi2()
																		/ wgProcard
																				.getQuanzi1());
													}
													totalDao.update(wgProcard);
												}

											} else {
												// throw new RuntimeException(
												// "对不起"+nowProcard_ww.getMarkId()+"零件下没有找到件号为:"
												// + wgMarkId + "的外购件");
											}
										}

									}
									detailSet.add(newProcessdetail);
									if (newProcessdetail.getWwType() != null
											&& newProcessdetail.getWwType()
													.equals("包工包料")) {
										// 关联下层半成品,自制件和组合（下层组合将整体被包公包料）
										updateProcardWwblCount(nowProcard_ww,
												newProcessdetail
														.getApplyCount(), 0);
									}
									if (newProcessdetail.getWwType().equals(
											"工序外委")
											&& newProcessdetail.getRelatDown()
													.equals("是")) {
										// 外委下层
										updateDownWwProcess(nowProcard_ww,
												newProcessdetail
														.getApplyCount(),
												newProcessdetail.getId(), 0);

									}
								}
								newProcessdetail
										.setProcessInforWWApply(wwApply);
							}
						}
					}
					wwApply.setProcessInforWWApplyDetails(detailSet);
					if (wwApply.getId() == null) {
						totalDao.save(wwApply);
					} else {
						totalDao.update(wwApply);
					}

				}

			}
		}
		return "true";
	}

	@Override
	public List showProcessinforTz(Integer id, String type) {
		// TODO Auto-generated method stub
		ProcessInfor process = (ProcessInfor) totalDao.getObjectById(
				ProcessInfor.class, id);
		if (process != null) {

			String typeSql = "";
			if (type != null && type.equals("sc")) {
				typeSql = " and type in('工艺规范','成型图')";
			}
			Integer banci = process.getProcard().getBanci();// 版次
			String addSql = null;
			if (banci == null || banci == 0) {
				addSql = " and (banci is null  or banci =0)";
			} else {
				addSql = " and banci is not null and banci =" + banci;
			}
			String addSql2 = null;
			if (process.getProcard().getProductStyle().equals("批产")) {
				addSql2 = " and (productStyle is null or productStyle !='试制') and ((processNO="
						+ process.getProcessNO()
						+ " and type != '成型图') or (processNO is null and type = '成型图') ) ";
			} else {
				Integer ptId = process.getProcard().getProcardTemplateId() == null ? 0
						: process.getProcard().getProcardTemplateId();
				addSql2 = " and ((glId = "
						+ process.getProcessTemplateId()
						+ " and processNO="
						+ process.getProcessNO()
						+ " and type != '成型图') or (processNO is null and type = '成型图' and glId="
						+ ptId + "))";
			}
			// 查询工艺规程
			List list = totalDao
					.query(
							"from ProcessTemplateFile where id in (select max(id) from ProcessTemplateFile where markId=?  "
									+ typeSql
									+ addSql2
									+ addSql
									+ " group by fileName)", process
									.getProcard().getMarkId());
			if (list == null || list.size() == 0) {
				Procard rootProcard = (Procard) totalDao.getObjectById(
						Procard.class, process.getProcard().getRootId());
				Float tqcount = (Float) totalDao.getObjectByCondition(
						"select count(*) from ProcardTemplatePrivilege where markId=? "
								+ "or markId =?", rootProcard.getMarkId(),
						rootProcard.getYwMarkId());
				// if(true){
				if (tqcount != null && tqcount > 0) {
					Integer ptId = process.getProcard().getProcardTemplateId() == null ? 0
							: process.getProcard().getProcardTemplateId();
					list = totalDao
							.query(
									"from ProcessTemplateFile where id in (select max(id) from ProcessTemplateFile where ((processNO ="
											+ process.getProcessNO()
											+ " and"
											+ " glId in(select id from ProcessTemplate where   procardTemplate.id=?  ) and type != '成型图')"
											+ " or (processNO is null or glId =? and type = '成型图'))"
											+ addSql
											+ typeSql
											+ " group by fileName)", ptId, ptId);
					return list;
				} else {
					return null;
				}
			}
			return list;
		}

		return null;
	}

	@Override
	public List<ProcardWxTuiLiao> findWxTUILiaoByRootId(Integer id) {
		if (id != null) {
			String hql = " from Procard where id in (select procard.id from ProcessInfor where agreeWwCount >0  )"
					+ " and id in (select procardId FROM ProcardProductRelation where ckCount >0) and rootId =?";
			List<ProcardWxTuiLiao> wxtuiliaoList = new ArrayList<ProcardWxTuiLiao>();
			List<Procard> procardList = totalDao.query(hql, id);
			for (Procard procard : procardList) {
				List<Object[]> ListprocessNOsAndProcessName = totalDao
						.query(
								" select processNOs, processNames  from ProcessInforWWApplyDetail where procardId=?  group by processNOs, processNames",
								procard.getId());
				if (ListprocessNOsAndProcessName != null
						&& ListprocessNOsAndProcessName.size() > 0) {
					for (Object[] processNOsAndProcessName : ListprocessNOsAndProcessName) {
						String processNOs = (String) processNOsAndProcessName[0];
						String processName = (String) processNOsAndProcessName[1];
						String[] processArray = processNOs.split(";");
						ProcessInfor proess = (ProcessInfor) totalDao
								.getObjectByCondition(
										" from ProcessInfor where procard.id =? and processNO >? and "
												+ " (dataStatus is null or dataStatus <> '删除') order by processNO",
										procard.getId(), Integer
												.parseInt(processArray[0]));
						ProcessInfor nextproess = (ProcessInfor) totalDao
								.getObjectByCondition(
										" from ProcessInfor where procard.id =? and processNO >? and "
												+ " (dataStatus is null or dataStatus <> '删除') order by processNO",
										procard.getId(),
										Integer
												.parseInt(processArray[processArray.length - 1]));
						if (nextproess != null) {
							ProcardWxTuiLiao wxtuiliao = new ProcardWxTuiLiao(
									procard.getMarkId(), procard.getSelfCard(),
									procard.getYwMarkId(), procard
											.getRootMarkId(), procard
											.getOrderNumber(), procard.getId(),
									processNOs, nextproess.getId(),
									processName, procard.getFilnalCount(),
									null, null, nextproess.getTotalCount(),
									proess.getSubmmitCount(), nextproess
											.getSubmmitCount(), procard
											.getProName(), procard.getRootId());
							wxtuiliaoList.add(wxtuiliao);
						}
					}
				}
			}
			return wxtuiliaoList;
		}
		return null;
	}

	@Override
	public Procard getSbNumByRootId(Integer id) {
		if (id != null) {
			Procard procard = (Procard) totalDao.get(Procard.class, id);
			String hql = "from ProcardTemplateBanBenApply where id in (select bbapplyId from ProcardAboutBanBenApply "
					+ " where procardId =? and status = '待处理'   ) order by id desc";
			ProcardTemplateBanBenApply shebian = (ProcardTemplateBanBenApply) totalDao
					.getObjectByCondition(hql, id);
			if (shebian != null) {
				procard.setSbId(shebian.getId());
				procard.setSbNumber(shebian.getSbNumber());
			}
			return procard;
		}
		return null;
	}

	@Override
	public String WxTuiLiaoSq(List<ProcardWxTuiLiao> wxtlList) {
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录";
		}
		if (wxtlList != null && wxtlList.size() > 0) {
			boolean b = false;
			for (ProcardWxTuiLiao wxtl : wxtlList) {
				if (wxtl.getSqtlNum() > 0) {
					wxtl.setAddTime(Util.getDateTime());
					wxtl.setAddUserCode(user.getCode());
					wxtl.setAddUsersName(user.getName());
					Procard procard = (Procard) totalDao.get(Procard.class,
							wxtl.getProcardId());
					wxtl.setNum(procard.getFilnalCount());
					totalDao.save(wxtl);
					String processName = "外协退料申请";
					Integer epId = null;
					try {
						epId = CircuitRunServerImpl.createProcess(processName,
								ProcardWxTuiLiao.class, wxtl.getId(),
								"epstatus", "id", null, user.getDept() + "部门  "
										+ user.getName() + " 外协退料申请，请您审批！",
								true, user.getDept());
						if (epId != null && epId > 0) {
							wxtl.setEpId(epId);
							CircuitRun circuitRun = (CircuitRun) totalDao.get(
									CircuitRun.class, epId);
							if ("同意".equals(circuitRun.getAllStatus())
									&& "审批完成".equals(circuitRun
											.getAuditStatus())) {
								wxtl.setEpstatus("同意");
							} else {
								wxtl.setEpstatus("未审批");
							}
							b = totalDao.update(wxtl);
						} else {
							return "外协退料申请流程不存在，申请失败！";
						}
					} catch (Exception e) {
						return e.toString();
					}
				}

			}
			if (b) {
				return "申请成功!~";
			}
		}
		return "请至少选择一个零件申请!~";
	}

	private void saveBlMop(Procard procard, Users users) {
		String kgsql = "";
		if (procard.getKgliao() != null && procard.getKgliao().length() > 0) {
			kgsql += " and kgliao ='" + procard.getKgliao() + "'";
		}
		String goodsClassSql = " and goodsClass in ('外购件库') " + kgsql;
		String banben_hql = "";
		String banben_hql2 = "";
		if (procard.getBanBenNumber() != null
				&& procard.getBanBenNumber().length() > 0) {
			banben_hql += " and banBenNumber = '" + procard.getBanBenNumber()
					+ "'";
			banben_hql2 += " and banben = '" + procard.getBanBenNumber() + "'";
		} else {
			banben_hql += " and (banBenNumber is null or banBenNumber = '')";
			banben_hql2 += " and (banben is null or banben = '')";
		}
		String specification_sql = "";
		// if (procard.getSpecification() != null
		// && procard.getSpecification().length() > 0) {
		// specification_sql += " and specification = '"
		// + procard.getSpecification() + "'";
		// } else {
		// specification_sql +=
		// " and (specification is null or specification = '')";
		// }
		// 库存量(件号+版本+供料属性+库别)
		String hqlGoods = "";
		hqlGoods = "select sum(goodsCurQuantity) from Goods where goodsMarkId=? "
				+ goodsClassSql
				+ " and goodsCurQuantity>0 "
				+ banben_hql
				+ " and (fcStatus is null or fcStatus='可用')";
		Float kcCount = (Float) totalDao.getObjectByCondition(hqlGoods, procard
				.getMarkId());
		if (kcCount == null || kcCount < 0) {
			kcCount = 0f;
		}

		/****************** 占用量=生产占用量+导入占用量 ******************************/
		// 系统占用量(含损耗)(已计算过采购量(1、有库存 2、采购中)，未领料)
		String zyCountSql = "select sum(hascount) from Procard where markId=? and kgliao=? "
				+ banben_hql
				+ " and jihuoStatua='激活' and (status='已发卡' or (oldStatus='已发卡' and status='设变锁定')) and procardStyle='外购' and (lingliaostatus='是' or lingliaostatus is null ) "
				+ " and (sbStatus<>'删除' or sbStatus is null ) ";
		Double zyCountD = (Double) totalDao.getObjectByConditionforDouble(zyCountSql,
				procard.getMarkId(), procard.getKgliao());
		if (zyCountD == null || zyCountD < 0) {
			zyCountD = 0d;
		}
		Float zyCount = zyCountD.floatValue();

		/****************** 结束 占用量=生产占用量+导入占用量 结束 ******************************/
		/****************** 在途量=采购在途量+导入在途量 ******************************/

		// 系统在途量(已生成物料需求信息，未到货)
		String hql_zc0 = "select sum(number-ifnull(rukuNum,0)) from ManualOrderPlan where markId = ?  "
				+ banben_hql2
				+ " and kgliao=? and (number>rukuNum or rukuNum is null) and (status<>'取消' or status is null)"
				+ specification_sql;
		Double ztCountd = (Double) totalDao.getObjectByCondition(hql_zc0,
				procard.getMarkId(), procard.getKgliao());
		if (ztCountd == null) {
			ztCountd = 0D;
		}
		Float ztCount = ztCountd.floatValue();

		/****************** 结束 在途量=采购在途量+导入在途量 结束 ******************************/
		// (库存量+在途量(已生成采购，未到货))-占用量=剩余可用库存量
		Float daizhiCount = (kcCount + ztCount) - zyCount;
		if (daizhiCount < 0) {
			daizhiCount = 0F;
		}
		Float cgNumber = procard.getFilnalCount();
		cgNumber = cgNumber - daizhiCount;
		if (cgNumber > 0) {
			ManualOrderPlanDetail mod = new ManualOrderPlanDetail(procard
					.getMarkId(), procard.getProName(), procard
					.getSpecification(), procard.getBanBenNumber(), procard
					.getUnit(), procard.getKgliao(), procard.getTuhao(),
					procard.getWgType(), cgNumber, procard.getId(), Util
							.getDateTime(), users.getName(), users.getCode(),
					"补料产生", 0, "同意", null);
			mod.setRootMarkId(procard.getRootMarkId());
			mod.setRootSelfCard(procard.getRootSelfCard());
			mod.setYwMarkId(procard.getYwMarkId());
			mod.setOrderNumber(procard.getOrderNumber());
			mod.setBanci(procard.getBanci());
			mod.setStatus("未采购");
			mod.setCategory("外购");
			if (procard.getOrderId() != null) {
				mod.setOrderId(Integer.parseInt(procard.getOrderId()));
			}
			procard.setWlqrtime(Util.getDateTime());
			if (totalDao.save(mod)) {
				manualPlanServer.addmaualPlan1(mod);
			}
		}

	}

	private Double[] csblWgPrice(String time, String markId, String banbenhao,
			String kgliao) {
		String hql = " select avg(hsPrice),avg(bhsPrice) from Price where partNumber = ? and kgliao =? and"
				+ " pricePeriodStart <= '"
				+ time
				+ "' and (pricePeriodEnd >= '"
				+ time
				+ "' or pricePeriodEnd is null or pricePeriodEnd = '')";
		if (banbenhao != null && banbenhao.length() > 0) {
			hql += " and  banbenhao = '" + banbenhao + "'";
		} else {
			hql += " and (banbenhao is null or banbenhao = '' )";
		}
		List<Object[]> objList = totalDao.query(hql, markId, kgliao);
		if (objList != null && objList.size() > 0) {
			Object[] obj = objList.get(0);
			Double hsprice = (Double) obj[0] == null ? 0d : (Double) obj[0];
			Double bhsprice = (Double) obj[1] == null ? 0d : (Double) obj[1];
			return new Double[] { hsprice, bhsprice };
		}
		return null;
	}

	@Override
	public void processToPebProduction(Integer[] processInforIds) {
		// 总成最后一道工序提交后保存产品下线
		if (processInforIds != null && processInforIds.length > 0) {
			StringBuffer buffer = new StringBuffer();
			for (int i = 0; i < processInforIds.length; i++) {
				if (processInforIds[i] != null) {
					buffer.append(processInforIds[i] + ",");
				}
			}
			buffer.append("0");
			try {
				List<Procard> queryList = totalDao
						.query("select distinct pi.procard from ProcessInfor pi"
								+ " where pi.id in("
								+ buffer.toString()
								+ ")  and pi.procard.procardStyle='总成'");// and
				// pi.status='完成'
				if (queryList != null && queryList.size() > 0) {
					List<Procard> list = new ArrayList<Procard>();
					for (Procard procard : queryList) {
						if (!list.contains(procard)) {
							list.add(procard);
						}
					}
					PebProduction pebProduction = null;
					for (Procard procard : list) {
						Set<ProcessInfor> processInforSet = procard
								.getProcessInforSet();
						int size = processInforSet.size();
						int maxProcessId = -1;
						for (ProcessInfor processInfor : processInforSet) {
							Integer inforId = processInfor.getId();
							if (maxProcessId < inforId) {
								maxProcessId = inforId;
							}
						}
						for (int i = 0; i < processInforIds.length; i++) {
							if (processInforIds[i] == maxProcessId) {
								pebProduction = new PebProduction();
								pebProduction.setYear(Integer.parseInt(Util
										.getDateTime("yyyy")));
								pebProduction.setMonth(Integer.parseInt(Util
										.getDateTime("MM")));
								pebProduction.setDay(Integer.parseInt(Util
										.getDateTime("dd")));

								pebProduction.setMarkId(procard.getYwMarkId());// 全部使用业务件号
								ProcessInfor processInfor = (ProcessInfor) totalDao
										.getObjectById(ProcessInfor.class,
												maxProcessId);
								if (processInfor.getGongwei() != null
										&& !""
												.equals(processInfor
														.getGongwei())) {
									String banzu = (String) totalDao
											.getObjectByCondition(
													"select banzu "
															+ "from TaSopGongwei where gongweihao =?",
													processInfor.getGongwei());
									if (banzu != null && banzu.equals("逆变器车间")
											|| banzu.equals("总装车间")) {
										banzu = "逆变器（总装）";
									}
									List<SubTeam> subTeamList = totalDao
											.query(
													"from SubTeam where subName = ? and isBanzu='车间'",
													banzu);
									for (SubTeam subTeam : subTeamList) {
										if (subTeam.getSubName().equals(banzu)) {
											pebProduction.setBanzu(banzu);
											pebProduction
													.setCuNumber(new BigDecimal(
															processInfor
																	.getSubmmitCount())
															.intValue());
											// productEBServer.addPebProduction(
											// pebProduction,
											// "processSubmit");
										}
									}

								}

							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println();
			}
		}

	}

	@Override
	public List showProcardbcpList(Integer rootId) {
		// TODO Auto-generated method stub
		List<Procard> procardList = totalDao
				.query(
						"from Procard where rootId=? "
								+ " and id in(select procard.id from ProcessInfor where  needSave ='是' and (dataStatus is null or dataStatus!='删除') and procard.id is not null )",
						rootId);
		List<ProcardVo> procardvoList = new ArrayList<ProcardVo>();
		if (procardList != null && procardList.size() > 0) {
			for (Procard procard : procardList) {
				List<ProcessInfor> processinforList = totalDao
						.query(
								"from ProcessInfor where procard.id=? "
										+ "and (dataStatus is null or dataStatus!='删除') order by processNO",
								procard.getId());
				if (processinforList != null && processinforList.size() > 0) {
					int i = 0;
					for (ProcessInfor process : processinforList) {
						i++;
						if (process.getNeedSave() != null
								&& process.getNeedSave().equals("是")) {
							ProcardVo pvo = new ProcardVo();
							BeanUtils
									.copyProperties(procard, pvo, new String[] {
											"zaizhiApplyZk", "zaizhikzkCount",
											"zaizhizkCount" });
							// 获取入库数据
							Float rkdsqCount = (Float) totalDao
									.getObjectByCondition(
											"select sum(goodsStoreCount) from GoodsStore where goodsStoreWarehouse='半成品库'"
													+ " and goodsStoreMarkId=? and goodsStoreLot=? and processNo=? and status='待入库' and (procardId is null or procardId=?)",
											pvo.getMarkId(), pvo.getSelfCard(),
											process.getProcessNO(), procard
													.getId());
							Float rkCount = (Float) totalDao
									.getObjectByCondition(
											"select sum(goodsStoreCount) from GoodsStore where goodsStoreWarehouse='半成品库'"
													+ " and goodsStoreMarkId=? and goodsStoreLot=? and processNo=? and status='入库' and (procardId is null or procardId=?)",
											pvo.getMarkId(), pvo.getSelfCard(),
											process.getProcessNO(), procard
													.getId());
							Float kcCount = (Float) totalDao
									.getObjectByCondition(
											"select sum(goodsCurQuantity)  from Goods where goodsClass='半成品库'"
													+ " and goodsMarkId=? and goodsLotId=? and processNo=? and goods_id in (select goodsId from ProcardProductRelation where procardId=?)",
											pvo.getMarkId(), pvo.getSelfCard(),
											process.getProcessNO(), procard
													.getId());
							// Float ckCount = (Float)
							// totalDao.getObjectByCondition("select sum(sellCount) from Sell where sellWarehouse='半成品库' "
							// +
							// " and sellMarkId=? and sellLot=? and processNo=? ",
							// pvo.getMarkId(),pvo.getSelfCard(),process.getProcessNO())
							// ;
							if (rkdsqCount == null) {
								rkdsqCount = 0f;
							}
							if (rkCount == null) {
								rkCount = 0f;
							}
							if (kcCount == null) {
								kcCount = 0f;
							}
							// if(ckCount==null){
							// ckCount =0f;
							// }
							pvo.setBcprksqCount(rkdsqCount);
							pvo.setBcprkCount(rkCount);
							pvo.setBcpkcCount(kcCount);
							pvo.setBcpckCount(rkCount - kcCount);
							if (procard.getZaizhizkCount() == null) {
								procard.setZaizhizkCount(0f);
							}
							if (kcCount > procard.getZaizhizkCount()) {
								pvo.setZaizhikzkCount(procard
										.getZaizhizkCount());
							} else {
								pvo.setZaizhikzkCount(kcCount);
							}
							Float bcpqlCount = 0f;
							if (rkCount < procard.getFilnalCount()) {
								pvo.setBcpqlCount(procard.getFilnalCount()
										- rkCount);
							} else {
								pvo.setBcpqlCount(0f);
							}
							String processname = null;
							if (i == processinforList.size()) {
								if (procard.getProcard() != null) {
									processname = (String) totalDao
											.getObjectByCondition(
													"select processName from ProcessInfor where  procard.id  =?"
															+ " and (dataStatus is null or dataStatus!='删除') order by processNO",
													procard.getProcard()
															.getId());
								}
							} else {
								processname = processinforList.get(i)
										.getProcessName();
							}
							pvo.setProcessNo(process.getProcessNO());
							pvo.setProcessnos(process.getProcessNO() + "");
							pvo.setProcessnames(process.getProcessName());
							pvo.setNextProcessName(processname);
							procardvoList.add(pvo);
						}
					}
				}
			}
		}

		return procardvoList;
	}

	private void csbl_wwblcl(Integer procardId, Float blNum, Integer processNo) {
		// 包工包料逻辑处理
		List<Integer> idsList = new ArrayList<Integer>();
		for (int j = 0; j < processNo; j++) {
			ProcessInforWWApplyDetail pwd = (ProcessInforWWApplyDetail) totalDao
					.getObjectByCondition(
							" from ProcessInforWWApplyDetail where procardId =? and "
									+ " processNOs like '%"
									+ j
									+ "%' and (dataStatus is null or dataStatus <> '删除') ",
							procardId);

			if (pwd == null || idsList.contains(pwd.getId())) {
				continue;
			}
			idsList.add(pwd.getId());
			if (pwd != null) {
				isbgbl = true;
				// 修改下层零件的 wwblcont;
				if ("包工包料".equals(pwd.getWwType())) {
					List<Procard> wwblProcardList = totalDao
							.query(
									" from Procard where procard.id=? and (sbStatus is null or sbStatus <> '删除') and wwblCount is not null and wwblCount>0 ",
									procardId);
					if (wwblProcardList != null && wwblProcardList.size() > 0) {
						for (Procard wwbl : wwblProcardList) {
							wwbl.setWwblCount(wwbl.getWwblCount() - blNum);
							totalDao.update(wwbl);
						}
					}
				}

				// 修改外委工序的 agreeWwCount;
				String[] processNOArray = pwd.getProcessNOs().split(";");
				for (int i = 0; i < processNOArray.length; i++) {
					ProcessInfor wwblprocessinfor = (ProcessInfor) totalDao
							.getObjectByCondition(
									" from ProcessInfor where fk_procardId =? "
											+ " and processNO =? and (dataStatus is null or dataStatus <> '删除') and agreeWwCount is not null and  agreeWwCount >0 ",
									procardId, Integer
											.parseInt(processNOArray[i]));
					if (wwblprocessinfor != null) {
						wwblprocessinfor.setAgreeWwCount(wwblprocessinfor
								.getAgreeWwCount()
								- blNum);
					}
				}

			}
		}
	}

	@Override
	public String procardOutbcp(int[] selected, Float[] lqCounts,
			Integer[] processnos, String cardId, String pwsswords) {
		// TODO Auto-generated method stub
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录";
		}
		String time = Util.getDateTime();
		Users lqr = (Users) totalDao
				.getObjectByCondition(
						"from Users where cardId=? and onWork not in('离职','离职中','内退','退休')",
						cardId);
		if (lqr == null) {
			return "请刷有效员工卡!";
		}
		MD5 md5 = new MD5();
		String mdsPassword = md5.getMD5(pwsswords.getBytes());// 密码MD5转换
		Password oldpassword = lqr.getPassword();
		if (!oldpassword.getPassword().equals(mdsPassword)) {
			return "刷卡人密码有误!";
		}
		// 密码验证
		List<String> qxProcessName = totalDao
				.query(
						"select p.processName from ProcessGzstore p join p.users u where u.id=?",
						lqr.getId());
		if (qxProcessName == null || qxProcessName.size() == 0) {
			return "此员工没有绑定技能,前先让其班组长绑定技能!";
		}
		String msg = "";
		if (selected != null && selected.length > 0) {
			int j = 0;
			for (int pid : selected) {
				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, pid);
				if (procard == null) {
					msg += "第" + (j + 1) + "条选中项没有找到对应的生产件!";
					continue;
				}
				Float lqCount = lqCounts[j];
				Float outcount = 0f;
				Integer processno = processnos[j];
				if (lqCount == null) {
					msg += "第" + (j + 1) + "条选中项" + procard.getMarkId() + "("
							+ procard.getSelfCard() + "),请填写有效的领取数量!";
					continue;
				}
				if (lqCount == 0) {
					continue;
				}
				List<ProcessInfor> nextList = totalDao
						.query(
								"from ProcessInfor where processNO>=? and (dataStatus is null or dataStatus!='删除') and procard.id=? order by processNO",
								processno, procard.getId());
				ProcessInfor thisprocess = nextList.get(0);
				nextList.remove(0);
				String processname = null;
				if (nextList.size() == 0 && procard.getProcard() != null) {
					processname = (String) totalDao
							.getObjectByCondition(
									"select processName from ProcessInfor where (dataStatus is null or dataStatus!='删除') and procard.id=? order by processNO",
									procard.getProcard().getId());
				} else {
					processname = nextList.get(0).getProcessName();
				}
				if (processname != null && !qxProcessName.contains(processname)) {
					msg += "第" + (j + 1) + "条选中项" + procard.getMarkId() + "("
							+ procard.getSelfCard() + "),下工序为" + processname
							+ ",此员工无此技能!";
					continue;
				}
				List<ProcardProductRelation> pprList = totalDao
						.query(
								"from ProcardProductRelation where procardId=? and (zyCount>ckCount)"
										+ " and goodsId in( select goodsId from Goods where goodsClass='半成品库' and processNo=? )",
								pid, processno);
				if (pprList != null && pprList.size() > 0) {
					for (ProcardProductRelation ppr : pprList) {
						Float thisCount = ppr.getZyCount() - ppr.getCkCount();
						Goods old = (Goods) totalDao.getObjectById(Goods.class,
								ppr.getGoodsId());
						if (old != null) {
							if (old.getGoodsCurQuantity() <= thisCount) {
								thisCount = old.getGoodsCurQuantity();
								if (thisCount > 0) {
									if (thisCount < 0
											|| thisCount > procard
													.getZaizhizkCount()) {// 说明数据有问题
										throw new RuntimeException(procard
												.getMarkId()
												+ "的第"
												+ procard.getSelfCard()
												+ "批次半成品在库数量异常请管理员核查!");
									}
									procard.setZaizhizkCount(procard
											.getZaizhizkCount()
											- thisCount);
									ppr
											.setCkCount(ppr.getCkCount()
													+ thisCount);
									outcount += thisCount;
									old.setGoodsCurQuantity(Util.Floatdelete(
											old.getGoodsCurQuantity(),
											thisCount));
									totalDao.update(old);
									totalDao.update(procard);
									totalDao.update(ppr);
									// 添加出库记录
									Sell sell = new Sell();
									sell.setSellMarkId(old.getGoodsMarkId());// 件号
									sell.setSellWarehouse(old.getGoodsClass());// 库别
									sell.setGoodHouseName(old
											.getGoodHouseName());// 仓区
									sell.setKuwei(old.getGoodsPosition());// 库位
									sell.setBanBenNumber(old.getBanBenNumber());// 版本号
									sell.setKgliao(old.getKgliao());// 供料属性
									sell.setWgType(old.getWgType());// 物料类别
									sell.setSellGoods(old.getGoodsFullName());// 品名
									sell.setSellFormat(old.getGoodsFormat());// 规格
									sell.setSellCount(thisCount);// 出库数量
									sell.setSellUnit(old.getGoodsUnit());// 单位
									sell
											.setSellSupplier(old
													.getGoodsSupplier());// 供应商
									sell.setSellTime(time);// 出库时间
									sell.setSellDate(Util
											.getDateTime("yyyy-MM-dd"));// 出库时间
									sell.setTuhao(old.getTuhao());// 图号
									sell.setPrintStatus("NO");// 打印状态
									sell.setProcessNo(old.getProcessNo());
									sell.setProcessName(old.getProcessName());
									sell.setYwmarkId(procard.getYwMarkId());// 业务件号
									sell.setOrderNum(procard.getOrderNumber());// 内部订单号
									sell.setRootSelfCard(procard
											.getRootSelfCard());
									sell.setSellLot(old.getGoodsLotId());
									sell.setStyle("半成品出库(BOM)");
									sell.setSellCharger(user.getName());// 领料人
									sell.setSellAdminName(Util.getLoginUser()
											.getName());// 管理人员
									sell.setGoodsId(old.getGoodsId());
									sell.setGoodsPrice(old.getGoodsPrice());// 库存单价(不含税)
									sell.setSellPrice(old.getGoodsBuyPrice()); // 批次
									// 单价
									sell.setSellbhsPrice(old
											.getGoodsBuyBhsPrice());// 批次 不含税单价
									sell.setTaxprice(old.getTaxprice());// 批次 税率
									sell.setProcessNo(old.getProcessNo());
									sell.setProcessName(old.getProcessName());
									sell.setProcardId(procard.getId());
									// String printNumber =
									// updatMaxSellPrintNumber(sell,time);
									// sell.setPrintNumber(printNumber);
									totalDao.save(sell);

								}
							}
						}

					}
				}

				if (lqCount > outcount) {
					msg += "第" + (j + 1) + "条选中项" + procard.getMarkId() + "("
							+ procard.getSelfCard() + "),没有足够的领取数量还差"
							+ (lqCount - outcount) + procard.getUnit()
							+ "没有领取!";
				}
				// 填充工序
				// 1.查出最后一道工序号
				Integer maxNo = (Integer) totalDao
						.getObjectByCondition(
								"select max(processNO) from ProcessInfor where procard.id=? ",
								procard.getId());
				// 2.查出最后一个工序卡住数量
				List<Procard> wgjList = totalDao
						.query(
								"from Procard where procard.id=? and procardStyle='外购'  and hascount>0",
								procard.getId());
				if (procard.getHascount() == null) {
					procard.setHascount(procard.getKlNumber());
				}
				Float lastCount = procard.getKlNumber() - procard.getHascount();
				if (wgjList != null && wgjList.size() > 0) {
					for (Procard wgj : wgjList) {
						float scCount = (wgj.getKlNumber() - wgj.getHascount())
								* wgj.getQuanzi1() / wgj.getQuanzi2();
						scCount = (float) Math.floor(scCount);
						if (scCount < lastCount) {
							lastCount = scCount;
						}
					}
				}
				if (nextList != null && nextList.size() > 0) {
					String upProcesstype = "";
					String upNeedSave = null;
					boolean b = true;// 半成品转库之后工序限制可领数量，半成品转库或者领取之后解开限制数量
					float lastTotalCount = -1;// 上道工序可领数量
					for (int i = 0; i < nextList.size(); i++) {
						ProcessInfor processInfor = nextList.get(i);
						if (b) {
							if ((upNeedSave != null && upNeedSave.equals("是"))
									&& (processInfor.getNeedSave() == null || !processInfor
											.getNeedSave().equals("是"))) {
								b = false;
							}
							if (upProcesstype.equals("外委")
									&& processInfor.getProductStyle() != null
									&& processInfor.getProductStyle().equals(
											"自制")) {
								b = false;
							}
							if (upProcesstype.equals("外委")
									&& processInfor.getProductStyle() != null
									&& processInfor.getProductStyle().equals(
											"外委")
									&& processInfor.getProcessStatus() != null
									&& processInfor.getProcessStatus().equals(
											"no")) {
								b = false;
							}
						}
						upProcesstype = processInfor.getProductStyle();
						upNeedSave = processInfor.getNeedSave();
						if (i == (nextList.size() - 1)
								&& ((procard.getKlNumber() - procard
										.getHascount()) > lastCount)) {// 部分领料最后一道工序的可领数量为最小minNumber-
							maxNo = processInfor.getProcessNO();// 最大工序号
							if (!b) {
								continue;
							} else {
								if ((processInfor.getTotalCount() + outcount) < lastCount) {
									processInfor.setTotalCount(processInfor
											.getTotalCount()
											+ outcount.intValue());
								} else {
									processInfor.setTotalCount((int) Math
											.floor(lastCount));
								}
							}
						} else {
							if (!b) {
								continue;
							} else {
								processInfor.setTotalCount(processInfor
										.getTotalCount()
										+ outcount.intValue());
								if (processInfor.getTotalCount() > procard
										.getFilnalCount()) {
									// 发送异常消息bgg
									// AlertMessagesServerImpl.addAlertMessages("系统维护异常组",
									// "件号:" + procard.getMarkId() + "批次:"
									// +
									// procard.getSelfCard()+"第"+processInfor.getProcessNO()
									// + "工序可领数量为："
									// + processInfor.getTotalCount()
									// +
									// "大于批次数量，系统自动修复为批次数量"+procard.getFilnalCount()+"，操作是：半成品转库,当前系统时间为"
									// + Util.getDateTime(), "2");
									processInfor.setTotalCount(procard
											.getFilnalCount().intValue());
								}
								if (lastTotalCount > 0
										&& lastTotalCount < processInfor
												.getTotalCount()) {// 不能超过伤到工序的可领数量
									processInfor
											.setTotalCount((int) lastTotalCount);
								}
							}
						}
						lastTotalCount = processInfor.getTotalCount();
						totalDao.update(processInfor);
					}
					// 如果下道工序为外委则做外委入库申请
					int n = 0;
					WaigouWaiweiPlan wwp = new WaigouWaiweiPlan();
					// // 查看是否有委外库
					// Float wwckCount = (Float) totalDao
					// .getObjectByCondition("select count(*) from WareHouse where name='委外库'");
					for (ProcessInfor nextWwProcessInfor : nextList) {
						if (nextWwProcessInfor != null) {
							if ("外委".equals(nextWwProcessInfor
									.getProductStyle())
									&& (n == 0 || ("yes")
											.equals(nextWwProcessInfor
													.getProcessStatus()))) {
								if (n == 0) {
									wwp.setRootMarkId(procard.getRootMarkId());
									wwp.setRootSelfCard(procard
											.getRootSelfCard());
									wwp.setOrderNum(procard.getOrderNumber());
									wwp.setYwMarkId(procard.getYwMarkId());
									wwp.setBanben(procard.getBanBenNumber());
									wwp.setBanci(procard.getBanci());
									wwp.setMarkId(procard.getMarkId());
									wwp.setProcessNo(nextWwProcessInfor
											.getProcessNO()
											+ "");
									wwp.setProName(procard.getProName());
									wwp.setProcessName(nextWwProcessInfor
											.getProcessName());
									wwp.setType("外委");
									Float wwCount = 0f;
									wwp.setNumber(outcount);
									wwp.setBeginCount(outcount);
									wwCount = outcount;
									wwp.setAddTime(Util.getDateTime());
									wwp.setJihuoTime(Util.getDateTime());
									wwp.setShArrivalTime(procard
											.getNeedFinalDate());// 应到货时间在采购确认通知后计算
									wwp.setCaigouMonth(Util
											.getDateTime("yyyy-MM月"));// 采购月份
									wwp.setUnit(procard.getUnit());
									String wwNumber = "";
									String before = null;
									Integer bIndex = 10;
									before = "ww"
											+ Util.getDateTime("yyyyMMdd");
									Integer maxNo2 = 0;
									String maxNumber = (String) totalDao
											.getObjectByCondition("select max(planNumber) from WaigouWaiweiPlan where planNumber like '"
													+ before + "%'");
									if (maxNumber != null) {
										String wwnum = maxNumber.substring(
												bIndex, maxNumber.length());
										try {
											Integer maxNum = Integer
													.parseInt(wwnum);
											if (maxNum > maxNo2) {
												maxNo2 = maxNum;
											}
										} catch (Exception e) {
											// TODO: handle exception
										}
									}
									maxNo2++;
									wwNumber = before
											+ String.format("%03d", maxNo2);
									wwp.setPlanNumber(wwNumber);// 采购计划编号
									wwp.setSelfCard(procard.getSelfCard());// 批次
									// wwp.setGysId(nextWwProcessInfor
									// .getZhuserId());// 供应商id
									// wwp.setGysName(nextWwProcessInfor
									// .getGys());// 供应商名称
									wwp.setAllJiepai(nextWwProcessInfor
											.getAllJiepai());// 单件总节拍
									wwp.setDeliveryDuration(nextWwProcessInfor
											.getDeliveryDuration());// 耽误时长
									wwp.setSingleDuration(procard
											.getSingleDuration());// 单班时长(工作时长)
									wwp.setProcardId(procard.getId());
									wwp.setProcard(procard);
									// if (wwckCount != null
									// && wwckCount > 0) {
									wwp.setStatus("待入库");
									// 在制品待入库
									if (procard.getZaizhiApplyZk() == null) {
										procard.setZaizhiApplyZk(0f);
									}
									if (procard.getZaizhizkCount() == null) {
										procard.setZaizhizkCount(0f);
									}
									if (procard.getKlNumber() == null) {
										procard.setKlNumber(procard
												.getFilnalCount());
									}
									if (procard.getHascount() == null) {
										procard.setHascount(procard
												.getKlNumber());
									}
									// procard.getKlNumber()-procard.getHascount()=已生产数量
									// 可转库数量=已生产数量-已转库数量-转库申请中数量
									procard.setZaizhikzkCount(procard
											.getFilnalCount()
											- procard.getZaizhizkCount()
											- procard.getZaizhiApplyZk());
									if (procard.getZaizhikzkCount() >= wwCount) {
										procard.setZaizhiApplyZk(procard
												.getZaizhiApplyZk()
												+ wwCount);
										String orderNum = (String) totalDao
												.getObjectByCondition(
														"select orderNumber from Procard where id=?",
														procard.getRootId());
										// 成品待入库
										GoodsStore goodsStore2 = new GoodsStore();
										goodsStore2.setNeiorderId(orderNum);
										goodsStore2.setWaiorderId(procard
												.getOutOrderNum());
										goodsStore2.setProcardId(procard
												.getId());
										goodsStore2.setGoodsStoreMarkId(procard
												.getMarkId());
										goodsStore2.setBanBenNumber(procard
												.getBanBenNumber());
										goodsStore2.setGoodsStoreLot(procard
												.getSelfCard());
										goodsStore2
												.setGoodsStoreGoodsName(procard
														.getProName());
										goodsStore2.setApplyTime(Util
												.getDateTime());
										goodsStore2
												.setGoodsStoreArtsCard((String) totalDao
														.getObjectByCondition(
																"select selfCard from Procard where id=?",
																procard
																		.getRootId()));
										goodsStore2.setGoodsStorePerson(Util
												.getLoginUser().getName());
										goodsStore2.setStatus("待入库");
										goodsStore2.setStyle("半成品转库");
										goodsStore2
												.setGoodsStoreWarehouse("委外库");// 库别
										// goodsStore2.setGoodHouseName(goodsStore.getGoodHouseName());//
										// 区名
										// goodsStore2.setGoodsStorePosition(goodsStore.getGoodsStorePosition());//
										// 库位
										goodsStore2.setGoodsStoreUnit(procard
												.getUnit());
										goodsStore2.setGoodsStoreCount(wwCount);
										goodsStore2.setProcessNo(thisprocess
												.getProcessNO());
										goodsStore2.setProcessName(thisprocess
												.getProcessName());
										totalDao.update(procard);
										totalDao.save(goodsStore2);
										// 判断外委进委外入库是否要做
										String hql1 = "select valueCode from CodeTranslation where type = 'sys' and keyCode='委外库接收半成品' and valueName='委外库接收半成品'";
										String valueCode = (String) totalDao
												.getObjectByCondition(hql1);
										if (valueCode != null
												&& valueCode.equals("否")) {
											// 入库记录直接通过
											goodsStore2.setStatus("入库");
											goodsStore2.setPrintStatus("YES");
											totalDao.update(goodsStore2);
											// 增加库存记录
											String hqlgoods = "from Goods where goodsMarkId='"
													+ procard.getMarkId()
													+ "' and goodsLotId='"
													+ procard.getSelfCard()
													+ "' and goodsStyle='半成品转库' and processNo="
													+ thisprocess
															.getProcessNO()
													+ " and goodsClass='委外库'";
											Goods wwgoods = (Goods) totalDao
													.getObjectByCondition(hqlgoods);
											if (wwgoods != null) {
												wwgoods
														.setGoodsCurQuantity(wwgoods
																.getGoodsCurQuantity()
																+ goodsStore2
																		.getGoodsStoreCount());
												totalDao.update(wwgoods);
											} else {
												wwgoods = new Goods();
												wwgoods
														.setGoodsMarkId(goodsStore2
																.getGoodsStoreMarkId());
												wwgoods
														.setGoodsFormat(goodsStore2
																.getGoodsStoreFormat());
												wwgoods
														.setBanBenNumber(goodsStore2
																.getBanBenNumber());
												wwgoods
														.setGoodsFullName(goodsStore2
																.getGoodsStoreGoodsName());
												wwgoods.setGoodsClass("委外库");
												wwgoods
														.setGoodsBeginQuantity(goodsStore2
																.getGoodsStoreCount());
												wwgoods
														.setGoodsCurQuantity(goodsStore2
																.getGoodsStoreCount());
												totalDao.save(wwgoods);
											}
											// 添加零件与在制品关系表
											ProcardProductRelation pprelation = new ProcardProductRelation();
											pprelation.setAddTime(Util
													.getDateTime());
											pprelation.setProcardId(procard
													.getId());
											pprelation.setGoodsId(wwgoods
													.getGoodsId());
											pprelation.setZyCount(goodsStore2
													.getGoodsStoreCount());
											pprelation.setFlagType("本批在制品");
											totalDao.save(pprelation);
											// 将外购外委激活序列状态改为待激活
											wwp.setStatus("待激活");
											// totalDao.save(wwp);
										}
									} else {
										return "对不起超过可申请数量("
												+ procard.getZaizhikzkCount()
												+ ")";
									}
									// } else {
									// wwp.setStatus("待激活");
									// }
									totalDao.save(wwp);
									// wgSet.add(wwp);
								} else {
									wwp
											.setProcessNo(wwp.getProcessNo()
													+ ";"
													+ nextWwProcessInfor
															.getProcessNO());
									wwp.setProcessName(wwp.getProcessName()
											+ ";"
											+ nextWwProcessInfor
													.getProcessName());
									totalDao.update(wwp);
								}
							} else {
								break;
							}
						} else {
							break;
						}
						n++;
					}
					if (wwp.getId() != null) {
						// 匹配供应商
						Price price = (Price) totalDao
								.getObjectByCondition(
										"from Price where wwType='工序外委' and partNumber=? and gongxunum=? and (pricePeriodEnd is null or pricePeriodEnd ='' or pricePeriodEnd>='"
												+ Util
														.getDateTime("yyyy-MM-dd")
												+ "')  order by id desc", wwp
												.getMarkId(), wwp
												.getProcessNo());
						if (price != null) {
							wwp.setPriceId(price.getId());
							wwp.setGysId(price.getGysId());
							ZhUser zhUser = (ZhUser) totalDao.getObjectById(
									ZhUser.class, price.getGysId());
							wwp.setGysName(zhUser.getName());
							wwp.setUserCode(zhUser.getUsercode());
							wwp.setUserId(zhUser.getUserid());
							totalDao.update(wwp);
						}
					}
					if (wwp.getStatus() != null
							&& wwp.getStatus().equals("待激活")) {// 说明自动跳过了半成品入委外库操作
						// 下一步操作
						zijihuoww(wwp);
					}
				} else {
					Float maxtjNumber = (Float) totalDao
							.getObjectByCondition(
									"select max(submmitCount) from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除')"
											+ " and processNO =(select max(processNO) from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除') )",
									procard.getId(), procard.getId());

					procard.setTjNumber(procard.getTjNumber() + outcount);
					if (procard.getTjNumber() > procard.getFilnalCount()) {
						procard.setTjNumber(procard.getFilnalCount());
					}
					if (procard.getTjNumber() > maxtjNumber) {
						procard.setTjNumber(maxtjNumber);
					}

					if (procard.getTjNumber().equals(procard.getFilnalCount())) {
						procard.setStatus("完成");
					}
					totalDao.update(procard);
					// 没有下道工序就激活上次流水卡
					Procard sc = procard.getProcard();
					if (sc != null) {
						Float llCount = (Float) totalDao
								.getObjectByCondition(
										"select count(*) from Procard where procard.id=?  and (sbStatus is null or sbStatus !='删除')"
												+ " and procardStyle='外购' "
												+ "and (needProcess is null or needProcess !='yes') "
												+ "and (lingliaostatus is null or lingliaostatus!='否')",
										sc.getId());
						if (llCount != null && llCount > 0) {
							sc.setLingliaostatus("是");
						} else {
							if ("是".equals(sc.getLingliaostatus())) {
								AlertMessagesServerImpl.addAlertMessages(
										"系统维护异常组",
										"procard的Lingliaostatus应该是否，被设置为是，需要排查。id:"
												+ sc.getId(), "提交工序", "2");
							}
							sc.setLingliaostatus("否");
						}
						if ("否".equals(sc.getLingliaostatus())) {
							sc.setHascount(0F);
							Float nowMinNumber = procard.getTjNumber();
							if (procard.getProcardStyle().equals("外购")) {
								nowMinNumber = nowMinNumber
										* procard.getQuanzi2()
										/ procard.getQuanzi1();
							} else {
								nowMinNumber = nowMinNumber
										/ procard.getCorrCount();
								nowMinNumber = (float) Math.ceil(nowMinNumber);
							}
							if (sc.getKlNumber() == null
									|| sc.getKlNumber() < nowMinNumber) {
								sc.setKlNumber(nowMinNumber);
							}
							if (sc.getKlNumber() > sc.getFilnalCount()) {
								sc.setKlNumber(sc.getFilnalCount());
							}
							if (sc.getStatus().equals("已发卡")
									|| sc.getStatus().equals("初始")) {
								sc.setStatus("已发料");
								sc.setJihuoStatua("激活");
							}
							totalDao.update(sc);

							// 设置
							Float maxNumber = null;
							if (sc.getProcardStyle().equals("总成")) {
								maxNumber = (Float) totalDao
										.getObjectByCondition(
												"select max(minNumber) from Procard where procard.id=? and (oldProcardId is null or oldProcardId=0) and (procardStyle='自制' or (procardStyle='外购' and  needProcess='yes') )and (sbStatus is null or sbStatus !='删除') ",
												sc.getId());

							} else {
								maxNumber = (Float) totalDao
										.getObjectByCondition(
												"select max(minNumber) from Procard where procard.id=? and (procardStyle='自制' or (procardStyle='外购' and  needProcess='yes') )and (sbStatus is null or sbStatus !='删除') ",
												sc.getId());
							}
							String hql_process = "from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除')";
							List<ProcessInfor> list_process = totalDao.query(
									hql_process, sc.getId());
							if (maxNumber > sc.getFilnalCount()) {
								maxNumber = sc.getFilnalCount();
								AlertMessagesServerImpl.addAlertMessages(
										"系统维护异常组",
										"下层的minnumber大于上层的finallcount。id:"
												+ sc.getId(), "提交工序", "2");
							}
							for (ProcessInfor processInfor : list_process) {
								processInfor.setTotalCount(maxNumber);
								totalDao.update(processInfor);
							}
						}
						if ((sc.getStatus().equals("已发卡")
								|| sc.getStatus().equals("已发料") || sc
								.getStatus().equals("领工序"))
								&& (sc.getKlNumber() != null && sc
										.getHascount() != null)) {
							if (sc.getStatus().equals("已发卡")) {
								sc.setStatus("已发料");
							}
							// 重算一下上层hascount
							List<Procard> peitaoSonList = null;
							Float scpeitao = sc.getFilnalCount();
							if (sc.getProcardStyle().equals("外购")) {
								peitaoSonList = new ArrayList<Procard>();
								peitaoSonList.add(sc);
							} else {
								peitaoSonList = totalDao
										.query(
												"from Procard where procard.id=? and (sbStatus is null or sbStatus !='删除') and procardStyle='外购'"
														+ " and (needProcess is null or needProcess !='yes') and (lingliaostatus is null or lingliaostatus!='否')",
												sc.getId());
							}
							for (Procard son : peitaoSonList) {
								if (son.getHascount() == null) {// 被包工包料外委出去了
									scpeitao = 0f;
								} else {
									// 生产已领数量
									Float scylCount = son.getKlNumber()
											- son.getHascount();
									// - wwylCount;
									if (son.getNeedProcess() == null
											|| !son.getNeedProcess().equals(
													"yes")) {
										if (scpeitao == null) {
											scpeitao = scylCount
													* son.getQuanzi1()
													/ son.getQuanzi2();
										} else if (scpeitao > scylCount
												* son.getQuanzi1()
												/ son.getQuanzi2()) {
											scpeitao = scylCount
													* son.getQuanzi1()
													/ son.getQuanzi2();
										}
										if ((scpeitao - Math.floor(scpeitao)) > 0.95) {
											scpeitao = (float) Math
													.floor(scpeitao) + 1f;
										}
									} else {
										if (scpeitao == null) {
											scpeitao = scylCount;
										} else if (scpeitao > scylCount) {
											scpeitao = scylCount;
										}
										if ((scpeitao - Math.floor(scpeitao)) > 0.95) {
											scpeitao = (float) Math
													.floor(scpeitao) + 1f;
										}
									}
								}

							}
							if (scpeitao == null) {
								scpeitao = 0f;
							}
							if (scpeitao % 1 < 0.95) {
								scpeitao = (float) Math.floor(scpeitao);
							} else {
								scpeitao = (float) Math.ceil(scpeitao);
							}
							Float hascount = sc.getKlNumber() - scpeitao;
							if (hascount < 0) {
								hascount = 0f;
							}
							sc.setHascount(hascount);
							// 物料配齐数量
							Float pqCount = sc.getKlNumber() - sc.getHascount();
							Float minNumber = null;
							if (sc.getProcardStyle().equals("总成")) {
								minNumber = (Float) totalDao
										.getObjectByCondition(
												"select min(minNumber) from Procard where procard.id=? and (oldProcardId is null or oldProcardId=0) and (procardStyle='自制' or (procardStyle='外购' and  needProcess='yes') )and (sbStatus is null or sbStatus !='删除') ",
												sc.getId());
							} else {
								minNumber = (Float) totalDao
										.getObjectByCondition(
												"select min(minNumber) from Procard where procard.id=? and (procardStyle='自制' or (procardStyle='外购' and  needProcess='yes') )and (sbStatus is null or sbStatus !='删除') ",
												sc.getId());
							}

							// 查询同一父层下最小完成的数数量
							if (minNumber != null && minNumber > 0) {
								float cminNumber = (float) Math.ceil(minNumber);
								if ((cminNumber - minNumber) > 0.05) {
									minNumber = (float) Math.floor(minNumber);
								} else {
									minNumber = cminNumber;
								}
								// 获取较小数量作为限制
								Float lastCount2 = pqCount > minNumber ? minNumber
										: pqCount;
								// 关联件号，控制工序总数
								String hql_process = "from ProcessInfor where procard.id=?  and status<>'完成'"
										+ " and processNO in (select processNo from ProcessAndWgProcardTem where procardMarkId=?)";
								List<ProcessInfor> list_process = totalDao
										.query(hql_process, sc.getId(), sc
												.getMarkId());
								for (ProcessInfor processInfor : list_process) {
									String hql_glprocess = null;
									if (sc.getProcardStyle().equals("总成")) {
										hql_glprocess = "select min(minNumber) from Procard where procard.id=? and (oldProcardId is null or oldProcardId=0)  "
												+ "and markId in (select wgprocardMardkId from ProcessAndWgProcardTem "
												+ "where procardMarkId=? and processNo=? and processName=?)";
									} else {
										hql_glprocess = "select min(minNumber) from Procard where procard.id=? "
												+ "and markId in (select wgprocardMardkId from ProcessAndWgProcardTem "
												+ "where procardMarkId=? and processNo=? and processName=?)";
									}
									Float minNumber2 = (Float) totalDao
											.getObjectByCondition(
													hql_glprocess,
													sc.getId(),
													sc.getMarkId(),
													processInfor.getProcessNO(),
													processInfor
															.getProcessName());
									if (minNumber2 != null) {
										float cminNumber2 = (float) Math
												.ceil(minNumber2);
										if ((cminNumber2 - minNumber2) > 0.05) {
											minNumber2 = (float) Math
													.floor(minNumber2);
										} else {
											minNumber2 = cminNumber2;
										}
										processInfor.setTotalCount(minNumber2);
										totalDao.update(processInfor);
									}
								}

								// 获取上层最后一道工序
								ProcessInfor scProcess = (ProcessInfor) totalDao
										.getObjectByCondition(
												"from ProcessInfor where procard.id=? "
														+ "and (dataStatus is null or dataStatus !='删除')"
														+ " order by processNO desc ",
												sc.getId());
								if (lastCount2 > sc.getFilnalCount()) {
									lastCount2 = sc.getFilnalCount();
									AlertMessagesServerImpl.addAlertMessages(
											"系统维护异常组",
											"下层的minnumber大于上层的finallcount。id:"
													+ sc.getId(), "提交工序", "2");
								}
								// if (scProcess.getTotalCount() > lastCount2) {
								scProcess.setTotalCount(lastCount2);
								totalDao.update(scProcess);
								// }
							}

						}
					}

				}

				j++;
			}
		}

		return msg;
	}

	@Override
	public void thwaiwei(int rootId, int applyId) {
		// TODO Auto-generated method stub
		List<Procard> procardList = totalDao
				.query(
						"from Procard where rootId =? and markId in(select markId from "
								+ "	ProcessInforWWApplyDetail where processInforWWApply.id=?  and (dataStatus is null or dataStatus!='删除') "
								+ "and (processStatus is null or processStatus !='删除'))",
						rootId, applyId);
		List<ProcessInforWWApplyDetail> wwdetailList = totalDao
				.query(
						"from "
								+ "	ProcessInforWWApplyDetail where processInforWWApply.id=?  and (dataStatus is null or dataStatus!='删除') "
								+ "and (processStatus is null or processStatus !='删除')",
						applyId);
		for (Procard procard : procardList) {
			for (ProcessInforWWApplyDetail wwdetail : wwdetailList) {
				if (procard.getMarkId().equals(wwdetail.getMarkId())) {
					wwdetail.setProcardId(procard.getId());
					totalDao.update(wwdetail);
					procard.setBanBenNumber(wwdetail.getBanbenNumber());
					// 查询外委工序
					List<ProcardWGCenter> wgcList = totalDao
							.query(
									"from ProcardWGCenter where wwxlId=? and "
											+ " wgOrderId in(select id from WaigouPlan where markId=?)",
									wwdetail.getId(), wwdetail.getMarkId());
					Float thasruku = 0f;
					if (wgcList != null && wgcList.size() > 0) {
						for (ProcardWGCenter wgc : wgcList) {
							wgc.setProcardId(procard.getId());
							totalDao.update(wgc);
							Float hasruku = (Float) totalDao
									.getObjectByCondition(
											"select hasruku from WaigouPlan where id=?",
											wgc.getWgOrderId());
							if (hasruku != null) {
								thasruku += thasruku;
							}
						}
					}
					// 处理工序
					String[] nos = wwdetail.getProcessNOs().split(";");
					StringBuffer sb = new StringBuffer();
					for (String no : nos) {
						if (sb.length() == 0) {
							sb.append("(" + no);
						} else {
							sb.append("," + no);
						}
					}
					sb.append(")");
					List<ProcessInfor> processList = totalDao
							.query(
									"from ProcessInfor where procard.id=? "
											+ " and (dataStatus is null or dataStatus !='删除') and processNO in "
											+ sb.toString(), procard.getId());
					if (processList != null) {
						for (ProcessInfor process : processList) {
							process.setAgreeWwCount(procard.getFilnalCount());
							process.setApplyCount(thasruku);
							process.setSubmmitCount(thasruku);
							totalDao.update(process);
						}
					}
					// 处理下层外购件
					List<Procard> sonList = totalDao
							.query(
									"from Procard where procard.id=? and (sbStatus is null or sbStatus !='删除')",
									procard.getId());
					List<ProcessInforWWProcard> wwprocardList = totalDao
							.query(
									"from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
									wwdetail.getId());
					for (Procard son : sonList) {
						if (son.getProcardStyle().equals("外购")) {
							for (ProcessInforWWProcard wwp : wwprocardList) {
								if (wwp.getMarkId().equals(son.getMarkId())) {
									wwp.setProcardId(son.getId());
									totalDao.update(wwp);
									son.setWwblCount(son.getFilnalCount());
									totalDao.update(son);
								}
							}
						} else {
							son.setWwblCount(son.getFilnalCount());
							totalDao.update(son);
							setSonwwblcount(son);
						}
					}
					totalDao.update(procard);
				}
			}
		}

	}

	private void setSonwwblcount(Procard father) {
		// TODO Auto-generated method stub
		List<Procard> sonList = totalDao
				.query(
						"from Procard where procard.id=? and (sbStatus is null or sbStatus !='删除')",
						father.getId());
		if (sonList != null && sonList.size() > 0) {
			for (Procard son : sonList) {
				son.setWwblCount(son.getFilnalCount());
				totalDao.update(son);
				setSonwwblcount(son);
			}
		}

	}

	@Override
	public boolean isbcpqx(Users user, Procard procard) {
		if (user != null) {
			int count = totalDao
					.getCount(
							" from ModuleFunction  where id in"
									+ " (select m.id from ModuleFunction m  join m.users u where u.id=?) and functionName = '现场半成品接收'",
							user.getId());
			if (count > 0) {
				count = totalDao
						.getCount(
								" from ProcessInfor where procard.id =? and needSave = '是' and submmitCount >0 and  (dataStatus is null or dataStatus <> '删除') ",
								procard.getId());
				if (count > 0) {
					count = totalDao
							.getCount(
									" from GoodsStore where goodsStoreMarkId = ? and goodsStoreLot =? and  status = '待入库'",
									procard.getMarkId(), procard.getSelfCard());
					if (count > 0) {
						return true;
					}

				}
			}
		}

		return false;
	}

	private String updatMaxSellPrintNumber(Sell sell, String time) {
		Integer year = Integer.parseInt(Util.getDateTime("yyyy"));
		String month = "";
		if (year > 2018) {
			month = Util.getDateTime("yyyyMM");
		}
		String cangqu_hql = "";
		if (sell.getGoodHouseName() != null
				&& sell.getGoodHouseName().length() > 0) {
			cangqu_hql += " and goodHouseName = '" + sell.getGoodHouseName()
					+ "'";
		} else {
			cangqu_hql += " and (goodHouseName is null or goodHouseName = '')";
		}
		String printNumber = (String) totalDao.getObjectByCondition(
				"select printNumber from Sell where orderNum =? and printNumber like 'SOUT"
						+ month + "%' "
						+ " and sellTime =?  and sellCharger =? " + cangqu_hql,
				sell.getOrderNum(), time, sell.getSellCharger());
		String maxprintNumber = (String) totalDao
				.getObjectByCondition(" select max(printNumber) from Sell where printNumber like 'SOUT"
						+ month
						+ "%' and sellWarehouse in ('外购件库','外协库','委外库')");
		String plannumber = "000001";
		PrintedOutOrder printorder = null;
		if (printNumber != null && printNumber.length() > 0) {
			plannumber = printNumber;
			printorder = (PrintedOutOrder) totalDao.getObjectByCondition(
					" from PrintedOutOrder where planNum =? ", plannumber);
		}
		if (printorder != null) {
			Set<PrintedOut> printedOutSet = printorder.getPrintedOutSet();
			if (printedOutSet == null) {
				printedOutSet = new HashSet<PrintedOut>();
			}
			PrintedOut printedOut = new PrintedOut();
			printedOut.setClassName("Sell");
			printedOut.setEntiyId(sell.getSellId());
			printedOut.setYwmarkId(sell.getYwmarkId());
			printedOut.setMarkId(sell.getSellMarkId());
			printedOut.setProNmae(sell.getSellGoods());
			printedOut.setFormat(sell.getSellFormat());
			printedOut.setUnit(sell.getSellUnit());
			printedOut.setNum(sell.getSellCount());
			printedOut.setNeiOrderNum(sell.getOrderNum());
			printedOut.setWaiOrderNum(sell.getOutOrderNumer());
			printedOut.setKubie(sell.getSellWarehouse());
			printedOut.setCangqu(sell.getGoodHouseName());
			printedOut.setSellTime(sell.getSellDate());
			printedOut.setSelfCard(sell.getSellLot());
			printedOut.setTuhao(sell.getTuhao());
			printedOut.setPlanNum(plannumber);
			printedOutSet.add(printedOut);
			printorder.setPrintedOutSet(printedOutSet);
			totalDao.update(printorder);
		} else {
			printorder = new PrintedOutOrder();
			printorder.setPlanNum(plannumber);
			printorder.setAddTime(Util.getDateTime());
			printorder.setKehuNmae(sell.getSellCompanyName());
			printorder.setClassName("Sell");
			printorder.setRiqi(sell.getSellDate());
			printorder.setAddUsers(Util.getLoginUser().getName());
			printorder.setShPlanNum(sell.getSellSendnum());
			printorder.setType("生产领料单");
			Set<PrintedOut> printedOutSet = new HashSet<PrintedOut>();
			PrintedOut printedOut = new PrintedOut();
			printedOut.setClassName("Sell");
			printedOut.setEntiyId(sell.getSellId());
			printedOut.setYwmarkId(sell.getYwmarkId());
			printedOut.setMarkId(sell.getSellMarkId());
			printedOut.setProNmae(sell.getSellGoods());
			printedOut.setFormat(sell.getSellFormat());
			printedOut.setUnit(sell.getSellUnit());
			printedOut.setNum(sell.getSellCount());
			printedOut.setNeiOrderNum(sell.getOrderNum());
			printedOut.setWaiOrderNum(sell.getOutOrderNumer());
			printedOut.setKubie(sell.getSellWarehouse());
			printedOut.setCangqu(sell.getGoodHouseName());
			printedOut.setSellTime(sell.getSellDate());
			printedOut.setSelfCard(sell.getSellLot());
			printedOut.setTuhao(sell.getTuhao());
			maxprintNumber = (String) totalDao
					.getObjectByCondition(" select max(printNumber) from Sell where printNumber like 'SOUT"
							+ month
							+ "%' and sellWarehouse in ('外购件库','外协库','委外库')");
			if (maxprintNumber == null || maxprintNumber.length() == 0) {
				plannumber = "SOUT" + plannumber;
			} else {
				String number = (1000001 + Integer.parseInt(maxprintNumber
						.substring(4)))
						+ "";
				plannumber = "SOUT" + number.substring(1);
			}
			printorder.setPlanNum(plannumber);
			printedOut.setPlanNum(plannumber);
			printedOutSet.add(printedOut);
			printorder.setPrintedOutSet(printedOutSet);
			totalDao.save(printorder);
		}
		sell.setPrintStatus("YES");
		return plannumber;
	}

	@Override
	public List showProcardtzforsc(Integer id, String type) {
		// TODO Auto-generated method stub
		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
		if (procard != null) {
			String typeSql = "";
			if (type != null && type.equals("sc")) {
				typeSql = " and type in('工艺规范','成型图','3D文件','成型图')";
			}
			Integer banci = procard.getBanci();// 版次
			String addSql = null;
			if (banci == null || banci == 0) {
				addSql = " and (banci is null  or banci =0)";
			} else {
				addSql = " and banci is not null and banci =" + banci;
			}
			String addSql2 = null;
			if (procard.getProductStyle().equals("批产")) {
				addSql2 = " and (productStyle is null or productStyle !='试制') and processNO is null ";
			} else {
				Integer ptId = procard.getProcardTemplateId() == null ? 0
						: procard.getProcardTemplateId();
				addSql2 = " and processNO is null  and glId=" + ptId;
			}
			// 查询工艺规程
			List list = totalDao.query(
					"from ProcessTemplateFile where markId=?  " + typeSql
							+ addSql2 + addSql, procard.getMarkId());
			if (list == null || list.size() == 0) {
				Procard rootProcard = (Procard) totalDao.getObjectById(
						Procard.class, procard.getRootId());
				Float tqcount = (Float) totalDao.getObjectByCondition(
						"select count(*) from ProcardTemplatePrivilege where markId=? "
								+ "or markId =?", rootProcard.getMarkId(),
						rootProcard.getYwMarkId());
				// if(true){
				if (tqcount != null && tqcount > 0) {
					Integer ptId = procard.getProcardTemplateId() == null ? 0
							: procard.getProcardTemplateId();
					list = totalDao.query(
							"from ProcessTemplateFile where processNO is null and glId =? ))"
									+ addSql + typeSql, ptId);
					return list;
				} else {
					return null;
				}
			}
			return list;
		}

		return null;
	}

	@Override
	public Object[] findAllWtcProcard(Procard procard, Integer pageNo,
			Integer pagesize) {
		if (procard == null) {
			procard = new Procard();
		}
		String before_hql = "select procardStyle,markId,proName,banBenNumber,sum(filnalCount) ";
		String hql = totalDao.criteriaQueries(procard, null, "filnalCount");
		String end_hql = " and status = '初始' and (sbStatus is null or sbStatus <> '删除')  group by procardStyle,markId,proName,banBenNumber ";
		if (procard.getFilnalCount() != null && procard.getFilnalCount() > 0) {
			hql += " having sum(filnalCount)>= " + procard.getFilnalCount();
		}
		hql = before_hql + hql + end_hql;
		hql += " order by sum(filnalCount) desc";
		List list = totalDao.findAllByPage(hql, pageNo, pagesize);
		hql = hql.replaceAll("Procard", "ta_sop_w_procard");
		hql = hql.replaceAll("filnalCount", "count");
		String hql_count = "select count(A.markId) count from (" + hql + " )A";
		List<Map> list_count = totalDao.findBySql(hql_count);
		int count = 0;
		if (list_count != null && list_count.size() == 1) {
			Map map = list_count.get(0);
			count = Integer.parseInt(map.get("count").toString());
		}
		return new Object[] { count, list };
	}

	@Override
	public String deleteWwApplyDetails(Integer id, Integer[] ids, String remark) {
		Users user = Util.getLoginUser();
		if (user == null) {
			return "请先登录!";
		}
		ProcessInforWWApply processwwa = (ProcessInforWWApply) totalDao
				.getObjectById(ProcessInforWWApply.class, id);
		if (!user.getCode().equals(processwwa.getUserCode())) {
			return "对不起，您没有权限删除!";
		}
		if (processwwa.getStatus().equals("同意")) {
			if (ids != null && ids.length > 0) {// 同意的情况下删除需要审批
				ProcessInfordeleteApply pda = new ProcessInfordeleteApply();
				String applyNumber = null;
				String datetime = Util.getDateTime("yyyyMMdd");
				String hql = "select max(applyNumber) from ProcessInfordeleteApply";
				applyNumber = (String) totalDao.getObjectByCondition(hql);
				String sc = "WWSC";
				if (applyNumber != null && applyNumber.length() > 0) {
					int num = Integer.parseInt(applyNumber.substring(12,
							applyNumber.length())) + 1;
					if (num >= 1000)
						applyNumber = sc + datetime + num;
					else if ((num >= 100))
						applyNumber = sc + datetime + "0" + num;
					else if ((num >= 10))
						applyNumber = sc + datetime + "00" + num;
					else
						applyNumber = sc + datetime + "000" + num;
				} else {
					applyNumber = sc + datetime + "0001";
				}
				pda.setApplyNumber(applyNumber);// 外委单删除申请单号
				pda.setUserName(processwwa.getUserName());// 申请人名字
				pda.setUserCode(processwwa.getUserCode());// 申请人工号
				pda.setAddTime(Util.getDateTime());// 申请时间
				pda.setProcardId(processwwa.getProcardId());// 总成Id
				pda.setMarkId(processwwa.getMarkId());// 总成件号
				pda.setYwMarkId(processwwa.getYwMarkId());// 业务件号
				pda.setProName(processwwa.getProName());// 总成名称
				pda.setSelfCard(processwwa.getSelfCard());// 总成批次
				pda.setOrderNumber(processwwa.getOrderNumber());// 内部订单编号
				pda.setFinalCount(processwwa.getFinalCount());// 批次数量
				pda.setStatus("未审批");// 审批状态
				pda.setRemark(remark);
				pda.setWwapplyNumber(processwwa.getWwApplyNumber());// 外委申请单号
				pda.setProcessStatus(processwwa.getProcessStatus());// 流转状态(预选未审批,合同待确认,订单外委采购，生产中)
				Set<ProcessInfordeleteApplyDetail> pdadSet = new HashSet<ProcessInfordeleteApplyDetail>();
				StringBuffer strb = new StringBuffer();
				for (int i = 0; i < ids.length; i++) {
					Map<Integer, String> map = deleteWwApplyDetail2(pda,
							pdadSet, ids[i]);
					String msg = map.get(1).toString();
					if (!"true".equals(msg)) {
						strb.append("[<b>" + ids[i] + "</b>]，申请失败：" + msg
								+ "<br/>");
					}
				}
				if (strb.length() > 0) {
					throw new RuntimeException(strb.toString());
				}
				pda.setPidadetailSet(pdadSet);
				totalDao.save(pda);
				Integer epId = null;
				try {
					epId = CircuitRunServerImpl.createProcess("手工外委删除申请",
							ProcessInfordeleteApply.class, pda.getId(),
							"deleteStatus", "id",
							"ProcardAction!towwdeleteDetai.action?id=" + id,
							"订单" + processwwa.getOrderNumber() + ",业务件号"
									+ processwwa.getYwMarkId()
									+ "有手动外委删除申请,请您审批!", true);
					if (epId != null && epId > 0) {
						pda.setEpId(epId);
						CircuitRun circuitRun = (CircuitRun) totalDao.get(
								CircuitRun.class, epId);
						if ("同意".equals(circuitRun.getAllStatus())
								&& "审批完成".equals(circuitRun.getAuditStatus())) {
							pda.setStatus("同意");
						} else {
							pda.setStatus("未审批");
						}
					}
					return "删除申请成功!";
				} catch (Exception e) {
					e.printStackTrace();
					return "审批流程有误申请失败!";
				}
			}
		} else {
			StringBuffer strb = new StringBuffer();
			for (int i = 0; i < ids.length; i++) {
				Map<Integer, String> map = deleteWwApplyDetail(ids[i]);
				String msg = map.get(1).toString();
				if (!"true".equals(msg)) {
					strb
							.append("[<b>" + ids[i] + "</b>]，申请失败：" + msg
									+ "<br/>");
				}
			}
			if (strb.length() > 0) {
				throw new RuntimeException(strb.toString());
			}
		}
		return "删除申请成功!";
	}

	public Map<Integer, String> deleteWwApplyDetail2(
			ProcessInfordeleteApply pda,
			Set<ProcessInfordeleteApplyDetail> pdadSet, Integer id) {
		// TODO Auto-generated method stub
		Map<Integer, String> map = new HashMap<Integer, String>();
		ProcessInforWWApplyDetail detail = (ProcessInforWWApplyDetail) totalDao
				.getObjectById(ProcessInforWWApplyDetail.class, id);
		if (detail == null) {
			map.put(1, "没有找到目标!");
		} else {
			ProcessInforWWApply apply = detail.getProcessInforWWApply();
			map.put(2, apply.getProcardId() + "");
			String applyStatus = apply.getStatus();
			if(detail.getDeleteStatus()!=null&&detail.getDeleteStatus().equals("申请中")){
				map.put(1, "已在删除申请中请勿重复申请!");
			}else if (applyStatus.equals("同意")) {// 已同意的需要审批
				// 生成删除申请明细数据
				ProcessInfordeleteApplyDetail pidADetail = new ProcessInfordeleteApplyDetail();
				pidADetail.setMarkId(detail.getMarkId());// 件号
				pidADetail.setProName(detail.getProName());// 零件名称
				pidADetail.setBanbenNumber(detail.getBanbenNumber());// 版本号
				pidADetail.setBanci(detail.getBanci());// 版次
				pidADetail.setUnit(detail.getUnit());// 单位
				pidADetail.setSelfCard(detail.getSelfCard());// 批次
				pidADetail.setProcessNOs(detail.getProcessNOs());// 工序号
				pidADetail.setProcessNames(detail.getProcessNames());// 名称
				pidADetail.setApplyCount(detail.getApplyCount());// 申请数量
				pidADetail.setRelatDown(detail.getRelatDown());// 工序外委是否关联下层（标记在被外委的当层）(是，否)
				pidADetail.setDataStatus(detail.getDataStatus());// 数据状态

				pidADetail.setProcessinforwwDetailId(detail.getId());
				pidADetail.setProcessStatus(detail.getProcessStatus());// 流转状态(预选未审批,合同待确认,外委待下单,订单外委采购，生产中,删除)
				pidADetail.setPida(pda);// 主表
				pdadSet.add(pidADetail);
				totalDao.save(pidADetail);
				detail.setDeleteStatus("申请中");
				totalDao.update(detail);
				map.put(1, "true");
			} else {
				// if (applyStatus != null
				// && (applyStatus.equals("未审批") || applyStatus.equals("审批中") ||
				// applyStatus
				// .equals("同意"))) {
				// map.put(1, "当前审批状态为:" + applyStatus + ",不允许删除明细!");
				// }
				Procard procard = (Procard) totalDao.getObjectById(
						Procard.class, detail.getProcardId());
				if (procard != null && detail.getProcessNOs() != null
						&& detail.getProcessNOs().length() > 0) {
					String[] processNOS = detail.getProcessNOs().split(";");
					if (processNOS != null && processNOS.length > 0) {
						for (String processNOStr : processNOS) {
							try {
								Integer processNO = Integer
										.parseInt(processNOStr);
								ProcessInfor process = (ProcessInfor) totalDao
										.getObjectByCondition(
												"from ProcessInfor where processNO=? and (dataStatus is null or dataStatus!='删除') and procard.id=?",
												processNO, procard.getId());
								if (process != null) {// 将外委打回数量回传到工序上
									if (detail.getDataStatus() == null
											|| (!detail.getDataStatus().equals(
													"取消") && !detail
													.getDataStatus().equals(
															"删除"))) {
										if (applyStatus.equals("未申请")
												|| applyStatus.equals("打回")) {
											process.setSelectWwCount(process
													.getSelectWwCount()
													- detail.getApplyCount());
											if (process.getSelectWwCount() < 0) {
												process.setSelectWwCount(0f);
											}
										} else if (applyStatus.equals("未审批")
												|| applyStatus.equals("审批中")) {
											process.setApplyWwCount(process
													.getApplyWwCount()
													- detail.getApplyCount());
											if (process.getApplyWwCount() < 0) {
												process.setApplyWwCount(0f);
											}

										} else {
											process.setAgreeWwCount(process
													.getAgreeWwCount()
													- detail.getApplyCount());
											if (process.getAgreeWwCount() < 0) {
												process.setAgreeWwCount(0f);
											}
										}
										totalDao.update(process);
									}
								}

							} catch (Exception e) {
								// TODO: handle exception
							}
						}
						// 还原下层被占数量
						if ((detail.getDataStatus() == null || (!detail
								.getDataStatus().equals("取消") && !detail
								.getDataStatus().equals("删除")))
								&& !applyStatus.equals("打回")
								&& detail.getWwType() != null
								&& detail.getWwType().equals("包工包料")) {// 包工包料回传采购
							List<ProcessInforWWProcard> processwwprocardList = totalDao
									.query(
											"from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
											detail.getId());
							if (processwwprocardList != null
									&& processwwprocardList.size() > 0) {
								for (ProcessInforWWProcard processInforWWProcard : processwwprocardList) {
									Procard wgProcard = (Procard) totalDao
											.getObjectById(Procard.class,
													processInforWWProcard
															.getProcardId());
									if (wgProcard != null) {
										wgProcard.setWwblCount(wgProcard
												.getWwblCount()
												- detail.getApplyCount()
												* wgProcard.getQuanzi2()
												/ wgProcard.getQuanzi1());
										if (wgProcard.getWwblCount() < 0) {
											wgProcard.setWwblCount(0f);
										}
										totalDao.update(wgProcard);
									}
								}
							}
							// 归还下层半成品,自制件和组合（下层组合将整体被包公包料）
							backProcardWwblCount(procard, detail
									.getApplyCount(), 0);
							int rootid = procard.getRootId() == null ? procard
									.getOldRootId() : procard.getRootId();
							Procard rootp = (Procard) totalDao
									.getObjectByCondition(
											"from Procard where id=? ", rootid);
							rootp.setWlstatus("待定");
							totalDao.update(rootp);
						}
					}
				}
				List<ProcessInforWWProcard> processWWprocardList = totalDao
						.query(
								"from ProcessInforWWProcard where applyDtailId=? and (status is null or status not in ('删除','取消'))",
								detail.getId());
				if (processWWprocardList != null
						&& processWWprocardList.size() > 0) {
					for (int i = (processWWprocardList.size() - 1); i >= 0; i--) {
						ProcessInforWWProcard processWWprocard = processWWprocardList
								.get(i);
						totalDao.delete(processWWprocard);
					}
				}
				detail.setDataStatus("删除");
				detail.setProcessStatus("删除");
				totalDao.update(detail);
				if (!detail.getProcessInforWWApply().getStatus().equals("未申请")) {
					Float yyCount = (Float) totalDao
							.getObjectByCondition(
									"select count(*) from ProcessInforWWApplyDetail where processInforWWApply.id=? "
											+ "and (dataStatus is null or dataStatus !='删除')",
									detail.getProcessInforWWApply().getId());
					if (yyCount == 0) {
						apply.setProcessStatus("删除");
						apply.setStatus("删除");
						totalDao.update(apply);
					}
				}
				map.put(1, "true");
			}

		}
		return map;
	}

	private String huoquMaxSelfCard(String markId) {
		String time = Util.getDateTime("yyyyMM");
		String selfCard = (String) totalDao.getObjectByCondition(
				" select selfCard from Procard where markId =?  and selfCard like '"
						+ time + "%' order by selfCard desc ", markId);
		if (selfCard == null || "".equals(selfCard)) {
			selfCard = time + "00001";
		} else {
			selfCard = time
					+ (100001 + Integer.parseInt(selfCard.replaceAll(time, "")));
		}
		return selfCard;
	}

	@Override
	public List<ProcessInforWWApplyDetail> showWeiApplyDetail() {
		Map<String, Object> map = CircuitRunServerImpl.findAuditExeNode(
				WaigouOrder.class, false);
		String status = "";
		if (map != null) {
			List<Integer> idList = (List<Integer>) map.get("entityId");
			StringBuffer sb = new StringBuffer();
			if (idList != null && idList.size() > 0) {
				for (Integer orderid : idList) {
					if (sb.length() == 0) {
						sb.append(orderid);
					} else {
						sb.append("," + orderid);
					}
				}
				if (sb.length() == 0) {
					return null;
				} else {
					status = " and id in(" + sb.toString() + ")";
				}
			} else {
				return null;
			}
		} else {
			return null;
		}
		return totalDao.query(" from ProcessInforWWApplyDetail where 1=1 and "
				+ status);
	}

	@Override
	public String shenPiApplyDetail(Integer[] ids, String tag) {
		String mess = "";
		if (ids != null && ids.length > 0) {
			for (Integer id : ids) {
				ProcessInforWWApplyDetail applydetail = (ProcessInforWWApplyDetail) totalDao
						.get(ProcessInforWWApplyDetail.class, id);
				if (applydetail != null && applydetail.getEpId() != null) {
					if ("OK".equals(tag)) {// 同意
						mess = circuitRunServer.updateExeNodeByCirId(
								applydetail.getEpId(), true, "", true, null,
								true);
					} else if ("NO".equals(tag)) {// 打回
						mess = circuitRunServer.updateExeNodeByCirId(
								applydetail.getEpId(), false, "", true, null,
								true);
					} else {
						return "数据异常!";
					}
					CircuitRun circuitRun = (CircuitRun) totalDao
							.getObjectById(CircuitRun.class, applydetail
									.getEpId());
					if (circuitRun.getAllStatus().equals("同意")) {
						applydetail.setEpstatus("同意");
					} else {
						applydetail.setEpstatus("打回");
					}
					totalDao.update(applydetail);
				}
			}
		} else {
			return "数据异常!";
		}
		return mess;
	}

	public String ysgxjhCount(Procard procard) {
		if (procard.getJihuoStatua() != null
				&& procard.getJihuoStatua().equals("激活")) {
			// 最后一道工序数量判断
			float lasttotalCount = procard.getFilnalCount();// 最后一道工序的可领数量
			float beforettalCount = procard.getFilnalCount();// 除最后一道工序的可领数量
			// if(procard.getLingliaoType()!=null&&
			// procard.getLingliaoType().equals("part")){
			// Float xcMinNumber = (Float)
			// totalDao.getObjectByCondition("select max(minNumber) from Procard where fatherId=?"
			// +
			// " and (procardStyle='自制' or (procardStyle='外购' and needProcess='yes' ) and (sbStatus is null or sbStatus !='删除'))",
			// procard.getId());
			// if(xcMinNumber!=null){
			// beforettalCount=xcMinNumber;
			// }
			// }else{
			// Float xcMinNumber = (Float)
			// totalDao.getObjectByCondition("select min(minNumber) from Procard where fatherId=?"
			// +
			// " and (procardStyle='自制' or (procardStyle='外购' and needProcess='yes' ) and (sbStatus is null or sbStatus !='删除'))",
			// procard.getId());
			// if(xcMinNumber!=null){
			// beforettalCount=xcMinNumber;
			// }
			// }
			// 已配套套数量
			if (procard.getKlNumber() == null) {
				procard.setKlNumber(procard.getFilnalCount());
			}
			if (procard.getHascount() == null) {
				procard.setHascount(procard.getKlNumber());
			}
			Float peitaoCount = procard.getKlNumber() - procard.getHascount();
			Float scpeitao = null;// 生产配套数量
			Float xcMinhasCount = null;
			xcMinhasCount = procard.getFilnalCount();
			boolean hasll = false;
			List<Procard> peitaoSonList = null;
			Float minNumber = 0f;
			if (procard.getProcardStyle().equals("外购")) {
				peitaoSonList = new ArrayList<Procard>();
				peitaoSonList.add(procard);
				minNumber = procard.getFilnalCount();
			} else {
				peitaoSonList = totalDao
						.query(
								"from Procard where procard.id=? and (sbStatus is null or sbStatus !='删除') and procardStyle='外购'"
										+ " and (needProcess is null or needProcess !='yes') and (lingliaostatus is null or lingliaostatus!='否')",
								procard.getId());
				minNumber = (Float) totalDao
						.getObjectByCondition(
								"select min(minNumber) from Procard where procard.id=? and (sbStatus is null or sbStatus !='删除') "
										+ "and (procardStyle ='自制' or (procardStyle ='外购' and needProcess ='yes'))",
								procard.getId());
				if (minNumber == null) {
					Float sccount = (Float) totalDao
							.getObjectByCondition(
									"select count(*) from Procard where procard.id=? and (sbStatus is null or sbStatus !='删除') "
											+ "and (procardStyle ='自制' or (procardStyle ='外购' and needProcess ='yes'))",
									procard.getId());
					if (sccount == null || sccount == 0) {
						minNumber = procard.getFilnalCount();
					} else {
						minNumber = 0f;
					}
				}
				if (lasttotalCount > minNumber) {
					lasttotalCount = minNumber;
				}
			}
			Map<Integer, Float> processxz = new HashMap<Integer, Float>();// 工序数量限制
			for (Procard son : peitaoSonList) {
				List<Integer> processNoList = totalDao
						.query(
								"select distinct(processNO) from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus!='删除') and  processName in"
										+ "( select processName from ProcessAndWgProcardTem where procardMarkId=? and wgprocardMardkId=?)",
								procard.getId(), procard.getMarkId(), son
										.getMarkId());
				Float gxCount = 0f;
				if (son.getHascount() == null) {// 被包工包料外委出去了
					scpeitao = 0f;
					lasttotalCount = 0f;
					xcMinhasCount = 0f;
				} else {
					// 生产已领数量
					Float scylCount = son.getKlNumber() - son.getHascount();
					// - wwylCount;
					if (scylCount > 0) {
						hasll = true;
					}
					if (son.getNeedProcess() == null
							|| !son.getNeedProcess().equals("yes")) {
						gxCount = scylCount * son.getQuanzi1()
								/ son.getQuanzi2();
						if (scpeitao == null) {
							scpeitao = scylCount * son.getQuanzi1()
									/ son.getQuanzi2();
						} else if (scpeitao > scylCount * son.getQuanzi1()
								/ son.getQuanzi2()) {
							scpeitao = scylCount * son.getQuanzi1()
									/ son.getQuanzi2();
						}
						if ((scpeitao - Math.floor(scpeitao)) > 0.95) {
							scpeitao = (float) Math.floor(scpeitao) + 1f;
						}
					} else {
						gxCount = scylCount;
						if (scpeitao == null) {
							scpeitao = scylCount;
						} else if (scpeitao > scylCount) {
							scpeitao = scylCount;
						}
						if ((scpeitao - Math.floor(scpeitao)) > 0.95) {
							scpeitao = (float) Math.floor(scpeitao) + 1f;
						}
					}
					float totalHasCount2 = (son.getKlNumber() - son
							.getHascount())
							* son.getQuanzi1() / son.getQuanzi2();
					if (son.getHascount() == 0) {
						totalHasCount2 = procard.getFilnalCount();
					}
					if (son.getKlNumber() >= son.getFilnalCount()
							&& son.getHascount() == 0) {// 小数位数问题
						totalHasCount2 = procard.getFilnalCount();
					}
					if (totalHasCount2 < 0) {
						totalHasCount2 = 0f;
					}
					if (totalHasCount2 < lasttotalCount) {
						lasttotalCount = totalHasCount2;
					}
					if (procard.getLingliaoType() == null
							|| !procard.getLingliaoType().equals("part")) {// 配齐方式
						if (totalHasCount2 < beforettalCount) {
							beforettalCount = totalHasCount2;
						}
					} else {
						if (totalHasCount2 > beforettalCount) {
							beforettalCount = totalHasCount2;
						}
					}
					if ((son.getHascount() * son.getQuanzi1() / son
							.getQuanzi2()) < xcMinhasCount) {
						xcMinhasCount = son.getHascount() * son.getQuanzi1()
								/ son.getQuanzi2();

					}
					if ((xcMinhasCount - Math.floor(xcMinhasCount)) > 0.95) {
						xcMinhasCount = (float) Math.floor(xcMinhasCount) + 1f;
					}
				}
				if (processNoList != null && processNoList.size() > 0) {
					for (Integer pno : processNoList) {
						Float gxxz = processxz.get(pno);
						if (gxxz == null || gxxz > gxCount) {
							gxxz = gxCount;
						}
						processxz.put(pno, gxxz);
					}
				}

			}
			if (hasll) {
				if (procard.getStatus().equals("已发卡")) {
					procard.setStatus("已发料");
				}
			}
			if (scpeitao == null) {
				scpeitao = 0f;
			}
			if (scpeitao % 1 < 0.95) {
				scpeitao = (float) Math.floor(scpeitao);
			} else {
				scpeitao = (float) Math.ceil(scpeitao);
			}
			Float hascount = procard.getKlNumber() - scpeitao;
			if (hascount < 0) {
				hascount = 0f;
			}
			procard.setHascount(hascount);
			String hql_update = "from ProcessInfor where procard.id=? and (dataStatus is null or dataStatus !='删除') order by processNO";
			List<ProcessInfor> sonProcessinfor = totalDao.query(hql_update,
					procard.getId());
			Integer maxProcessNo = -1;
			String upProcesstype = "";
			String upNeedSave = null;
			boolean b = true;// 半成品转库之后工序限制可领数量，半成品转库或者领取之后解开限制数量
			if ((beforettalCount - Math.floor(beforettalCount)) > 0.95) {
				beforettalCount = (float) Math.floor(beforettalCount) + 1f;
			} else {
				beforettalCount = (float) Math.floor(beforettalCount);
			}
			if ((lasttotalCount - Math.floor(lasttotalCount)) > 0.95) {
				lasttotalCount = (float) Math.floor(lasttotalCount) + 1f;
			} else {
				lasttotalCount = (float) Math.floor(lasttotalCount);
			}
			Float beforettalCount2=beforettalCount;
			for (int i = 0; i < sonProcessinfor.size(); i++) {
				ProcessInfor processInfor = sonProcessinfor.get(i);
				Float selectWwCount = processInfor.getSelectWwCount() == null ? 0
						: processInfor.getSelectWwCount();// 已选外委数量
				Float applyWwCount = processInfor.getApplyWwCount() == null ? 0
						: processInfor.getApplyWwCount();// 外委申请中数量
				Float agreeWwCount = processInfor.getAgreeWwCount() == null ? 0
						: processInfor.getAgreeWwCount();// 外委同意数量
				Float wwbackCount = processInfor.getWwbackCount() == null ? 0
						: processInfor.getWwbackCount();// 外委回来数量
				// 总数量-外委没有回来数量==最大激活数量
				Float thismaxCount = procard.getFilnalCount()
						- (selectWwCount + applyWwCount + agreeWwCount - wwbackCount);
				if (beforettalCount > thismaxCount) {
					beforettalCount2 = thismaxCount;
				}
				if (b) {
					if ((upNeedSave != null && upNeedSave.equals("是"))
							&& (processInfor.getNeedSave() == null || !processInfor
									.getNeedSave().equals("是"))) {
						b = false;
					}
					if (upProcesstype.equals("外委")
							&& processInfor.getProductStyle() != null
							&& processInfor.getProductStyle().equals("自制")) {
						b = false;
					}
					if (upProcesstype.equals("外委")
							&& processInfor.getProductStyle() != null
							&& processInfor.getProductStyle().equals("外委")
							&& processInfor.getProcessStatus() != null
							&& processInfor.getProcessStatus().equals("no")) {
						b = false;
					}
				}
				upProcesstype = processInfor.getProductStyle();
				upNeedSave = processInfor.getNeedSave();
				if (i == (sonProcessinfor.size() - 1)) {
					// && ((pro.getKlNumber() - pro.getHascount()) >=
					// lasttotalCount)) {// 部分领料最后一道工序的可领数量为最小minNumber-
					maxProcessNo = processInfor.getProcessNO();// 最大工序号
					if (!b) {
						if (procard.getFilnalCount().equals(
								processInfor.getTotalCount())) {// 第一次领
							processInfor.setTotalCount(0f);
						}
					} else {
						processInfor.setTotalCount((float) Math
								.floor(lasttotalCount));
					}
				} else {
					if (!b) {
						if (procard.getFilnalCount().equals(
								processInfor.getTotalCount())) {// 第一次领
							processInfor.setTotalCount(0f);
						}
					} else {
						if (beforettalCount2 < processInfor.getApplyCount()) {
							processInfor.setTotalCount(processInfor
									.getApplyCount());
						} else {
							processInfor.setTotalCount(beforettalCount2);
						}

					}
				}
				Float gxzx = processxz.get(processInfor.getProcessNO());
				if (gxzx != null) {
					if ((gxzx - Math.floor(gxzx)) > 0.95) {
						gxzx = (float) Math.floor(gxzx) + 1f;
					} else {
						gxzx = (float) Math.floor(gxzx);
					}
				}
				if (gxzx != null && processInfor.getTotalCount() > gxzx) {
					if (gxzx < processInfor.getApplyCount()) {
						processInfor
								.setTotalCount(processInfor.getApplyCount());
					} else {
						processInfor.setTotalCount(gxzx);
					}
				}
				totalDao.update(processInfor);
			}
			totalDao.update(procard);
		}
		return "true";
	}

//	@Override
//	public String checkProcardsb(Integer id) {
//		// TODO Auto-generated method stub
//		StringBuffer backMsg = new StringBuffer();
//		Procard procard = (Procard) totalDao.getObjectById(Procard.class, id);
//		if(procard!=null){
//			if(procard.getStatus().equals("设变锁定")){
//				backMsg.append(procard.getMarkId()+"("+procard.getSelfCard()+")"+"设变锁定中");
//			}
//			Set<Procard> sonSet = procard.getProcardSet();
//		}
//		return backMsg.toString();
//	}

	@Override
	public List<Sell> findLingLiaoLotById(Integer id) {
		if(id!=null){
			Procard procard =	(Procard) totalDao.get(Procard.class, id);
			String lingliaoDetail = procard.getLingliaoDetail();
			List<Sell> sellList = new ArrayList<Sell>();
			List<String> lotList = new ArrayList<String>();
 			if(lingliaoDetail!=null && lingliaoDetail.length()>0){
				String[] arrays = lingliaoDetail.split(",");
				for (int i = 0; i < arrays.length; i++) {
					String[] lotandNums =  	arrays[i].split(":");
					if(lotandNums!=null && lotandNums.length==2){
						String lot = lotandNums[0].trim();
						if(lot.indexOf("<font")>=0){
							continue;
						}
						if(!lotList.contains(lot)){
							List<Sell> sellList1 =	totalDao.query("from Sell where sellMarkId =? and  sellLot =? and" +
									" sellWarehouse = '外购件库' and procardId=? and sellCount>0 " +
									" and (tksellCount is null or sellCount-tksellCount>0) ",procard.getMarkId(),lot,procard.getId());
							if(sellList1!=null && sellList1.size()>0){
								sellList.addAll(sellList1);
							}
						}
					}
				}
			}
			return sellList;
		}
		return null;
	}
}