package com.task.util;import java.io.IOException;import java.net.DatagramPacket;import java.net.DatagramSocket;import java.net.InetAddress;import java.net.SocketException;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;public class TextLc {	/**	 * @param args	 */	public static void main(String[] args) {		// TODO Auto-generated method stub		/************************************************************/		/************************************************************/		// LedCarPush.ledShow(null,null,7);		// System.out.println(Util.getDateTime()+"   "+Util.compareTime(Util.getDateTime(),		// "yyyy-MM-dd", "2015-11-19", "yyyy-MM-dd"));		/************************** 返回下个月日期 **********************************/		// System.out.println(Util.getNextMonth3("2015-10"));		// System.out.println(Util.getThisMonth2("2015-10-17"));		/**********************************************************/		/************************* 比较时间 *********************************/		// try {		// System.out.println(Util.getSpecifiedDayAfter("2015-11-19", -2));		// System.out.println(Util.getDateTime("yyyy-MM-dd"));		// System.out.println(Util.StringToDate(Util.getDateTime("yyyy-MM-dd"),		// "yyyy-MM-dd"));		// System.out.println(Util.getCalendarDate(Util.StringToDate(Util.getDateTime("yyyy-MM-dd"),		// "yyyy-MM-dd"), 2));		//					// } catch (ParseException e) {		// // TODO Auto-generated catch block		// e.printStackTrace();		// }		/**************************** 获取日期 ********************************/		// System.out.println(printFields("w"));		// System.out.println(outMenTime("12:00:01"));		/**************************** 线程休眠 ********************************///		System.out.println("我休息了！");//			try {//				Thread.sleep(3000);//				System.out.println("3秒le！");//				Thread.sleep(3000);//			} catch (InterruptedException e) {//				// TODO Auto-generated catch block//				e.printStackTrace();//			}//		System.out.println("3秒后在叫我吧！");				//times_1();		try {			//客户端 			//1、定义服务器的地址、端口号、数据 			int port = 9091;//			String ip = "118.190.93.84";//			String ip = "localhost";			String ip = "116.228.81.46";			InetAddress address =InetAddress.getByName(ip); 			byte[] data ="UserName:admin;PassWord:123".getBytes();			//2、创建数据报，包含发送的数据信息 			DatagramPacket packet = new DatagramPacket(data,data.length,address,port); 			//3、创建DatagramSocket对象 			DatagramSocket socket = new DatagramSocket();			//4、向服务器发送数据 			socket.send(packet);									//接受服务器端响应数据 			//====================================== //			1、创建数据报，用于接受服务器端响应数据 			byte[] data2 = new byte[1024]; 			DatagramPacket packet2 = new DatagramPacket(data2,data2.length); 			//2、接受服务器响应的数据 //			socket = new DatagramSocket();			socket.receive(packet2);			String raply = new String(data2,0,packet2.getLength());			System.out.println("我是客户端，服务器说："+raply);			//4、关闭资源 			socket.close(); 		} catch (SocketException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		} 			}	private static void times_1() {		long l = Util.getWorkTime1("2015-12-11 19:20:23", "2015-12-21 19:40:21");		System.out.println(l);		//		long sd=1345185923140L;          Date dat=new Date(l);          GregorianCalendar gc = new GregorianCalendar();           gc.setTime(dat);          java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy-MM-dd hh:mm:ss");          String sb=format.format(gc.getTime());          System.out.println(sb);	}	/**	 * @author Li_Cong	 * @param str	 *            获得当前类型("Y/y"--年 "M/m"--月 "D/d"--日 "YW/yw"--年周 "W/w"--月周	 *            "YD/yd"--年天 "WD/wd"--周天 )	 * 	 * @return	 */	private static Integer printFields(String str) {		Integer i = null;		Calendar cNow = Calendar.getInstance();		// 先用Date类型输出验证		// SimpleDateFormat df = (SimpleDateFormat) DateFormat.getInstance();		// df.applyPattern("yyyy-MM-dd  HH:mm:ss");		// System.out.println("标准日期:" + df.format(new Date()));		// System.out.print("日期:" + cNow.get(Calendar.DATE) + "\t");		// System.out.print("小时:" + cNow.get(Calendar.HOUR) + "\t");		// System.out.print("分钟:" + cNow.get(Calendar.MINUTE) + "\t");		// System.out.println("秒钟:" + cNow.get(Calendar.SECOND));		// System.out.println("一年中的天数:" + cNow.get(Calendar.DAY_OF_YEAR));		// System.out.println("一年中的周数:" + cNow.get(Calendar.WEEK_OF_YEAR));		// // 即本月的第几周		// System.out.println("一月中的周数:" + cNow.get(Calendar.WEEK_OF_MONTH));		// // 即一周中的第几天(这里是以周日为第一天的)		// System.out.println("一周中的天数:" + cNow.get(Calendar.DAY_OF_WEEK));		// 本年的第几天,在计算时间间隔的时候有用		if ("Y".equals(str) || "y".equals(str)) {			i = cNow.get(Calendar.YEAR);		} else if ("M".equals(str) || "m".equals(str)) {			i = cNow.get(Calendar.MONTH) + 1;		} else if ("D".equals(str) || "d".equals(str)) {			i = cNow.get(Calendar.DATE);		} else if ("W".equals(str) || "w".equals(str)) {			i = cNow.get(Calendar.WEEK_OF_YEAR);		} else if ("MW".equals(str) || "mw".equals(str)) {			i = cNow.get(Calendar.WEEK_OF_MONTH);		} else if ("YD".equals(str) || "yd".equals(str)) {			i = cNow.get(Calendar.DAY_OF_YEAR);		} else if ("WD".equals(str) || "wd".equals(str)) {			i = cNow.get(Calendar.DAY_OF_WEEK);		} else {			i = cNow.get(Calendar.DAY_OF_WEEK);		}		return i;	}	public static boolean outMenTime(String time) {		Integer i = printFields("wd");		if (i != 1 && i != 7) {			boolean a0 = Util.compareTime(time, "HH:mm:ss", "07:00:00",					"HH:mm:ss");			boolean a1 = Util.compareTime("07:30:00", "HH:mm:ss", time,					"HH:mm:ss");			boolean a2 = Util.compareTime(time, "HH:mm:ss", "11:30:00",					"HH:mm:ss");			boolean a3 = Util.compareTime("12:30:00", "HH:mm:ss", time,					"HH:mm:ss");			boolean a4 = Util.compareTime(time, "HH:mm:ss", "16:30:00",					"HH:mm:ss");			boolean a5 = Util.compareTime("23:59:59", "HH:mm:ss", time,					"HH:mm:ss");			boolean a6 = Util.compareTime(time, "HH:mm:ss", "00:00:00",					"HH:mm:ss");			boolean a7 = Util.compareTime("07:00:00", "HH:mm:ss", time,					"HH:mm:ss");			boolean fan = (a0 && a1) || (a2 && a3) || (a4 && a5) || (a6 && a7);			return fan;		} else {			return false;		}	}}